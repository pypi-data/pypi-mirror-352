"""
Simple module to create certificates and sign them with a bittensor keypair
so we can verify that the cert is owned/generated by the intended bittensor entity.
"""

from cryptography import x509
from cryptography.x509.oid import NameOID
from substrateinterface import Keypair


def verify(
    cert: x509.Certificate,
    ss58_address: str = None,
    verify_hostname: str = None,
) -> bool:
    """
    Verify that a certificate was signed by a Bittensor keypair.
    """
    # Regenerate the signature string.
    cn = None
    ou = None
    signature_hex = None
    for attribute in cert.subject:
        if attribute.oid == NameOID.COMMON_NAME:
            cn = attribute.value
        elif attribute.oid == NameOID.ORGANIZATIONAL_UNIT_NAME:
            ou = attribute.value
        elif attribute.oid == NameOID.ORGANIZATION_NAME:
            signature_hex = attribute.value
    if not all([cn, ou, signature_hex]):
        return False

    # Hostname verification.
    if verify_hostname and cn.lower() != verify_hostname.strip().lower():
        return False

    # Reconstruct the signed string
    cert_string = ":".join(
        [
            str(cert.serial_number),
            cn,
            ou,
            cert.not_valid_before_utc.isoformat(),
            cert.not_valid_after_utc.isoformat(),
        ]
    )

    try:
        # Convert hex signature back to bytes
        signature = bytes.fromhex(signature_hex)
        if not Keypair(ss58_address=ss58_address).verify(cert_string, signature):
            return False
        return True
    except Exception:
        ...

    return False
