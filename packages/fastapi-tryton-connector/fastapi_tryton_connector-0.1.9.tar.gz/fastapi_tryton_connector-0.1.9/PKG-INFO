Metadata-Version: 2.3
Name: fastapi_tryton_connector
Version: 0.1.9
Summary: A FastAPI extension for seamless integration with Tryton ERP.
License: GPL-3.0-or-later
Keywords: fastapi,tryton,erp,integration,python,connector
Author: Solutema SRL
Requires-Python: >=3.10,<4.0
Classifier: Environment :: Web Environment
Classifier: Framework :: FastAPI
Classifier: Framework :: Tryton
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
Classifier: License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Dist: fastapi (>=0.115.12,<0.116.0)
Requires-Dist: proteus (>=6.0.0,<6.1.0)
Requires-Dist: pydantic (>=2.11.5,<3.0.0)
Requires-Dist: pydantic-settings (>=2.9.1,<3.0.0)
Requires-Dist: trytond (>=6.0.0,<6.1.0)
Requires-Dist: uvicorn (>=0.34.3,<0.35.0)
Description-Content-Type: text/markdown

# fastapi_tryton_connector

This package was created from the `fastapi-tryton-async <https://github.com/TinKurbatoff/fastapi-tryton-async>`_ repository developed by Constantine K.

Modifications and adaptations have been made to meet new requirements and extend its functionality.

## Key Benefits of the Current Codebase:

- **Improved Asynchronous Support**: Full compatibility with FastAPI’s asynchronous event loop.
- **Reduced Complexity**: Streamlined code by removing non-essential components.
- **Better Logging**: More detailed logs for transactions and error handling.
- **Focused Functionality**: A lighter, more focused API for Tryton-FastAPI integration.
- **Encouragement of Modern Practices**: Simplified testing and configuration align with modern Python development standards.


Install:
```
pip3 install fastapi_tryton_connector
```

Usage:
```
from fastapi import FastAPI
from fastapi import Request
from fastapi_tryton_connector import Tryton
from fastapi_tryton_connector import options

options.config['TRYTON_DATABASE'] = "my_database"  # What exact database name
options.config['TRYTON_CONFIG'] = "/etc/tryton.conf" # path to configuration file
options.config['TRYTON_CONNECTION'] = "postgresql://user:my_secret_password@localhost:5432"

app = FastAPI()

try:
    tryton = Tryton(options, configure_jinja=True)
except Exception as e:
    logger.error(f"Cannot initialize Tryton ERP: {e}")
    exit()
User = tryton.pool.get('res.user')  # Important class type - User

# ——— API endpoints
@app.post(f"/hello/")  
@tryton.transaction(readonly=False)
async def hello(request: Request):  # (request: Request) — required!
    user, = User.search([('login', '=', 'admin')])
    return '%s, Hello World!' % user.name

...

```
*NOTE*: request (fastapi Request class) not always is required for the decorated function parameters.

There are three configuration options available:

TRYTON_DATABASE: the Tryton’s database to connect.

TRYTON_USER: the Tryton user id to use, by default 0 (aka root).

TRYTON_CONFIG: the optional path to the Tryton’s configuration.

TRYTON_CONNECTION: full path (uri) to the database

