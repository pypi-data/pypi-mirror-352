{"version":3,"file":"3254.95da1134e5c70121.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-icon.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-state-icon.ts","webpack://knx-frontend/../src/directives/private-async-helpers.ts","webpack://knx-frontend/../src/directives/until.ts"],"sourcesContent":["import { html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { until } from \"lit/directives/until\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { entityIcon } from \"../../data/icons\";\nimport type { IconSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-icon-picker\";\nimport \"../ha-state-icon\";\n\n@customElement(\"ha-selector-icon\")\nexport class HaIconSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: IconSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @property({ attribute: false }) public context?: {\n    icon_entity?: string;\n  };\n\n  protected render() {\n    const iconEntity = this.context?.icon_entity;\n\n    const stateObj = iconEntity ? this.hass.states[iconEntity] : undefined;\n\n    const placeholder =\n      this.selector.icon?.placeholder ||\n      stateObj?.attributes.icon ||\n      (stateObj && until(entityIcon(this.hass, stateObj)));\n\n    return html`\n      <ha-icon-picker\n        .hass=${this.hass}\n        .label=${this.label}\n        .value=${this.value}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        .helper=${this.helper}\n        .placeholder=${this.selector.icon?.placeholder ?? placeholder}\n        @value-changed=${this._valueChanged}\n      >\n        ${!placeholder && stateObj\n          ? html`\n              <ha-state-icon\n                slot=\"fallback\"\n                .hass=${this.hass}\n                .stateObj=${stateObj}\n              ></ha-state-icon>\n            `\n          : nothing}\n      </ha-icon-picker>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", { value: ev.detail.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-icon\": HaIconSelector;\n  }\n}\n","import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { until } from \"lit/directives/until\";\nimport { computeStateDomain } from \"../common/entity/compute_state_domain\";\nimport {\n  DEFAULT_DOMAIN_ICON,\n  entityIcon,\n  FALLBACK_DOMAIN_ICONS,\n} from \"../data/icons\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: HassEntity;\n\n  @property({ attribute: false }) public stateValue?: string;\n\n  @property() public icon?: string;\n\n  protected render() {\n    const overrideIcon =\n      this.icon ||\n      (this.stateObj && this.hass?.entities[this.stateObj.entity_id]?.icon) ||\n      this.stateObj?.attributes.icon;\n    if (overrideIcon) {\n      return html`<ha-icon .icon=${overrideIcon}></ha-icon>`;\n    }\n    if (!this.stateObj) {\n      return nothing;\n    }\n    if (!this.hass) {\n      return this._renderFallback();\n    }\n    const icon = entityIcon(this.hass, this.stateObj, this.stateValue).then(\n      (icn) => {\n        if (icn) {\n          return html`<ha-icon .icon=${icn}></ha-icon>`;\n        }\n        return this._renderFallback();\n      }\n    );\n    return html`${until(icon)}`;\n  }\n\n  private _renderFallback() {\n    const domain = computeStateDomain(this.stateObj!);\n\n    return html`\n      <ha-svg-icon\n        .path=${FALLBACK_DOMAIN_ICONS[domain] || DEFAULT_DOMAIN_ICON}\n      ></ha-svg-icon>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Note, this module is not included in package exports so that it's private to\n// our first-party directives. If it ends up being useful, we can open it up and\n// export it.\n\n/**\n * Helper to iterate an AsyncIterable in its own closure.\n * @param iterable The iterable to iterate\n * @param callback The callback to call for each value. If the callback returns\n * `false`, the loop will be broken.\n */\nexport const forAwaitOf = async <T>(\n  iterable: AsyncIterable<T>,\n  callback: (value: T) => Promise<boolean>\n) => {\n  for await (const v of iterable) {\n    if ((await callback(v)) === false) {\n      return;\n    }\n  }\n};\n\n/**\n * Holds a reference to an instance that can be disconnected and reconnected,\n * so that a closure over the ref (e.g. in a then function to a promise) does\n * not strongly hold a ref to the instance. Approximates a WeakRef but must\n * be manually connected & disconnected to the backing instance.\n */\nexport class PseudoWeakRef<T> {\n  private _ref?: T;\n  constructor(ref: T) {\n    this._ref = ref;\n  }\n  /**\n   * Disassociates the ref with the backing instance.\n   */\n  disconnect() {\n    this._ref = undefined;\n  }\n  /**\n   * Reassociates the ref with the backing instance.\n   */\n  reconnect(ref: T) {\n    this._ref = ref;\n  }\n  /**\n   * Retrieves the backing instance (will be undefined when disconnected)\n   */\n  deref() {\n    return this._ref;\n  }\n}\n\n/**\n * A helper to pause and resume waiting on a condition in an async function\n */\nexport class Pauser {\n  private _promise?: Promise<void> = undefined;\n  private _resolve?: () => void = undefined;\n  /**\n   * When paused, returns a promise to be awaited; when unpaused, returns\n   * undefined. Note that in the microtask between the pauser being resumed\n   * an await of this promise resolving, the pauser could be paused again,\n   * hence callers should check the promise in a loop when awaiting.\n   * @returns A promise to be awaited when paused or undefined\n   */\n  get() {\n    return this._promise;\n  }\n  /**\n   * Creates a promise to be awaited\n   */\n  pause() {\n    this._promise ??= new Promise((resolve) => (this._resolve = resolve));\n  }\n  /**\n   * Resolves the promise which may be awaited\n   */\n  resume() {\n    this._resolve?.();\n    this._promise = this._resolve = undefined;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Part, noChange} from '../lit-html.js';\nimport {isPrimitive} from '../directive-helpers.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\nimport {Pauser, PseudoWeakRef} from './private-async-helpers.js';\n\nconst isPromise = (x: unknown) => {\n  return !isPrimitive(x) && typeof (x as {then?: unknown}).then === 'function';\n};\n// Effectively infinity, but a SMI.\nconst _infinity = 0x3fffffff;\n\nexport class UntilDirective extends AsyncDirective {\n  private __lastRenderedIndex: number = _infinity;\n  private __values: unknown[] = [];\n  private __weakThis = new PseudoWeakRef(this);\n  private __pauser = new Pauser();\n\n  render(...args: Array<unknown>): unknown {\n    return args.find((x) => !isPromise(x)) ?? noChange;\n  }\n\n  override update(_part: Part, args: Array<unknown>) {\n    const previousValues = this.__values;\n    let previousLength = previousValues.length;\n    this.__values = args;\n\n    const weakThis = this.__weakThis;\n    const pauser = this.__pauser;\n\n    // If our initial render occurs while disconnected, ensure that the pauser\n    // and weakThis are in the disconnected state\n    if (!this.isConnected) {\n      this.disconnected();\n    }\n\n    for (let i = 0; i < args.length; i++) {\n      // If we've rendered a higher-priority value already, stop.\n      if (i > this.__lastRenderedIndex) {\n        break;\n      }\n\n      const value = args[i];\n\n      // Render non-Promise values immediately\n      if (!isPromise(value)) {\n        this.__lastRenderedIndex = i;\n        // Since a lower-priority value will never overwrite a higher-priority\n        // synchronous value, we can stop processing now.\n        return value;\n      }\n\n      // If this is a Promise we've already handled, skip it.\n      if (i < previousLength && value === previousValues[i]) {\n        continue;\n      }\n\n      // We have a Promise that we haven't seen before, so priorities may have\n      // changed. Forget what we rendered before.\n      this.__lastRenderedIndex = _infinity;\n      previousLength = 0;\n\n      // Note, the callback avoids closing over `this` so that the directive\n      // can be gc'ed before the promise resolves; instead `this` is retrieved\n      // from `weakThis`, which can break the hard reference in the closure when\n      // the directive disconnects\n      Promise.resolve(value).then(async (result: unknown) => {\n        // If we're disconnected, wait until we're (maybe) reconnected\n        // The while loop here handles the case that the connection state\n        // thrashes, causing the pauser to resume and then get re-paused\n        while (pauser.get()) {\n          await pauser.get();\n        }\n        // If the callback gets here and there is no `this`, it means that the\n        // directive has been disconnected and garbage collected and we don't\n        // need to do anything else\n        const _this = weakThis.deref();\n        if (_this !== undefined) {\n          const index = _this.__values.indexOf(value);\n          // If state.values doesn't contain the value, we've re-rendered without\n          // the value, so don't render it. Then, only render if the value is\n          // higher-priority than what's already been rendered.\n          if (index > -1 && index < _this.__lastRenderedIndex) {\n            _this.__lastRenderedIndex = index;\n            _this.setValue(result);\n          }\n        }\n      });\n    }\n\n    return noChange;\n  }\n\n  override disconnected() {\n    this.__weakThis.disconnect();\n    this.__pauser.pause();\n  }\n\n  override reconnected() {\n    this.__weakThis.reconnect(this);\n    this.__pauser.resume();\n  }\n}\n\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n * ```js\n * const content = fetch('./content.txt').then(r => r.text());\n * html`${until(content, html`<span>Loading...</span>`)}`\n * ```\n */\nexport const until = directive(UntilDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\n// export type {UntilDirective};\n"],"names":["HaIconSelector","LitElement","render","_this$context","_this$selector$icon","_this$selector$icon$p","_this$selector$icon2","iconEntity","context","icon_entity","stateObj","hass","states","undefined","placeholder","selector","icon","attributes","until","entityIcon","html","_t","_","label","value","required","disabled","helper","_valueChanged","_t2","nothing","ev","fireEvent","detail","args","attribute","type","Boolean","reflect","HaStateIcon","_this$hass","_this$stateObj","overrideIcon","entities","entity_id","this","_renderFallback","stateValue","then","icn","_t3","domain","computeStateDomain","_t4","FALLBACK_DOMAIN_ICONS","DEFAULT_DOMAIN_ICON","s","disconnect","G","reconnect","t","deref","constructor","i","get","Y","pause","_this$Y","Promise","Z","resume","_this$Z","call","n","h","c","_s$find","find","update","e","_$Cbt","r","length","o","_$CK","_$CX","isConnected","disconnected","_$Cwt","resolve","indexOf","setValue","reconnected","arguments","m"],"mappings":"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"}