{"version":3,"file":"1278.76d679b0c02a57b1.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-aliases-editor.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-floor-icon.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-floor-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/floor_registry.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/sensor.ts","webpack://knx-frontend/./homeassistant-frontend/src/panels/config/areas/dialog-area-registry-detail.ts","webpack://knx-frontend/./homeassistant-frontend/src/panels/config/areas/show-dialog-floor-registry-detail.ts"],"sourcesContent":["import { LitElement, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-multi-textfield\";\n\n@customElement(\"ha-aliases-editor\")\nclass AliasesEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Array }) public aliases!: string[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render() {\n    if (!this.aliases) {\n      return nothing;\n    }\n\n    return html`\n      <ha-multi-textfield\n        .hass=${this.hass}\n        .value=${this.aliases}\n        .disabled=${this.disabled}\n        .label=${this.hass!.localize(\"ui.dialogs.aliases.label\")}\n        .removeLabel=${this.hass!.localize(\"ui.dialogs.aliases.remove\")}\n        .addLabel=${this.hass!.localize(\"ui.dialogs.aliases.add\")}\n        item-index\n        @value-changed=${this._aliasesChanged}\n      >\n      </ha-multi-textfield>\n    `;\n  }\n\n  private _aliasesChanged(value) {\n    fireEvent(this, \"value-changed\", { value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-aliases-editor\": AliasesEditor;\n  }\n}\n","import {\n  mdiHome,\n  mdiHomeFloor0,\n  mdiHomeFloor1,\n  mdiHomeFloor2,\n  mdiHomeFloor3,\n  mdiHomeFloorNegative1,\n} from \"@mdi/js\";\nimport { LitElement, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { FloorRegistryEntry } from \"../data/floor_registry\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\nexport const floorDefaultIconPath = (\n  floor: Pick<FloorRegistryEntry, \"level\">\n) => {\n  switch (floor.level) {\n    case 0:\n      return mdiHomeFloor0;\n    case 1:\n      return mdiHomeFloor1;\n    case 2:\n      return mdiHomeFloor2;\n    case 3:\n      return mdiHomeFloor3;\n    case -1:\n      return mdiHomeFloorNegative1;\n  }\n  return mdiHome;\n};\n\n@customElement(\"ha-floor-icon\")\nexport class HaFloorIcon extends LitElement {\n  @property({ attribute: false }) public floor!: Pick<\n    FloorRegistryEntry,\n    \"icon\" | \"level\"\n  >;\n\n  @property() public icon?: string;\n\n  protected render() {\n    if (this.floor.icon) {\n      return html`<ha-icon .icon=${this.floor.icon}></ha-icon>`;\n    }\n    const defaultPath = floorDefaultIconPath(this.floor);\n\n    return html`<ha-svg-icon .path=${defaultPath}></ha-svg-icon>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-floor-icon\": HaFloorIcon;\n  }\n}\n","import { mdiPlus, mdiTextureBox } from \"@mdi/js\";\nimport type { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport type { TemplateResult } from \"lit\";\nimport { LitElement, html } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport { computeFloorName } from \"../common/entity/compute_floor_name\";\nimport { updateAreaRegistryEntry } from \"../data/area_registry\";\nimport type {\n  DeviceEntityDisplayLookup,\n  DeviceRegistryEntry,\n} from \"../data/device_registry\";\nimport { getDeviceEntityDisplayLookup } from \"../data/device_registry\";\nimport type { EntityRegistryDisplayEntry } from \"../data/entity_registry\";\nimport {\n  createFloorRegistryEntry,\n  getFloorAreaLookup,\n  type FloorRegistryEntry,\n} from \"../data/floor_registry\";\nimport { showAlertDialog } from \"../dialogs/generic/show-dialog-box\";\nimport { showFloorRegistryDetailDialog } from \"../panels/config/areas/show-dialog-floor-registry-detail\";\nimport type { HomeAssistant, ValueChangedEvent } from \"../types\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./device/ha-device-picker\";\nimport \"./ha-combo-box-item\";\nimport \"./ha-floor-icon\";\nimport \"./ha-generic-picker\";\nimport type { HaGenericPicker } from \"./ha-generic-picker\";\nimport \"./ha-icon-button\";\nimport type { PickerComboBoxItem } from \"./ha-picker-combo-box\";\nimport type { PickerValueRenderer } from \"./ha-picker-field\";\nimport \"./ha-svg-icon\";\n\nconst ADD_NEW_ID = \"___ADD_NEW___\";\n\ninterface FloorComboBoxItem extends PickerComboBoxItem {\n  floor?: FloorRegistryEntry;\n}\n\n@customElement(\"ha-floor-picker\")\nexport class HaFloorPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ type: Boolean, attribute: \"no-add\" })\n  public noAdd = false;\n\n  /**\n   * Show only floors with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no floors with entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only floors with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * List of floors to be excluded.\n   * @type {Array}\n   * @attr exclude-floors\n   */\n  @property({ type: Array, attribute: \"exclude-floors\" })\n  public excludeFloors?: string[];\n\n  @property({ attribute: false })\n  public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property({ attribute: false })\n  public entityFilter?: (entity: HassEntity) => boolean;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @query(\"ha-generic-picker\") private _picker?: HaGenericPicker;\n\n  public async open() {\n    await this.updateComplete;\n    await this._picker?.open();\n  }\n\n  // Recompute value renderer when the areas change\n  private _computeValueRenderer = memoizeOne(\n    (_haAreas: HomeAssistant[\"floors\"]): PickerValueRenderer =>\n      (value) => {\n        const floor = this.hass.floors[value];\n\n        if (!floor) {\n          return html`\n            <ha-svg-icon slot=\"start\" .path=${mdiTextureBox}></ha-svg-icon>\n            <span slot=\"headline\">${floor}</span>\n          `;\n        }\n\n        const floorName = floor ? computeFloorName(floor) : undefined;\n\n        return html`\n          <ha-floor-icon slot=\"start\" .floor=${floor}></ha-floor-icon>\n          <span slot=\"headline\">${floorName}</span>\n        `;\n      }\n  );\n\n  private _getFloors = memoizeOne(\n    (\n      haFloors: HomeAssistant[\"floors\"],\n      haAreas: HomeAssistant[\"areas\"],\n      haDevices: HomeAssistant[\"devices\"],\n      haEntities: HomeAssistant[\"entities\"],\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"],\n      deviceFilter: this[\"deviceFilter\"],\n      entityFilter: this[\"entityFilter\"],\n      excludeFloors: this[\"excludeFloors\"]\n    ): FloorComboBoxItem[] => {\n      const floors = Object.values(haFloors);\n      const areas = Object.values(haAreas);\n      const devices = Object.values(haDevices);\n      const entities = Object.values(haEntities);\n\n      let deviceEntityLookup: DeviceEntityDisplayLookup = {};\n      let inputDevices: DeviceRegistryEntry[] | undefined;\n      let inputEntities: EntityRegistryDisplayEntry[] | undefined;\n\n      if (\n        includeDomains ||\n        excludeDomains ||\n        includeDeviceClasses ||\n        deviceFilter ||\n        entityFilter\n      ) {\n        deviceEntityLookup = getDeviceEntityDisplayLookup(entities);\n        inputDevices = devices;\n        inputEntities = entities.filter((entity) => entity.area_id);\n\n        if (includeDomains) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return false;\n            }\n            return deviceEntityLookup[device.id].some((entity) =>\n              includeDomains.includes(computeDomain(entity.entity_id))\n            );\n          });\n          inputEntities = inputEntities!.filter((entity) =>\n            includeDomains.includes(computeDomain(entity.entity_id))\n          );\n        }\n\n        if (excludeDomains) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return true;\n            }\n            return entities.every(\n              (entity) =>\n                !excludeDomains.includes(computeDomain(entity.entity_id))\n            );\n          });\n          inputEntities = inputEntities!.filter(\n            (entity) =>\n              !excludeDomains.includes(computeDomain(entity.entity_id))\n          );\n        }\n\n        if (includeDeviceClasses) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return false;\n            }\n            return deviceEntityLookup[device.id].some((entity) => {\n              const stateObj = this.hass.states[entity.entity_id];\n              if (!stateObj) {\n                return false;\n              }\n              return (\n                stateObj.attributes.device_class &&\n                includeDeviceClasses.includes(stateObj.attributes.device_class)\n              );\n            });\n          });\n          inputEntities = inputEntities!.filter((entity) => {\n            const stateObj = this.hass.states[entity.entity_id];\n            return (\n              stateObj.attributes.device_class &&\n              includeDeviceClasses.includes(stateObj.attributes.device_class)\n            );\n          });\n        }\n\n        if (deviceFilter) {\n          inputDevices = inputDevices!.filter((device) =>\n            deviceFilter!(device)\n          );\n        }\n\n        if (entityFilter) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return false;\n            }\n            return deviceEntityLookup[device.id].some((entity) => {\n              const stateObj = this.hass.states[entity.entity_id];\n              if (!stateObj) {\n                return false;\n              }\n              return entityFilter(stateObj);\n            });\n          });\n          inputEntities = inputEntities!.filter((entity) => {\n            const stateObj = this.hass.states[entity.entity_id];\n            if (!stateObj) {\n              return false;\n            }\n            return entityFilter!(stateObj);\n          });\n        }\n      }\n\n      let outputFloors = floors;\n\n      let areaIds: string[] | undefined;\n\n      if (inputDevices) {\n        areaIds = inputDevices\n          .filter((device) => device.area_id)\n          .map((device) => device.area_id!);\n      }\n\n      if (inputEntities) {\n        areaIds = (areaIds ?? []).concat(\n          inputEntities\n            .filter((entity) => entity.area_id)\n            .map((entity) => entity.area_id!)\n        );\n      }\n\n      if (areaIds) {\n        const floorAreaLookup = getFloorAreaLookup(areas);\n        outputFloors = outputFloors.filter((floor) =>\n          floorAreaLookup[floor.floor_id]?.some((area) =>\n            areaIds!.includes(area.area_id)\n          )\n        );\n      }\n\n      if (excludeFloors) {\n        outputFloors = outputFloors.filter(\n          (floor) => !excludeFloors!.includes(floor.floor_id)\n        );\n      }\n\n      const items = outputFloors.map<FloorComboBoxItem>((floor) => {\n        const floorName = computeFloorName(floor);\n        return {\n          id: floor.floor_id,\n          primary: floorName,\n          floor: floor,\n          sorting_label: floor.level?.toString() || \"zzzzz\",\n          search_labels: [floorName, floor.floor_id, ...floor.aliases].filter(\n            (v): v is string => Boolean(v)\n          ),\n        };\n      });\n\n      return items;\n    }\n  );\n\n  private _rowRenderer: ComboBoxLitRenderer<FloorComboBoxItem> = (item) => html`\n    <ha-combo-box-item type=\"button\" compact>\n      ${item.icon_path\n        ? html`\n            <ha-svg-icon\n              slot=\"start\"\n              style=\"margin: 0 4px\"\n              .path=${item.icon_path}\n            ></ha-svg-icon>\n          `\n        : html`\n            <ha-floor-icon\n              slot=\"start\"\n              .floor=${item.floor}\n              style=\"margin: 0 4px\"\n            ></ha-floor-icon>\n          `}\n      <span slot=\"headline\">${item.primary}</span>\n    </ha-combo-box-item>\n  `;\n\n  private _getItems = () =>\n    this._getFloors(\n      this.hass.floors,\n      this.hass.areas,\n      this.hass.devices,\n      this.hass.entities,\n      this.includeDomains,\n      this.excludeDomains,\n      this.includeDeviceClasses,\n      this.deviceFilter,\n      this.entityFilter,\n      this.excludeFloors\n    );\n\n  private _allFloorNames = memoizeOne(\n    (floors: HomeAssistant[\"floors\"]) =>\n      Object.values(floors)\n        .map((floor) => computeFloorName(floor)?.toLowerCase())\n        .filter(Boolean) as string[]\n  );\n\n  private _getAdditionalItems = (\n    searchString?: string\n  ): PickerComboBoxItem[] => {\n    if (this.noAdd) {\n      return [];\n    }\n\n    const allFloors = this._allFloorNames(this.hass.floors);\n\n    if (searchString && !allFloors.includes(searchString.toLowerCase())) {\n      return [\n        {\n          id: ADD_NEW_ID + searchString,\n          primary: this.hass.localize(\n            \"ui.components.floor-picker.add_new_sugestion\",\n            {\n              name: searchString,\n            }\n          ),\n          icon_path: mdiPlus,\n        },\n      ];\n    }\n\n    return [\n      {\n        id: ADD_NEW_ID,\n        primary: this.hass.localize(\"ui.components.floor-picker.add_new\"),\n        icon_path: mdiPlus,\n      },\n    ];\n  };\n\n  protected render(): TemplateResult {\n    const placeholder =\n      this.placeholder ??\n      this.hass.localize(\"ui.components.floor-picker.floor\");\n\n    const valueRenderer = this._computeValueRenderer(this.hass.floors);\n\n    return html`\n      <ha-generic-picker\n        .hass=${this.hass}\n        .autofocus=${this.autofocus}\n        .label=${this.label}\n        .notFoundLabel=${this.hass.localize(\n          \"ui.components.floor-picker.no_match\"\n        )}\n        .placeholder=${placeholder}\n        .value=${this.value}\n        .getItems=${this._getItems}\n        .getAdditionalItems=${this._getAdditionalItems}\n        .valueRenderer=${valueRenderer}\n        .rowRenderer=${this._rowRenderer}\n        @value-changed=${this._valueChanged}\n      >\n      </ha-generic-picker>\n    `;\n  }\n\n  private _valueChanged(ev: ValueChangedEvent<string>) {\n    ev.stopPropagation();\n    const value = ev.detail.value;\n\n    if (!value) {\n      this._setValue(undefined);\n      return;\n    }\n\n    if (value.startsWith(ADD_NEW_ID)) {\n      this.hass.loadFragmentTranslation(\"config\");\n\n      const suggestedName = value.substring(ADD_NEW_ID.length);\n\n      showFloorRegistryDetailDialog(this, {\n        suggestedName: suggestedName,\n        createEntry: async (values, addedAreas) => {\n          try {\n            const floor = await createFloorRegistryEntry(this.hass, values);\n            addedAreas.forEach((areaId) => {\n              updateAreaRegistryEntry(this.hass, areaId, {\n                floor_id: floor.floor_id,\n              });\n            });\n            this._setValue(floor.floor_id);\n          } catch (err: any) {\n            showAlertDialog(this, {\n              title: this.hass.localize(\n                \"ui.components.floor-picker.failed_create_floor\"\n              ),\n              text: err.message,\n            });\n          }\n        },\n      });\n    }\n\n    this._setValue(value);\n  }\n\n  private _setValue(value?: string) {\n    this.value = value;\n    fireEvent(this, \"value-changed\", { value });\n    fireEvent(this, \"change\");\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-floor-picker\": HaFloorPicker;\n  }\n}\n","import { stringCompare } from \"../common/string/compare\";\nimport type { HomeAssistant } from \"../types\";\nimport type { AreaRegistryEntry } from \"./area_registry\";\nimport type { RegistryEntry } from \"./registry\";\n\nexport { subscribeAreaRegistry } from \"./ws-area_registry\";\n\nexport interface FloorRegistryEntry extends RegistryEntry {\n  floor_id: string;\n  name: string;\n  level: number | null;\n  icon: string | null;\n  aliases: string[];\n}\n\nexport type FloorAreaLookup = Record<string, AreaRegistryEntry[]>;\n\nexport interface FloorRegistryEntryMutableParams {\n  name: string;\n  level?: number | null;\n  icon?: string | null;\n  aliases?: string[];\n}\n\nexport const createFloorRegistryEntry = (\n  hass: HomeAssistant,\n  values: FloorRegistryEntryMutableParams\n) =>\n  hass.callWS<FloorRegistryEntry>({\n    type: \"config/floor_registry/create\",\n    ...values,\n  });\n\nexport const updateFloorRegistryEntry = (\n  hass: HomeAssistant,\n  floorId: string,\n  updates: Partial<FloorRegistryEntryMutableParams>\n) =>\n  hass.callWS<AreaRegistryEntry>({\n    type: \"config/floor_registry/update\",\n    floor_id: floorId,\n    ...updates,\n  });\n\nexport const deleteFloorRegistryEntry = (\n  hass: HomeAssistant,\n  floorId: string\n) =>\n  hass.callWS({\n    type: \"config/floor_registry/delete\",\n    floor_id: floorId,\n  });\n\nexport const getFloorAreaLookup = (\n  areas: AreaRegistryEntry[]\n): FloorAreaLookup => {\n  const floorAreaLookup: FloorAreaLookup = {};\n  for (const area of areas) {\n    if (!area.floor_id) {\n      continue;\n    }\n    if (!(area.floor_id in floorAreaLookup)) {\n      floorAreaLookup[area.floor_id] = [];\n    }\n    floorAreaLookup[area.floor_id].push(area);\n  }\n  return floorAreaLookup;\n};\n\nexport const floorCompare =\n  (entries?: FloorRegistryEntry[], order?: string[]) =>\n  (a: string, b: string) => {\n    const indexA = order ? order.indexOf(a) : -1;\n    const indexB = order ? order.indexOf(b) : -1;\n    if (indexA === -1 && indexB === -1) {\n      const nameA = entries?.[a]?.name ?? a;\n      const nameB = entries?.[b]?.name ?? b;\n      return stringCompare(nameA, nameB);\n    }\n    if (indexA === -1) {\n      return 1;\n    }\n    if (indexB === -1) {\n      return -1;\n    }\n    return indexA - indexB;\n  };\n","import type { HomeAssistant } from \"../types\";\n\nexport const SENSOR_DEVICE_CLASS_BATTERY = \"battery\";\nexport const SENSOR_DEVICE_CLASS_TIMESTAMP = \"timestamp\";\nexport const SENSOR_DEVICE_CLASS_TEMPERATURE = \"temperature\";\nexport const SENSOR_DEVICE_CLASS_HUMIDITY = \"humidity\";\n\nexport interface SensorDeviceClassUnits {\n  units: string[];\n}\n\nexport const getSensorDeviceClassConvertibleUnits = (\n  hass: HomeAssistant,\n  deviceClass: string\n): Promise<SensorDeviceClassUnits> =>\n  hass.callWS({\n    type: \"sensor/device_class_convertible_units\",\n    device_class: deviceClass,\n  });\n\nexport interface SensorNumericDeviceClasses {\n  numeric_device_classes: string[];\n}\n\nlet sensorNumericDeviceClassesCache:\n  | Promise<SensorNumericDeviceClasses>\n  | undefined;\n\nexport const getSensorNumericDeviceClasses = async (\n  hass: HomeAssistant\n): Promise<SensorNumericDeviceClasses> => {\n  if (sensorNumericDeviceClassesCache) {\n    return sensorNumericDeviceClassesCache;\n  }\n  sensorNumericDeviceClassesCache = hass.callWS({\n    type: \"sensor/numeric_device_classes\",\n  });\n  return sensorNumericDeviceClassesCache!;\n};\n","import type { CSSResultGroup } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-aliases-editor\";\nimport \"../../../components/ha-picture-upload\";\nimport type { HaPictureUpload } from \"../../../components/ha-picture-upload\";\nimport \"../../../components/ha-settings-row\";\nimport \"../../../components/ha-icon-picker\";\nimport \"../../../components/ha-floor-picker\";\nimport \"../../../components/entity/ha-entity-picker\";\nimport type { HaEntityPicker } from \"../../../components/entity/ha-entity-picker\";\nimport \"../../../components/ha-textfield\";\nimport \"../../../components/ha-labels-picker\";\nimport type {\n  AreaRegistryEntry,\n  AreaRegistryEntryMutableParams,\n} from \"../../../data/area_registry\";\nimport { deleteAreaRegistryEntry } from \"../../../data/area_registry\";\nimport type { CropOptions } from \"../../../dialogs/image-cropper-dialog/show-image-cropper-dialog\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant, ValueChangedEvent } from \"../../../types\";\nimport type { AreaRegistryDetailDialogParams } from \"./show-dialog-area-registry-detail\";\nimport {\n  SENSOR_DEVICE_CLASS_HUMIDITY,\n  SENSOR_DEVICE_CLASS_TEMPERATURE,\n} from \"../../../data/sensor\";\nimport { showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\n\nconst cropOptions: CropOptions = {\n  round: false,\n  type: \"image/jpeg\",\n  quality: 0.75,\n  aspectRatio: 1.78,\n};\n\nconst SENSOR_DOMAINS = [\"sensor\"];\nconst TEMPERATURE_DEVICE_CLASSES = [SENSOR_DEVICE_CLASS_TEMPERATURE];\nconst HUMIDITY_DEVICE_CLASSES = [SENSOR_DEVICE_CLASS_HUMIDITY];\n\nclass DialogAreaDetail extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _name!: string;\n\n  @state() private _aliases!: string[];\n\n  @state() private _labels!: string[];\n\n  @state() private _picture!: string | null;\n\n  @state() private _icon!: string | null;\n\n  @state() private _floor!: string | null;\n\n  @state() private _temperatureEntity!: string | null;\n\n  @state() private _humidityEntity!: string | null;\n\n  @state() private _error?: string;\n\n  @state() private _params?: AreaRegistryDetailDialogParams;\n\n  @state() private _submitting?: boolean;\n\n  public async showDialog(\n    params: AreaRegistryDetailDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    if (this._params.entry) {\n      this._name = this._params.entry.name;\n      this._aliases = this._params.entry.aliases;\n      this._labels = this._params.entry.labels;\n      this._picture = this._params.entry.picture;\n      this._icon = this._params.entry.icon;\n      this._floor = this._params.entry.floor_id;\n      this._temperatureEntity = this._params.entry.temperature_entity_id;\n      this._humidityEntity = this._params.entry.humidity_entity_id;\n    } else {\n      this._name = this._params.suggestedName || \"\";\n      this._aliases = [];\n      this._labels = [];\n      this._picture = null;\n      this._icon = null;\n      this._floor = null;\n      this._temperatureEntity = null;\n      this._humidityEntity = null;\n    }\n\n    await this.updateComplete;\n  }\n\n  public closeDialog(): void {\n    this._error = \"\";\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  private _renderSettings(entry: AreaRegistryEntry | undefined) {\n    return html`\n      ${entry\n        ? html`\n            <ha-settings-row>\n              <span slot=\"heading\">\n                ${this.hass.localize(\"ui.panel.config.areas.editor.area_id\")}\n              </span>\n              <span slot=\"description\"> ${entry.area_id} </span>\n            </ha-settings-row>\n          `\n        : nothing}\n\n      <ha-textfield\n        .value=${this._name}\n        @input=${this._nameChanged}\n        .label=${this.hass.localize(\"ui.panel.config.areas.editor.name\")}\n        .validationMessage=${this.hass.localize(\n          \"ui.panel.config.areas.editor.name_required\"\n        )}\n        required\n        dialogInitialFocus\n      ></ha-textfield>\n\n      <ha-icon-picker\n        .hass=${this.hass}\n        .value=${this._icon}\n        @value-changed=${this._iconChanged}\n        .label=${this.hass.localize(\"ui.panel.config.areas.editor.icon\")}\n      ></ha-icon-picker>\n\n      <ha-floor-picker\n        .hass=${this.hass}\n        .value=${this._floor}\n        @value-changed=${this._floorChanged}\n        .label=${this.hass.localize(\"ui.panel.config.areas.editor.floor\")}\n      ></ha-floor-picker>\n\n      <ha-labels-picker\n        .hass=${this.hass}\n        .value=${this._labels}\n        @value-changed=${this._labelsChanged}\n        .placeholder=${this.hass.localize(\n          \"ui.panel.config.areas.editor.add_labels\"\n        )}\n      ></ha-labels-picker>\n\n      <ha-picture-upload\n        .hass=${this.hass}\n        .value=${this._picture}\n        crop\n        select-media\n        .cropOptions=${cropOptions}\n        @change=${this._pictureChanged}\n      ></ha-picture-upload>\n    `;\n  }\n\n  private _renderAliasExpansion() {\n    return html`\n      <ha-expansion-panel\n        outlined\n        .header=${this.hass.localize(\n          \"ui.panel.config.areas.editor.aliases_section\"\n        )}\n        expanded\n      >\n        <div class=\"content\">\n          <p class=\"description\">\n            ${this.hass.localize(\n              \"ui.panel.config.areas.editor.aliases_description\"\n            )}\n          </p>\n          <ha-aliases-editor\n            .hass=${this.hass}\n            .aliases=${this._aliases}\n            @value-changed=${this._aliasesChanged}\n          ></ha-aliases-editor>\n        </div>\n      </ha-expansion-panel>\n    `;\n  }\n\n  private _renderRelatedEntitiesExpansion() {\n    return html`\n      <ha-expansion-panel\n        outlined\n        .header=${this.hass.localize(\n          \"ui.panel.config.areas.editor.related_entities_section\"\n        )}\n        expanded\n      >\n        <div class=\"content\">\n          <ha-entity-picker\n            .hass=${this.hass}\n            .label=${this.hass.localize(\n              \"ui.panel.config.areas.editor.temperature_entity\"\n            )}\n            .helper=${this.hass.localize(\n              \"ui.panel.config.areas.editor.temperature_entity_description\"\n            )}\n            .value=${this._temperatureEntity}\n            .includeDomains=${SENSOR_DOMAINS}\n            .includeDeviceClasses=${TEMPERATURE_DEVICE_CLASSES}\n            .entityFilter=${this._areaEntityFilter}\n            @value-changed=${this._sensorChanged}\n          ></ha-entity-picker>\n\n          <ha-entity-picker\n            .hass=${this.hass}\n            .label=${this.hass.localize(\n              \"ui.panel.config.areas.editor.humidity_entity\"\n            )}\n            .helper=${this.hass.localize(\n              \"ui.panel.config.areas.editor.humidity_entity_description\"\n            )}\n            .value=${this._humidityEntity}\n            .includeDomains=${SENSOR_DOMAINS}\n            .includeDeviceClasses=${HUMIDITY_DEVICE_CLASSES}\n            .entityFilter=${this._areaEntityFilter}\n            @value-changed=${this._sensorChanged}\n          ></ha-entity-picker>\n        </div>\n      </ha-expansion-panel>\n    `;\n  }\n\n  protected render() {\n    if (!this._params) {\n      return nothing;\n    }\n    const entry = this._params.entry;\n    const nameInvalid = !this._isNameValid();\n    const isNew = !entry;\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          entry\n            ? this.hass.localize(\"ui.panel.config.areas.editor.update_area\")\n            : this.hass.localize(\"ui.panel.config.areas.editor.create_area\")\n        )}\n      >\n        <div>\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n            : \"\"}\n          <div class=\"form\">\n            ${this._renderSettings(entry)} ${this._renderAliasExpansion()}\n            ${!isNew ? this._renderRelatedEntitiesExpansion() : nothing}\n          </div>\n        </div>\n        ${!isNew\n          ? html`<ha-button\n              slot=\"secondaryAction\"\n              destructive\n              @click=${this._deleteArea}\n            >\n              ${this.hass.localize(\"ui.common.delete\")}\n            </ha-button>`\n          : nothing}\n        <div slot=\"primaryAction\">\n          <ha-button @click=${this.closeDialog}>\n            ${this.hass.localize(\"ui.common.cancel\")}\n          </ha-button>\n          <ha-button\n            @click=${this._updateEntry}\n            .disabled=${nameInvalid || this._submitting}\n          >\n            ${entry\n              ? this.hass.localize(\"ui.common.save\")\n              : this.hass.localize(\"ui.common.create\")}\n          </ha-button>\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private _isNameValid() {\n    return this._name.trim() !== \"\";\n  }\n\n  private _areaEntityFilter = (stateObj: HassEntity): boolean => {\n    const entityReg = this.hass.entities[stateObj.entity_id];\n    if (!entityReg) {\n      return false;\n    }\n    const areaId = this._params!.entry!.area_id;\n    if (entityReg.area_id === areaId) {\n      return true;\n    }\n    if (!entityReg.device_id) {\n      return false;\n    }\n    const deviceReg = this.hass.devices[entityReg.device_id];\n    return deviceReg && deviceReg.area_id === areaId;\n  };\n\n  private _nameChanged(ev) {\n    this._error = undefined;\n    this._name = ev.target.value;\n  }\n\n  private _floorChanged(ev) {\n    this._error = undefined;\n    this._floor = ev.detail.value;\n  }\n\n  private _iconChanged(ev) {\n    this._error = undefined;\n    this._icon = ev.detail.value;\n  }\n\n  private _labelsChanged(ev) {\n    this._error = undefined;\n    this._labels = ev.detail.value;\n  }\n\n  private _pictureChanged(ev: ValueChangedEvent<string | null>) {\n    this._error = undefined;\n    this._picture = (ev.target as HaPictureUpload).value;\n  }\n\n  private _aliasesChanged(ev: CustomEvent): void {\n    this._aliases = ev.detail.value;\n  }\n\n  private _sensorChanged(ev: CustomEvent): void {\n    const deviceClass = (ev.target as HaEntityPicker).includeDeviceClasses![0];\n    const key = `_${deviceClass}Entity`;\n    this[key] = ev.detail.value || null;\n  }\n\n  private async _updateEntry() {\n    const create = !this._params!.entry;\n    this._submitting = true;\n    try {\n      const values: AreaRegistryEntryMutableParams = {\n        name: this._name.trim(),\n        picture: this._picture || (create ? undefined : null),\n        icon: this._icon || (create ? undefined : null),\n        floor_id: this._floor || (create ? undefined : null),\n        labels: this._labels || null,\n        aliases: this._aliases,\n        temperature_entity_id: this._temperatureEntity,\n        humidity_entity_id: this._humidityEntity,\n      };\n      if (create) {\n        await this._params!.createEntry!(values);\n      } else {\n        await this._params!.updateEntry!(values);\n      }\n      this.closeDialog();\n    } catch (err: any) {\n      this._error =\n        err.message ||\n        this.hass.localize(\"ui.panel.config.areas.editor.unknown_error\");\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _deleteArea() {\n    if (!this._params?.entry) {\n      return;\n    }\n\n    const confirmed = await showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.areas.delete.confirmation_title\",\n        { name: this._params.entry.name }\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.areas.delete.confirmation_text\"\n      ),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n      confirmText: this.hass.localize(\"ui.common.delete\"),\n      destructive: true,\n    });\n    if (!confirmed) {\n      return;\n    }\n\n    await deleteAreaRegistryEntry(this.hass!, this._params!.entry!.area_id);\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-textfield {\n          display: block;\n        }\n        ha-expansion-panel {\n          --expansion-panel-content-padding: 0;\n        }\n        ha-aliases-editor,\n        ha-entity-picker,\n        ha-floor-picker,\n        ha-icon-picker,\n        ha-labels-picker,\n        ha-picture-upload,\n        ha-expansion-panel {\n          display: block;\n          margin-bottom: 16px;\n        }\n        ha-dialog {\n          --mdc-dialog-min-width: min(600px, 100vw);\n        }\n        .content {\n          padding: 12px;\n        }\n        .description {\n          margin: 0 0 16px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-area-registry-detail\": DialogAreaDetail;\n  }\n}\n\ncustomElements.define(\"dialog-area-registry-detail\", DialogAreaDetail);\n","import { fireEvent } from \"../../../common/dom/fire_event\";\nimport type {\n  FloorRegistryEntry,\n  FloorRegistryEntryMutableParams,\n} from \"../../../data/floor_registry\";\n\nexport interface FloorRegistryDetailDialogParams {\n  entry?: FloorRegistryEntry;\n  suggestedName?: string;\n  createEntry?: (\n    values: FloorRegistryEntryMutableParams,\n    addedAreas: Set<string>\n  ) => Promise<unknown>;\n  updateEntry?: (\n    updates: Partial<FloorRegistryEntryMutableParams>,\n    addedAreas: Set<string>,\n    removedAreas: Set<string>\n  ) => Promise<unknown>;\n}\n\nexport const loadFloorRegistryDetailDialog = () =>\n  import(\"./dialog-floor-registry-detail\");\n\nexport const showFloorRegistryDetailDialog = (\n  element: HTMLElement,\n  systemLogDetailParams: FloorRegistryDetailDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"dialog-floor-registry-detail\",\n    dialogImport: loadFloorRegistryDetailDialog,\n    dialogParams: systemLogDetailParams,\n  });\n};\n"],"names":["AliasesEditor","LitElement","render","this","aliases","html","_t","_","hass","disabled","localize","_aliasesChanged","nothing","value","fireEvent","args","attribute","type","Array","Boolean","floorDefaultIconPath","floor","level","HaFloorIcon","icon","defaultPath","_t2","ADD_NEW_ID","HaFloorPicker","open","_this$_picker","updateComplete","_picker","_this$placeholder","placeholder","valueRenderer","_computeValueRenderer","floors","autofocus","label","_getItems","_getAdditionalItems","_rowRenderer","_valueChanged","ev","stopPropagation","detail","startsWith","loadFragmentTranslation","suggestedName","substring","length","showFloorRegistryDetailDialog","createEntry","values","addedAreas","createFloorRegistryEntry","forEach","areaId","updateAreaRegistryEntry","floor_id","_setValue","err","showAlertDialog","title","text","message","undefined","noAdd","required","memoizeOne","_haAreas","mdiTextureBox","floorName","computeFloorName","_t3","_getFloors","haFloors","haAreas","haDevices","haEntities","includeDomains","excludeDomains","includeDeviceClasses","deviceFilter","entityFilter","excludeFloors","Object","areas","devices","entities","inputDevices","inputEntities","deviceEntityLookup","getDeviceEntityDisplayLookup","filter","entity","area_id","device","devEntities","id","some","includes","computeDomain","entity_id","every","stateObj","states","attributes","device_class","areaIds","outputFloors","map","concat","floorAreaLookup","getFloorAreaLookup","_floorAreaLookup$floo","area","_floor$level","primary","sorting_label","toString","search_labels","v","item","_t4","icon_path","_t5","_t6","_allFloorNames","_computeFloorName","toLowerCase","searchString","allFloors","name","mdiPlus","callWS","assign","push","SENSOR_DEVICE_CLASS_TIMESTAMP","SENSOR_DEVICE_CLASS_TEMPERATURE","SENSOR_DEVICE_CLASS_HUMIDITY","cropOptions","round","quality","aspectRatio","SENSOR_DOMAINS","TEMPERATURE_DEVICE_CLASSES","HUMIDITY_DEVICE_CLASSES","DialogAreaDetail","showDialog","params","_params","_error","entry","_name","_aliases","_labels","labels","_picture","picture","_icon","_floor","_temperatureEntity","temperature_entity_id","_humidityEntity","humidity_entity_id","closeDialog","dialog","localName","_renderSettings","_nameChanged","_iconChanged","_floorChanged","_labelsChanged","_pictureChanged","_renderAliasExpansion","_renderRelatedEntitiesExpansion","_areaEntityFilter","_sensorChanged","nameInvalid","_isNameValid","isNew","createCloseHeading","_t7","_deleteArea","_updateEntry","_submitting","trim","target","create","updateEntry","_this$_params","showConfirmationDialog","dismissText","confirmText","destructive","deleteAreaRegistryEntry","styles","haStyleDialog","css","_t8","entityReg","device_id","deviceReg","customElements","define","loadFloorRegistryDetailDialog","e","element","systemLogDetailParams","dialogTag","dialogImport","dialogParams"],"mappings":"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"}