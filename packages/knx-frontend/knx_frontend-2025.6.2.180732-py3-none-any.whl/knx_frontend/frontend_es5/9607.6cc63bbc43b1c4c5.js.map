{"version":3,"file":"9607.6cc63bbc43b1c4c5.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/panels/config/helpers/forms/ha-input_select-form.ts"],"sourcesContent":["import { mdiDelete, mdiDrag } from \"@mdi/js\";\nimport type { CSSResultGroup } from \"lit\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { repeat } from \"lit/directives/repeat\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-button\";\nimport \"../../../../components/ha-icon-button\";\nimport \"../../../../components/ha-icon-picker\";\nimport \"../../../../components/ha-list\";\nimport \"../../../../components/ha-list-item\";\nimport \"../../../../components/ha-sortable\";\nimport \"../../../../components/ha-textfield\";\nimport type { HaTextField } from \"../../../../components/ha-textfield\";\nimport type { InputSelect } from \"../../../../data/input_select\";\nimport { showConfirmationDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-input_select-form\")\nclass HaInputSelectForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public new = false;\n\n  private _item?: InputSelect;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _options: string[] = [];\n\n  @query(\"#option_input\", true) private _optionInput?: HaTextField;\n\n  private _optionMoved(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const { oldIndex, newIndex } = ev.detail;\n    const options = this._options.concat();\n    const option = options.splice(oldIndex, 1)[0];\n    options.splice(newIndex, 0, option);\n\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, options },\n    });\n  }\n\n  set item(item: InputSelect) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._options = item.options || [];\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._options = [];\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render() {\n    if (!this.hass) {\n      return nothing;\n    }\n\n    return html`\n      <div class=\"form\">\n        <ha-textfield\n          dialogInitialFocus\n          autoValidate\n          required\n          .validationMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          .value=${this._name}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          .configValue=${\"name\"}\n          @input=${this._valueChanged}\n        ></ha-textfield>\n        <ha-icon-picker\n          .hass=${this.hass}\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-picker>\n        <div class=\"header\">\n          ${this.hass!.localize(\n            \"ui.dialogs.helper_settings.input_select.options\"\n          )}:\n        </div>\n        <ha-sortable @item-moved=${this._optionMoved} handle-selector=\".handle\">\n          <ha-list class=\"options\">\n            ${this._options.length\n              ? repeat(\n                  this._options,\n                  (option) => option,\n                  (option, index) => html`\n                    <ha-list-item class=\"option\" hasMeta>\n                      <div class=\"optioncontent\">\n                        <div class=\"handle\">\n                          <ha-svg-icon .path=${mdiDrag}></ha-svg-icon>\n                        </div>\n                        ${option}\n                      </div>\n                      <ha-icon-button\n                        slot=\"meta\"\n                        .index=${index}\n                        .label=${this.hass.localize(\n                          \"ui.dialogs.helper_settings.input_select.remove_option\"\n                        )}\n                        @click=${this._removeOption}\n                        .path=${mdiDelete}\n                      ></ha-icon-button>\n                    </ha-list-item>\n                  `\n                )\n              : html`\n                  <ha-list-item noninteractive>\n                    ${this.hass!.localize(\n                      \"ui.dialogs.helper_settings.input_select.no_options\"\n                    )}\n                  </ha-list-item>\n                `}\n          </ha-list>\n        </ha-sortable>\n        <div class=\"layout horizontal center\">\n          <ha-textfield\n            class=\"flex-auto\"\n            id=\"option_input\"\n            .label=${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_select.add_option\"\n            )}\n            @keydown=${this._handleKeyAdd}\n          ></ha-textfield>\n          <ha-button @click=${this._addOption}\n            >${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_select.add\"\n            )}</ha-button\n          >\n        </div>\n      </div>\n    `;\n  }\n\n  private _handleKeyAdd(ev: KeyboardEvent) {\n    ev.stopPropagation();\n    if (ev.key !== \"Enter\") {\n      return;\n    }\n    this._addOption();\n  }\n\n  private _addOption() {\n    const input = this._optionInput;\n    if (!input?.value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, options: [...this._options, input.value] },\n    });\n    input.value = \"\";\n  }\n\n  private async _removeOption(ev: Event) {\n    const index = (ev.target as any).index;\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\n          \"ui.dialogs.helper_settings.input_select.confirm_delete.delete\"\n        ),\n        text: this.hass.localize(\n          \"ui.dialogs.helper_settings.input_select.confirm_delete.prompt\"\n        ),\n        destructive: true,\n      }))\n    ) {\n      return;\n    }\n    const options = [...this._options];\n    options.splice(index, 1);\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, options },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail?.value || (ev.target as any).value;\n\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        .option {\n          border: 1px solid var(--divider-color);\n          border-radius: 4px;\n          margin-top: 4px;\n          --mdc-icon-button-size: 24px;\n          --mdc-ripple-color: transparent;\n          --mdc-list-side-padding: 16px;\n          cursor: default;\n          background-color: var(--card-background-color);\n        }\n        mwc-button {\n          margin-left: 8px;\n          margin-inline-start: 8px;\n          margin-inline-end: initial;\n        }\n        ha-textfield {\n          display: block;\n          margin-bottom: 8px;\n        }\n        #option_input {\n          margin-top: 8px;\n        }\n        .header {\n          margin-top: 8px;\n          margin-bottom: 8px;\n        }\n        .handle {\n          cursor: move; /* fallback if grab cursor is unsupported */\n          cursor: grab;\n          padding-right: 12px;\n          padding-inline-end: 12px;\n          padding-inline-start: initial;\n        }\n        .handle ha-svg-icon {\n          pointer-events: none;\n          height: 24px;\n        }\n        .optioncontent {\n          display: flex;\n          align-items: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_select-form\": HaInputSelectForm;\n  }\n}\n"],"names":["HaInputSelectForm","LitElement","_optionMoved","ev","stopPropagation","oldIndex","newIndex","detail","options","_options","concat","option","splice","fireEvent","value","Object","assign","_item","item","this","_name","name","_icon","icon","focus","updateComplete","then","_this$shadowRoot","shadowRoot","querySelector","render","hass","html","_t","_","localize","_valueChanged","length","repeat","index","_t2","_removeOption","_t3","_handleKeyAdd","_addOption","nothing","key","input","_optionInput","target","showConfirmationDialog","title","text","destructive","_ev$detail","new","configValue","newValue","styles","haStyle","css","_t4","args","attribute","type","Boolean"],"mappings":"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"}