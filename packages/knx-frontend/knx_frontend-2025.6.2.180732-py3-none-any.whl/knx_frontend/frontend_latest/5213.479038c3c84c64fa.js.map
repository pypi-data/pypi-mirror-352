{"version":3,"file":"5213.479038c3c84c64fa.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/panels/config/helpers/forms/ha-input_number-form.ts"],"sourcesContent":["import type { CSSResultGroup } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-expansion-panel\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-icon-picker\";\nimport \"../../../../components/ha-radio\";\nimport type { HaRadio } from \"../../../../components/ha-radio\";\nimport \"../../../../components/ha-textfield\";\nimport type { InputNumber } from \"../../../../data/input_number\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-input_number-form\")\nclass HaInputNumberForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public new = false;\n\n  private _item?: Partial<InputNumber>;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _max?: number;\n\n  @state() private _min?: number;\n\n  @state() private _mode?: string;\n\n  @state() private _step?: number;\n\n  // eslint-disable-next-line: variable-name\n  @state() private _unit_of_measurement?: string;\n\n  /* Configuring initial value is intentionally not supported because the behavior\n     compared to restoring the value after restart is hard to explain */\n  set item(item: InputNumber) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._max = item.max ?? 100;\n      this._min = item.min ?? 0;\n      this._mode = item.mode || \"slider\";\n      this._step = item.step ?? 1;\n      this._unit_of_measurement = item.unit_of_measurement;\n    } else {\n      this._item = {\n        min: 0,\n        max: 100,\n      };\n      this._name = \"\";\n      this._icon = \"\";\n      this._max = 100;\n      this._min = 0;\n      this._mode = \"slider\";\n      this._step = 1;\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render() {\n    if (!this.hass) {\n      return nothing;\n    }\n\n    return html`\n      <div class=\"form\">\n        <ha-textfield\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @input=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          autoValidate\n          required\n          .validationMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          dialogInitialFocus\n        ></ha-textfield>\n        <ha-icon-picker\n          .hass=${this.hass}\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-picker>\n        <ha-textfield\n          .value=${this._min}\n          .configValue=${\"min\"}\n          type=\"number\"\n          step=\"any\"\n          @input=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.input_number.min\"\n          )}\n        ></ha-textfield>\n        <ha-textfield\n          .value=${this._max}\n          .configValue=${\"max\"}\n          type=\"number\"\n          step=\"any\"\n          @input=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.input_number.max\"\n          )}\n        ></ha-textfield>\n        <ha-expansion-panel\n          header=${this.hass.localize(\n            \"ui.dialogs.helper_settings.generic.advanced_settings\"\n          )}\n          outlined\n        >\n          <div class=\"layout horizontal center justified\">\n            ${this.hass.localize(\n              \"ui.dialogs.helper_settings.input_number.mode\"\n            )}\n            <ha-formfield\n              .label=${this.hass.localize(\n                \"ui.dialogs.helper_settings.input_number.slider\"\n              )}\n            >\n              <ha-radio\n                name=\"mode\"\n                value=\"slider\"\n                .checked=${this._mode === \"slider\"}\n                @change=${this._modeChanged}\n              ></ha-radio>\n            </ha-formfield>\n            <ha-formfield\n              .label=${this.hass.localize(\n                \"ui.dialogs.helper_settings.input_number.box\"\n              )}\n            >\n              <ha-radio\n                name=\"mode\"\n                value=\"box\"\n                .checked=${this._mode === \"box\"}\n                @change=${this._modeChanged}\n              ></ha-radio>\n            </ha-formfield>\n          </div>\n          <ha-textfield\n            .value=${this._step}\n            .configValue=${\"step\"}\n            type=\"number\"\n            step=\"any\"\n            @input=${this._valueChanged}\n            .label=${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_number.step\"\n            )}\n          ></ha-textfield>\n\n          <ha-textfield\n            .value=${this._unit_of_measurement || \"\"}\n            .configValue=${\"unit_of_measurement\"}\n            @input=${this._valueChanged}\n            .label=${this.hass!.localize(\n              \"ui.dialogs.helper_settings.input_number.unit_of_measurement\"\n            )}\n          ></ha-textfield>\n        </ha-expansion-panel>\n      </div>\n    `;\n  }\n\n  private _modeChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, mode: (ev.target as HaRadio).value },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const target = ev.target as any;\n    const configValue = target.configValue;\n    const value =\n      target.type === \"number\"\n        ? Number(target.value)\n        : ev.detail?.value || target.value;\n\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (value === undefined || value === \"\") {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n\n        ha-textfield {\n          display: block;\n          margin-bottom: 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input_number-form\": HaInputNumberForm;\n  }\n}\n"],"names":["HaInputNumberForm","LitElement","item","this","_item","_name","name","_icon","icon","_max","max","_min","min","_mode","mode","_step","step","_unit_of_measurement","unit_of_measurement","focus","updateComplete","then","shadowRoot","querySelector","render","hass","html","_valueChanged","localize","_modeChanged","nothing","ev","fireEvent","value","target","new","stopPropagation","configValue","type","Number","detail","newValue","undefined","styles","haStyle","css","args","attribute","Boolean"],"mappings":"qMAcA,MAAAA,UAAAC,EAAAA,GAwBsE,QAAAC,CAAAA,GAElEC,KAAAC,MAAAF,EACAA,GACEC,KAAAE,MAAAH,EAAAI,MAAA,GACAH,KAAAI,MAAAL,EAAAM,MAAA,GACAL,KAAAM,KAAAP,EAAAQ,KAAA,IACAP,KAAAQ,KAAAT,EAAAU,KAAA,EACAT,KAAAU,MAAAX,EAAAY,MAAA,SACAX,KAAAY,MAAAb,EAAAc,MAAA,EACAb,KAAAc,qBAAAf,EAAAgB,sBAEAf,KAAAC,MAAA,CACEQ,IAAA,EACAF,IAAA,KAEFP,KAAAE,MAAA,GACAF,KAAAI,MAAA,GACAJ,KAAAM,KAAA,IACAN,KAAAQ,KAAA,EACAR,KAAAU,MAAA,SACAV,KAAAY,MAAA,EAEJ,CAEOI,KAAAA,GACLhB,KAAAiB,eAAAC,MAAA,IAAAlB,KAAAmB,YAAAC,cAAA,yBAAAJ,SAKF,CAEUK,MAAAA,GACR,OAAKrB,KAALsB,KAIAC,EAAAA,EAAA;;;mBAGa,KAAArB;yBACM;mBACN,KAAAsB;mBACA,KAAAF,KAAAG,SAAA;;;+BAKY,KAAAH,KAAAG,SAAA;;;;kBAMb,KAAAH;mBACC,KAAAlB;yBACM;2BACE,KAAAoB;mBACR,KAAAF,KAAAG,SAAA;;;mBAKA,KAAAjB;yBACM;;;mBAGN,KAAAgB;mBACA,KAAAF,KAAAG,SAAA;;;mBAKA,KAAAnB;yBACM;;;mBAGN,KAAAkB;mBACA,KAAAF,KAAAG,SAAA;;;mBAKA,KAAAH,KAAAG,SAAA;;;;cAML,KAAAH,KAAAG,SAAA;;uBAIS,KAAAH,KAAAG,SAAA;;;;;2BAOI,gBAAAf;0BACD,KAAAgB;;;;uBAIH,KAAAJ,KAAAG,SAAA;;;;;2BAOI,aAAAf;0BACD,KAAAgB;;;;;qBAKL,KAAAd;2BACM;;;qBAGN,KAAAY;qBACA,KAAAF,KAAAG,SAAA;;;;qBAMA,KAAAX,sBAAA;2BACM;qBACN,KAAAU;qBACA,KAAAF,KAAAG,SAAA;;;;MAlGbE,EAAAA,EAyGJ,CAEQD,YAAAA,CAAAE,IACNC,EAAAA,EAAAA,GAAA,sBACEC,MAAA,IAAY9B,KAAHC,MAAeU,KAAAiB,EAAAG,OAAAD,QAE5B,CAEQN,aAAAA,CAAAI,GACN,IAAK5B,KAALgC,MAAA,KAAA/B,MACE,OAEF2B,EAAAK,kBACA,MAAAF,EAAAH,EAAAG,OACAG,EAAAH,EAAAG,YACAJ,EAAA,WAAAC,EAAAI,KAAAC,OAAAL,EAAAD,OAAAF,EAAAS,QAAAP,OAAAC,EAAAD,MAKA,GAAI9B,KAAK,IAATkC,OAAAJ,EACE,OAEF,MAAAQ,EAAA,IAAsBtC,KAAHC,YACnBsC,IAAAT,GAAA,KAAAA,SACEQ,EAAAJ,GAEAI,EAAAJ,GAAAJ,GAEFD,EAAAA,EAAAA,GAAA,sBACEC,MAAAQ,GAEJ,CAEA,iBAAAE,GACE,MAAO,CACLC,EAAAA,GACAC,EAAAA,EAAA;;;;;;;;;QAWJ,C,kBApNF,SAAAC,GAAA,KAAAX,KAAA,C,8BAEcY,WAAA,K,uDAEAT,KAAAU,W"}