{"version":3,"file":"476.0f33a995d6cb0e94.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/panels/config/helpers/forms/ha-timer-form.ts"],"sourcesContent":["import type { CSSResultGroup } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-checkbox\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-icon-picker\";\nimport \"../../../../components/ha-textfield\";\nimport type { DurationDict, Timer } from \"../../../../data/timer\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-timer-form\")\nclass HaTimerForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public new = false;\n\n  private _item?: Timer;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _duration!: string | number | DurationDict;\n\n  @state() private _restore!: boolean;\n\n  set item(item: Timer) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._duration = item.duration || \"00:00:00\";\n      this._restore = item.restore || false;\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._duration = \"00:00:00\";\n      this._restore = false;\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render() {\n    if (!this.hass) {\n      return nothing;\n    }\n\n    return html`\n      <div class=\"form\">\n        <ha-textfield\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @input=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          autoValidate\n          required\n          .validationMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          dialogInitialFocus\n        ></ha-textfield>\n        <ha-icon-picker\n          .hass=${this.hass}\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-picker>\n        <ha-textfield\n          .configValue=${\"duration\"}\n          .value=${this._duration}\n          @input=${this._valueChanged}\n          .label=${this.hass.localize(\n            \"ui.dialogs.helper_settings.timer.duration\"\n          )}\n        ></ha-textfield>\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.dialogs.helper_settings.timer.restore\"\n          )}\n        >\n          <ha-checkbox\n            .configValue=${\"restore\"}\n            .checked=${this._restore}\n            @click=${this._toggleRestore}\n          >\n          </ha-checkbox>\n        </ha-formfield>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail?.value || (ev.target as any).value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  private _toggleRestore() {\n    this._restore = !this._restore;\n    fireEvent(this, \"value-changed\", {\n      value: { ...this._item, restore: this._restore },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n        ha-textfield {\n          display: block;\n          margin: 8px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-timer-form\": HaTimerForm;\n  }\n}\n"],"names":["HaTimerForm","LitElement","item","this","_item","_name","name","_icon","icon","_duration","duration","_restore","restore","focus","updateComplete","then","shadowRoot","querySelector","render","hass","html","_valueChanged","localize","_toggleRestore","nothing","ev","new","stopPropagation","configValue","target","value","detail","newValue","fireEvent","styles","haStyle","css","args","attribute","type","Boolean"],"mappings":"2LAYA,MAAAA,UAAAC,EAAAA,GAgBE,QAAAC,CAAAA,GACEC,KAAAC,MAAAF,EACAA,GACEC,KAAAE,MAAAH,EAAAI,MAAA,GACAH,KAAAI,MAAAL,EAAAM,MAAA,GACAL,KAAAM,UAAAP,EAAAQ,UAAA,WACAP,KAAAQ,SAAAT,EAAAU,UAAA,IAEAT,KAAAE,MAAA,GACAF,KAAAI,MAAA,GACAJ,KAAAM,UAAA,WACAN,KAAAQ,UAAA,EAEJ,CAEOE,KAAAA,GACLV,KAAAW,eAAAC,MAAA,IAAAZ,KAAAa,YAAAC,cAAA,yBAAAJ,SAKF,CAEUK,MAAAA,GACR,OAAKf,KAALgB,KAIAC,EAAAA,EAAA;;;mBAGa,KAAAf;yBACM;mBACN,KAAAgB;mBACA,KAAAF,KAAAG,SAAA;;;+BAKY,KAAAH,KAAAG,SAAA;;;;kBAMb,KAAAH;mBACC,KAAAZ;yBACM;2BACE,KAAAc;mBACR,KAAAF,KAAAG,SAAA;;;yBAKM;mBACN,KAAAb;mBACA,KAAAY;mBACA,KAAAF,KAAAG,SAAA;;;mBAKA,KAAAH,KAAAG,SAAA;;;2BAKQ;uBACJ,KAAAX;qBACF,KAAAY;;;;;MA5CbC,EAAAA,EAkDJ,CAEQH,aAAAA,CAAAI,GACN,IAAKtB,KAALuB,MAAA,KAAAtB,MACE,OAEFqB,EAAAE,kBACA,MAAAC,EAAAH,EAAAI,OAAAD,YACAE,EAAAL,EAAAM,QAAAD,OAAAL,EAAAI,OAAAC,MACA,GAAI3B,KAAK,IAATyB,OAAAE,EACE,OAEF,MAAAE,EAAA,IAAsB7B,KAAHC,OACnB0B,EAGEE,EAAAJ,GAAAE,SAFAE,EAAAJ,IAIFK,EAAAA,EAAAA,GAAA,sBACEH,MAAAE,GAEJ,CAEQT,cAAAA,GACNpB,KAAAQ,UAAAR,KAAAQ,UACAsB,EAAAA,EAAAA,GAAA,sBACEH,MAAA,IAAY3B,KAAHC,MAAeQ,QAAA,KAAAD,WAE5B,CAEA,iBAAAuB,GACE,MAAO,CACLC,EAAAA,GACAC,EAAAA,EAAA;;;;;;;;QAUJ,C,kBAtIF,SAAAC,GAAA,KAAAX,KAAA,C,8BAEcY,WAAA,K,uDAEAC,KAAAC,W"}