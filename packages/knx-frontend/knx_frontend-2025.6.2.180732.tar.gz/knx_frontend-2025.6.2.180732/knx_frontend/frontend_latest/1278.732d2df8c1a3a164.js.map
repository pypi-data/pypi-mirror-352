{"version":3,"file":"1278.732d2df8c1a3a164.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-aliases-editor.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-floor-icon.ts","webpack://knx-frontend/./homeassistant-frontend/src/panels/config/areas/show-dialog-floor-registry-detail.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-floor-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/floor_registry.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/sensor.ts","webpack://knx-frontend/./homeassistant-frontend/src/panels/config/areas/dialog-area-registry-detail.ts"],"sourcesContent":["import { LitElement, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-multi-textfield\";\n\n@customElement(\"ha-aliases-editor\")\nclass AliasesEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Array }) public aliases!: string[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render() {\n    if (!this.aliases) {\n      return nothing;\n    }\n\n    return html`\n      <ha-multi-textfield\n        .hass=${this.hass}\n        .value=${this.aliases}\n        .disabled=${this.disabled}\n        .label=${this.hass!.localize(\"ui.dialogs.aliases.label\")}\n        .removeLabel=${this.hass!.localize(\"ui.dialogs.aliases.remove\")}\n        .addLabel=${this.hass!.localize(\"ui.dialogs.aliases.add\")}\n        item-index\n        @value-changed=${this._aliasesChanged}\n      >\n      </ha-multi-textfield>\n    `;\n  }\n\n  private _aliasesChanged(value) {\n    fireEvent(this, \"value-changed\", { value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-aliases-editor\": AliasesEditor;\n  }\n}\n","import {\n  mdiHome,\n  mdiHomeFloor0,\n  mdiHomeFloor1,\n  mdiHomeFloor2,\n  mdiHomeFloor3,\n  mdiHomeFloorNegative1,\n} from \"@mdi/js\";\nimport { LitElement, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { FloorRegistryEntry } from \"../data/floor_registry\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\nexport const floorDefaultIconPath = (\n  floor: Pick<FloorRegistryEntry, \"level\">\n) => {\n  switch (floor.level) {\n    case 0:\n      return mdiHomeFloor0;\n    case 1:\n      return mdiHomeFloor1;\n    case 2:\n      return mdiHomeFloor2;\n    case 3:\n      return mdiHomeFloor3;\n    case -1:\n      return mdiHomeFloorNegative1;\n  }\n  return mdiHome;\n};\n\n@customElement(\"ha-floor-icon\")\nexport class HaFloorIcon extends LitElement {\n  @property({ attribute: false }) public floor!: Pick<\n    FloorRegistryEntry,\n    \"icon\" | \"level\"\n  >;\n\n  @property() public icon?: string;\n\n  protected render() {\n    if (this.floor.icon) {\n      return html`<ha-icon .icon=${this.floor.icon}></ha-icon>`;\n    }\n    const defaultPath = floorDefaultIconPath(this.floor);\n\n    return html`<ha-svg-icon .path=${defaultPath}></ha-svg-icon>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-floor-icon\": HaFloorIcon;\n  }\n}\n","import { fireEvent } from \"../../../common/dom/fire_event\";\nimport type {\n  FloorRegistryEntry,\n  FloorRegistryEntryMutableParams,\n} from \"../../../data/floor_registry\";\n\nexport interface FloorRegistryDetailDialogParams {\n  entry?: FloorRegistryEntry;\n  suggestedName?: string;\n  createEntry?: (\n    values: FloorRegistryEntryMutableParams,\n    addedAreas: Set<string>\n  ) => Promise<unknown>;\n  updateEntry?: (\n    updates: Partial<FloorRegistryEntryMutableParams>,\n    addedAreas: Set<string>,\n    removedAreas: Set<string>\n  ) => Promise<unknown>;\n}\n\nexport const loadFloorRegistryDetailDialog = () =>\n  import(\"./dialog-floor-registry-detail\");\n\nexport const showFloorRegistryDetailDialog = (\n  element: HTMLElement,\n  systemLogDetailParams: FloorRegistryDetailDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"dialog-floor-registry-detail\",\n    dialogImport: loadFloorRegistryDetailDialog,\n    dialogParams: systemLogDetailParams,\n  });\n};\n","import { mdiPlus, mdiTextureBox } from \"@mdi/js\";\nimport type { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport type { TemplateResult } from \"lit\";\nimport { LitElement, html } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport { computeFloorName } from \"../common/entity/compute_floor_name\";\nimport { updateAreaRegistryEntry } from \"../data/area_registry\";\nimport type {\n  DeviceEntityDisplayLookup,\n  DeviceRegistryEntry,\n} from \"../data/device_registry\";\nimport { getDeviceEntityDisplayLookup } from \"../data/device_registry\";\nimport type { EntityRegistryDisplayEntry } from \"../data/entity_registry\";\nimport {\n  createFloorRegistryEntry,\n  getFloorAreaLookup,\n  type FloorRegistryEntry,\n} from \"../data/floor_registry\";\nimport { showAlertDialog } from \"../dialogs/generic/show-dialog-box\";\nimport { showFloorRegistryDetailDialog } from \"../panels/config/areas/show-dialog-floor-registry-detail\";\nimport type { HomeAssistant, ValueChangedEvent } from \"../types\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./device/ha-device-picker\";\nimport \"./ha-combo-box-item\";\nimport \"./ha-floor-icon\";\nimport \"./ha-generic-picker\";\nimport type { HaGenericPicker } from \"./ha-generic-picker\";\nimport \"./ha-icon-button\";\nimport type { PickerComboBoxItem } from \"./ha-picker-combo-box\";\nimport type { PickerValueRenderer } from \"./ha-picker-field\";\nimport \"./ha-svg-icon\";\n\nconst ADD_NEW_ID = \"___ADD_NEW___\";\n\ninterface FloorComboBoxItem extends PickerComboBoxItem {\n  floor?: FloorRegistryEntry;\n}\n\n@customElement(\"ha-floor-picker\")\nexport class HaFloorPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ type: Boolean, attribute: \"no-add\" })\n  public noAdd = false;\n\n  /**\n   * Show only floors with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no floors with entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only floors with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * List of floors to be excluded.\n   * @type {Array}\n   * @attr exclude-floors\n   */\n  @property({ type: Array, attribute: \"exclude-floors\" })\n  public excludeFloors?: string[];\n\n  @property({ attribute: false })\n  public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property({ attribute: false })\n  public entityFilter?: (entity: HassEntity) => boolean;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @query(\"ha-generic-picker\") private _picker?: HaGenericPicker;\n\n  public async open() {\n    await this.updateComplete;\n    await this._picker?.open();\n  }\n\n  // Recompute value renderer when the areas change\n  private _computeValueRenderer = memoizeOne(\n    (_haAreas: HomeAssistant[\"floors\"]): PickerValueRenderer =>\n      (value) => {\n        const floor = this.hass.floors[value];\n\n        if (!floor) {\n          return html`\n            <ha-svg-icon slot=\"start\" .path=${mdiTextureBox}></ha-svg-icon>\n            <span slot=\"headline\">${floor}</span>\n          `;\n        }\n\n        const floorName = floor ? computeFloorName(floor) : undefined;\n\n        return html`\n          <ha-floor-icon slot=\"start\" .floor=${floor}></ha-floor-icon>\n          <span slot=\"headline\">${floorName}</span>\n        `;\n      }\n  );\n\n  private _getFloors = memoizeOne(\n    (\n      haFloors: HomeAssistant[\"floors\"],\n      haAreas: HomeAssistant[\"areas\"],\n      haDevices: HomeAssistant[\"devices\"],\n      haEntities: HomeAssistant[\"entities\"],\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"],\n      deviceFilter: this[\"deviceFilter\"],\n      entityFilter: this[\"entityFilter\"],\n      excludeFloors: this[\"excludeFloors\"]\n    ): FloorComboBoxItem[] => {\n      const floors = Object.values(haFloors);\n      const areas = Object.values(haAreas);\n      const devices = Object.values(haDevices);\n      const entities = Object.values(haEntities);\n\n      let deviceEntityLookup: DeviceEntityDisplayLookup = {};\n      let inputDevices: DeviceRegistryEntry[] | undefined;\n      let inputEntities: EntityRegistryDisplayEntry[] | undefined;\n\n      if (\n        includeDomains ||\n        excludeDomains ||\n        includeDeviceClasses ||\n        deviceFilter ||\n        entityFilter\n      ) {\n        deviceEntityLookup = getDeviceEntityDisplayLookup(entities);\n        inputDevices = devices;\n        inputEntities = entities.filter((entity) => entity.area_id);\n\n        if (includeDomains) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return false;\n            }\n            return deviceEntityLookup[device.id].some((entity) =>\n              includeDomains.includes(computeDomain(entity.entity_id))\n            );\n          });\n          inputEntities = inputEntities!.filter((entity) =>\n            includeDomains.includes(computeDomain(entity.entity_id))\n          );\n        }\n\n        if (excludeDomains) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return true;\n            }\n            return entities.every(\n              (entity) =>\n                !excludeDomains.includes(computeDomain(entity.entity_id))\n            );\n          });\n          inputEntities = inputEntities!.filter(\n            (entity) =>\n              !excludeDomains.includes(computeDomain(entity.entity_id))\n          );\n        }\n\n        if (includeDeviceClasses) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return false;\n            }\n            return deviceEntityLookup[device.id].some((entity) => {\n              const stateObj = this.hass.states[entity.entity_id];\n              if (!stateObj) {\n                return false;\n              }\n              return (\n                stateObj.attributes.device_class &&\n                includeDeviceClasses.includes(stateObj.attributes.device_class)\n              );\n            });\n          });\n          inputEntities = inputEntities!.filter((entity) => {\n            const stateObj = this.hass.states[entity.entity_id];\n            return (\n              stateObj.attributes.device_class &&\n              includeDeviceClasses.includes(stateObj.attributes.device_class)\n            );\n          });\n        }\n\n        if (deviceFilter) {\n          inputDevices = inputDevices!.filter((device) =>\n            deviceFilter!(device)\n          );\n        }\n\n        if (entityFilter) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return false;\n            }\n            return deviceEntityLookup[device.id].some((entity) => {\n              const stateObj = this.hass.states[entity.entity_id];\n              if (!stateObj) {\n                return false;\n              }\n              return entityFilter(stateObj);\n            });\n          });\n          inputEntities = inputEntities!.filter((entity) => {\n            const stateObj = this.hass.states[entity.entity_id];\n            if (!stateObj) {\n              return false;\n            }\n            return entityFilter!(stateObj);\n          });\n        }\n      }\n\n      let outputFloors = floors;\n\n      let areaIds: string[] | undefined;\n\n      if (inputDevices) {\n        areaIds = inputDevices\n          .filter((device) => device.area_id)\n          .map((device) => device.area_id!);\n      }\n\n      if (inputEntities) {\n        areaIds = (areaIds ?? []).concat(\n          inputEntities\n            .filter((entity) => entity.area_id)\n            .map((entity) => entity.area_id!)\n        );\n      }\n\n      if (areaIds) {\n        const floorAreaLookup = getFloorAreaLookup(areas);\n        outputFloors = outputFloors.filter((floor) =>\n          floorAreaLookup[floor.floor_id]?.some((area) =>\n            areaIds!.includes(area.area_id)\n          )\n        );\n      }\n\n      if (excludeFloors) {\n        outputFloors = outputFloors.filter(\n          (floor) => !excludeFloors!.includes(floor.floor_id)\n        );\n      }\n\n      const items = outputFloors.map<FloorComboBoxItem>((floor) => {\n        const floorName = computeFloorName(floor);\n        return {\n          id: floor.floor_id,\n          primary: floorName,\n          floor: floor,\n          sorting_label: floor.level?.toString() || \"zzzzz\",\n          search_labels: [floorName, floor.floor_id, ...floor.aliases].filter(\n            (v): v is string => Boolean(v)\n          ),\n        };\n      });\n\n      return items;\n    }\n  );\n\n  private _rowRenderer: ComboBoxLitRenderer<FloorComboBoxItem> = (item) => html`\n    <ha-combo-box-item type=\"button\" compact>\n      ${item.icon_path\n        ? html`\n            <ha-svg-icon\n              slot=\"start\"\n              style=\"margin: 0 4px\"\n              .path=${item.icon_path}\n            ></ha-svg-icon>\n          `\n        : html`\n            <ha-floor-icon\n              slot=\"start\"\n              .floor=${item.floor}\n              style=\"margin: 0 4px\"\n            ></ha-floor-icon>\n          `}\n      <span slot=\"headline\">${item.primary}</span>\n    </ha-combo-box-item>\n  `;\n\n  private _getItems = () =>\n    this._getFloors(\n      this.hass.floors,\n      this.hass.areas,\n      this.hass.devices,\n      this.hass.entities,\n      this.includeDomains,\n      this.excludeDomains,\n      this.includeDeviceClasses,\n      this.deviceFilter,\n      this.entityFilter,\n      this.excludeFloors\n    );\n\n  private _allFloorNames = memoizeOne(\n    (floors: HomeAssistant[\"floors\"]) =>\n      Object.values(floors)\n        .map((floor) => computeFloorName(floor)?.toLowerCase())\n        .filter(Boolean) as string[]\n  );\n\n  private _getAdditionalItems = (\n    searchString?: string\n  ): PickerComboBoxItem[] => {\n    if (this.noAdd) {\n      return [];\n    }\n\n    const allFloors = this._allFloorNames(this.hass.floors);\n\n    if (searchString && !allFloors.includes(searchString.toLowerCase())) {\n      return [\n        {\n          id: ADD_NEW_ID + searchString,\n          primary: this.hass.localize(\n            \"ui.components.floor-picker.add_new_sugestion\",\n            {\n              name: searchString,\n            }\n          ),\n          icon_path: mdiPlus,\n        },\n      ];\n    }\n\n    return [\n      {\n        id: ADD_NEW_ID,\n        primary: this.hass.localize(\"ui.components.floor-picker.add_new\"),\n        icon_path: mdiPlus,\n      },\n    ];\n  };\n\n  protected render(): TemplateResult {\n    const placeholder =\n      this.placeholder ??\n      this.hass.localize(\"ui.components.floor-picker.floor\");\n\n    const valueRenderer = this._computeValueRenderer(this.hass.floors);\n\n    return html`\n      <ha-generic-picker\n        .hass=${this.hass}\n        .autofocus=${this.autofocus}\n        .label=${this.label}\n        .notFoundLabel=${this.hass.localize(\n          \"ui.components.floor-picker.no_match\"\n        )}\n        .placeholder=${placeholder}\n        .value=${this.value}\n        .getItems=${this._getItems}\n        .getAdditionalItems=${this._getAdditionalItems}\n        .valueRenderer=${valueRenderer}\n        .rowRenderer=${this._rowRenderer}\n        @value-changed=${this._valueChanged}\n      >\n      </ha-generic-picker>\n    `;\n  }\n\n  private _valueChanged(ev: ValueChangedEvent<string>) {\n    ev.stopPropagation();\n    const value = ev.detail.value;\n\n    if (!value) {\n      this._setValue(undefined);\n      return;\n    }\n\n    if (value.startsWith(ADD_NEW_ID)) {\n      this.hass.loadFragmentTranslation(\"config\");\n\n      const suggestedName = value.substring(ADD_NEW_ID.length);\n\n      showFloorRegistryDetailDialog(this, {\n        suggestedName: suggestedName,\n        createEntry: async (values, addedAreas) => {\n          try {\n            const floor = await createFloorRegistryEntry(this.hass, values);\n            addedAreas.forEach((areaId) => {\n              updateAreaRegistryEntry(this.hass, areaId, {\n                floor_id: floor.floor_id,\n              });\n            });\n            this._setValue(floor.floor_id);\n          } catch (err: any) {\n            showAlertDialog(this, {\n              title: this.hass.localize(\n                \"ui.components.floor-picker.failed_create_floor\"\n              ),\n              text: err.message,\n            });\n          }\n        },\n      });\n    }\n\n    this._setValue(value);\n  }\n\n  private _setValue(value?: string) {\n    this.value = value;\n    fireEvent(this, \"value-changed\", { value });\n    fireEvent(this, \"change\");\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-floor-picker\": HaFloorPicker;\n  }\n}\n","import { stringCompare } from \"../common/string/compare\";\nimport type { HomeAssistant } from \"../types\";\nimport type { AreaRegistryEntry } from \"./area_registry\";\nimport type { RegistryEntry } from \"./registry\";\n\nexport { subscribeAreaRegistry } from \"./ws-area_registry\";\n\nexport interface FloorRegistryEntry extends RegistryEntry {\n  floor_id: string;\n  name: string;\n  level: number | null;\n  icon: string | null;\n  aliases: string[];\n}\n\nexport type FloorAreaLookup = Record<string, AreaRegistryEntry[]>;\n\nexport interface FloorRegistryEntryMutableParams {\n  name: string;\n  level?: number | null;\n  icon?: string | null;\n  aliases?: string[];\n}\n\nexport const createFloorRegistryEntry = (\n  hass: HomeAssistant,\n  values: FloorRegistryEntryMutableParams\n) =>\n  hass.callWS<FloorRegistryEntry>({\n    type: \"config/floor_registry/create\",\n    ...values,\n  });\n\nexport const updateFloorRegistryEntry = (\n  hass: HomeAssistant,\n  floorId: string,\n  updates: Partial<FloorRegistryEntryMutableParams>\n) =>\n  hass.callWS<AreaRegistryEntry>({\n    type: \"config/floor_registry/update\",\n    floor_id: floorId,\n    ...updates,\n  });\n\nexport const deleteFloorRegistryEntry = (\n  hass: HomeAssistant,\n  floorId: string\n) =>\n  hass.callWS({\n    type: \"config/floor_registry/delete\",\n    floor_id: floorId,\n  });\n\nexport const getFloorAreaLookup = (\n  areas: AreaRegistryEntry[]\n): FloorAreaLookup => {\n  const floorAreaLookup: FloorAreaLookup = {};\n  for (const area of areas) {\n    if (!area.floor_id) {\n      continue;\n    }\n    if (!(area.floor_id in floorAreaLookup)) {\n      floorAreaLookup[area.floor_id] = [];\n    }\n    floorAreaLookup[area.floor_id].push(area);\n  }\n  return floorAreaLookup;\n};\n\nexport const floorCompare =\n  (entries?: FloorRegistryEntry[], order?: string[]) =>\n  (a: string, b: string) => {\n    const indexA = order ? order.indexOf(a) : -1;\n    const indexB = order ? order.indexOf(b) : -1;\n    if (indexA === -1 && indexB === -1) {\n      const nameA = entries?.[a]?.name ?? a;\n      const nameB = entries?.[b]?.name ?? b;\n      return stringCompare(nameA, nameB);\n    }\n    if (indexA === -1) {\n      return 1;\n    }\n    if (indexB === -1) {\n      return -1;\n    }\n    return indexA - indexB;\n  };\n","import type { HomeAssistant } from \"../types\";\n\nexport const SENSOR_DEVICE_CLASS_BATTERY = \"battery\";\nexport const SENSOR_DEVICE_CLASS_TIMESTAMP = \"timestamp\";\nexport const SENSOR_DEVICE_CLASS_TEMPERATURE = \"temperature\";\nexport const SENSOR_DEVICE_CLASS_HUMIDITY = \"humidity\";\n\nexport interface SensorDeviceClassUnits {\n  units: string[];\n}\n\nexport const getSensorDeviceClassConvertibleUnits = (\n  hass: HomeAssistant,\n  deviceClass: string\n): Promise<SensorDeviceClassUnits> =>\n  hass.callWS({\n    type: \"sensor/device_class_convertible_units\",\n    device_class: deviceClass,\n  });\n\nexport interface SensorNumericDeviceClasses {\n  numeric_device_classes: string[];\n}\n\nlet sensorNumericDeviceClassesCache:\n  | Promise<SensorNumericDeviceClasses>\n  | undefined;\n\nexport const getSensorNumericDeviceClasses = async (\n  hass: HomeAssistant\n): Promise<SensorNumericDeviceClasses> => {\n  if (sensorNumericDeviceClassesCache) {\n    return sensorNumericDeviceClassesCache;\n  }\n  sensorNumericDeviceClassesCache = hass.callWS({\n    type: \"sensor/numeric_device_classes\",\n  });\n  return sensorNumericDeviceClassesCache!;\n};\n","import type { CSSResultGroup } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-aliases-editor\";\nimport \"../../../components/ha-picture-upload\";\nimport type { HaPictureUpload } from \"../../../components/ha-picture-upload\";\nimport \"../../../components/ha-settings-row\";\nimport \"../../../components/ha-icon-picker\";\nimport \"../../../components/ha-floor-picker\";\nimport \"../../../components/entity/ha-entity-picker\";\nimport type { HaEntityPicker } from \"../../../components/entity/ha-entity-picker\";\nimport \"../../../components/ha-textfield\";\nimport \"../../../components/ha-labels-picker\";\nimport type {\n  AreaRegistryEntry,\n  AreaRegistryEntryMutableParams,\n} from \"../../../data/area_registry\";\nimport { deleteAreaRegistryEntry } from \"../../../data/area_registry\";\nimport type { CropOptions } from \"../../../dialogs/image-cropper-dialog/show-image-cropper-dialog\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant, ValueChangedEvent } from \"../../../types\";\nimport type { AreaRegistryDetailDialogParams } from \"./show-dialog-area-registry-detail\";\nimport {\n  SENSOR_DEVICE_CLASS_HUMIDITY,\n  SENSOR_DEVICE_CLASS_TEMPERATURE,\n} from \"../../../data/sensor\";\nimport { showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\n\nconst cropOptions: CropOptions = {\n  round: false,\n  type: \"image/jpeg\",\n  quality: 0.75,\n  aspectRatio: 1.78,\n};\n\nconst SENSOR_DOMAINS = [\"sensor\"];\nconst TEMPERATURE_DEVICE_CLASSES = [SENSOR_DEVICE_CLASS_TEMPERATURE];\nconst HUMIDITY_DEVICE_CLASSES = [SENSOR_DEVICE_CLASS_HUMIDITY];\n\nclass DialogAreaDetail extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _name!: string;\n\n  @state() private _aliases!: string[];\n\n  @state() private _labels!: string[];\n\n  @state() private _picture!: string | null;\n\n  @state() private _icon!: string | null;\n\n  @state() private _floor!: string | null;\n\n  @state() private _temperatureEntity!: string | null;\n\n  @state() private _humidityEntity!: string | null;\n\n  @state() private _error?: string;\n\n  @state() private _params?: AreaRegistryDetailDialogParams;\n\n  @state() private _submitting?: boolean;\n\n  public async showDialog(\n    params: AreaRegistryDetailDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    if (this._params.entry) {\n      this._name = this._params.entry.name;\n      this._aliases = this._params.entry.aliases;\n      this._labels = this._params.entry.labels;\n      this._picture = this._params.entry.picture;\n      this._icon = this._params.entry.icon;\n      this._floor = this._params.entry.floor_id;\n      this._temperatureEntity = this._params.entry.temperature_entity_id;\n      this._humidityEntity = this._params.entry.humidity_entity_id;\n    } else {\n      this._name = this._params.suggestedName || \"\";\n      this._aliases = [];\n      this._labels = [];\n      this._picture = null;\n      this._icon = null;\n      this._floor = null;\n      this._temperatureEntity = null;\n      this._humidityEntity = null;\n    }\n\n    await this.updateComplete;\n  }\n\n  public closeDialog(): void {\n    this._error = \"\";\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  private _renderSettings(entry: AreaRegistryEntry | undefined) {\n    return html`\n      ${entry\n        ? html`\n            <ha-settings-row>\n              <span slot=\"heading\">\n                ${this.hass.localize(\"ui.panel.config.areas.editor.area_id\")}\n              </span>\n              <span slot=\"description\"> ${entry.area_id} </span>\n            </ha-settings-row>\n          `\n        : nothing}\n\n      <ha-textfield\n        .value=${this._name}\n        @input=${this._nameChanged}\n        .label=${this.hass.localize(\"ui.panel.config.areas.editor.name\")}\n        .validationMessage=${this.hass.localize(\n          \"ui.panel.config.areas.editor.name_required\"\n        )}\n        required\n        dialogInitialFocus\n      ></ha-textfield>\n\n      <ha-icon-picker\n        .hass=${this.hass}\n        .value=${this._icon}\n        @value-changed=${this._iconChanged}\n        .label=${this.hass.localize(\"ui.panel.config.areas.editor.icon\")}\n      ></ha-icon-picker>\n\n      <ha-floor-picker\n        .hass=${this.hass}\n        .value=${this._floor}\n        @value-changed=${this._floorChanged}\n        .label=${this.hass.localize(\"ui.panel.config.areas.editor.floor\")}\n      ></ha-floor-picker>\n\n      <ha-labels-picker\n        .hass=${this.hass}\n        .value=${this._labels}\n        @value-changed=${this._labelsChanged}\n        .placeholder=${this.hass.localize(\n          \"ui.panel.config.areas.editor.add_labels\"\n        )}\n      ></ha-labels-picker>\n\n      <ha-picture-upload\n        .hass=${this.hass}\n        .value=${this._picture}\n        crop\n        select-media\n        .cropOptions=${cropOptions}\n        @change=${this._pictureChanged}\n      ></ha-picture-upload>\n    `;\n  }\n\n  private _renderAliasExpansion() {\n    return html`\n      <ha-expansion-panel\n        outlined\n        .header=${this.hass.localize(\n          \"ui.panel.config.areas.editor.aliases_section\"\n        )}\n        expanded\n      >\n        <div class=\"content\">\n          <p class=\"description\">\n            ${this.hass.localize(\n              \"ui.panel.config.areas.editor.aliases_description\"\n            )}\n          </p>\n          <ha-aliases-editor\n            .hass=${this.hass}\n            .aliases=${this._aliases}\n            @value-changed=${this._aliasesChanged}\n          ></ha-aliases-editor>\n        </div>\n      </ha-expansion-panel>\n    `;\n  }\n\n  private _renderRelatedEntitiesExpansion() {\n    return html`\n      <ha-expansion-panel\n        outlined\n        .header=${this.hass.localize(\n          \"ui.panel.config.areas.editor.related_entities_section\"\n        )}\n        expanded\n      >\n        <div class=\"content\">\n          <ha-entity-picker\n            .hass=${this.hass}\n            .label=${this.hass.localize(\n              \"ui.panel.config.areas.editor.temperature_entity\"\n            )}\n            .helper=${this.hass.localize(\n              \"ui.panel.config.areas.editor.temperature_entity_description\"\n            )}\n            .value=${this._temperatureEntity}\n            .includeDomains=${SENSOR_DOMAINS}\n            .includeDeviceClasses=${TEMPERATURE_DEVICE_CLASSES}\n            .entityFilter=${this._areaEntityFilter}\n            @value-changed=${this._sensorChanged}\n          ></ha-entity-picker>\n\n          <ha-entity-picker\n            .hass=${this.hass}\n            .label=${this.hass.localize(\n              \"ui.panel.config.areas.editor.humidity_entity\"\n            )}\n            .helper=${this.hass.localize(\n              \"ui.panel.config.areas.editor.humidity_entity_description\"\n            )}\n            .value=${this._humidityEntity}\n            .includeDomains=${SENSOR_DOMAINS}\n            .includeDeviceClasses=${HUMIDITY_DEVICE_CLASSES}\n            .entityFilter=${this._areaEntityFilter}\n            @value-changed=${this._sensorChanged}\n          ></ha-entity-picker>\n        </div>\n      </ha-expansion-panel>\n    `;\n  }\n\n  protected render() {\n    if (!this._params) {\n      return nothing;\n    }\n    const entry = this._params.entry;\n    const nameInvalid = !this._isNameValid();\n    const isNew = !entry;\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          entry\n            ? this.hass.localize(\"ui.panel.config.areas.editor.update_area\")\n            : this.hass.localize(\"ui.panel.config.areas.editor.create_area\")\n        )}\n      >\n        <div>\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n            : \"\"}\n          <div class=\"form\">\n            ${this._renderSettings(entry)} ${this._renderAliasExpansion()}\n            ${!isNew ? this._renderRelatedEntitiesExpansion() : nothing}\n          </div>\n        </div>\n        ${!isNew\n          ? html`<ha-button\n              slot=\"secondaryAction\"\n              destructive\n              @click=${this._deleteArea}\n            >\n              ${this.hass.localize(\"ui.common.delete\")}\n            </ha-button>`\n          : nothing}\n        <div slot=\"primaryAction\">\n          <ha-button @click=${this.closeDialog}>\n            ${this.hass.localize(\"ui.common.cancel\")}\n          </ha-button>\n          <ha-button\n            @click=${this._updateEntry}\n            .disabled=${nameInvalid || this._submitting}\n          >\n            ${entry\n              ? this.hass.localize(\"ui.common.save\")\n              : this.hass.localize(\"ui.common.create\")}\n          </ha-button>\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private _isNameValid() {\n    return this._name.trim() !== \"\";\n  }\n\n  private _areaEntityFilter = (stateObj: HassEntity): boolean => {\n    const entityReg = this.hass.entities[stateObj.entity_id];\n    if (!entityReg) {\n      return false;\n    }\n    const areaId = this._params!.entry!.area_id;\n    if (entityReg.area_id === areaId) {\n      return true;\n    }\n    if (!entityReg.device_id) {\n      return false;\n    }\n    const deviceReg = this.hass.devices[entityReg.device_id];\n    return deviceReg && deviceReg.area_id === areaId;\n  };\n\n  private _nameChanged(ev) {\n    this._error = undefined;\n    this._name = ev.target.value;\n  }\n\n  private _floorChanged(ev) {\n    this._error = undefined;\n    this._floor = ev.detail.value;\n  }\n\n  private _iconChanged(ev) {\n    this._error = undefined;\n    this._icon = ev.detail.value;\n  }\n\n  private _labelsChanged(ev) {\n    this._error = undefined;\n    this._labels = ev.detail.value;\n  }\n\n  private _pictureChanged(ev: ValueChangedEvent<string | null>) {\n    this._error = undefined;\n    this._picture = (ev.target as HaPictureUpload).value;\n  }\n\n  private _aliasesChanged(ev: CustomEvent): void {\n    this._aliases = ev.detail.value;\n  }\n\n  private _sensorChanged(ev: CustomEvent): void {\n    const deviceClass = (ev.target as HaEntityPicker).includeDeviceClasses![0];\n    const key = `_${deviceClass}Entity`;\n    this[key] = ev.detail.value || null;\n  }\n\n  private async _updateEntry() {\n    const create = !this._params!.entry;\n    this._submitting = true;\n    try {\n      const values: AreaRegistryEntryMutableParams = {\n        name: this._name.trim(),\n        picture: this._picture || (create ? undefined : null),\n        icon: this._icon || (create ? undefined : null),\n        floor_id: this._floor || (create ? undefined : null),\n        labels: this._labels || null,\n        aliases: this._aliases,\n        temperature_entity_id: this._temperatureEntity,\n        humidity_entity_id: this._humidityEntity,\n      };\n      if (create) {\n        await this._params!.createEntry!(values);\n      } else {\n        await this._params!.updateEntry!(values);\n      }\n      this.closeDialog();\n    } catch (err: any) {\n      this._error =\n        err.message ||\n        this.hass.localize(\"ui.panel.config.areas.editor.unknown_error\");\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _deleteArea() {\n    if (!this._params?.entry) {\n      return;\n    }\n\n    const confirmed = await showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.areas.delete.confirmation_title\",\n        { name: this._params.entry.name }\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.areas.delete.confirmation_text\"\n      ),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n      confirmText: this.hass.localize(\"ui.common.delete\"),\n      destructive: true,\n    });\n    if (!confirmed) {\n      return;\n    }\n\n    await deleteAreaRegistryEntry(this.hass!, this._params!.entry!.area_id);\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-textfield {\n          display: block;\n        }\n        ha-expansion-panel {\n          --expansion-panel-content-padding: 0;\n        }\n        ha-aliases-editor,\n        ha-entity-picker,\n        ha-floor-picker,\n        ha-icon-picker,\n        ha-labels-picker,\n        ha-picture-upload,\n        ha-expansion-panel {\n          display: block;\n          margin-bottom: 16px;\n        }\n        ha-dialog {\n          --mdc-dialog-min-width: min(600px, 100vw);\n        }\n        .content {\n          padding: 12px;\n        }\n        .description {\n          margin: 0 0 16px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-area-registry-detail\": DialogAreaDetail;\n  }\n}\n\ncustomElements.define(\"dialog-area-registry-detail\", DialogAreaDetail);\n"],"names":["AliasesEditor","LitElement","render","this","aliases","html","hass","disabled","localize","_aliasesChanged","nothing","value","fireEvent","args","attribute","type","Array","Boolean","floorDefaultIconPath","floor","level","HaFloorIcon","icon","defaultPath","loadFloorRegistryDetailDialog","e","ADD_NEW_ID","HaFloorPicker","open","updateComplete","_picker","placeholder","valueRenderer","_computeValueRenderer","floors","autofocus","label","_getItems","_getAdditionalItems","_rowRenderer","_valueChanged","ev","stopPropagation","detail","startsWith","loadFragmentTranslation","suggestedName","substring","element","systemLogDetailParams","createEntry","values","addedAreas","createFloorRegistryEntry","forEach","areaId","updateAreaRegistryEntry","floor_id","_setValue","err","showAlertDialog","title","text","message","dialogTag","dialogImport","dialogParams","showFloorRegistryDetailDialog","undefined","noAdd","required","memoizeOne","_haAreas","floorName","computeFloorName","_getFloors","haFloors","haAreas","haDevices","haEntities","includeDomains","excludeDomains","includeDeviceClasses","deviceFilter","entityFilter","excludeFloors","Object","areas","devices","entities","inputDevices","inputEntities","deviceEntityLookup","getDeviceEntityDisplayLookup","filter","entity","area_id","device","devEntities","id","length","some","includes","computeDomain","entity_id","every","stateObj","states","attributes","device_class","areaIds","outputFloors","map","concat","floorAreaLookup","getFloorAreaLookup","area","primary","sorting_label","toString","search_labels","v","item","icon_path","_allFloorNames","toLowerCase","searchString","allFloors","name","mdiPlus","callWS","push","SENSOR_DEVICE_CLASS_TIMESTAMP","SENSOR_DEVICE_CLASS_TEMPERATURE","SENSOR_DEVICE_CLASS_HUMIDITY","cropOptions","round","quality","aspectRatio","SENSOR_DOMAINS","TEMPERATURE_DEVICE_CLASSES","HUMIDITY_DEVICE_CLASSES","DialogAreaDetail","showDialog","params","_params","_error","entry","_name","_aliases","_labels","labels","_picture","picture","_icon","_floor","_temperatureEntity","temperature_entity_id","_humidityEntity","humidity_entity_id","closeDialog","dialog","localName","_renderSettings","_nameChanged","_iconChanged","_floorChanged","_labelsChanged","_pictureChanged","_renderAliasExpansion","_renderRelatedEntitiesExpansion","_areaEntityFilter","_sensorChanged","nameInvalid","_isNameValid","isNew","createCloseHeading","_deleteArea","_updateEntry","_submitting","trim","target","create","updateEntry","showConfirmationDialog","dismissText","confirmText","destructive","deleteAreaRegistryEntry","styles","haStyleDialog","css","entityReg","device_id","deviceReg","customElements","define"],"mappings":"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"}