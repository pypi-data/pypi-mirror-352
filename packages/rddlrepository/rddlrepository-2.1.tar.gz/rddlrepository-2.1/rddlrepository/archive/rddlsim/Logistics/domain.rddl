////////////////////////////////////////////////////////////////////
// A logistics problem extended from the standard ``Box-Truck'' World 
//
// Author: Tom Walsh (thomasjwalsh [at] gmail.com)
////////////////////////////////////////////////////////////////////
domain logistics {
  
	requirements = { 
		continuous,  // this domain uses real-valued parameterized variables (pvariables)
		multivalued, 
		concurrent,  
		reward-deterministic, // this domain does not use a stochastic reward
		intermediate-nodes,   // this domain uses intermediate pvariable nodes
		constrained-state,    // this domain uses state constraints
		integer-valued
	};

	types {
  		truck : object;
 		city :  object;
		box : object;
		crowdlevel : {@low, @med, @high};
	};
      
	
	pvariables { 
    		  		
		MAX-DOCKED(city) : { non-fluent, int, default = 1 };
    	CAPACITY(truck) : { non-fluent, int, default = 1 };	  		
		DESTINATION(box, city) : { non-fluent, bool, default = false };	  						
		PROB_LOAD : {non-fluent, real, default = 1.0};  // actually, this would be interesting if per-truck
		PROB_UNLOAD : {non-fluent, real, default = 1.0};
		BIG_CROWD_PROB : {non-fluent, real, default = 0.0};
		MED_CROWD_PROB : {non-fluent, real, default = 0.5};
		LOW_CROWD_PROB : {non-fluent, real, default = 1.0};

		// State fluents
		truckAt(truck, city) : { state-fluent, bool, default = false };
		atDepot(truck, city) : { state-fluent, bool, default = false };
		boxInTruck(box, truck) :  { state-fluent, bool, default = false };
      	boxInCity(box, city) :  { state-fluent, bool, default = false };

		// Intemediate fluents
		numTrucksCity(city) : { interm-fluent, int, level = 1 };
      	numDocked(city) : { interm-fluent, int, level = 1 };
		boxFree(box) : { interm-fluent, bool, level = 1 };

		numTryingDock(city) : { interm-fluent, int, level = 2};
		cityStatusEnum(city) : { interm-fluent, crowdlevel, level = 2};
		
		truckStatusFrom(truck, city) : {interm-fluent, crowdlevel, level = 3};
		truckStatusTo(truck, city) : {interm-fluent, crowdlevel, level = 3};	
		dockSum(city) : { interm-fluent, int, level = 3};

		makesNext(truck, city) : { interm-fluent, bool, level = 4};
		dockStatus(city) : { interm-fluent, crowdlevel, level = 4};

		nextCity(truck, city) : { interm-fluent, bool, level = 5};

		// Action variables
		drive(truck, city) : { action-fluent, bool, default = false }; 
      	doDockAt(truck, city) : { action-fluent, bool, default = false }; 
		unload(truck, box) : { action-fluent, bool, default = false }; 				 
		load(truck, box)  : { action-fluent, bool, default = false };
		undock(truck, city) : { action-fluent, bool, default = false }; 

		// NOTE: Multiple actions variables...
		//
		// What if a domain had multiple actions like load(box,truck) and
		// drive(truck,city) in the BoxWorld logistics domain?  We would simply
		// define multiple boolean action variables with a default value of
		// false.  Then in the instance description (below), if only one of 
		// these actions could be executed at a time, we would specify 
		// max-nondef-actions = 1 (meaning all action variables would be
		// false in a state except for one).  If we let max-nondef-actions > 1, 
		// we could allow for concurrent actions (assuming that the cpfs were 
		// defined appropriately to handle action conflicts).
	};
  
	
	cpfs {
		numTrucksCity(?c) = (sum_{?t: truck}[truckAt(?t, ?c)]);
		numDocked(?c) = (sum_{?t: truck}[truckAt(?t, ?c) ^ atDepot(?t, ?c)]);
		boxFree(?b) = (forall_{?t : truck}[~boxInTruck(?b, ?t)]);		

		cityStatusEnum(?c) = if (numTrucksCity(?c) > 3) then @high else if(numTrucksCity(?c) >= 2) then @med else @low;
		numTryingDock(?c) = (sum_{?t : truck}[truckAt(?t, ?c) ^ ((atDepot(?t, ?c) ^ ~undock(?t, ?c)) | doDockAt(?t, ?c))]);	

		truckStatusFrom(?t, ?c) = if(truckAt(?t, ?c)) then cityStatusEnum(?c) else @low;
		truckStatusTo(?t, ?c) = if(drive(?t, ?c)) then cityStatusEnum(?c) else @low;
  
		dockSum(?c) = numTryingDock(?c) + numDocked(?c);

		makesNext(?t, ?c) = if(~drive(?t, ?c)) then false 
				    else if((truckStatusTo(?t, ?c) == @high) | (truckStatusFrom(?t, ?c) == @high)) then Bernoulli(BIG_CROWD_PROB)
				    else if ((truckStatusTo(?t, ?c)) == @med | (truckStatusFrom(?t, ?c) == @med)) then Bernoulli(MED_CROWD_PROB)
				    else Bernoulli(LOW_CROWD_PROB);

		nextCity(?t, ?c) = if(forall_{?c2 : city}[~drive(?t, ?c2)]) then truckAt(?t, ?c)
				   else if(makesNext(?t, ?c)) then true //drive is on
				   else if(forall_{?c2 : city}[~makesNext(?t, ?c2)]) then truckAt(?t, ?c)
				   else false;  //made it somewhere
		
		dockStatus(?c) = if (dockSum(?c) > 3) then @high else if(dockSum(?c) >= 2) then @med else @low;

		truckAt'(?t, ?c) = nextCity(?t, ?c);	
		
		//probability of docking or undocking is contingent on number docked or trying to dock
		atDepot'(?t, ?c) = 
					if(atDepot(?t, ?c) ^ ~undock(?t, ?c)) then true
					else if (atDepot(?t, ?c) ^ (undock(?t, ?c))) then
						switch(dockStatus(?c)){
							case @high : ~Bernoulli(BIG_CROWD_PROB),
							case @med : ~Bernoulli(MED_CROWD_PROB),
							case @low : ~Bernoulli(LOW_CROWD_PROB)
						}   
					else if(~atDepot(?t, ?c) ^  doDockAt(?t, ?c)) then
						switch(dockStatus(?c)){
							case @high : Bernoulli(BIG_CROWD_PROB),
							case @med :Bernoulli(MED_CROWD_PROB),
							case @low :Bernoulli(LOW_CROWD_PROB)
						}
					else false;
		
		boxInTruck'(?b, ?t) = ((boxInTruck(?b, ?t) ^ ~unload(?t, ?b))  |
					(unload(?t, ?b) ^ boxInTruck(?b, ?t) ^ ~Bernoulli(PROB_UNLOAD)) | 
					(load(?t, ?b) ^ Bernoulli(PROB_LOAD) ) ); 
		boxInCity'(?b, ?c) = ((boxInCity(?b, ?c) ^ boxFree(?b)) | ~boxFree(?b) ^ 
			(forall_{?t : truck}[ boxInTruck(?b, ?t) => nextCity(?t, ?c)]));
	};
  
	// This following is a deterministic reward as defined in the requirements.
	// It conditions on both state and action variables: +1 is given for every
	// computer running and a cost of -1 is given for every computer rebooted.
	reward = [sum_{?b : box} (sum_{?c : city} [boxInCity(?b, ?c) ^ DESTINATION(?b, ?c) ^ boxFree(?b)])];

	state-invariants {
		forall_{?t: truck} [(sum_{?c : city} truckAt(?t, ?c)) < 2];
		forall_{?t: truck} [forall_{?c : city} [atDepot(?t, ?c) => truckAt(?t, ?c)]];
		forall_{?t: truck} [(sum_{?c : city} atDepot(?t, ?c)) < 2];
	};
	
	action-preconditions {
		forall_{?t: truck} [forall_{?c : city}[drive(?t, ?c) => forall_{?c2 : city}[~atDepot(?t, ?c2)]]];
		
		//note with this you can't dock and undock 2 trucks in an otherwise full loading dock on the same turn
		forall_{?c : city} [(sum_{?t : truck} doDockAt(?t, ?c)) + (sum_{?t : truck} atDepot(?t, ?c)) <= MAX-DOCKED(?c)];  
		
		forall_{?c : city} [forall_{?t : truck} [undock(?t, ?c) => atDepot(?t, ?c)]];
		forall_{?t : truck} [forall_{?c : city} [doDockAt(?t, ?c) => truckAt(?t, ?c)]];
		forall_{?t : truck} [forall_{?b : box} [load(?t, ?b) => (forall_{?c : city}[truckAt(?t, ?c) 
			=> (boxInCity(?b, ?c) ^ (forall_{?t2 : truck}[~boxInTruck(?b, ?t2)]) ^ atDepot(?t, ?c))])]];
		forall_{?t : truck} [forall_{?b : box} [unload(?t, ?b) 
			=> (boxInTruck(?b, ?t) ^ (forall_{?c : city}[truckAt(?t, ?c) => atDepot(?t, ?c)]))]];        
		forall_{?b : box} [(sum_{?t : truck} load(?t, ?b)) < 2];
		forall_{?t: truck} [(sum_{?b: box} [boxInTruck(?b, ?t) + load(?t, ?b)]) <= CAPACITY(?t)];
  		forall_{?t : truck} [(sum_{?c : city} drive(?t, ?c) + doDockAt(?t, ?c) + undock(?t, ?c)) + 
			(sum_{?b : box} [load(?t, ?b) + unload(?t, ?b)]) < 2];	
	};

}