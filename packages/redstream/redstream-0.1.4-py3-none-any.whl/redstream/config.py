import logging
import json
import redis.asyncio as redis  # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Redis
import threading  # –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞

logger = logging.getLogger("redstream.redis_config")


class RedisConfig:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –≤ Redis —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞—â–∏—Ç—ã –æ—Ç –∑–∞–ø–∏—Å–∏, –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö."""

    READ_ONLY_KEY = "config_readonly"  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ read-only

    def __init__(self, redis_client, config_name):
        self.redis = redis_client
        self.config_name = config_name
        self.lock = threading.Lock()  # –ú—å—é—Ç–µ–∫—Å –¥–ª—è –∫–µ—à–∞
        self.config_cache = {}  # –ö–µ—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    async def is_read_only(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è'."""
        read_only = await self.redis.get(f"{self.config_name}:{self.READ_ONLY_KEY}")
        return read_only == "1"

    async def set_read_only(self, state: bool):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ '—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è'."""
        await self.redis.set(f"{self.config_name}:{self.READ_ONLY_KEY}", "1" if state else "0")
        logger.info(f"üîí [Redis] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {self.config_name} —Ç–µ–ø–µ—Ä—å {'—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è' if state else '–∏–∑–º–µ–Ω—è–µ–º–∞—è'}.")

    async def get(self, key, default=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É—è –¥–∞–Ω–Ω—ã–µ."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            with self.lock:
                if key in self.config_cache:
                    logger.info(f"üîç [Redis] {self.config_name}[{key}] (–∏–∑ –∫–µ—à–∞) -> {self.config_cache[key]}")
                    return self.config_cache[key]
            
            value = await self.redis.hget(self.config_name, key)
            if value is not None:
                value = json.loads(value)  # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
            with self.lock:
                if value is not None:
                    self.config_cache[key] = value

            logger.info(f"üîç [Redis] {self.config_name}[{key}] -> {value}")
            return value if value is not None else default
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è {key} –∏–∑ {self.config_name}: {e}")
            return default

    async def get_all(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            with self.lock:
                if self.config_cache:
                    logger.info(f"üîç [Redis] –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {self.config_name} (–∏–∑ –∫–µ—à–∞)")
                    return self.config_cache

            config = await self.redis.hgetall(self.config_name)
            deserialized_config = {k: json.loads(v) for k, v in config.items()}

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
            with self.lock:
                self.config_cache = deserialized_config

            logger.info(f"üîç [Redis] –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {self.config_name} -> {deserialized_config}")
            return deserialized_config
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_name}: {e}")
            return {}

    async def set(self, key, value):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ read-only."""
        if await self.is_read_only():
            logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ {key} –≤ –∑–∞—â–∏—â–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é {self.config_name}. –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
            return False
        try:
            serialized_value = json.dumps(value)  # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON
            await self.redis.hset(self.config_name, key, serialized_value)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
            with self.lock:
                self.config_cache[key] = value  

            logger.info(f"‚úÖ [Redis] {self.config_name}[{key}] = {value} (–∫–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω)")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {key} –≤ {self.config_name}: {e}")
            return False

    async def set_many(self, data: dict):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ read-only."""
        if await self.is_read_only():
            logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –∑–∞—â–∏—â–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é {self.config_name}. –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
            return False
        try:
            serialized_data = {k: json.dumps(v) for k, v in data.items()}  # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
            await self.redis.hset(self.config_name, mapping=serialized_data)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
            with self.lock:
                self.config_cache.update(data)

            logger.info(f"‚úÖ [Redis] –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã {self.config_name} -> {data} (–∫–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω)")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ {self.config_name}: {e}")
            return False

    async def delete(self, key):
        """–£–¥–∞–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä (–µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ read-only)."""
        if await self.is_read_only():
            logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {key} –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_name}. –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
            return False
        try:
            await self.redis.hdel(self.config_name, key)

            # –û—á–∏—â–∞–µ–º –∫–µ—à
            with self.lock:
                if key in self.config_cache:
                    del self.config_cache[key]

            logger.info(f"üóëÔ∏è [Redis] –£–¥–∞–ª–µ–Ω {key} –∏–∑ {self.config_name} (–∫–µ—à –æ—á–∏—â–µ–Ω)")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {key} –≤ {self.config_name}: {e}")
            return False

    def refresh_cache(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        try:
            with self.lock:
                config = self.redis.hgetall(self.config_name)
                self.config_cache = {k: json.loads(v) for k, v in config.items()}

            logger.info(f"üîÑ [Redis] –ö–µ—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_name} –æ–±–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ –¥–ª—è {self.config_name}: {e}")

    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫–µ—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        with self.lock:
            self.config_cache.clear()
        logger.info(f"üóëÔ∏è [Redis] –ö–µ—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_name} –æ—á–∏—â–µ–Ω")


class RedisConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤ Redis —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π read-only –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –º–∞—Å—Ç–µ—Ä-—Å–µ—Ä–≤–∏—Å–æ–º."""

    def __init__(self, redis_url="redis://localhost:6379/0"):
        self.redis = redis.from_url(redis_url, decode_responses=True)

    def get_config(self, config_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        return RedisConfig(self.redis, config_name)

    async def get(self, config_name, key, default=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        return await self.get_config(config_name).get(key, default)

    async def set(self, config_name, key, value):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ read-only."""
        return await self.get_config(config_name).set(key, value)

    async def set_many(self, config_name, data: dict):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ read-only."""
        return await self.get_config(config_name).set_many(data)

    async def delete(self, config_name, key):
        """–£–¥–∞–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ read-only."""
        return await self.get_config(config_name).delete(key)

    async def get_all(self, config_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
        return await self.get_config(config_name).get_all()

    async def set_read_only(self, config_name, state: bool):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º read-only –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        return await self.get_config(config_name).set_read_only(state)

    async def is_read_only(self, config_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è read-only."""
        return await self.get_config(config_name).is_read_only()

    async def publish_config(self, config_name, data: dict, read_only: bool = False):
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ Redis (—Ç–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä-—Å–µ—Ä–≤–∏—Å).
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å read-only –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
        """
        await self.get_config(config_name).set_many(data)
        if read_only:
            await self.set_read_only(config_name, True)
        logger.info(f"üì§ [Redis] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {config_name} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞. Read-only: {read_only}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
redis_config = RedisConfigManager()
