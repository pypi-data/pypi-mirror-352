import asyncio
import logging
import uuid
import redis.asyncio as redis
from redis.exceptions import ConnectionError, ResponseError
from .types.rs_message import RSMessage
import copy
import traceback

from .utils.logging_helpers import LoggerWithCaller
logger = LoggerWithCaller("redstream.redis_stream_router.request_handler")

def _sanitize_dict(data):
    """–°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∫–ª—é—á–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è Redis: –≤—Å—ë –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å str"""
    if not isinstance(data, dict):
        return {}

    sanitized = {}
    for k, v in data.items():
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–π
        if k is None:
            continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç.–∫. Redis –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–ª—é—á None
        key = str(k)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
        if v is None:
            sanitized[key] = ""
        elif isinstance(v, bool):
            sanitized[key] = "1" if v else "0"
        elif isinstance(v, (int, float, str, bytes)):
            sanitized[key] = v
        else:
            try:
                sanitized[key] = str(v)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ {v} ({type(v)}): {e}")
                sanitized[key] = ""

    return sanitized

async def send_request_with_timeout(
    redis_conn, redis_url, target_stream, rs_message: RSMessage,
    response_stream=None, timeout=10, max_retries=3
):
    # –°–æ–∑–¥–∞–µ–º –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç.
    msg = copy.deepcopy(rs_message)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º correlation_id, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –∫–æ–ø–∏–∏
    correlation_id = msg.correlation_id or str(uuid.uuid4())
    msg.correlation_id = correlation_id
    request_id = str(uuid.uuid4())
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ response_stream, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —è–≤–Ω–æ
    if response_stream is None:
        response_stream = f"response_stream_{request_id}"
    
    response_group = f"{response_stream}_group"
    consumer_name = f"consumer_{request_id}"
    
    # –ó–∞–¥–∞–µ–º response_stream —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–ø–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ—Ä–∏–≥–∏–Ω–∞–ª –æ—Å—Ç–∞–≤–∞–ª—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º
    msg.response_stream = response_stream
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∫–ª—é—á –≤ extra_data, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    if "response_stream" in msg.extra_data:
        logger.warning("‚ö†Ô∏è 'response_stream' –Ω–∞–π–¥–µ–Ω –≤ extra_data ‚Äî –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞.")
        msg.extra_data.pop("response_stream")
    
    response_redis_conn = None
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        response_redis_conn = redis.from_url(redis_url, decode_responses=True)
        
        try:
            await response_redis_conn.xgroup_create(response_stream, response_group, id="0", mkstream=True)
        except ResponseError as e:
            if "BUSYGROUP" not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è consumer group: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π target_stream
        for attempt in range(max_retries):
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏ —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                message_dict = msg.to_dict()
                sanitized_dict = _sanitize_dict(message_dict)
                
                logger.debug(f"sanitized_dict: {sanitized_dict}")

                for k, v in sanitized_dict.items():
                    if k is None:
                        logger.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–ª—é—á None –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Redis!")
                    elif v is None:
                        logger.error(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ None: –∫–ª—é—á='{k}'")
                    elif not isinstance(k, (str, bytes)):
                        logger.error(f"‚ùå –ö–ª—é—á –∏–º–µ–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø: {type(k)} ‚Äî {k}")
                    elif not isinstance(v, (str, bytes, int, float)):
                        logger.error(f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –∏–º–µ–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø: {type(v)} ‚Äî {k}={v}")

                if target_stream is None:
                    raise ValueError("‚ùå target_stream –Ω–µ –∑–∞–¥–∞–Ω! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Redis.")

                await redis_conn.xadd(target_stream, sanitized_dict)
                logger.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º {timeout} —Å–µ–∫—É–Ω–¥! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {target_stream} ‚Üí –æ—Ç–≤–µ—Ç –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ {response_stream}, correlation_id={correlation_id}")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                logger.debug(traceback.format_exc())
                if attempt == max_retries - 1:
                    return None
                await asyncio.sleep(0.5 * (2 ** attempt))
        
        # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            response = await asyncio.wait_for(
                _read_response(response_redis_conn, response_stream, response_group, consumer_name, correlation_id),
                timeout=timeout
            )
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –≤ {response_stream}, correlation_id={correlation_id}")
            return response
        except asyncio.TimeoutError:
            logger.warning(f"‚è≥ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ {response_stream}, correlation_id={correlation_id}")
            return None
    
    except Exception as e:
        logger.exception(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None
    
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if response_redis_conn:
            try:
                await response_redis_conn.xgroup_delconsumer(response_stream, response_group, consumer_name)
                await response_redis_conn.aclose()
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")


async def _read_response(redis_conn, stream, group, consumer, correlation_id):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏–∑ Redis Stream"""
    while True:
        try:
            messages = await redis_conn.xreadgroup(
                groupname=group,
                consumername=consumer,
                streams={stream: ">"},
                count=1,
                block=1000  # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º –≤ 1 —Å–µ–∫—É–Ω–¥—É
            )
            
            if not messages:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π asyncio.sleep –≤–º–µ—Å—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
                await asyncio.sleep(0.1)
                continue
                
            for stream_name, msg_list in messages:
                for msg_id, data in msg_list:
                    if (
                        str(data.get("correlation_id", "")) == correlation_id
                        and data.get("event_type") == "response"
                        #and data.get("message_id")
                    ):
                        await redis_conn.xack(stream_name, group, msg_id)
                        return RSMessage.from_dict(data)
                    else:
                        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Ç–æ, —á—Ç–æ –º—ã –∏—â–µ–º
                        await redis_conn.xack(stream_name, group, msg_id)
                        
        except ConnectionError as e:
            logger.warning(f"‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ: {e}")
            await asyncio.sleep(0.5)
        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
            await asyncio.sleep(0.5)

async def send_streaming_request(
    redis_conn, redis_url, target_stream, rs_message: RSMessage,
    response_stream=None, initial_timeout=5, max_retries=3, track_own_responses=True
):
    correlation_id = rs_message.correlation_id or str(uuid.uuid4())
    rs_message.correlation_id = correlation_id

    if response_stream is None:
        response_stream = f"response_stream_{correlation_id}"

    response_group = f"{response_stream}_group"
    consumer_name = f"consumer_{correlation_id}"

    # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    rs_message.response_stream = response_stream

    # üõ°Ô∏è –£–¥–∞–ª–∏–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∫–ª—é—á –≤ extra_data
    if "response_stream" in rs_message.extra_data:
        logger.warning("‚ö†Ô∏è 'response_stream' –Ω–∞–π–¥–µ–Ω –≤ extra_data ‚Äî –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞.")
        rs_message.extra_data.pop("response_stream")

    response_redis_conn = None
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏ —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        message_dict = rs_message.to_dict()
        sanitized_dict = _sanitize_dict(message_dict)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await redis_conn.xadd(target_stream, sanitized_dict)
        logger.info(f"üì§ –ü–æ—Ç–æ–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {target_stream} ‚Üí {response_stream}, correlation_id={correlation_id}")

        # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        response_redis_conn = redis.from_url(redis_url, decode_responses=True)
        
        try:
            await response_redis_conn.xgroup_create(response_stream, response_group, id="0", mkstream=True)
        except ResponseError as e:
            if "BUSYGROUP" not in str(e):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")

        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
        final_received = False
        while not final_received:
            try:
                messages = await response_redis_conn.xreadgroup(
                    groupname=response_group,
                    consumername=consumer_name,
                    streams={response_stream: ">"},
                    count=10,
                    block=2000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
                )
                
                if not messages:
                    continue
                    
                for stream, msg_list in messages:
                    for msg_id, data in msg_list:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—à–µ–º—É –ø–æ—Ç–æ–∫—É
                        if (
                            not track_own_responses
                            or str(data.get("correlation_id", "")) == correlation_id
                        ):
                            await response_redis_conn.xack(stream, response_group, msg_id)
                            message = RSMessage.from_dict(data)
                            yield message
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                            if data.get("final_chunk") == "1":
                                final_received = True
                                return
                        else:
                            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–∞–∂–µ –Ω–µ –Ω–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                            await response_redis_conn.xack(stream, response_group, msg_id)
                            
            except ConnectionError as e:
                logger.warning(f"‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            except Exception as e:
                logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                await asyncio.sleep(0.2)

    except GeneratorExit:
        logger.warning("üßπ –ü–æ—Ç–æ–∫ –ø—Ä–µ—Ä–≤–∞–Ω ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.")
        raise

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_streaming_request: {e}")

    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        if response_redis_conn:
            try:
                await response_redis_conn.xgroup_delconsumer(response_stream, response_group, consumer_name)
                await response_redis_conn.aclose()
                logger.debug("üîí Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
