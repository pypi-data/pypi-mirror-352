import os
import logging
import importlib
import pkgutil
import redis.asyncio as redis  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Redis
import traceback
from functools import wraps

logger = logging.getLogger("redstream.redis_handler")


class RedisHandlerRegistry:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Redis Stream."""

    def __init__(self, auto_register_package=None, redis_url="redis://localhost:6379/0"):
        self.handlers = {}  # –°–ª–æ–≤–∞—Ä—å: –ø–æ—Ç–æ–∫ -> —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.consumer_groups = {}  # –°–ª–æ–≤–∞—Ä—å: –ø–æ—Ç–æ–∫ -> consumer_group
        self.redis = redis.Redis.from_url(redis_url, decode_responses=True)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Redis

        if auto_register_package:
            self.auto_register_handlers(auto_register_package)

    def message(self, stream_name, consumer_group=None, filter_func=None):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Redis Stream."""
        def decorator(func):
            streams = stream_name if isinstance(stream_name, list) else [stream_name]

            for stream in streams:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è {stream}")
                if stream not in self.handlers:
                    self.handlers[stream] = []
                elif not isinstance(self.handlers[stream], list):
                    logger.warning(f"‚ö† self.handlers[{stream}] –±—ã–ª {type(self.handlers[stream])}, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫!")
                    self.handlers[stream] = [self.handlers[stream]]

                self.handlers[stream].append((func, filter_func))

                if consumer_group:
                    self.consumer_groups[stream] = consumer_group

                logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: {stream} -> {func.__name__} (consumer_group={consumer_group})")
            return func

        return decorator

    def get_handlers(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
        return self.handlers

    def get_consumer_groups(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ consumer_groups."""
        return self.consumer_groups

    def auto_register_handlers(self, package_name):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–æ –≤—Å–µ–º –ø–∞–∫–µ—Ç–µ –∏ –µ–≥–æ –ø–æ–¥–ø–∞–∫–µ—Ç–∞—Ö."""
        logger.info(f"üîç –ü–æ–∏—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ {package_name}...")

        try:
            package = importlib.import_module(package_name)
            package_path = package.__path__[0]  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–∫–µ—Ç—É
            for module_info in pkgutil.walk_packages([package_path], prefix=f"{package_name}."):
                module_name = module_info.name
                if module_name.endswith("__main__") or module_name.endswith("__init__"):
                    continue

                try:
                    logger.info(f"üì• –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {module_name}")
                    importlib.import_module(module_name)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ {module_name}: {e}")
                    logger.debug(traceback.format_exc())

        except ModuleNotFoundError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            logger.debug(traceback.format_exc())

        logger.info(f"‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫: {list(self.handlers.keys())}")


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
redis_handler = RedisHandlerRegistry()
