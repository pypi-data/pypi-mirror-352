import asyncio
import redis.asyncio as redis
import logging
import traceback
from typing import Optional

from .utils.logging_helpers import LoggerWithCaller

logger = LoggerWithCaller("redstream.redis_cache")


class RedisCache:
    """
    RedisCache ‚Äî –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Redis.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –∑–∞–ø–∏—Å—å –∏ —á—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –∫–ª—é—á—É
    - TTL (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏)
    - –ø—Ä–µ—Ñ–∏–∫—Å—ã (namespace)
    - –∞—Ç–æ–º–∞—Ä–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É (set if not exists)
    """

    def __init__(self, redis_url: str, prefix: str = "", default_ttl: int = 300):
        self.redis_url = redis_url
        self.prefix = prefix
        self.default_ttl = default_ttl
        self.redis_conn: Optional[redis.Redis] = None

    async def connect(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis"""
        self.redis_conn = redis.from_url(self.redis_url, decode_responses=True)
        logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {self.redis_url}")

    def make_key(self, key: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –∫ –∫–ª—é—á—É"""
        return f"{self.prefix}{key}"

    async def set(self, key: str, value: str, ttl: Optional[int] = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å TTL"""
        if not self.redis_conn:
            logger.error("‚ùå RedisCache: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            return

        try:
            full_key = self.make_key(key)
            await self.redis_conn.set(full_key, value, ex=ttl or self.default_ttl)
            logger.debug(f"üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–µ—à: {full_key} (TTL={ttl or self.default_ttl})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–∞: {e}")
            logger.debug(traceback.format_exc())

    async def get(self, key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É"""
        if not self.redis_conn:
            logger.error("‚ùå RedisCache: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            return None

        try:
            full_key = self.make_key(key)
            value = await self.redis_conn.get(full_key)
            logger.debug(f"üì• –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫–µ—à–∞: {full_key} ‚Üí {value}")
            return value
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞: {e}")
            logger.debug(traceback.format_exc())
            return None

    async def exists(self, key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞"""
        if not self.redis_conn:
            return False
        return await self.redis_conn.exists(self.make_key(key)) == 1

    async def delete(self, key: str):
        """–£–¥–∞–ª—è–µ—Ç –∫–ª—é—á –∏–∑ Redis"""
        if not self.redis_conn:
            return
        try:
            await self.redis_conn.delete(self.make_key(key))
            logger.debug(f"‚ùå –ö–ª—é—á —É–¥–∞–ª—ë–Ω: {self.make_key(key)}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞: {e}")
            logger.debug(traceback.format_exc())

    async def set_if_not_exists(self, key: str, value: str, ttl: Optional[int] = None) -> bool:
        """
        –ê—Ç–æ–º–∞—Ä–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.
        """
        if not self.redis_conn:
            return False

        try:
            full_key = self.make_key(key)
            success = await self.redis_conn.set(full_key, value, ex=ttl or self.default_ttl, nx=True)
            logger.debug(f"üîê set_if_not_exists({full_key}) ‚Üí {success}")
            return success
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ set_if_not_exists: {e}")
            logger.debug(traceback.format_exc())
            return False
