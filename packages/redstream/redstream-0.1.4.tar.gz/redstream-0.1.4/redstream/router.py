import asyncio
import logging
import redis.asyncio as redis
import traceback
from .types import RSMessage
from .consumer_group_manager import initialize_consumer_groups
from .request_handler import send_request_with_timeout, send_streaming_request, _sanitize_dict
import uuid

from .utils.logging_helpers import LoggerWithCaller
logger = LoggerWithCaller("redstream.redis_stream_router")

class RedisStreamRouter:
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏ Redis Streams."""

    def __init__(self, max_concurrent_requests=100):
        self.redis_url = None
        self.redis_conn = None  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ–∑–∂–µ
        self.source_streams = []
        self.consumer_groups = {}
        self.handlers = {}
        self.shutdown_event = asyncio.Event()
        self.queue = asyncio.Queue()
        self.tasks = []
        self.request_semaphore = asyncio.Semaphore(max_concurrent_requests)

    async def set_config(self, redis_url, redis_handler, package_name, source_streams=None, consumer_groups=None, consumer_group=None, handlers=None):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ RedisStreamRouter + –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis."""
        self.redis_url = redis_url
        self.redis_conn = redis.from_url(self.redis_url, decode_responses=True)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        redis_handler.auto_register_handlers(package_name)
        handlers = redis_handler.get_handlers()
        registered_consumer_groups = redis_handler.get_consumer_groups()
        logger.info(f"üîÑ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã: {handlers}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º source_streams
        if source_streams is not None:
            self.source_streams = source_streams
        elif consumer_groups is not None:
            self.source_streams = list(consumer_groups.keys())
        elif handlers is not None:
            self.source_streams = list(handlers.keys())

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º consumer_groups
        self.consumer_groups = {}
        for stream in self.source_streams:
            if stream in registered_consumer_groups:
                self.consumer_groups[stream] = registered_consumer_groups[stream]
            elif consumer_groups and stream in consumer_groups:
                self.consumer_groups[stream] = consumer_groups[stream]
            elif consumer_group:
                self.consumer_groups[stream] = consumer_group

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞
        missing_groups = [s for s in self.source_streams if s not in self.consumer_groups]
        if missing_groups:
            package_group = f"{package_name}_group" if package_name else "default_group"
            for stream in missing_groups:
                self.consumer_groups[stream] = package_group
            logger.warning(f"‚ö†Ô∏è –ü–æ—Ç–æ–∫–∏ {missing_groups} –Ω–µ –∏–º–µ–ª–∏ –≥—Ä—É–ø–ø. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `{package_group}`.")

        if handlers is not None:
            self.handlers = handlers

        await initialize_consumer_groups(self.redis_conn, self.consumer_groups)
        logger.info(f"üîÑ –ò—Ç–æ–≥–æ–≤—ã–π source_streams: {self.source_streams}")
        logger.info(f"üîÑ –ò—Ç–æ–≥–æ–≤—ã–π consumer_groups: {self.consumer_groups}")

    async def publish_message(self, target_stream, rs_message: RSMessage):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ Redis."""
        message = rs_message.to_dict()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        sanitized_message = _sanitize_dict(message)

        if not target_stream:
            logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ stream. RSMessage: {rs_message.to_json()}")
            return

        if not self.redis_conn:
            logger.error("üö® –û—à–∏–±–∫–∞: Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
            return

        try:
            await self.redis_conn.xadd(target_stream, sanitized_message)
            if not rs_message.response_stream and rs_message.event_type != "response":
                logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ response_stream –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {target_stream}: {sanitized_message}")
            else:
                logger.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {target_stream}: {sanitized_message}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {target_stream}: {e}")
            logger.debug(traceback.format_exc())

    async def read_messages(self, source_stream):
        """–ß–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–æ—Ç–æ–∫–∞ –∏ –ø–æ–º–µ—â–∞–µ—Ç –∏—Ö –≤ –æ—á–µ—Ä–µ–¥—å."""
        if not self.redis_conn:
            logger.error("üö® –û—à–∏–±–∫–∞: Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
            return

        group = self.consumer_groups[source_stream]
        consumer = f"{source_stream}_consumer"

        while not self.shutdown_event.is_set():
            try:
                messages = await self.redis_conn.xreadgroup(
                    groupname=group,
                    consumername=consumer,
                    streams={source_stream: ">"},
                    count=10,
                    block=2000
                )
                if messages:
                    for stream, msg_list in messages:
                        for message_id, message_data in msg_list:
                            await self.queue.put((stream, message_id, message_data))
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ {source_stream}: {e}")
                logger.debug(traceback.format_exc())

        logger.info(f"üõë –ß—Ç–µ–Ω–∏–µ –∏–∑ {source_stream} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")



    async def process_messages(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –≤—ã–∑—ã–≤–∞—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ."""
        while not self.shutdown_event.is_set():
            try:
                stream, message_id, message_data = await self.queue.get()
                logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {stream}: {message_data}")

                if stream not in self.handlers or not self.handlers[stream]:
                    logger.warning(f"‚ö† –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ—Ç–æ–∫–∞ {stream}")
                    continue

                rs_message = RSMessage.from_dict(message_data)
                rs_message.system_data = {
                    "message_id": message_id,
                    "stream": stream
                }

                handled = False

                for handler_func, filter_func in self.handlers[stream]:
                    try:
                        if filter_func and not filter_func(rs_message):
                            logger.info(f"‚è© –§–∏–ª—å—Ç—Ä '{handler_func.__name__}' –æ—Ç–∫–ª–æ–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message_data.get('message_id')}")
                            continue

                        logger.info(f"‚úÖ –§–∏–ª—å—Ç—Ä '{handler_func.__name__}' –ø—Ä–∏–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message_data.get('message_id')}")

                        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –≤ —Ñ–æ–Ω–µ
                        asyncio.create_task(self._run_handler(handler_func, rs_message, stream, message_id))
                        handled = True
                        break  # –Ω–µ –¥–æ–∂–∏–¥–∞–µ–º—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–≤–µ—Ä—è–µ–º _run_handler
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏/–∑–∞–ø—É—Å–∫–µ —Ö–µ–Ω–¥–ª–µ—Ä–∞ {handler_func.__name__}: {e}")
                        logger.debug(traceback.format_exc())

                if not handled:
                    logger.debug(f"‚è≠ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {stream} –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∏ –æ–¥–Ω–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")
                logger.debug(traceback.format_exc())



    async def _run_handler(self, handler_func, rs_message, stream, message_id):
        async with self.request_semaphore:
            try:
                result = await handler_func(rs_message)

                if result is True:
                    await self.redis_conn.xack(stream, self.consumer_groups[stream], message_id)
                    return

                correlation_id = rs_message.correlation_id

                if isinstance(result, RSMessage):
                    result = result.to_dict()

                if isinstance(result, dict):
                    for target_stream, result_data in result.items():
                        if correlation_id:
                            result_data.correlation_id = correlation_id

                        if isinstance(result_data, RSMessage):
                            msg_dict = result_data.to_dict()
                            sanitized_result = _sanitize_dict(msg_dict)
                            await self.redis_conn.xadd(target_stream, sanitized_result)
                        else:
                            sanitized_result = _sanitize_dict(result_data)
                            await self.redis_conn.xadd(target_stream, sanitized_result)

                    await self.redis_conn.xack(stream, self.consumer_groups[stream], message_id)
                else:
                    logger.debug(f"‚è≠ –•–µ–Ω–¥–ª–µ—Ä {handler_func.__name__} –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ {handler_func.__name__}: {e}")
                logger.debug(traceback.format_exc())



    async def send_request_with_timeout(self, target_stream, rs_message: RSMessage, response_stream=None, timeout=5, max_retries=3):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º.
        –û–±–µ—Ä—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ request_handler –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
        """
        async with self.request_semaphore:
            return await send_request_with_timeout(self.redis_conn, self.redis_url, target_stream, rs_message, response_stream, timeout, max_retries)

    async def send_streaming_request(
        self, target_stream, message, response_stream=None,
        initial_timeout=5, max_retries=3, track_own_responses=True
    ):
        """
        –ü–æ—Ç–æ–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏.
        –û–±–µ—Ä—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ request_handler —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.
        """
        async with self.request_semaphore:
            gen = send_streaming_request(
                self.redis_conn,
                self.redis_url,
                target_stream,
                message,
                response_stream,
                initial_timeout,
                max_retries,
                track_own_responses
            )
            try:
                async for response in gen:
                    yield response
            finally:
                await gen.aclose()

    async def set_if_not_exists(self, key: str, value: str, expire_seconds: int) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª—é—á, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∫–ª—é—á –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á.
        """
        if not self.redis_conn:
            logger.error("üö® –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–ª—é—á–∞ –≤ Redis –¥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!")
            return False

        try:
            return await self.redis_conn.set(key, value, ex=expire_seconds, nx=True)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–ª—é—á–∞ –≤ Redis: {e}")
            logger.debug(traceback.format_exc())
            return False

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–≥—Ä—É–ø–ø—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã)."""
        self.shutdown_event.clear()

        for stream in self.source_streams:
            self.tasks.append(asyncio.create_task(self.read_messages(stream)))
        self.tasks.append(asyncio.create_task(self.process_messages()))

        try:
            await asyncio.gather(*self.tasks)
        except asyncio.CancelledError:
            logger.info("üõë RedisStreamRouter –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä, –¥–æ–∂–∏–¥–∞—è—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏."""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ RedisStreamRouter...")
        self.shutdown_event.set()

        while not self.queue.empty():
            await asyncio.sleep(0.1)

        for task in self.tasks:
            task.cancel()

        await asyncio.gather(*self.tasks, return_exceptions=True)
        logger.info("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç `redis_router` –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–∞–∫–µ—Ç–µ
redis_router = RedisStreamRouter()
