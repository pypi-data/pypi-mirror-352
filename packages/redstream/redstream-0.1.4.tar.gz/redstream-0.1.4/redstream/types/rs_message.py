from copy import deepcopy
import json
import pytz
import uuid
from typing import Optional, Dict, Any, Union
import logging
from .rs_message_status import RSMessageStatus
logger = logging.getLogger("redstream.types.rs_message")


class RSMessage:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (Redis Streams)."""
    
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –¢–µ–∫—Å—Ç–æ–≤—ã–µ, –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–µ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    - –û—Ç–≤–µ—Ç—ã (`reply_to_message_id`)
    - Correlation ID –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å aiogram Message (–µ—Å–ª–∏ aiogram –¥–æ—Å—Ç—É–ø–µ–Ω)
    - –ì–æ—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RedisStreamRouter
    """

    extra_data: Dict[str, Any]  # üí° IDE —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å

    def __init__(
        self,
        event_type: str,                                # –¢–∏–ø —Å–æ–±—ã—Ç–∏—è ("message", "edit_message", "response"...)
        initial_response_stream: Optional[str] = None,  # –ò—Å—Ö–æ–¥–Ω—ã–π —Ç—Ä–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        message_type: Optional[str] = "text",           # –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        action: Optional[str] = "",                     # –¢—Ä–µ–±—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        status: Optional[RSMessageStatus] = None,       # –°—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        chat_id: Optional[str] = None,                  # ID —á–∞—Ç–∞ (–≥—Ä—É–ø–ø—ã)
        user_id: Optional[str] = None,                  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_id: Optional[str] = None,               # ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
        text: Optional[str] = "",                       # –¢–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è
        is_command: Optional[bool] = False,             # –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
        date: Optional[str] = None,                     # –î–∞—Ç–∞/–≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_to_message_id: Optional[Union[str, int]] = None,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ
        file_path: Optional[str] = None,                # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        correlation_id: Optional[str] = None,           # ID –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        response_stream: Optional[str] = None,          # –°—Ç—Ä–∏–º –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        extra_data: Optional[Dict[str, Any]] = None,    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    ):
        self.event_type = event_type
        self.initial_response_stream = initial_response_stream
        self.message_type = message_type
        self.action = action
        self.status = status
        self.chat_id = chat_id
        self.user_id = user_id
        self.message_id = message_id
        self.text = text or ""
        self.is_command = is_command
        self.date = date or self._current_time()
        self.reply_to_message_id = str(reply_to_message_id) if reply_to_message_id else None
        self.file_path = file_path
        self.correlation_id = correlation_id or str(uuid.uuid4())
        self.response_stream = response_stream
        self._extra_data = extra_data or {}

        # –°–∏—Å—Ç–µ–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∞. –ù–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ
        self.system_data = {
            "message_id": None,
            "stream": None
        }

    @property
    def extra_data(self) -> Dict[str, Any]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ extra_data (–±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Å–ª–æ–≤–∞—Ä—è —Ü–µ–ª–∏–∫–æ–º)."""
        return self._extra_data

    @extra_data.setter
    def extra_data(self, value):
        raise AttributeError("‚ùå –ü—Ä—è–º–æ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ extra_data –∑–∞–ø—Ä–µ—â–µ–Ω–æ.")

    @staticmethod
    def _current_time() -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTC."""
        return pytz.utc.localize(pytz.datetime.datetime.utcnow()).isoformat()

    @staticmethod
    def to_bool(value):
        if value in (1, "1"):
            return True
        elif value in (0, "0", None):
            return False
        raise logger.error(f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ bool: {value}")

    @staticmethod
    def parse_user_id(value) -> Optional[int]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ user_id –≤ int"""
        try:
            if value is None:
                return None
            str_value = str(value).strip()
            return int(str_value) if str_value.isdigit() else None
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π user_id: {value} ({e})")
            return None

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "RSMessage":
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç RSMessage –∏–∑ —Å–ª–æ–≤–∞—Ä—è."""

        def safe_json_loads(value: Any) -> Any:
            """–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON-—Å—Ç—Ä–æ–∫—É, –∏–Ω–∞—á–µ –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å."""
            if isinstance(value, str):
                try:
                    return json.loads(value)
                except json.JSONDecodeError:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: {value}")
                    return value  # –ï—Å–ª–∏ JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É (–Ω–æ –ª—É—á—à–µ –∏–∑–±–µ–≥–∞—Ç—å —Ç–∞–∫–æ–≥–æ)
            return value

        # –í–Ω—É—Ç—Ä–∏ from_dict
        status_raw = data.get("status", None)
        status_obj = None

        if isinstance(status_raw, str) and status_raw.strip().startswith("{"):
            try:
                status_obj = RSMessageStatus.from_json(status_raw)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ status: {e}")
        elif isinstance(status_raw, dict):
            status_obj = RSMessageStatus.from_dict(status_raw)

        #logger.debug(f"üì© from_dict() –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")

        instance = cls(
            event_type=data.get("event_type", "message"),
            initial_response_stream=data.get("initial_response_stream"),
            message_type=data.get("message_type", "text"),
            action=data.get("action", ""),
            status=status_obj,
            chat_id=data.get("chat_id"),
            user_id=cls.parse_user_id(data.get("user_id")),
            message_id=str(data["message_id"]) if data.get("message_id") is not None else None,
            text=data.get("text", ""),
            is_command=cls.to_bool(data.get("is_command", False)),
            date=data.get("date"),
            reply_to_message_id=str(data["reply_to_message_id"]) if data.get("reply_to_message_id") else None,
            file_path=data.get("file_path"),
            correlation_id=data.get("correlation_id") or str(uuid.uuid4()),
            response_stream=data.get("response_stream"),
            extra_data=safe_json_loads(data.get("extra_data", "{}")),
        )

        #logger.debug(f"üì© from_dict() —Å–æ–∑–¥–∞–ª RSMessage —Å message_id={instance.message_id}, correlation_id={instance.correlation_id}")

        return instance

    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —á–µ—Ä–µ–∑ Redis."""
        result = {}
        
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∫—Ä–æ–º–µ system_data
        for k, v in self.__dict__.items():
            if k in ["system_data", "_extra_data"]:
                continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
            if v is None:
                if k in ["text", "action", "correlation_id"]:
                    result[k] = ""  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º None –≤ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º None –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
            elif isinstance(v, bool):
                result[k] = "1" if v else "0"
            elif isinstance(v, (uuid.UUID, int)):
                result[k] = str(v)
            else:
                result[k] = v

        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ None
        mandatory_fields = ["event_type", "message_type", "action", "chat_id", "user_id", "correlation_id"]
        for field in mandatory_fields:
            if field not in result:
                result[field] = ""

        # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è status –∫–∞–∫ JSON
        if isinstance(self.status, RSMessageStatus):
            result["status"] = self.status.to_json()

        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º extra_data
        if isinstance(self.extra_data, dict):
            safe_extra_data = self._extra_data.copy()
            if isinstance(safe_extra_data.get("callback_data"), dict):
                safe_extra_data["callback_data"] = json.dumps(safe_extra_data["callback_data"], ensure_ascii=False)
            result["extra_data"] = json.dumps(safe_extra_data, ensure_ascii=False)
        else:
            result["extra_data"] = "{}"

        # –ü—Ä–∏–≤–æ–¥–∏–º correlation_id –∫ —Å—Ç—Ä–æ–∫–µ
        result["correlation_id"] = str(result.get("correlation_id", "")) or str(uuid.uuid4())

        # user_id –≤ —Å—Ç—Ä–æ–∫—É
        if "user_id" in result and result["user_id"] is not None:
            result["user_id"] = str(result["user_id"])

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ action –Ω–µ None
        if "action" not in result or result["action"] is None:
            result["action"] = ""

        return result

    def to_json(self) -> str:
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ JSON."""
        return json.dumps(self.to_dict(), ensure_ascii=False)

    @classmethod
    def from_json(cls, json_str: str) -> "RSMessage":
        """–°–æ–∑–¥–∞–µ—Ç RSMessage –∏–∑ JSON-—Å—Ç—Ä–æ–∫–∏."""
        return cls.from_dict(json.loads(json_str))


    async def update_status(self, redis_router, timeout: int = 15) -> Optional["RSMessage"]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
        """
        if not self.status or not isinstance(self.status, RSMessageStatus):
            logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ RSMessageStatus")
            return None

        # –ì–æ—Ç–æ–≤–∏–º –∫–æ–ø–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        msg = deepcopy(self)
        msg.event_type = "edit_message" if self.status.message_id else "message"
        msg.message_type = "text"
        msg.message_id = self.status.message_id
        msg.action = "status_update"
        msg.text = str(self.status)  # –¢–û–õ–¨–ö–û –í –ö–û–ü–ò–ò
        msg.correlation_id = str(uuid.uuid4())
        #msg.reply_to_message_id = self.message_id
        msg._extra_data["status_uid"] = self.status.uid

        logger.debug(f"üì© update_status() –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: {msg.to_dict()}")
        try:
            response: Optional[RSMessage] = await redis_router.send_request_with_timeout(
                target_stream=self.initial_response_stream,
                rs_message=msg,
                timeout=timeout,
                max_retries=2
            )

            if response and isinstance(response, RSMessage) and not self.status.message_id:
                self.status.set_message_id(response.message_id)

            return response

        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ update_status: {e}")
            return None



    def delete_status(self):
        self.status = None
        #self.text = ""

    def ensure_status(self, override: bool = False):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ status-–æ–±—ä–µ–∫—Ç–∞"""
        if self.status is None or override:
            self.status = RSMessageStatus()
        return self.status


    # === –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å aiogram (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω) ===
    @classmethod
    def from_aiogram_message(cls, message: Any, initial_response_stream) -> "RSMessage":
        """–°–æ–∑–¥–∞–µ—Ç RSMessage –∏–∑ aiogram.types.Message."""
        if not hasattr(message, "chat") or not hasattr(message, "from_user"):
            raise ValueError("–ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è aiogram Message.")

        return cls(
            event_type="message",
            initial_response_stream=initial_response_stream,
            message_type=message.content_type.value,
            chat_id=str(message.chat.id),
            user_id=str(message.from_user.id),
            message_id=str(message.message_id),
            text=message.text or message.caption or "",
            is_command=bool(message.text and message.text.startswith("/")),
            date=str(message.date),
            reply_to_message_id=str(message.reply_to_message.message_id) if message.reply_to_message else None,
            file_path=None,
            extra_data={},  # <-- –¥–æ–±–∞–≤–ª–µ–Ω–æ
        )

    def to_aiogram_message(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç RSMessage –≤ JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Å—Ö–æ–∂—É—é —Å aiogram Message."""
        return {
            "chat": {"id": int(self.chat_id) if self.chat_id else None},
            "from_user": {
                "id": int(self.user_id) if self.user_id else None,
            },
            "message_id": int(self.message_id) if self.message_id else None,
            "date": self.date,
            "text": self.text,
            "content_type": self.message_type,
            "reply_to_message_id": int(self.reply_to_message_id) if self.reply_to_message_id else None,
            "correlation_id": self.correlation_id,
        }

    @staticmethod
    def extract_media_data(message: Any) -> Optional[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã) –∏–∑ aiogram Message."""
        media_data = None
        if hasattr(message, "photo") and message.photo:
            media_data = {"type": "photo", "file_id": message.photo[-1].file_id}
        elif hasattr(message, "video") and message.video:
            media_data = {"type": "video", "file_id": message.video.file_id}
        elif hasattr(message, "document") and message.document:
            media_data = {
                "type": "document",
                "file_id": message.document.file_id,
                "file_name": message.document.file_name,
            }
        elif hasattr(message, "voice") and message.voice:
            media_data = {"type": "voice", "file_id": message.voice.file_id}
        elif hasattr(message, "audio") and message.audio:
            media_data = {"type": "audio", "file_id": message.audio.file_id}
        return media_data


