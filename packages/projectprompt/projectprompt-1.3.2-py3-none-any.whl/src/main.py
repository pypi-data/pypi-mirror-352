#!/usr/bin/env python3
"""
Punto de entrada principal para ProjectPrompt.

Este script proporciona las funcionalidades principales de la herramienta ProjectPrompt,
permitiendo analizar proyectos, generar sugerencias con IA, y gestionar configuraciones.

Los resultados se guardan en la carpeta 'project-output'.
"""

import os
import sys
import json
import time
import functools
import inspect
from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Any
from pathlib import Path

# Ensure local imports take precedence over system-installed packages
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(current_dir)
if project_root not in sys.path:
    sys.path.insert(0, project_root)

import typer
from typer.core import TyperGroup
import click
from rich.console import Console

from src import __version__
from src.utils import logger, LogLevel, set_level
from src.utils.config import config_manager
from src.utils.api_validator import get_api_validator
from src.utils.updater import Updater, check_and_notify_updates
from src.utils.sync_manager import SyncManager, get_sync_manager
from src.utils.telemetry import initialize_telemetry, shutdown_telemetry, get_telemetry_manager, record_command, record_error
from src.ui import menu
from src.ui.cli import cli
from src.ui.consent_manager import ConsentManager
from src.ui.analysis_view import analysis_view
from src.ui.documentation_navigator import get_documentation_navigator
from src.ui.dashboard import DashboardCLI
# Importamos los analizadores bajo demanda para evitar carga innecesaria

# Custom help handler for better UX
class CustomTyperGroup(TyperGroup):
    """Custom Typer group that shows help when command is incomplete"""
    
    def invoke(self, ctx):
        # If no subcommand was provided, show custom help
        if ctx.invoked_subcommand is None:
            # Check if this is a specific app that needs custom help
            if hasattr(ctx, 'info') and hasattr(ctx.info, 'name'):
                command_name = ctx.info.name
                
                if command_name == 'ai':
                    # Show AI-specific help
                    show_ai_command_help()
                    ctx.exit()
                elif command_name == 'rules':
                    # Show rules-specific help
                    show_rules_command_help()
                    ctx.exit()
                elif command_name == 'premium':
                    # Show premium-specific help
                    show_premium_command_help()
                    ctx.exit()
            
            # Default behavior: show standard help
            click.echo(ctx.get_help())
            ctx.exit()
        return super().invoke(ctx)
    
    def parse_args(self, ctx, args):
        # Override to handle no-args case specifically
        if not args:
            # Check if this is a specific app that needs custom help
            if hasattr(ctx, 'info') and hasattr(ctx.info, 'name'):
                command_name = ctx.info.name
                
                if command_name == 'ai':
                    show_ai_command_help()
                    ctx.exit()
                elif command_name == 'rules':
                    show_rules_command_help()
                    ctx.exit()
                elif command_name == 'premium':
                    show_premium_command_help()
                    ctx.exit()
        
        return super().parse_args(ctx, args)

# Define project directories
PROJECT_ROOT = Path(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
OUTPUT_DIR = PROJECT_ROOT / "project-output"
ANALYSES_DIR = OUTPUT_DIR / "analyses"
SUGGESTIONS_DIR = OUTPUT_DIR / "suggestions"

# Create output directories if they don't exist
os.makedirs(ANALYSES_DIR, exist_ok=True)
os.makedirs(SUGGESTIONS_DIR, exist_ok=True)

console = Console()
app = typer.Typer(
    help="ProjectPrompt: Asistente inteligente para proyectos",
    cls=CustomTyperGroup,
    no_args_is_help=True
)

# Submenu para comandos de documentaci√≥n
docs_app = typer.Typer(
    help="Comandos de navegaci√≥n de documentaci√≥n",
    cls=CustomTyperGroup,
    no_args_is_help=True
)
app.add_typer(docs_app, name="docs")

# Submenu para comandos de IA avanzada
ai_app = typer.Typer(
    help="Comandos de IA (Copilot/Anthropic) - Ahora disponibles para todos",
    cls=CustomTyperGroup,
    no_args_is_help=True
)

app.add_typer(ai_app, name="ai")

# Submenu para comandos de actualizaci√≥n y sincronizaci√≥n
update_app = typer.Typer(
    help="Comandos para gestionar actualizaciones y sincronizaci√≥n",
    cls=CustomTyperGroup,
    no_args_is_help=True
)
app.add_typer(update_app, name="update")

# Submenu para comandos premium 
premium_app = typer.Typer(
    help="Comandos avanzados (ahora disponibles para todos los usuarios)",
    cls=CustomTyperGroup,
    no_args_is_help=True
)

app.add_typer(premium_app, name="premium")

# Submenu para comandos de telemetr√≠a
telemetry_app = typer.Typer(
    help="Comandos para gestionar la telemetr√≠a an√≥nima",
    cls=CustomTyperGroup,
    no_args_is_help=True
)
app.add_typer(telemetry_app, name="telemetry")

# Submenu para comandos de reglas
from src.commands.rules_commands import rules_app
app.add_typer(rules_app, name="rules")

# Decorador para telemetr√≠a de comandos
import time
import functools
import inspect

def telemetry_command(func):
    """
    Decorador para registrar el uso de comandos en telemetr√≠a.
    Tambi√©n registra errores que ocurran durante la ejecuci√≥n.
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        telemetry_enabled = get_telemetry_manager().is_enabled()
        command_name = func.__name__
        start_time = time.time()
        
        try:
            # Ejecutar el comando original
            result = func(*args, **kwargs)
            
            # Registrar telemetr√≠a solo si est√° habilitada
            if telemetry_enabled:
                duration_ms = int((time.time() - start_time) * 1000)
                record_command(command_name, duration_ms)
                
            return result
        except Exception as e:
            # Registrar el error si la telemetr√≠a est√° habilitada
            if telemetry_enabled:
                error_type = type(e).__name__
                error_msg = str(e)
                
                # Obtener informaci√≥n del archivo y l√≠nea donde ocurri√≥ el error
                # Solo para errores en nuestro c√≥digo, no en librer√≠as externas
                file = None
                line = None
                tb = getattr(e, '__traceback__', None)
                while tb:
                    if 'src' in tb.tb_frame.f_code.co_filename:
                        file = tb.tb_frame.f_code.co_filename
                        line = tb.tb_lineno
                        break
                    tb = tb.tb_next
                
                record_error(error_type, error_msg, file, line)
                
            # Re-lanzar la excepci√≥n para mantener el comportamiento normal
            raise
    
    return wrapper


@app.command()
@telemetry_command
def version():
    """Show the current version of ProjectPrompt."""
    cli.print_header("Version Information")
    cli.print_info(f"ProjectPrompt v{__version__}")
    
    # Check APIs status
    validator = get_api_validator()
    status = validator.get_status_summary()
    
    # Show additional information
    table = cli.create_table("Details", ["Component", "Version/Status"])
    table.add_row("Python", sys.version.split()[0])
    
    # API Status with helpful guidance messages
    anthropic_configured = status.get("anthropic", False)
    github_configured = status.get("github", False)
    
    table.add_row("API Anthropic", "Configured ‚úÖ" if anthropic_configured else "Not configured ‚ùå")
    table.add_row("API GitHub", "Configured ‚úÖ" if github_configured else "Not configured ‚ùå")
    console.print(table)
    
    # Show helpful guidance if APIs are not configured
    if not anthropic_configured or not github_configured:
        console.print("\n[bold yellow]üí° Consejos para resoluci√≥n de problemas:[/bold yellow]")
        
        if not anthropic_configured:
            console.print("  ‚Ä¢ Para configurar Anthropic API: [bold]project-prompt set-api anthropic[/bold]")
        
        if not github_configured:
            console.print("  ‚Ä¢ Para configurar GitHub API: [bold]project-prompt set-api github[/bold]")
            
        console.print("  ‚Ä¢ Para verificar el estado de las APIs: [bold]project-prompt verify-api[/bold]")
        console.print("  ‚Ä¢ Las advertencias de conexi√≥n con el servidor son normales si no hay conexi√≥n a Internet")
        console.print("    ProjectPrompt funciona completamente sin conexi√≥n con sus caracter√≠sticas b√°sicas.")


@app.command()
def init(name: str = typer.Option(None, "--name", "-n", help="Project name"),
         path: str = typer.Option(".", "--path", "-p", help="Path to initialize")):
    """Initialize a new project with ProjectPrompt."""
    cli.print_header("Project Initialization")
    
    # Si no se proporciona un nombre, solicitarlo
    if not name:
        name = typer.prompt("Nombre del proyecto")
    
    cli.print_info(f"Inicializando proyecto '{name}' en {path}...")
    
    # Aqu√≠ ir√≠a la implementaci√≥n real de inicializaci√≥n de proyecto
    # Por ahora, solo simulamos con un mensaje
    
    cli.print_success(f"Proyecto '{name}' inicializado correctamente")


@app.command()
def analyze(
    path: str = typer.Argument(".", help="Ruta al proyecto a analizar"),
    output: Optional[str] = typer.Option(None, "--output", "-o", help="Ruta para guardar el an√°lisis en formato JSON"),
    max_files: int = typer.Option(10000, "--max-files", "-m", help="N√∫mero m√°ximo de archivos a analizar"),
    max_size: float = typer.Option(5.0, "--max-size", "-s", help="Tama√±o m√°ximo de archivo a analizar en MB"),
    functionalities: bool = typer.Option(True, "--functionalities/--no-functionalities", "-f/-nf", 
                                       help="Detectar funcionalidades del proyecto"),
    structure: bool = typer.Option(False, "--structure/--no-structure", "-st/-nst", 
                                 help="Mostrar estructura del proyecto"),
    rules_file: Optional[str] = typer.Option(None, "--rules", "-r", help="Archivo de reglas para aplicar durante el an√°lisis"),
    check_compliance: bool = typer.Option(False, "--compliance/--no-compliance", "-c/-nc", 
                                        help="Verificar cumplimiento de reglas durante el an√°lisis"),
):
    """Analizar la estructura y funcionalidades de un proyecto existente."""
    from src.analyzers.project_scanner import get_project_scanner
    from src.analyzers.functionality_detector import get_functionality_detector
    from src.utils.enhanced_rules_manager import EnhancedRulesManager
    import json
    import os
    from datetime import datetime
    project_path = os.path.abspath(path)
    
    if not os.path.isdir(project_path):
        cli.print_error(f"La ruta especificada no es un directorio v√°lido: {project_path}")
        return
    
    # Initialize rules manager if rules file provided or compliance checking enabled
    rules_manager = None
    if rules_file or check_compliance:
        try:
            rules_manager = EnhancedRulesManager(project_root=project_path)
            
            # Look for rules file in project if not explicitly provided
            if not rules_file:
                default_rules_path = os.path.join(project_path, "project-prompt-rules.md")
                if os.path.exists(default_rules_path):
                    rules_file = default_rules_path
                    cli.print_info(f"Usando archivo de reglas encontrado: {rules_file}")
                elif check_compliance:
                    cli.print_warning("Verificaci√≥n de cumplimiento solicitada pero no se encontr√≥ archivo de reglas")
                    cli.print_info("Usa 'project-prompt rules-init' para crear un archivo de reglas desde una plantilla")
            
            # Load rules if we have a file
            if rules_file or check_compliance:
                success = rules_manager.load_rules()
                if success:
                    all_rules = rules_manager.get_all_rules()
                    cli.print_success(f"‚úÖ Reglas cargadas: {len(all_rules)} reglas encontradas")
                else:
                    cli.print_warning("No se pudo cargar el archivo de reglas")
                    if check_compliance:
                        cli.print_info("Continuando an√°lisis sin verificaci√≥n de cumplimiento")
                        check_compliance = False
                        rules_manager = None
        except Exception as e:
            cli.print_error(f"Error al inicializar el sistema de reglas: {e}")
            if check_compliance:
                cli.print_warning("Continuando an√°lisis sin verificaci√≥n de cumplimiento")
                check_compliance = False
            rules_manager = None
        
    cli.print_header("An√°lisis Completo de Proyecto")
    cli.print_info(f"Analizando proyecto en: {project_path}")
    if rules_manager:
        cli.print_info(f"üîç Aplicando reglas: {len(rules_manager.get_all_rules())} reglas cargadas")
    
    try:
        # Crear funci√≥n de callback para el progreso
        progress_info = {}
        
        def update_progress(info):
            progress_info.update(info)
        
        # Crear esc√°ner de proyectos con callback de progreso
        scanner = get_project_scanner(
            max_file_size_mb=max_size, 
            max_files=max_files,
            progress_callback=update_progress
        )
        
        # Realizar an√°lisis de estructura con indicadores de progreso
        with cli.progress_bar("Escaneando proyecto", total=100) as progress:
            # Configurar task de progreso
            task = progress.add_task("Escaneando archivos y directorios...", total=100)
            
            # Iniciar el an√°lisis en un hilo separado para poder actualizar el progreso
            import threading
            import time
            
            project_data = None
            analysis_complete = False
            error = None
            
            def run_analysis():
                nonlocal project_data, analysis_complete, error
                try:
                    project_data = scanner.scan_project(project_path)
                    analysis_complete = True
                except Exception as e:
                    error = e
                    analysis_complete = True
            
            # Iniciar an√°lisis en hilo separado
            analysis_thread = threading.Thread(target=run_analysis)
            analysis_thread.start()
            
            # Actualizar progreso mientras el an√°lisis est√° en curso
            while not analysis_complete:
                time.sleep(0.1)
                
                if progress_info:
                    total_files = progress_info.get('total_files', 1)
                    analyzed_files = progress_info.get('analyzed_files', 0)
                    current_file = progress_info.get('current_file', '')
                    message = progress_info.get('message', 'Escaneando...')
                    
                    # Calcular progreso como porcentaje
                    if total_files > 0:
                        progress_percent = min(95, (analyzed_files / total_files) * 95)  # M√°ximo 95% hasta completar
                    else:
                        progress_percent = 10
                    
                    # Actualizar tarea con informaci√≥n actual
                    if current_file:
                        status_msg = f"{message}: {current_file}"
                    else:
                        status_msg = message
                    
                    progress.update(task, completed=progress_percent, description=status_msg)
            
            # Completar el progreso
            progress.update(task, completed=100, description="An√°lisis completado")
            analysis_thread.join()
            
            if error:
                raise error
        
        # Mostrar resumen general
        cli.print_success(f"An√°lisis completado en {project_data.get('scan_time', 0)} segundos")
        
        # Estad√≠sticas b√°sicas
        stats = project_data.get('stats', {})
        stats_table = cli.create_table("Estad√≠sticas", ["M√©trica", "Valor"])
        stats_table.add_row("Total de archivos", str(stats.get('total_files', 0)))
        stats_table.add_row("Total de directorios", str(stats.get('total_dirs', 0)))
        stats_table.add_row("Archivos analizados", str(stats.get('analyzed_files', 0)))
        stats_table.add_row("Archivos binarios", str(stats.get('binary_files', 0)))
        stats_table.add_row("Tama√±o total", f"{stats.get('total_size_kb', 0):,} KB")
        console.print(stats_table)
        
        # Mostrar lenguajes principales
        analysis_view.show_languages(project_data)
        
        # Mostrar estructura del proyecto si se solicit√≥
        if structure:
            analysis_view.show_project_structure(project_data)
        
        # Detectar funcionalidades si se solicit√≥
        functionality_data = {}
        if functionalities:
            # Crear detector de funcionalidades
            detector = get_functionality_detector(scanner=scanner)
            
            # Mostrar progreso
            with cli.status("Detectando funcionalidades en el proyecto..."):
                # Realizar an√°lisis
                functionality_data = detector.detect_functionalities(project_path)
            
            # Mostrar funcionalidades
            analysis_view.show_functionalities(functionality_data)
        
        # Perform rules compliance checking if enabled
        compliance_data = {}
        if check_compliance and rules_manager:
            cli.print_header("Verificaci√≥n de Cumplimiento de Reglas")
            
            # Check compliance for key files
            important_files = project_data.get('important_files', {})
            
            compliance_summary = {
                'total_files_checked': 0,
                'total_violations': 0,
                'total_applicable_rules': 0,
                'files_with_violations': [],
                'compliance_by_category': {},
                'compliance_by_priority': {}
            }
            
            # Files to check - prioritize important files
            files_to_check = []
            
            # Add important files first
            for category, file_list in important_files.items():
                if isinstance(file_list, list):
                    files_to_check.extend(file_list)
                elif isinstance(file_list, dict):
                    for subcategory, subfiles in file_list.items():
                        if isinstance(subfiles, list):
                            files_to_check.extend(subfiles)
            
            # Add some additional source files from the scan
            source_files = project_data.get('source_files', [])[:20]  # Limit to 20 files for demo
            files_to_check.extend(source_files)
            
            # Remove duplicates and ensure files exist
            files_to_check = list(set([f for f in files_to_check if f and os.path.exists(os.path.join(project_path, f))]))
            
            if files_to_check:
                with cli.progress_bar("Verificando cumplimiento", total=len(files_to_check)) as progress:
                    task = progress.add_task("Checking compliance...", total=len(files_to_check))
                    
                    for i, file_path in enumerate(files_to_check):
                        full_path = os.path.join(project_path, file_path)
                        progress.update(task, completed=i+1, description=f"Checking {file_path}")
                        
                        try:
                            file_compliance = rules_manager.check_rule_compliance(full_path)
                            compliance_summary['total_files_checked'] += 1
                            compliance_summary['total_applicable_rules'] += file_compliance.get('applicable_rules_count', 0)
                            
                            # Check for violations
                            violations = file_compliance.get('violations', [])
                            if violations:
                                compliance_summary['total_violations'] += len(violations)
                                compliance_summary['files_with_violations'].append({
                                    'file': file_path,
                                    'violations': violations
                                })
                        except Exception as e:
                            logger.warning(f"Error checking compliance for {file_path}: {e}")
            
            # Display compliance results
            if compliance_summary['total_files_checked'] > 0:
                compliance_score = 1.0 - (compliance_summary['total_violations'] / max(compliance_summary['total_applicable_rules'], 1))
                
                cli.print_success(f"üìä Resumen de Cumplimiento:")
                cli.print_info(f"  ‚Ä¢ Archivos verificados: {compliance_summary['total_files_checked']}")
                cli.print_info(f"  ‚Ä¢ Reglas aplicables: {compliance_summary['total_applicable_rules']}")
                cli.print_info(f"  ‚Ä¢ Violaciones encontradas: {compliance_summary['total_violations']}")
                cli.print_info(f"  ‚Ä¢ Puntuaci√≥n de cumplimiento: {compliance_score:.1%}")
                
                if compliance_summary['files_with_violations']:
                    cli.print_warning(f"‚ö†Ô∏è  Archivos con violaciones ({len(compliance_summary['files_with_violations'])}):")
                    for file_violation in compliance_summary['files_with_violations'][:5]:  # Show first 5
                        cli.print_info(f"    ‚Ä¢ {file_violation['file']}: {len(file_violation['violations'])} violaciones")
                    
                    if len(compliance_summary['files_with_violations']) > 5:
                        cli.print_info(f"    ... y {len(compliance_summary['files_with_violations']) - 5} archivos m√°s")
                    
                    cli.print_info("    Use 'project-prompt rules-report' para ver un informe detallado")
                else:
                    cli.print_success("‚úÖ No se encontraron violaciones de reglas!")
                
                compliance_data = compliance_summary
            else:
                cli.print_warning("No se pudieron verificar archivos para cumplimiento de reglas")
        
        # Guardar resultados si se especific√≥ un archivo de salida
        if output:
            # Check if output path is absolute or starts with project-output
            if os.path.isabs(output) or output.startswith('project-output'):
                output_path = output
            else:
                # Relative path - place it in project-output/analyses/
                project_name = os.path.basename(project_path)
                output_path = str(ANALYSES_DIR / project_name / output)
            
            # Si no se especific√≥ extensi√≥n, a√±adir .json
            if not output_path.endswith('.json'):
                output_path = f"{output_path}.json"
                
            # Asegurar que el directorio existe
            os.makedirs(os.path.dirname(os.path.abspath(output_path)), exist_ok=True)
                
            # Simplificar datos para JSON
            combined_result = {
                'project_path': project_data.get('project_path', ''),
                'scan_time': project_data.get('scan_time', 0),
                'stats': project_data.get('stats', {}),
                'languages': project_data.get('languages', {}),
                'important_files': project_data.get('important_files', {}),
                'dependencies': project_data.get('dependencies', {}),
            }
            
            # A√±adir funcionalidades si se detectaron
            if functionality_data:
                combined_result['functionalities'] = functionality_data
                
            # A√±adir datos de cumplimiento si se generaron
            if compliance_data:
                combined_result['compliance'] = compliance_data
                
            # Guardar en formato JSON
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(combined_result, f, indent=2)
                
            cli.print_success(f"An√°lisis guardado en: {output_path}")
        
        # Sugerir siguientes pasos    
        cli.print_info("Sugerencias:")
        
        if not structure:
            console.print("  - Ejecutar con --structure para ver la estructura del proyecto")
            
        if not functionalities:
            console.print("  - Ejecutar con --functionalities para detectar funcionalidades")
        
        console.print("  - Usar 'report' para generar un informe detallado en Markdown")
        console.print("  - Usar 'list' para ver solo las funcionalidades del proyecto")
            
    except Exception as e:
        cli.print_error(f"Error durante el an√°lisis: {e}")
        logger.error(f"Error en analyze: {e}", exc_info=True)


@app.command(name="analyze-group")
@telemetry_command
def analyze_group_command(
    group_name: Optional[str] = typer.Argument(None, help="Nombre del grupo funcional a analizar"),
    project_path: str = typer.Option(".", "--path", "-p", help="Ruta al proyecto a analizar")
):
    """Analizar un grupo funcional espec√≠fico con IA (Anthropic Claude)."""
    from src.commands.analyze_group import AnalyzeGroupCommand
    
    try:
        command = AnalyzeGroupCommand()
        success = command.execute(
            group_name=group_name,
            project_path=project_path
        )
        if not success:
            # If the command failed and no group_name was provided, show additional help
            if not group_name:
                console.print("\n")
                show_analyze_group_help()
            else:
                cli.print_error("El an√°lisis no se complet√≥ exitosamente")
    except Exception as e:
        cli.print_error(f"Error durante el an√°lisis del grupo: {e}")
        logger.error(f"Error en analyze_group_command: {e}", exc_info=True)


@app.command(name="generate-suggestions")
@telemetry_command
def generate_suggestions_command(
    group_name: Optional[str] = typer.Argument(None, help="Nombre del grupo funcional para generar sugerencias"),
    project_path: str = typer.Option(".", "--path", "-p", help="Ruta al proyecto")
):
    """Generar sugerencias de mejora estructuradas para un grupo funcional."""
    from src.commands.generate_suggestions import GenerateSuggestionsCommand
    
    # Check if group_name is provided, if not show help
    if not group_name:
        show_generate_suggestions_help()
        return
    
    try:
        command = GenerateSuggestionsCommand()
        success = command.execute(
            group_name=group_name,
            project_path=project_path
        )
        if not success:
            cli.print_error("La generaci√≥n de sugerencias no se complet√≥ exitosamente")
    except Exception as e:
        cli.print_error(f"Error durante la generaci√≥n de sugerencias: {e}")
        logger.error(f"Error en generate_suggestions_command: {e}", exc_info=True)


@app.command(name="track-progress")
@telemetry_command
def track_progress_command(
    group_name: Optional[str] = typer.Argument(None, help="Nombre del grupo funcional (opcional, muestra resumen si no se especifica)"),
    phase: Optional[int] = typer.Option(None, "--phase", "-p", help="N√∫mero de fase espec√≠fica a rastrear (opcional)")
):
    """Rastrear y gestionar el progreso de implementaci√≥n de mejoras."""
    from src.commands.track_progress import TrackProgressCommand
    
    try:
        command = TrackProgressCommand()
        command.execute(group_name=group_name, phase=phase)
    except Exception as e:
        cli.print_error(f"Error durante el seguimiento de progreso: {e}")
        logger.error(f"Error en track_progress_command: {e}", exc_info=True)


@app.command()
def menu():
    """Iniciar el men√∫ interactivo de ProjectPrompt."""
    from src.ui.menu import menu as interactive_menu
    interactive_menu.show()


@app.command()
def config(key: Optional[str] = None, value: Optional[str] = None, list_all: bool = typer.Option(False, "--list", "-l", help="Listar toda la configuraci√≥n")):
    """Gestionar la configuraci√≥n de ProjectPrompt."""
    if list_all:
        console.print("[bold]Configuraci√≥n actual:[/bold]")
        import json
        console.print_json(json.dumps(config_manager.config))
        return

    if key and value:
        config_manager.set(key, value)
        config_manager.save_config()
        logger.info(f"Configuraci√≥n actualizada: {key}={value}")
    elif key:
        value = config_manager.get(key)
        if value is not None:
            console.print(f"[bold]{key}[/bold] = {value}")
        else:
            console.print(f"[yellow]No se encontr√≥ la clave: {key}[/yellow]")
    else:
        console.print("[yellow]Especifique una clave y opcionalmente un valor.[/yellow]")


@app.command()
def set_api(
    api_name: str = typer.Argument(..., help="Nombre de la API (anthropic, github)"),
):
    """Configurar una clave API para servicios usando archivos .env (recomendado por seguridad)."""
    cli.print_header("Configuraci√≥n de API - M√©todo Seguro con .env")
    
    # Deprecar el m√©todo directo y guiar hacia .env
    cli.print_info("üîí Para mayor seguridad, ProjectPrompt usa archivos .env para las claves API")
    cli.print_info("üìù Este m√©todo es m√°s seguro que almacenar claves en el sistema keyring")
    
    # Determinar las rutas del archivo .env
    current_dir = os.getcwd()
    project_env = os.path.join(current_dir, ".env")
    home_env = os.path.expanduser("~/.env")
    
    # Verificar si ya existe un .env
    env_exists = os.path.exists(project_env)
    
    cli.print_info("\nüìÇ Ubicaciones recomendadas para el archivo .env:")
    cli.print_info(f"  1. Proyecto actual: {project_env} {'‚úÖ' if env_exists else '‚ùå'}")
    cli.print_info(f"  2. Directorio home: {home_env}")
    
    # Mensaje espec√≠fico por API
    if api_name == "anthropic":
        env_var = "anthropic_API"
        cli.print_info(f"\nü§ñ Para configurar Anthropic Claude:")
    elif api_name == "github":
        env_var = "GITHUB_API_KEY"
        cli.print_info(f"\nüêô Para configurar GitHub API:")
    else:
        env_var = f"{api_name.upper()}_API_KEY"
        cli.print_info(f"\nüîß Para configurar {api_name}:")
    
    cli.print_info(f"   Variable requerida: {env_var}")
    
    # Instrucciones paso a paso
    console.print("\n[bold green]üìã Instrucciones paso a paso:[/bold green]")
    console.print("\n[bold]1. Crear archivo .env[/bold]")
    console.print(f"   Ejecuta: [cyan]touch {project_env}[/cyan]")
    
    console.print("\n[bold]2. Agregar tu clave API[/bold]")
    console.print(f"   Edita el archivo y agrega: [cyan]{env_var}=tu_clave_api_aqu√≠[/cyan]")
    
    console.print("\n[bold]3. Verificar configuraci√≥n[/bold]")
    console.print(f"   Ejecuta: [cyan]project-prompt verify-api {api_name}[/cyan]")
    
    console.print("\n[bold yellow]‚ö†Ô∏è  Importante:[/bold yellow]")
    console.print("   ‚Ä¢ Nunca compartas tu archivo .env")
    console.print("   ‚Ä¢ Agrega .env a tu .gitignore")
    console.print("   ‚Ä¢ Las claves API son sensibles y deben mantenerse privadas")
    
    # Ofrecer crear el archivo autom√°ticamente
    if typer.confirm(f"\n¬øQuieres que cree el archivo .env en {project_env}?"):
        try:
            # Crear o actualizar .env
            env_content = ""
            if env_exists:
                with open(project_env, 'r') as f:
                    env_content = f.read()
            
            # Verificar si la variable ya existe
            if env_var not in env_content:
                if env_content and not env_content.endswith('\n'):
                    env_content += '\n'
                env_content += f"# {api_name.title()} API Configuration\n"
                env_content += f"{env_var}=your_api_key_here\n"
                
                with open(project_env, 'w') as f:
                    f.write(env_content)
                
                cli.print_success(f"‚úÖ Archivo .env creado en {project_env}")
                cli.print_info(f"üìù Edita el archivo y reemplaza 'your_api_key_here' con tu clave real")
            else:
                cli.print_info(f"‚ÑπÔ∏è  La variable {env_var} ya existe en {project_env}")
                
        except Exception as e:
            cli.print_error(f"‚ùå Error al crear .env: {e}")
    
    # Verificar si ya est√° configurado
    console.print(f"\n[bold]üîç Verificando configuraci√≥n actual...[/bold]")
    validator = get_api_validator()
    result = validator.validate_api(api_name)
    
    if result.get("valid", False):
        cli.print_success(f"‚úÖ {api_name} ya est√° configurado y funcionando")
        if "usage" in result:
            cli.print_info("üìä Informaci√≥n de uso:")
            for key, value in result["usage"].items():
                console.print(f"  - {key}: {value}")
    else:
        cli.print_warning(f"‚ö†Ô∏è  {api_name} no est√° configurado o la clave no es v√°lida")
        cli.print_info(f"üí° Despu√©s de editar el .env, ejecuta: project-prompt verify-api {api_name}")
    
    # Consejos de seguridad adicionales
    console.print(f"\n[bold blue]üõ°Ô∏è  Consejos de seguridad:[/bold blue]")
    console.print("   ‚Ä¢ Usa variables de entorno en producci√≥n")
    console.print("   ‚Ä¢ Rota tus claves API regularmente")
    console.print("   ‚Ä¢ Revisa los permisos de tu archivo .env (debe ser 600)")
    console.print("   ‚Ä¢ Considera usar herramientas como direnv para gesti√≥n autom√°tica")


@app.command()
def check_env(
    api_name: Optional[str] = typer.Argument(None, help="API espec√≠fica a verificar (anthropic, github). Si no se especifica, verifica todas.")
):
    """Verificar configuraci√≥n de archivos .env y variables de entorno."""
    cli.print_header("Verificaci√≥n de Configuraci√≥n .env")
    
    # Definir APIs y sus variables de entorno
    api_vars = {
        "anthropic": "anthropic_API",
        "github": "GITHUB_API_KEY",
        "openai": "OPENAI_API_KEY"
    }
    
    # Si se especifica una API, solo verificar esa
    if api_name:
        if api_name not in api_vars:
            cli.print_error(f"‚ùå API no soportada: {api_name}")
            cli.print_info(f"APIs soportadas: {', '.join(api_vars.keys())}")
            return
        apis_to_check = {api_name: api_vars[api_name]}
    else:
        apis_to_check = api_vars
    
    # Determinar ubicaciones de archivos .env
    current_dir = os.getcwd()
    env_locations = [
        os.path.join(current_dir, ".env"),
        os.path.expanduser("~/.env"),
        os.path.join(current_dir, "test-projects", ".env")
    ]
    
    console.print(f"\n[bold]üìÇ Buscando archivos .env en:[/bold]")
    found_envs = []
    for env_path in env_locations:
        exists = os.path.exists(env_path)
        status = "‚úÖ (existe)" if exists else "‚ùå (no existe)"
        console.print(f"   {env_path} {status}")
        if exists:
            found_envs.append(env_path)
    
    if not found_envs:
        cli.print_warning("‚ö†Ô∏è  No se encontraron archivos .env")
        cli.print_info("üí° Usa 'project-prompt set-api' para crear uno")
        return
    
    # Verificar cada API
    console.print(f"\n[bold]üîç Verificando configuraci√≥n de APIs:[/bold]")
    
    for api, env_var in apis_to_check.items():
        console.print(f"\n[bold blue]{api.title()}:[/bold blue]")
        
        # Verificar variable de entorno
        env_value = os.getenv(env_var)
        if env_value:
            masked_value = f"{env_value[:4]}...{env_value[-4:]}" if len(env_value) > 8 else "***"
            console.print(f"   üåç Variable de entorno: ‚úÖ {env_var}={masked_value}")
        else:
            console.print(f"   üåç Variable de entorno: ‚ùå {env_var} no establecida")
        
        # Verificar archivos .env
        found_in_env = False
        for env_path in found_envs:
            try:
                with open(env_path, 'r') as f:
                    content = f.read()
                    for line in content.split('\n'):
                        if line.strip().startswith(env_var):
                            parts = line.split('=', 1)
                            if len(parts) == 2:
                                value = parts[1].strip().strip('"\'')
                                if value and value != "your_api_key_here":
                                    masked_value = f"{value[:4]}...{value[-4:]}" if len(value) > 8 else "***"
                                    console.print(f"   üìÑ {env_path}: ‚úÖ {env_var}={masked_value}")
                                    found_in_env = True
                                else:
                                    console.print(f"   üìÑ {env_path}: ‚ö†Ô∏è  Variable encontrada pero sin valor v√°lido")
                                break
            except Exception as e:
                console.print(f"   üìÑ {env_path}: ‚ùå Error al leer archivo: {e}")
        
        if not found_in_env and not env_value:
            console.print(f"   ‚ùå {api.title()} no est√° configurado")
        elif found_in_env or env_value:
            # Verificar con el validador
            try:
                validator = get_api_validator()
                result = validator.validate_api(api)
                if result.get("valid", False):
                    console.print(f"   ‚úÖ Validaci√≥n exitosa - API funcional")
                else:
                    console.print(f"   ‚ö†Ô∏è  Configurado pero no v√°lido: {result.get('message', 'Error desconocido')}")
            except Exception as e:
                console.print(f"   ‚ö†Ô∏è  Error al validar: {e}")
    
    # Consejos finales
    console.print(f"\n[bold green]üí° Consejos:[/bold green]")
    console.print("   ‚Ä¢ Las variables de entorno tienen prioridad sobre archivos .env")
    console.print("   ‚Ä¢ Usa 'project-prompt verify-api' para validaci√≥n completa")
    console.print("   ‚Ä¢ Verifica permisos del archivo .env: chmod 600 .env")
    console.print("   ‚Ä¢ Agrega .env a tu .gitignore para evitar commits accidentales")


@app.command()
def set_log_level(level: str = typer.Argument(..., help="Nivel de log: debug, info, warning, error, critical")):
    """Cambiar el nivel de logging."""
    try:
        log_level = LogLevel(level.lower())
        set_level(log_level)
        config_manager.set("log_level", log_level.value)
        config_manager.save_config()
        logger.info(f"Nivel de log cambiado a {log_level.value.upper()}")
    except ValueError:
        valid_levels = ", ".join([l.value for l in LogLevel])
        logger.error(f"Nivel de log no v√°lido: {level}")
        console.print(f"[red]Niveles v√°lidos: {valid_levels}[/red]")


@app.command()
def verify_api(
    api_name: Optional[str] = typer.Argument(
        None, help="Nombre de la API a verificar (anthropic, github). Si no se especifica, se verifican todas."
    )
):
    """Verificar el estado de configuraci√≥n de APIs."""
    validator = get_api_validator()
    cli.print_header("Verificaci√≥n de APIs")
    
    if api_name:
        # Verificar una API espec√≠fica
        cli.print_info(f"Verificando configuraci√≥n de API: {api_name}")
        result = validator.validate_api(api_name)
        
        if result.get("valid", False):
            cli.print_success(f"‚úÖ {api_name}: {result.get('message', 'Configuraci√≥n v√°lida')}")
        else:
            cli.print_error(f"‚ùå {api_name}: {result.get('message', 'Configuraci√≥n inv√°lida')}")
            
        if "usage" in result:
            cli.print_info("Informaci√≥n de uso:")
            for key, value in result["usage"].items():
                console.print(f"  - {key}: {value}")
    else:
        # Verificar todas las APIs
        cli.print_info("Verificando todas las APIs configuradas...")
        results = validator.validate_all_apis()
        
        # Crear una tabla con los resultados
        table = cli.create_table("Estado de APIs", ["API", "Estado", "Mensaje"])
        
        for api, status in results.items():
            icon = "‚úÖ" if status.get("valid", False) else "‚ùå"
            table.add_row(
                api,
                f"{icon} {'V√°lida' if status.get('valid', False) else 'Inv√°lida'}",
                status.get("message", "")
            )
            
        console.print(table)


@app.command(name="deps")
def analyze_dependencies(
    path: str = typer.Argument(".", help="Ruta del proyecto a analizar"),
    output: Optional[str] = typer.Option(None, "--output", "-o", help="Archivo de salida personalizado (auto-guardado si no se especifica)"),
    format: str = typer.Option("markdown", "--format", "-f", help="Formato de salida: markdown, json, html"),
    max_files: int = typer.Option(1000, "--max-files", help="M√°ximo n√∫mero de archivos importantes a analizar"),
    min_deps: int = typer.Option(3, "--min-deps", help="M√≠nimo n√∫mero de dependencias para considerar archivo importante"),
    use_madge: bool = typer.Option(True, "--madge/--no-madge", help="Usar Madge para an√°lisis eficiente"),
    show_groups: bool = typer.Option(True, "--groups/--no-groups", help="Mostrar grupos de funcionalidad"),
    show_cycles: bool = typer.Option(True, "--cycles/--no-cycles", help="Detectar dependencias circulares")
):
    """An√°lisis eficiente de dependencias usando Madge (comando directo optimizado).
    
    Los resultados se guardan autom√°ticamente en project-output/analyses/dependencies/ 
    a menos que se especifique un archivo de salida personalizado con --output.
    """
    
    project_path = os.path.abspath(path)
    
    if not os.path.isdir(project_path):
        cli.print_error(f"La ruta especificada no es un directorio v√°lido: {project_path}")
        return
        
    cli.print_header("üìä An√°lisis Eficiente de Dependencias")
    cli.print_info(f"üîç Analizando proyecto en: {project_path}")
    cli.print_info(f"‚öôÔ∏è  Configuraci√≥n: max_files={max_files}, min_deps={min_deps}, madge={use_madge}")
    
    try:
        # Importar analizador de dependencias
        from src.analyzers.dependency_graph import DependencyGraph
        
        # Crear analizador con configuraci√≥n personalizada
        analyzer = DependencyGraph()
        if hasattr(analyzer, 'madge_analyzer'):
            analyzer.madge_analyzer.min_dependencies = min_deps
            analyzer.madge_analyzer.max_files_to_analyze = max_files
        
        # Realizar an√°lisis con indicador de progreso
        with cli.status("üîÑ Ejecutando an√°lisis de dependencias..."):
            start_time = time.time()
            dependency_data = analyzer.build_dependency_graph(
                project_path, 
                max_files=max_files * 10,  # Permitir m√°s archivos para el an√°lisis inicial
                use_madge=use_madge
            )
            analysis_time = time.time() - start_time
        
        # Mostrar resultados del an√°lisis
        cli.print_success(f"‚úÖ An√°lisis completado en {analysis_time:.2f} segundos")
        
        # Mostrar m√©tricas generales
        metrics = dependency_data.get('metrics', {})
        if metrics:
            cli.print_info("\nüìà M√©tricas del proyecto:")
            
            metrics_table = cli.create_table("M√©tricas", ["M√©trica", "Valor"])
            metrics_table.add_row("M√©todo de an√°lisis", metrics.get('analysis_method', 'tradicional'))
            metrics_table.add_row("Archivos totales", str(metrics.get('total_files', 0)))
            metrics_table.add_row("Archivos importantes", str(metrics.get('files_analyzed', len(dependency_data.get('important_files', [])))))
            metrics_table.add_row("Grupos funcionales", str(len(dependency_data.get('functionality_groups', []))))
            metrics_table.add_row("Dependencias totales", str(metrics.get('total_dependencies', 0)))
            metrics_table.add_row("Promedio dependencias", str(metrics.get('average_dependencies', 0)))
            metrics_table.add_row("Complejidad", metrics.get('complexity', 'desconocida'))
            
            if metrics.get('performance_optimized'):
                metrics_table.add_row("Optimizaci√≥n", "‚úÖ Filtrado inteligente aplicado")
            
            console.print(metrics_table)
        
        # Mostrar archivos importantes
        important_files = dependency_data.get('important_files', [])
        if important_files:
            cli.print_info(f"\nüéØ Top {min(10, len(important_files))} archivos m√°s importantes:")
            
            files_table = cli.create_table("Archivos Importantes", 
                                         ["Archivo", "Deps Out", "Deps In", "Score", "Tipo"])
            
            for file_info in important_files[:10]:
                path_display = file_info['path']
                if len(path_display) > 50:
                    path_display = "..." + path_display[-47:]
                    
                files_table.add_row(
                    path_display,
                    str(file_info.get('dependencies_out', 0)),
                    str(file_info.get('dependencies_in', 0)),
                    str(file_info.get('importance_score', 0)),
                    file_info.get('file_info', {}).get('type', 'unknown')
                )
            
            console.print(files_table)
        
        # Mostrar grupos de funcionalidad
        if show_groups:
            groups = dependency_data.get('functionality_groups', [])
            if groups:
                cli.print_info(f"\nüèóÔ∏è  Grupos funcionales detectados ({len(groups)}):")
                
                for i, group in enumerate(groups[:5]):  # Mostrar solo los top 5
                    group_name = group['name']
                    group_size = group['size']
                    group_importance = group['total_importance']
                    group_type = group.get('type', 'unknown')
                    
                    console.print(f"  {i+1}. {group_name}")
                    console.print(f"     üìÅ {group_size} archivos, Score: {group_importance}")
                    
                    if group_type == 'circular':
                        console.print(f"     üîÑ [yellow]Dependencia circular detectada[/yellow]")
                    elif group_type == 'directory':
                        console.print(f"     üìÇ [blue]Agrupaci√≥n por directorio[/blue]")
                    elif group_type == 'filetype':
                        console.print(f"     üîß [green]Agrupaci√≥n por tipo de archivo[/green]")
            else:
                cli.print_info(f"\nüèóÔ∏è  No se detectaron grupos funcionales significativos")
        
        # Mostrar ciclos si se detectaron
        if show_cycles:
            cycles = dependency_data.get('file_cycles', [])
            if cycles:
                cli.print_warning(f"\nüîÑ Dependencias circulares detectadas ({len(cycles)}):")
                for i, cycle in enumerate(cycles[:3]):  # Mostrar solo los primeros 3
                    cycle_display = " ‚Üí ".join(cycle[:4])
                    if len(cycle) > 4:
                        cycle_display += " ‚Üí ..."
                    console.print(f"  {i+1}. {cycle_display}")
        
        # Generar archivo de salida (autom√°tico o solicitado)
        if output:
            output_path = output
            
            # Determinar formato bas√°ndose en extensi√≥n o par√°metro
            if not output.endswith(('.json', '.md', '.html')):
                if format == 'json':
                    output_path = f"{output}.json"
                elif format == 'html':
                    output_path = f"{output}.html"
                else:
                    output_path = f"{output}.md"
            
            # Asegurar que el directorio existe
            os.makedirs(os.path.dirname(os.path.abspath(output_path)), exist_ok=True)
        else:
            # Auto-generar nombre de archivo y guardarlo en directorio estructurado
            project_name = os.path.basename(project_path)
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            
            # Crear subdirectorio para dependencias dentro de ANALYSES_DIR
            dependencies_dir = ANALYSES_DIR / "dependencies"
            os.makedirs(dependencies_dir, exist_ok=True)
            
            # Generar nombre de archivo basado en formato
            if format == 'json':
                filename = f"deps_{project_name}_{timestamp}.json"
            elif format == 'html':
                filename = f"deps_{project_name}_{timestamp}.html"
            else:
                filename = f"deps_{project_name}_{timestamp}.md"
            
            output_path = str(dependencies_dir / filename)
            
            with cli.status(f"üíæ Generando archivo {format}..."):
                if output_path.endswith('.json'):
                    # Guardar en formato JSON
                    with open(output_path, 'w', encoding='utf-8') as f:
                        json.dump(dependency_data, f, indent=2, default=str)
                        
                elif output_path.endswith('.md'):
                    # Generar Markdown
                    markdown_content = analyzer.generate_markdown_visualization(dependency_data)
                    with open(output_path, 'w', encoding='utf-8') as f:
                        f.write(markdown_content)
                        
                elif output_path.endswith('.html'):
                    # Generar HTML (si est√° disponible)
                    try:
                        from src.ui.dashboard import DashboardCLI
                        dashboard = DashboardCLI()
                        html_content = dashboard.generate_dependencies_html(dependency_data)
                        with open(output_path, 'w', encoding='utf-8') as f:
                            f.write(html_content)
                    except Exception as e:
                        cli.print_warning(f"No se pudo generar HTML: {e}")
                        # Fallback a JSON
                        output_path = output_path.replace('.html', '.json')
                        with open(output_path, 'w', encoding='utf-8') as f:
                            json.dump(dependency_data, f, indent=2, default=str)
            
            if output:
                cli.print_success(f"üìÑ An√°lisis guardado en: {output_path}")
            else:
                cli.print_success(f"üìÑ An√°lisis guardado autom√°ticamente en: {output_path}")
                cli.print_info(f"üí° Para especificar ubicaci√≥n personalizada, usa: --output <archivo>")
        
        # Sugerir siguientes pasos
        cli.print_info("\nüí° Sugerencias para an√°lisis m√°s profundo:")
        
        if not use_madge:
            console.print("  ‚Ä¢ Prueba con --madge para an√°lisis m√°s r√°pido")
            
        if important_files and len(important_files) == max_files:
            console.print(f"  ‚Ä¢ Aumenta --max-files para analizar m√°s archivos importantes")
            
        if output:
            console.print("  ‚Ä¢ Usa --format html para visualizaci√≥n interactiva")
        else:
            console.print("  ‚Ä¢ Usa --output <archivo> para especificar ubicaci√≥n personalizada")
            console.print("  ‚Ä¢ Usa --format html para visualizaci√≥n interactiva")
            
        console.print("  ‚Ä¢ Usa 'project-prompt premium dashboard' para an√°lisis completo con IA")
        
        # Registro de telemetr√≠a si est√° habilitado
        record_command("analyze_dependencies", {
            "files_analyzed": len(important_files),
            "analysis_time": analysis_time,
            "use_madge": use_madge,
            "complexity": metrics.get('complexity', 'unknown')
        })
            
    except Exception as e:
        cli.print_error(f"‚ùå Error durante el an√°lisis: {e}")
        logger.error(f"Error en analyze_dependencies: {e}", exc_info=True)
        record_error("analyze_dependencies", str(e))


@app.command()
def help():
    """Mostrar ayuda detallada sobre ProjectPrompt."""
    cli.print_header("Ayuda de ProjectPrompt")
    
    cli.print_panel(
        "Acerca de ProjectPrompt", 
        "ProjectPrompt es un asistente inteligente para analizar proyectos de c√≥digo "
        "y generar prompts contextuales utilizando IA.\n\n"
        "Permite analizar la estructura de proyectos, detectar funcionalidades, "
        "y generar documentaci√≥n progresiva."
    )
    
    # Comandos disponibles
    table = cli.create_table("Comandos Disponibles", ["Comando", "Descripci√≥n"])
    table.add_row("init", "Inicializar un nuevo proyecto")
    table.add_row("analyze", "Analizar la estructura de un proyecto")
    table.add_row("version", "Mostrar la versi√≥n actual")
    table.add_row("config", "Gestionar la configuraci√≥n")
    table.add_row("set-api", "Configurar claves de API")
    table.add_row("verify-api", "Verificar estado de APIs")
    table.add_row("interview", "Realizar entrevista guiada sobre una funcionalidad")
    table.add_row("analyze-feature", "Analizar funcionalidad espec√≠fica")
    table.add_row("list-interviews", "Listar entrevistas existentes")
    table.add_row("implementation-proposal", "Generar propuesta de implementaci√≥n")
    table.add_row("implementation-prompt", "Generar prompt detallado para implementaci√≥n (premium)")
    table.add_row("generate_prompts", "Generar prompts contextuales del proyecto")
    table.add_row("set-log-level", "Cambiar el nivel de logging")
    table.add_row("menu", "Iniciar el men√∫ interactivo")
    table.add_row("dashboard", "Generar dashboard b√°sico del proyecto")
    table.add_row("premium", "Acceder a comandos premium (ahora disponibles para todos)")
    table.add_row("diagnose", "Diagnosticar instalaci√≥n y problemas")
    table.add_row("rules-init", "Inicializar archivo de reglas del proyecto")
    table.add_row("rules-validate", "Validar sintaxis del archivo de reglas")
    table.add_row("rules-apply", "Aplicar reglas y verificar cumplimiento")
    table.add_row("rules-report", "Generar reporte de cumplimiento de reglas")
    table.add_row("help", "Mostrar esta ayuda")
    
    # Comandos premium
    premium_table = cli.create_table("Comandos Premium", ["Comando", "Descripci√≥n"])
    premium_table.add_row("premium dashboard", "Dashboard avanzado interactivo")
    premium_table.add_row("premium test-generator", "Generador de tests unitarios")
    premium_table.add_row("premium verify-completeness", "Verificador de completitud")
    premium_table.add_row("premium implementation", "Asistente de implementaci√≥n")
    console.print(premium_table)
    console.print(table)
    
    cli.print_info("Para m√°s informaci√≥n sobre un comando espec√≠fico, use:")
    console.print("  project-prompt [COMANDO] --help")


@app.command()
def docs(
    path: str = typer.Argument(".", help="Ruta al proyecto para generar documentaci√≥n"),
    output: Optional[str] = typer.Option(None, "--output", "-o", help="Ruta para guardar la documentaci√≥n"),
    update: bool = typer.Option(False, "--update", "-u", help="Actualizar documentaci√≥n existente"),
    overwrite: bool = typer.Option(False, "--overwrite", help="Sobrescribir documentaci√≥n existente"),
):
    """Generar documentaci√≥n en markdown para el proyecto analizado."""
    import os
    from src.utils.documentation_system import get_documentation_system
    
    project_path = os.path.abspath(path)
    
    if not os.path.isdir(project_path):
        cli.print_error(f"La ruta especificada no es un directorio v√°lido: {project_path}")
        return
    
    # Determinar directorio de documentaci√≥n
    output_dir = output
    if not output_dir:
        output_dir = os.path.join(project_path, 'project-output/documentation')
    
    cli.print_header("Sistema de Documentaci√≥n")
    cli.print_info(f"Generando documentaci√≥n para proyecto en: {project_path}")
    
    # Verificar si ya existe documentaci√≥n
    if os.path.exists(output_dir) and not update and not overwrite:
        cli.print_warning(f"Ya existe documentaci√≥n en: {output_dir}")
        cli.print_info("Use --update para actualizar o --overwrite para sobrescribir")
        
        # Mostrar informaci√≥n b√°sica
        try:
            doc_system = get_documentation_system()
            info = doc_system.get_documentation_info(output_dir)
            
            cli.print_panel(
                "Documentaci√≥n Existente",
                f"√öltima actualizaci√≥n: {info.get('last_updated', 'Desconocida')}\n"
                f"Documentos: {info.get('document_count', 0)}\n"
                f"Funcionalidades: {len(info.get('functionalities', []))}"
            )
        except Exception as e:
            logger.error(f"Error al obtener info de documentaci√≥n: {e}", exc_info=True)
            
        return
    
    try:
        with cli.status("Generando documentaci√≥n..."):
            doc_system = get_documentation_system()
            
            if update and os.path.exists(output_dir):
                result = doc_system.update_documentation(project_path, output_dir)
                action = "actualizada"
            else:
                result = doc_system.generate_project_documentation(
                    project_path, output_dir, overwrite=overwrite
                )
                action = "generada"
        
        # Mostrar resultados
        cli.print_success(f"Documentaci√≥n {action} exitosamente")
        cli.print_info(f"Directorio de documentaci√≥n: {result['docs_dir']}")
        
        # Mostrar contenido generado
        cli.print_panel(
            "Documentos Generados",
            f"An√°lisis general: {os.path.basename(result['project_analysis'])}\n"
            f"Funcionalidades: {len(result['functionalities'])}\n"
            f"Configuraci√≥n: {os.path.basename(result['config'])}"
        )
    except Exception as e:
        cli.print_error(f"Error al generar documentaci√≥n: {e}")
        logger.error(f"Error en docs: {e}", exc_info=True)


# Helper function to create user-friendly command guidance
def show_command_guidance(command_name: str, available_commands: List[str]):
    """Show helpful guidance when a command is incomplete"""
    cli.print_warning(f"Comando incompleto: '{command_name}'")
    cli.print_info("Comandos disponibles:")
    for cmd in available_commands:
        cli.print_info(f"  ‚Ä¢ {command_name} {cmd}")
    cli.print_info(f"\nUse '{command_name} --help' para ver m√°s detalles")

# Enhanced help for generate-suggestions command
def show_generate_suggestions_help():
    """Show specific help for generate-suggestions command"""
    cli.print_header("Comando: generate-suggestions")
    cli.print_info("Este comando genera sugerencias de mejora para un grupo funcional espec√≠fico.")
    cli.print_info("")
    cli.print_info("IMPORTANTE: Antes de usar este comando:")
    cli.print_info("1. Ejecute 'pp analyze-group' para ver grupos disponibles")
    cli.print_info("2. Seleccione un grupo y anal√≠celo con IA")
    cli.print_info("3. Luego use este comando con el nombre del grupo")
    cli.print_info("")
    cli.print_info("Uso:")
    cli.print_info("  pp generate-suggestions \"Nombre del Grupo\"")
    cli.print_info("")
    cli.print_info("Ejemplo:")
    cli.print_info("  pp analyze-group                    # Ver grupos disponibles")
    cli.print_info("  pp generate-suggestions \"src/ui\"   # Generar sugerencias")

# Enhanced help for ai commands
def show_ai_command_help():
    """Show specific help for ai commands"""
    from src.ui.cli import CLI
    cli = CLI()
    cli.print_header("Comandos de IA")
    cli.print_info("Los comandos de IA utilizan modelos avanzados para an√°lisis de c√≥digo.")
    cli.print_info("")
    cli.print_info("Comandos disponibles:")
    cli.print_info("  ‚Ä¢ ai analyze [archivo] --provider [anthropic|copilot]")
    cli.print_info("  ‚Ä¢ ai refactor [archivo] --provider [anthropic|copilot]")
    cli.print_info("  ‚Ä¢ ai explain [archivo] --provider [anthropic|copilot]")
    cli.print_info("  ‚Ä¢ ai generate [descripci√≥n] --output [directorio]")
    cli.print_info("")
    cli.print_info("Ejemplos:")
    cli.print_info("  pp ai analyze src/main.py --provider anthropic")
    cli.print_info("  pp ai generate \"crear funci√≥n de validaci√≥n\" --output src/utils/")

# Enhanced help for analyze-group command
def show_analyze_group_help():
    """Show specific help for analyze-group command"""
    cli.print_header("Comando: analyze-group")
    cli.print_info("Este comando analiza grupos funcionales espec√≠ficos con IA avanzada.")
    cli.print_info("")
    cli.print_info("Flujo de trabajo:")
    cli.print_info("1. Sin argumentos: Muestra los grupos funcionales disponibles")
    cli.print_info("2. Con nombre de grupo: Analiza ese grupo espec√≠fico con IA")
    cli.print_info("3. Genera an√°lisis detallado guardado en project-output/analyses/groups/")
    cli.print_info("")
    cli.print_info("Uso:")
    cli.print_info("  pp analyze-group                    # Listar grupos disponibles")
    cli.print_info("  pp analyze-group \"Nombre del Grupo\" # Analizar grupo espec√≠fico")
    cli.print_info("")
    cli.print_info("Ejemplos:")
    cli.print_info("  pp analyze-group                    # Ver todos los grupos")
    cli.print_info("  pp analyze-group \"src/ui\"          # Analizar grupo de interfaz")
    cli.print_info("  pp analyze-group \"Authentication\"  # Analizar autenticaci√≥n")
    cli.print_info("")
    cli.print_info("Nota: Requiere API key de Anthropic configurada")

# Enhanced help for rules commands
def show_rules_command_help():
    """Show specific help for rules commands"""
    cli.print_header("Comandos de Reglas")
    cli.print_info("Sistema avanzado de gesti√≥n de reglas para desarrollo con IA.")
    cli.print_info("")
    cli.print_info("Comandos principales:")
    cli.print_info("  ‚Ä¢ rules suggest --ai --threshold 0.8     # Generar sugerencias de reglas")
    cli.print_info("  ‚Ä¢ rules analyze-patterns --detailed      # Analizar patrones del proyecto")
    cli.print_info("  ‚Ä¢ rules auto-generate --output rules.yaml # Auto-generar reglas completas")
    cli.print_info("  ‚Ä¢ rules generate-structured-rules --ai   # Reglas estructuradas avanzadas")
    cli.print_info("  ‚Ä¢ rules validate rules.yaml              # Validar archivo de reglas")
    cli.print_info("  ‚Ä¢ rules apply                            # Aplicar y verificar reglas")
    cli.print_info("  ‚Ä¢ rules report                           # Generar reporte de cumplimiento")
    cli.print_info("")
    cli.print_info("Flujo recomendado:")
    cli.print_info("1. rules suggest --ai                     # Generar sugerencias")
    cli.print_info("2. rules auto-generate --review           # Crear archivo de reglas")
    cli.print_info("3. rules validate project-rules.yaml     # Validar sintaxis")
    cli.print_info("4. rules apply                            # Aplicar reglas")
    cli.print_info("5. rules report                           # Verificar cumplimiento")
    cli.print_info("")
    cli.print_info("Caracter√≠sticas avanzadas:")
    cli.print_info("  ‚Ä¢ An√°lisis con IA para sugerencias inteligentes")
    cli.print_info("  ‚Ä¢ Detecci√≥n autom√°tica de tecnolog√≠as y patrones")
    cli.print_info("  ‚Ä¢ Reglas estructuradas con contexto y prioridades")
    cli.print_info("  ‚Ä¢ Exportaci√≥n en m√∫ltiples formatos (YAML, JSON, Markdown)")
    cli.print_info("  ‚Ä¢ Revisi√≥n interactiva de sugerencias")

# Enhanced help for premium commands
def show_premium_command_help():
    """Show specific help for premium commands"""
    from src.ui.cli import CLI
    cli = CLI()
    cli.print_header("Comandos Premium")
    cli.print_info("Funciones avanzadas ahora disponibles para todos los usuarios.")
    cli.print_info("")
    cli.print_info("Comandos disponibles:")
    cli.print_info("  ‚Ä¢ premium dashboard                      # Dashboard interactivo avanzado")
    cli.print_info("  ‚Ä¢ premium test-generator [archivo]      # Generador de tests unitarios")
    cli.print_info("  ‚Ä¢ premium verify-completeness           # Verificar completitud del proyecto")
    cli.print_info("  ‚Ä¢ premium implementation [descripci√≥n]  # Asistente de implementaci√≥n")
    cli.print_info("")
    cli.print_info("Ejemplos:")
    cli.print_info("  pp premium dashboard")
    cli.print_info("  pp premium test-generator src/main.py")
    cli.print_info("  pp premium implementation \"sistema de autenticaci√≥n\"")
    cli.print_info("")
    cli.print_info("Nota: Todas las funciones premium ahora est√°n disponibles gratuitamente")

# Implementaci√≥n de comandos de IA
@ai_app.command("generate")
@telemetry_command
def ai_generate_code(
    description: Optional[str] = typer.Argument(None, help="Descripci√≥n del c√≥digo a generar"),
    language: str = typer.Option("python", "--language", "-l", help="Lenguaje de programaci√≥n"),
    provider: str = typer.Option("anthropic", "--provider", "-p", 
                                help="Proveedor de IA (anthropic, copilot)"),
    output: Optional[str] = typer.Option(None, "--output", "-o", help="Archivo donde guardar el c√≥digo")
):
    """
    Generar c√≥digo utilizando IA avanzada (caracter√≠stica premium).
    """
    # Check if description parameter is provided
    if not description:
        show_ai_command_help()
        return
    from src.integrations.anthropic_advanced import get_advanced_anthropic_client
    from src.integrations.copilot_advanced import get_advanced_copilot_client
    
    cli.print_header("Generaci√≥n de C√≥digo con IA")
    
    # Premium features now available for all users
    
    # Seleccionar cliente seg√∫n proveedor
    if provider.lower() == "anthropic":
        client = get_advanced_anthropic_client()
        provider_name = "Anthropic Claude"
    elif provider.lower() == "copilot":
        client = get_advanced_copilot_client()
        provider_name = "GitHub Copilot"
    else:
        cli.print_error(f"Proveedor no soportado: {provider}")
        return
    
    cli.print_info(f"Utilizando {provider_name} para generar c√≥digo {language}")
    
    with cli.status(f"Generando c√≥digo {language} con {provider_name}..."):
        result = client.generate_code(description, language)
    
    if result.get("success"):
        code = result.get("code", "")
        
        # Mostrar c√≥digo generado
        cli.print_success("C√≥digo generado exitosamente:")
        console.print("")
        console.print(f"```{language}")
        console.print(code)
        console.print("```")
        console.print("")
        
        # Guardar a archivo si se especific√≥
        if output:
            try:
                with open(output, 'w', encoding='utf-8') as f:
                    f.write(code)
                cli.print_success(f"C√≥digo guardado en: {output}")
            except Exception as e:
                cli.print_error(f"Error al guardar c√≥digo: {e}")
    else:
        cli.print_error(f"Error al generar c√≥digo: {result.get('error', 'Error desconocido')}")


@ai_app.command("analyze")
@telemetry_command
def ai_analyze_code(
    file_path: Optional[str] = typer.Argument(None, help="Ruta al archivo de c√≥digo a analizar"),
    language: Optional[str] = typer.Option(None, "--language", "-l", help="Lenguaje de programaci√≥n"),
    provider: str = typer.Option("anthropic", "--provider", "-p", 
                               help="Proveedor de IA (anthropic, copilot)"),
    output: Optional[str] = typer.Option(None, "--output", "-o", 
                                       help="Archivo donde guardar el an√°lisis")
):
    """
    Analizar c√≥digo para detectar errores y problemas (caracter√≠stica premium).
    """
    # Check if file_path parameter is provided
    if not file_path:
        show_ai_command_help()
        return
    from src.integrations.anthropic_advanced import get_advanced_anthropic_client
    from src.integrations.copilot_advanced import get_advanced_copilot_client
    import os
    
    cli.print_header("An√°lisis de C√≥digo con IA")
    
    # Premium features now available for all users
    
    # Verificar archivo
    if not os.path.isfile(file_path):
        cli.print_error(f"El archivo no existe: {file_path}")
        return
    
    # Determinar lenguaje si no se especific√≥
    if not language:
        _, ext = os.path.splitext(file_path)
        language_map = {
            '.py': 'python',
            '.js': 'javascript',
            '.ts': 'typescript',
            '.java': 'java',
            '.cs': 'csharp',
            '.go': 'go',
            '.rb': 'ruby',
            '.php': 'php',
            '.rs': 'rust',
            '.cpp': 'cpp',
            '.c': 'c',
        }
        language = language_map.get(ext.lower(), 'unknown')
        if language == 'unknown':
            cli.print_warning(f"No se pudo determinar el lenguaje para la extensi√≥n {ext}")
            language = 'python'  # Valor predeterminado
    
    # Leer contenido del archivo
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            code = f.read()
    except Exception as e:
        cli.print_error(f"Error al leer archivo: {e}")
        return
    
    # Seleccionar cliente seg√∫n proveedor
    if provider.lower() == "anthropic":
        client = get_advanced_anthropic_client()
        provider_name = "Anthropic Claude"
    elif provider.lower() == "copilot":
        client = get_advanced_copilot_client()
        provider_name = "GitHub Copilot"
    else:
        cli.print_error(f"Proveedor no soportado: {provider}")
        return
    
    cli.print_info(f"Analizando c√≥digo {language} con {provider_name}")
    
    with cli.status(f"Analizando c√≥digo..."):
        result = client.detect_errors(code, language)
    
    if result.get("success"):
        issues = result.get("issues", [])
        
        if issues:
            # Crear tabla con problemas detectados
            issues_table = cli.create_table(
                "Problemas Detectados", 
                ["Tipo", "Descripci√≥n", "Ubicaci√≥n", "Severidad", "Soluci√≥n"]
            )
            
            for issue in issues:
                issues_table.add_row(
                    issue.get("type", ""),
                    issue.get("description", ""),
                    issue.get("location", ""),
                    issue.get("severity", ""),
                    issue.get("fix", "")
                )
            
            console.print(issues_table)
            cli.print_info(f"Se detectaron {len(issues)} problemas en el c√≥digo.")
        else:
            cli.print_success("No se detectaron problemas en el c√≥digo.")
        
        # Guardar an√°lisis si se especific√≥
        if output:
            try:
                import json
                with open(output, 'w', encoding='utf-8') as f:
                    json.dump(result, f, indent=2)
                cli.print_success(f"An√°lisis guardado en: {output}")
            except Exception as e:
                cli.print_error(f"Error al guardar an√°lisis: {e}")
    else:
        cli.print_error(f"Error al analizar c√≥digo: {result.get('error', 'Error desconocido')}")


@ai_app.command("refactor")
@telemetry_command
def ai_refactor_code(
    file_path: Optional[str] = typer.Argument(None, help="Ruta al archivo de c√≥digo a refactorizar"),
    language: Optional[str] = typer.Option(None, "--language", "-l", help="Lenguaje de programaci√≥n"),
    provider: str = typer.Option("anthropic", "--provider", "-p", 
                               help="Proveedor de IA (anthropic, copilot)"),
    output: Optional[str] = typer.Option(None, "--output", "-o", 
                                       help="Archivo donde guardar el c√≥digo refactorizado")
):
    """
    Refactorizar c√≥digo para mejorar su calidad (caracter√≠stica premium).
    """
    # Check if file_path parameter is provided
    if not file_path:
        show_ai_command_help()
        return
    from src.integrations.anthropic_advanced import get_advanced_anthropic_client
    from src.integrations.copilot_advanced import get_advanced_copilot_client
    import os
    
    cli.print_header("Refactorizaci√≥n de C√≥digo con IA")
    
    # Premium features now available for all users
    
    # Verificar archivo
    if not os.path.isfile(file_path):
        cli.print_error(f"El archivo no existe: {file_path}")
        return
    
    # Determinar lenguaje si no se especific√≥
    if not language:
        _, ext = os.path.splitext(file_path)
        language_map = {
            '.py': 'python',
            '.js': 'javascript',
            '.ts': 'typescript',
            '.java': 'java',
            '.cs': 'csharp',
            '.go': 'go',
            '.rb': 'ruby',
            '.php': 'php',
            '.rs': 'rust',
            '.cpp': 'cpp',
            '.c': 'c',
        }
        language = language_map.get(ext.lower(), 'unknown')
        if language == 'unknown':
            cli.print_warning(f"No se pudo determinar el lenguaje para la extensi√≥n {ext}")
            language = 'python'  # Valor predeterminado
    
    # Leer contenido del archivo
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            code = f.read()
    except Exception as e:
        cli.print_error(f"Error al leer archivo: {e}")
        return
    
    # Seleccionar cliente seg√∫n proveedor
    if provider.lower() == "anthropic":
        client = get_advanced_anthropic_client()
        provider_name = "Anthropic Claude"
    elif provider.lower() == "copilot":
        client = get_advanced_copilot_client()
        provider_name = "GitHub Copilot"
    else:
        cli.print_error(f"Proveedor no soportado: {provider}")
        return
    
    cli.print_info(f"Refactorizando c√≥digo {language} con {provider_name}")
    
    with cli.status(f"Refactorizando c√≥digo..."):
        result = client.suggest_refactoring(code, language)
    
    if result.get("success"):
        refactored_code = result.get("refactored_code", "")
        suggestions = result.get("suggestions", [])
        
        # Mostrar c√≥digo refactorizado
        cli.print_success("C√≥digo refactorizado:")
        console.print("")
        console.print(f"```{language}")
        console.print(refactored_code)
        console.print("```")
        console.print("")
        
        # Mostrar sugerencias
        if suggestions:
            cli.print_info("Mejoras realizadas:")
            for i, suggestion in enumerate(suggestions):
                console.print(f"  {i+1}. {suggestion}")
        
        # Guardar a archivo si se especific√≥
        if output:
            try:
                with open(output, 'w', encoding='utf-8') as f:
                    f.write(refactored_code)
                cli.print_success(f"C√≥digo refactorizado guardado en: {output}")
            except Exception as e:
                cli.print_error(f"Error al guardar c√≥digo: {e}")
    else:
        cli.print_error(f"Error al refactorizar c√≥digo: {result.get('error', 'Error desconocido')}")


@ai_app.command("explain")
@telemetry_command
def ai_explain_code(
    file_path: Optional[str] = typer.Argument(None, help="Ruta al archivo de c√≥digo a explicar"),
    language: Optional[str] = typer.Option(None, "--language", "-l", help="Lenguaje de programaci√≥n"),
    detail_level: str = typer.Option("standard", "--detail", "-d", 
                                   help="Nivel de detalle (basic, standard, advanced)"),
    output: Optional[str] = typer.Option(None, "--output", "-o", 
                                       help="Archivo donde guardar la explicaci√≥n")
):
    """
    Generar una explicaci√≥n detallada del c√≥digo (caracter√≠stica premium para nivel avanzado).
    """
    # Check if file_path parameter is provided
    if not file_path:
        show_ai_command_help()
        return
    from src.integrations.anthropic_advanced import get_advanced_anthropic_client
    import os
    
    cli.print_header("Explicaci√≥n de C√≥digo con IA")
    
    # Premium features now available for all users - advanced level enabled
    
    # Verificar archivo
    if not os.path.isfile(file_path):
        cli.print_error(f"El archivo no existe: {file_path}")
        return
    
    # Determinar lenguaje si no se especific√≥
    if not language:
        _, ext = os.path.splitext(file_path)
        language_map = {
            '.py': 'python',
            '.js': 'javascript',
            '.ts': 'typescript',
            '.java': 'java',
            '.cs': 'csharp',
            '.go': 'go',
            '.rb': 'ruby',
            '.php': 'php',
            '.rs': 'rust',
            '.cpp': 'cpp',
            '.c': 'c',
        }
        language = language_map.get(ext.lower(), 'unknown')
        if language == 'unknown':
            cli.print_warning(f"No se pudo determinar el lenguaje para la extensi√≥n {ext}")
            language = 'python'  # Valor predeterminado
    
    # Leer contenido del archivo
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            code = f.read()
    except Exception as e:
        cli.print_error(f"Error al leer archivo: {e}")
        return
    
    # Usar Anthropic para la explicaci√≥n
    client = get_advanced_anthropic_client()
    
    cli.print_info(f"Generando explicaci√≥n de c√≥digo {language} (nivel {detail_level})")
    
    with cli.status(f"Analizando y explicando c√≥digo..."):
        result = client.explain_code(code, language, detail_level)
    
    if result.get("success"):
        explanation = result.get("explanation", "")
        
        # Mostrar explicaci√≥n
        cli.print_success(f"Explicaci√≥n del c√≥digo ({os.path.basename(file_path)}):")
        console.print("")
        console.print(explanation)
        console.print("")
        
        # Guardar a archivo si se especific√≥
        if output:
            try:
                with open(output, 'w', encoding='utf-8') as f:
                    f.write(explanation)
                cli.print_success(f"Explicaci√≥n guardada en: {output}")
            except Exception as e:
                cli.print_error(f"Error al guardar explicaci√≥n: {e}")
    else:
        cli.print_error(f"Error al explicar c√≥digo: {result.get('error', 'Error desconocido')}")


@app.command()
def dashboard(
    project: str = typer.Argument(".", help="Ruta al proyecto para generar el dashboard"),
    output: Optional[str] = typer.Option(None, "--output", "-o", help="Ruta donde guardar el dashboard"),
    format: str = typer.Option("markdown", "--format", "-f", help="Formato de salida (html/markdown)"),
    no_browser: bool = typer.Option(False, "--no-browser", help="No abrir autom√°ticamente en el navegador")
):
    """Generar un dashboard visual con el estado y progreso del proyecto."""
    cli.print_header("Dashboard de Progreso del Proyecto")
    
    # Sugerir versi√≥n premium para acceso a todas las caracter√≠sticas
    cli.print_info("ProjectPrompt ofrece una versi√≥n premium del dashboard con caracter√≠sticas adicionales.")
    cli.print_info("Para acceder a todas las funcionalidades como seguimiento de branches, progreso por caracter√≠stica")
    cli.print_info("y recomendaciones proactivas, use: 'project-prompt premium dashboard'")
    console.print("")
    
    try:
        # Crear instancia del CLI del dashboard
        dashboard_cli = DashboardCLI()
        
        # Configurar argumentos
        args = []
        if project != ".":
            args.extend(["--project", project])
        if output:
            args.extend(["--output", output])
        if format:
            args.extend(["--format", format])
        if no_browser:
            args.append("--no-browser")
            
        # Ejecutar el dashboard
        result = dashboard_cli.run(args)
        
        if result != 0:
            cli.print_error("Error al generar el dashboard")
            return
            
    except Exception as e:
        cli.print_error(f"Error al generar el dashboard: {str(e)}")
        logger.error(f"Error en dashboard: {str(e)}", exc_info=True)


# Implementaci√≥n de comandos premium (ahora disponibles para todos los usuarios)

@premium_app.command("dashboard")
def premium_dashboard(
    project: str = typer.Argument(".", help="Ruta al proyecto para generar el dashboard"),
    format: str = typer.Option("markdown", "--format", "-f", help="Formato de salida (html/markdown/md)"),
    output: Optional[str] = typer.Option(None, "--output", "-o", help="Ruta donde guardar el dashboard"),
    no_browser: bool = typer.Option(False, "--no-browser", help="No abrir autom√°ticamente en el navegador"),
    detailed: bool = typer.Option(False, "--detailed", help="Incluir an√°lisis detallado de dependencias y arquitectura")
):
    """Genera un dashboard premium con an√°lisis avanzado de arquitectura y m√©tricas detalladas."""
    
    cli.print_header("Dashboard Premium de Proyecto")
    
    # Premium features now available for all users
    
    # Crear instancia del CLI del dashboard
    dashboard_cli = DashboardCLI()
    
    # Configurar argumentos para premium
    args = ["--premium"]
    if project != ".":
        args.extend(["--project", project])
    if format != "html":
        args.extend(["--format", format])
    if output:
        args.extend(["--output", output])
    if no_browser:
        args.append("--no-browser")
    if detailed:
        args.append("--detailed")
    
    # Ejecutar dashboard premium
    dashboard_cli.run(args)


@premium_app.command("test-generator")
def premium_generate_tests(
    target: str = typer.Argument(..., help="Archivo o directorio para generar tests"),
    output_dir: str = typer.Option("tests", "--output-dir", "-o", help="Directorio donde guardar los tests generados"),
    framework: str = typer.Option("auto", "--framework", "-f", help="Framework de tests (pytest, unittest, jest, auto)"),
    verbose: bool = typer.Option(False, "--verbose", "-v", help="Mostrar informaci√≥n detallada")
):
    """Genera tests unitarios autom√°ticamente para un componente o archivo (caracter√≠stica premium)."""
    from src.generators.test_generator import TestGenerator
    import os
    
    cli.print_header("Generaci√≥n de Tests Unitarios")
    
    # Premium features now available for all users
    
    # Verificar que el objetivo existe
    target_path = os.path.abspath(target)
    if not os.path.exists(target_path):
        cli.print_error(f"El archivo o directorio no existe: {target_path}")
        return
    
    # Configurar generador de tests
    config = {
        "output_dir": output_dir,
        "test_framework": framework,
        "verbose": verbose,
    }
    
    cli.print_info(f"Generando tests unitarios para: {target_path}")
    
    try:
        generator = TestGenerator(config)
        
        with cli.status("Analizando c√≥digo y generando tests..."):
            if os.path.isdir(target_path):
                results = generator.generate_tests_for_directory(target_path)
            else:
                results = generator.generate_tests_for_file(target_path)
        
        # Mostrar resultados
        if results.get("success"):
            cli.print_success(f"Tests generados exitosamente en: {os.path.abspath(output_dir)}")
            
            # Mostrar detalles de archivos generados
            tests_table = cli.create_table("Tests Generados", ["Archivo Original", "Archivo de Test", "Cobertura Est."])
            for item in results.get("generated_tests", []):
                tests_table.add_row(
                    os.path.basename(item.get("source_file", "")),
                    os.path.basename(item.get("test_file", "")),
                    f"{item.get('estimated_coverage', 0)}%"
                )
            console.print(tests_table)
            
            # Mostrar recomendaciones
            if results.get("recommendations"):
                cli.print_panel(
                    "Recomendaciones", 
                    "\n".join([f"‚Ä¢ {r}" for r in results.get("recommendations", [])])
                )
        else:
            cli.print_error(f"Error al generar tests: {results.get('error', 'Error desconocido')}")
            
    except Exception as e:
        cli.print_error(f"Error durante la generaci√≥n de tests: {e}")
        logger.error(f"Error en premium_generate_tests: {e}", exc_info=True)


@premium_app.command("verify-completeness")
def premium_verify_completeness(
    target: str = typer.Argument(".", help="Archivo, directorio o funcionalidad para verificar"),
    checklist_type: str = typer.Option("auto", "--type", "-t", 
                                      help="Tipo de verificaci√≥n (component, feature, project, auto)"),
    output: Optional[str] = typer.Option(None, "--output", "-o", 
                                        help="Archivo donde guardar el reporte en formato JSON")
):
    """Verifica la completitud de una implementaci√≥n seg√∫n criterios predefinidos (caracter√≠stica premium)."""
    from src.analyzers.completeness_verifier import CompletenessVerifier
    import os
    
    cli.print_header("Verificaci√≥n de Completitud")
    
    # Premium features now available for all users
    
    # Si es una ruta, verificar que existe
    if os.path.exists(target):
        target_path = os.path.abspath(target)
        target_type = "directory" if os.path.isdir(target_path) else "file"
        cli.print_info(f"Verificando completitud de {target_type}: {target_path}")
    else:
        # Podr√≠a ser el nombre de una funcionalidad
        target_path = "."
        cli.print_info(f"Verificando completitud de funcionalidad: {target}")
    
    try:
        # Crear el verificador con acceso premium
        config = {"premium": True}
        verifier = CompletenessVerifier(config)
        
        with cli.status("Analizando completitud..."):
            if target_type == "file":
                results = verifier.verify_file(target_path, checklist_type)
            elif target_type == "directory":
                results = verifier.verify_directory(target_path, checklist_type)
            else:
                # Funcionalidad
                results = verifier.verify_functionality(target, checklist_type)
        
        # Mostrar resultados
        completeness = results.get("completeness_score", 0)
        quality_score = results.get("quality_score", 0)
        
        # Determinar color seg√∫n completitud
        color = "green" if completeness >= 80 else "yellow" if completeness >= 50 else "red"
        
        # Mostrar puntuaci√≥n general
        console.print(f"Puntuaci√≥n de completitud: [{color}]{completeness}%[/{color}]")
        console.print(f"Puntuaci√≥n de calidad: [blue]{quality_score}%[/blue]")
        
        # Mostrar desglose de criterios
        criteria_table = cli.create_table("Criterios Evaluados", ["Criterio", "Estado", "Peso"])
        for criteria in results.get("criteria", []):
            status_icon = "‚úÖ" if criteria.get("satisfied") else "‚ùå" if criteria.get("satisfied") is False else "‚ö†Ô∏è"
            criteria_table.add_row(
                criteria.get("name", ""),
                f"{status_icon} {criteria.get('status', '')}",
                f"{criteria.get('weight', 1)}"
            )
        console.print(criteria_table)
        
        # Mostrar componentes faltantes
        if results.get("missing_components"):
            cli.print_panel(
                "Componentes Faltantes", 
                "\n".join([f"‚Ä¢ {c}" for c in results.get("missing_components", [])])
            )
        
        # Guardar reporte si se solicit√≥
        if output:
            try:
                with open(output, 'w', encoding='utf-8') as f:
                    json.dump(results, f, indent=2)
                cli.print_success(f"Reporte guardado en: {output}")
            except Exception as e:
                cli.print_error(f"Error al guardar reporte: {e}")
                
    except Exception as e:
        cli.print_error(f"Error durante la verificaci√≥n: {e}")
        logger.error(f"Error en premium_verify_completeness: {e}", exc_info=True)


@premium_app.command("implementation")
def premium_implementation_assistant(
    functionality: str = typer.Argument(..., help="Nombre de la funcionalidad a implementar"),
    language: Optional[str] = typer.Option(None, "--language", "-l", help="Lenguaje de programaci√≥n principal"),
    path: str = typer.Option(".", "--path", "-p", help="Ruta al proyecto"),
    output: Optional[str] = typer.Option(None, "--output", "-o", 
                                       help="Archivo donde guardar la gu√≠a de implementaci√≥n")
):
    """Genera una gu√≠a detallada de implementaci√≥n para una funcionalidad (caracter√≠stica premium)."""
    from src.generators.implementation_prompt_generator import get_implementation_prompt_generator
    
    cli.print_header("Asistente de Implementaci√≥n Premium")
    
    # Premium features now available for all users
    
    cli.print_info(f"Generando gu√≠a de implementaci√≥n para: {functionality}")
    
    try:
        # Crear generador con configuraci√≥n premium
        generator = get_implementation_prompt_generator(premium=True)
        
        with cli.status(f"Analizando proyecto y generando gu√≠a para {functionality}..."):
            # Generar gu√≠a de implementaci√≥n detallada
            result = generator.generate_implementation_guide(
                functionality=functionality,
                project_path=path,
                language=language
            )
        
        # Mostrar resultados
        if result.get("success"):
            guide_content = result.get("content", "")
            
            # Mostrar resumen
            cli.print_success("Gu√≠a de implementaci√≥n generada correctamente")
            
            # Mostrar vista previa
            cli.print_panel(
                "Vista previa de la gu√≠a", 
                guide_content[:300] + "..." if len(guide_content) > 300 else guide_content
            )
            
            # Guardar a archivo si se especific√≥
            if output:
                try:
                    output_path = output
                    if not output.lower().endswith('.md'):
                        output_path = f"{output}.md"
                        
                    with open(output_path, 'w', encoding='utf-8') as f:
                        f.write(guide_content)
                    cli.print_success(f"Gu√≠a guardada en: {output_path}")
                except Exception as e:
                    cli.print_error(f"Error al guardar gu√≠a: {e}")
            else:
                # Mostrar gu√≠a completa en consola
                console.print("\n")
                console.print(guide_content)
                console.print("\n")
        else:
            cli.print_error(f"Error al generar gu√≠a: {result.get('error', 'Error desconocido')}")
    except Exception as e:
        cli.print_error(f"Error en el asistente de implementaci√≥n: {e}")
        logger.error(f"Error en premium_implementation_assistant: {e}", exc_info=True)


#
# Comandos para telemetr√≠a an√≥nima
#

@telemetry_app.command("status")
def telemetry_status():
    """
   Muestra el estado actual de la telemetr√≠a an√≥nima."""
    try:
        # Registrar el comando para telemetr√≠a (s√≥lo si est√° activada)
        record_command("telemetry_status")
        
        manager = get_telemetry_manager()
        consent_manager = ConsentManager(console=console)
        
        # Mostrar estado
        cli.print_header("Estado de Telemetr√≠a")
        status = "Activada" if manager.is_enabled() else "Desactivada"
        status_color = "green" if manager.is_enabled() else "red"
        console.print(f"Telemetr√≠a an√≥nima: [{status_color}]{status}[/{status_color}]")
        
        # Mostrar informaci√≥n detallada
        consent_manager.show_collected_data()
        
    except Exception as e:
        logger.error(f"Error al mostrar estado de telemetr√≠a: {e}")
        cli.print_error("No se pudo mostrar el estado de telemetr√≠a")


@telemetry_app.command("enable")
def telemetry_enable():
    """
    Activa la recolecci√≥n an√≥nima de telemetr√≠a.
    """
    try:
        consent_manager = ConsentManager(console=console)
        
        if consent_manager.enable_telemetry():
            cli.print_success("Telemetr√≠a an√≥nima activada")
            console.print("\nGracias por ayudarnos a mejorar ProjectPrompt. Todos los datos recolectados son")
            console.print("completamente an√≥nimos y se utilizan √∫nicamente para mejorar la herramienta.")
            console.print("\nPuedes revisar los datos recolectados con: project-prompt telemetry status")
            console.print("Puedes desactivar la telemetr√≠a en cualquier momento con: project-prompt telemetry disable")
            
            # Registrar ahora que est√° activada
            record_command("telemetry_enable")
        else:
            cli.print_error("No se pudo activar la telemetr√≠a")
    except Exception as e:
        logger.error(f"Error al activar telemetr√≠a: {e}")
        cli.print_error("No se pudo activar la telemetr√≠a")


@telemetry_app.command("disable")
def telemetry_disable():
    """
    Desactiva la recolecci√≥n an√≥nima de telemetr√≠a.
    """
    try:
        # Registrar comando antes de desactivar
        record_command("telemetry_disable")
        
        consent_manager = ConsentManager(console=console)
        
        if consent_manager.disable_telemetry():
            cli.print_success("Telemetr√≠a an√≥nima desactivada")
            console.print("\nLos datos pendientes de env√≠o han sido eliminados. No se recopilar√°n m√°s datos.")
            console.print("Puedes volver a activar la telemetr√≠a en cualquier momento con: project-prompt telemetry enable")
        else:
            cli.print_error("No se pudo desactivar la telemetr√≠a")
    except Exception as e:
        logger.error(f"Error al desactivar telemetr√≠a: {e}")
        cli.print_error("No se pudo desactivar la telemetr√≠a")


@telemetry_app.command("prompt")
def telemetry_prompt():
    """
    Muestra el prompt de consentimiento para telemetr√≠a.
    """
    try:
        consent_manager = ConsentManager(console=console)
        status = consent_manager.request_consent(force=True)
        
        # No necesitamos hacer nada m√°s, el consent_manager ya maneja todo
        if status == "granted":
            record_command("telemetry_prompt")
    except Exception as e:
        logger.error(f"Error en prompt de telemetr√≠a: {e}")
        cli.print_error("No se pudo mostrar el prompt de telemetr√≠a")


# Submenu para comandos de actualizaci√≥n y sincronizaci√≥n
update_app = typer.Typer(help="Comandos para gestionar actualizaciones y sincronizaci√≥n")
app.add_typer(update_app, name="update")


@update_app.command("check")
def check_updates(
    force: bool = typer.Option(False, "--force", "-f", help="Forzar verificaci√≥n incluso si se realiz√≥ recientemente")
):
    """Verificar si hay actualizaciones disponibles para ProjectPrompt."""
    cli.print_header("Verificaci√≥n de Actualizaciones")
    
    updater = Updater(force=force)
    update_info = updater.check_for_updates()
    
    if update_info.get('available'):
        version = update_info.get('latest')
        current = update_info.get('version')
        cli.print_info(f"¬°Actualizaci√≥n disponible! Versi√≥n actual: v{current}, Nueva versi√≥n: v{version}")
        
        if update_info.get('changes'):
            cli.print_info("\nMejoras destacadas:")
            for change in update_info.get('changes'):
                console.print(f"‚Ä¢ [green]{change}[/]")
        
        console.print("\nPara actualizar, ejecute: [bold]project-prompt update system[/]")
    else:
        if update_info.get('error'):
            cli.print_warning(f"Error al verificar actualizaciones: {update_info.get('error')}")
        else:
            cli.print_success(f"Ya tiene la √∫ltima versi√≥n: v{update_info.get('version')}")


@update_app.command("system")
def update_system(
    force: bool = typer.Option(False, "--force", "-f", help="Forzar actualizaci√≥n sin confirmaci√≥n")
):
    """Actualizar ProjectPrompt a la √∫ltima versi√≥n disponible."""
    cli.print_header("Actualizaci√≥n del Sistema")
    
    # Verificar si hay actualizaciones
    updater = Updater()
    update_info = updater.check_for_updates()
    
    if not update_info.get('available'):
        if update_info.get('error'):
            cli.print_warning(f"Error al verificar actualizaciones: {update_info.get('error')}")
            return
        else:
            cli.print_success(f"Ya tiene la √∫ltima versi√≥n: v{update_info.get('version')}")
            return
    
    # Confirmar la actualizaci√≥n con el usuario si no es forzada
    if not force:
        current = update_info.get('version')
        new_version = update_info.get('latest')
        cli.print_info(f"Se actualizar√° de v{current} a v{new_version}")
        
        if update_info.get('changes'):
            cli.print_info("\nMejoras destacadas:")
            for change in update_info.get('changes'):
                console.print(f"‚Ä¢ [green]{change}[/]")
        
        confirm = typer.confirm("¬øDesea continuar con la actualizaci√≥n?")
        if not confirm:
            cli.print_info("Actualizaci√≥n cancelada.")
            return
    
    # Realizar la actualizaci√≥n
    with cli.status_spinner("Actualizando ProjectPrompt..."):
        success, message = updater.update_system()
    
    if success:
        cli.print_success(message)
        cli.print_info("Por favor, reinicie la aplicaci√≥n para aplicar los cambios.")
    else:
        cli.print_error(f"Error durante la actualizaci√≥n: {message}")


@update_app.command("templates")
def update_templates():
    """Actualizar plantillas a la √∫ltima versi√≥n disponible."""
    cli.print_header("Actualizaci√≥n de Plantillas")
    
    updater = Updater()
    with cli.status_spinner("Actualizando plantillas..."):
        success, stats = updater.update_templates()
    
    if success:
        cli.print_success("Plantillas actualizadas correctamente")
        table = cli.create_table("Estad√≠sticas", ["Operaci√≥n", "Cantidad"])
        table.add_row("Actualizadas", str(stats.get('updated', 0)))
        table.add_row("A√±adidas", str(stats.get('added', 0)))
        table.add_row("Ignoradas", str(stats.get('skipped', 0)))
        table.add_row("Fallidas", str(stats.get('failed', 0)))
        console.print(table)
    else:
        cli.print_error("Error al actualizar las plantillas")


@update_app.command("skip")
def skip_version(
    version: str = typer.Argument(..., help="Versi√≥n a ignorar (ej: 1.2.3)")
):
    """Ignorar una versi√≥n espec√≠fica para futuras actualizaciones."""
    cli.print_header("Ignorar Versi√≥n")
    
    updater = Updater()
    updater.skip_version(version)
    
    cli.print_info(f"La versi√≥n {version} no se notificar√° en futuras verificaciones.")


@update_app.command("sync")
def sync_data(
    direction: str = typer.Option("both", "--direction", "-d", 
                                 help="Direcci√≥n de sincronizaci√≥n: 'upload', 'download', o 'both'")
):
    """Sincronizar datos con la ubicaci√≥n configurada."""
    cli.print_header("Sincronizaci√≥n de Datos")
    
    sync_manager = SyncManager()
    
    if not sync_manager.sync_enabled:
        cli.print_warning("La sincronizaci√≥n no est√° habilitada. Configure sync_enabled=True en config.yaml")
        return
    
    with cli.status_spinner("Sincronizando datos..."):
        if direction in ["both", "upload"]:
            success, stats = sync_manager.upload_data()
            if success:
                cli.print_success("Datos subidos correctamente")
                cli.print_info(f"Archivos sincronizados: {stats.get('uploaded', 0)}")
            else:
                cli.print_error("Error al subir datos")
        
        if direction in ["both", "download"]:
            success, stats = sync_manager.download_data()
            if success:
                cli.print_success("Datos descargados correctamente")
                cli.print_info(f"Archivos actualizados: {stats.get('downloaded', 0)}")
            else:
                cli.print_error("Error al descargar datos")


@update_app.command("backup")
def create_backup(
    output: str = typer.Option(None, "--output", "-o", help="Ruta donde guardar el archivo de respaldo")
):
    """Crear un respaldo de la configuraci√≥n y datos de ProjectPrompt."""
    cli.print_header("Creaci√≥n de Respaldo")
    
    sync_manager = SyncManager()
    
    # Si no se especifica ruta, usar la predeterminada
    if not output:
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output = os.path.expanduser(f"~/projectprompt_backup_{timestamp}.zip")
    
    with cli.status_spinner(f"Creando respaldo en {output}..."):
        success, message = sync_manager.create_backup(output)
    
    if success:
        cli.print_success(f"Respaldo creado correctamente en: {output}")
    else:
        cli.print_error(f"Error al crear respaldo: {message}")


@update_app.command("restore")
def restore_backup(
    backup_file: str = typer.Argument(..., help="Ruta al archivo de respaldo"),
    force: bool = typer.Option(False, "--force", "-f", help="Sobrescribir datos existentes sin confirmaci√≥n")
):
    """Restaurar un respaldo de ProjectPrompt."""
    cli.print_header("Restauraci√≥n de Respaldo")
    
    # Confirmar restauraci√≥n si no es forzada
    if not force:
        confirm = typer.confirm("Esta operaci√≥n sobrescribir√° los datos actuales. ¬øDesea continuar?")
        if not confirm:
            cli.print_info("Restauraci√≥n cancelada.")
            return
    
    sync_manager = SyncManager()
    
    with cli.status_spinner("Restaurando datos desde respaldo..."):
        success, message = sync_manager.restore_backup(backup_file)
    
    if success:
        cli.print_success("Datos restaurados correctamente")
    else:
        cli.print_error(f"Error al restaurar: {message}")


@update_app.command("configure")
def configure_sync(
    provider: str = typer.Option(None, "--provider", "-p", 
                               help="Proveedor de sincronizaci√≥n: 'local', 'gdrive', 'dropbox', etc."),
    directory: str = typer.Option(None, "--directory", "-d", 
                                help="Directorio para sincronizaci√≥n local"),
    enable: bool = typer.Option(None, "--enable/--disable", 
                              help="Activar o desactivar la sincronizaci√≥n")
):
    """Configurar opciones de sincronizaci√≥n."""
    cli.print_header("Configuraci√≥n de Sincronizaci√≥n")
    
    config = config_manager.get_config()
    modified = False
    
    if enable is not None:
        config['sync_enabled'] = enable
        cli.print_info(f"Sincronizaci√≥n {'activada' if enable else 'desactivada'}")
        modified = True
    
    if provider:
        config['sync_provider'] = provider
        cli.print_info(f"Proveedor de sincronizaci√≥n establecido a: {provider}")
        modified = True
    
    if directory:
        config['sync_directory'] = os.path.abspath(directory)
        cli.print_info(f"Directorio de sincronizaci√≥n establecido a: {directory}")
        modified = True
    
    if modified:
        config_manager.save_config(config)
        cli.print_success("Configuraci√≥n guardada correctamente")
    else:
        # Mostrar configuraci√≥n actual
        table = cli.create_table("Configuraci√≥n Actual", ["Opci√≥n", "Valor"])
        table.add_row("Sincronizaci√≥n", "Activada ‚úÖ" if config.get('sync_enabled', False) else "Desactivada ‚ùå")
        table.add_row("Proveedor", config.get('sync_provider', 'local'))
        table.add_row("Directorio", config.get('sync_directory', 'No configurado'))
        console.print(table)


@app.command()
def status():
    """Mostrar estado de sincronizaci√≥n."""
    cli.print_header("Estado de Sincronizaci√≥n")
    
    sync_manager = SyncManager()
    
    if not sync_manager.sync_enabled:
        cli.print_warning("La sincronizaci√≥n no est√° habilitada. Use 'project-prompt update configure --enable' para activarla.")
        return
    
    # Obtener informaci√≥n de estado
    status = sync_manager.get_status()
    
    # Mostrar informaci√≥n
    table = cli.create_table("Estado de Sincronizaci√≥n", ["Propiedad", "Valor"])
    table.add_row("Proveedor", status.get('provider', 'No configurado'))
    table.add_row("√öltima sincronizaci√≥n", status.get('last_sync', 'Nunca'))
    table.add_row("Instalaciones registradas", str(status.get('installations', 0)))
    console.print(table)
    
    # Si hay instalaciones, mostrarlas
    installations = status.get('installation_list', [])
    if installations:
        install_table = cli.create_table("Instalaciones Registradas", ["Nombre", "Plataforma", "√öltima Sincronizaci√≥n"])
        for inst in installations:
            install_table.add_row(
                inst.get('name', 'Desconocido'),
                inst.get('platform', 'Desconocido'),
                inst.get('last_sync', 'Nunca')
            )
        console.print(install_table)



# Configurar callbacks para inicializaci√≥n y cierre de telemetr√≠a

@app.callback()
def app_callback():
    """
    Callback que se ejecuta al iniciar la aplicaci√≥n.
    Configura el entorno de forma simple sin telemetr√≠a bloqueante.
    """
    try:
        # Simplificar inicializaci√≥n - solo configurar lo esencial
        pass
    except Exception:
        # Ignorar errores para no bloquear la CLI
        pass
    
def check_first_run_telemetry_consent():
    """
    Verifica si es la primera ejecuci√≥n para solicitar consentimiento de telemetr√≠a.
    """
    # Acceder directamente a la configuraci√≥n
    prompted = config_manager.get("telemetry", {}).get("prompted", False)
    
    # Verificar si ya se ha mostrado el prompt de telemetr√≠a
    if prompted:
        return
        
    # Marcar que ya se ha solicitado consentimiento
    config_manager.set("telemetry.prompted", True)
    config_manager.save_config()
    
    # Mostrar prompt de consentimiento
    try:
        consent_manager = ConsentManager(console=console)
        consent_manager.request_consent()
    except Exception as e:
        logger.error(f"Error al solicitar consentimiento de telemetr√≠a: {e}")


# Registrar cierre de telemetr√≠a al finalizar el programa
import atexit
atexit.register(shutdown_telemetry)


@app.command()
def init_project_folder(
    project_name: Optional[str] = typer.Argument(None, help="Nombre del proyecto (opcional)")
):
    """Inicializa una carpeta project-output organizada en el directorio actual.
    
    Crea una estructura de carpetas organizadas para gestionar los archivos generados por ProjectPrompt.
    """
    try:
        # Crear la carpeta principal project-output
        project_prompt_dir = os.path.join(os.getcwd(), "project-output")
        
        if os.path.exists(project_prompt_dir):
            cli.print_warning("La carpeta 'project-output' ya existe en este directorio.")
            overwrite = typer.confirm("¬øDeseas sobrescribir la estructura existente?")
            if not overwrite:
                cli.print_info("Operaci√≥n cancelada.")
                return
        
        # Crear estructura de carpetas
        folders_to_create = [
            "analyses",
            "suggestions", 
            "documentation",
            "prompts",
            "exports",
            "backups"
        ]
        
        os.makedirs(project_prompt_dir, exist_ok=True)
        
        for folder in folders_to_create:
            folder_path = os.path.join(project_prompt_dir, folder)
            os.makedirs(folder_path, exist_ok=True)
            
            # Crear archivo README en cada carpeta
            readme_path = os.path.join(folder_path, "README.md")
            with open(readme_path, 'w', encoding='utf-8') as f:
                f.write(get_directory_description(folder))
        
        # Crear archivo de configuraci√≥n del proyecto
        config_file = os.path.join(project_prompt_dir, "project-config.json")
        project_config = {
            "project_name": project_name or os.path.basename(os.getcwd()),
            "created_at": datetime.now().isoformat(),
            "version": __version__,
            "structure": {
                "analyses": "An√°lisis autom√°ticos del proyecto",
                "suggestions": "Sugerencias de mejora generadas por IA",
                "documentation": "Documentaci√≥n generada autom√°ticamente",
                "prompts": "Prompts personalizados para el proyecto",
                "exports": "Exportaciones en diferentes formatos",
                "backups": "Copias de seguridad de archivos importantes"
            }
        }
        
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(project_config, f, indent=2, ensure_ascii=False)
        
        # Crear archivo principal README
        main_readme = os.path.join(project_prompt_dir, "README.md")
        with open(main_readme, 'w', encoding='utf-8') as f:
            f.write(f"""# {project_config['project_name']} - ProjectPrompt

Este directorio contiene todos los archivos generados por ProjectPrompt para el proyecto **{project_config['project_name']}**.

## Estructura del directorio

- **analyses/**: An√°lisis autom√°ticos del c√≥digo y estructura del proyecto
- **suggestions/**: Sugerencias de mejora generadas por inteligencia artificial
- **documentation/**: Documentaci√≥n generada autom√°ticamente
- **prompts/**: Prompts personalizados para este proyecto espec√≠fico
- **exports/**: Exportaciones en diferentes formatos (PDF, HTML, etc.)
- **backups/**: Copias de seguridad de archivos importantes

## Configuraci√≥n

La configuraci√≥n del proyecto se encuentra en `project-config.json`.

## Comandos √∫tiles

```bash
# Analizar el proyecto
project-prompt analyze

# Generar sugerencias
project-prompt suggest

# Ver documentaci√≥n
project-prompt docs

# Limpiar archivos generados
project-prompt delete all
```

---
*Generado por ProjectPrompt v{__version__} el {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
""")

        cli.print_success(f"Carpeta 'project-output' inicializada correctamente en {project_prompt_dir}")
        cli.print_info(f"Proyecto: {project_config['project_name']}")
        cli.print_info(f"Estructura creada con {len(folders_to_create)} directorios organizados")
        
    except Exception as e:
        cli.print_error(f"Error al inicializar la carpeta del proyecto: {e}")


def get_directory_description(directory_name: str) -> str:
    """Obtiene la descripci√≥n para un directorio espec√≠fico."""
    descriptions = {
        "analyses": """# An√°lisis del Proyecto

Este directorio contiene an√°lisis autom√°ticos del proyecto generados por ProjectPrompt.

## Tipos de an√°lisis incluidos:
- An√°lisis de estructura del c√≥digo
- An√°lisis de dependencias
- An√°lisis de calidad del c√≥digo
- An√°lisis de patrones de dise√±o
- An√°lisis de arquitectura

Los archivos se nombran con timestamp para mantener un historial de an√°lisis.
""",
        "suggestions": """# Sugerencias de Mejora

Este directorio contiene sugerencias de mejora generadas por inteligencia artificial.

## Tipos de sugerencias incluidas:
- Mejoras de rendimiento
- Refactorizaci√≥n de c√≥digo
- Optimizaciones de arquitectura
- Mejores pr√°cticas
- Correcci√≥n de problemas potenciales

Las sugerencias se organizan por categor√≠a y prioridad.
""",
        "documentation": """# Documentaci√≥n Generada

Este directorio contiene documentaci√≥n generada autom√°ticamente por ProjectPrompt.

## Tipos de documentaci√≥n incluida:
- API Documentation
- README autom√°ticos
- Gu√≠as de instalaci√≥n
- Documentaci√≥n de arquitectura
- Diagramas de flujo

La documentaci√≥n se mantiene actualizada con cada an√°lisis.
""",
        "prompts": """# Prompts Personalizados

Este directorio contiene prompts personalizados para este proyecto espec√≠fico.

## Uso de prompts:
- Prompts para an√°lisis espec√≠ficos
- Plantillas de sugerencias
- Configuraciones de IA personalizadas
- Contexto espec√≠fico del proyecto

Los prompts permiten adaptar ProjectPrompt a las necesidades espec√≠ficas del proyecto.
""",
        "exports": """# Exportaciones

Este directorio contiene exportaciones de an√°lisis y documentaci√≥n en diferentes formatos.

## Formatos disponibles:
- PDF para informes
- HTML para visualizaci√≥n web
- Markdown para documentaci√≥n
- JSON para integraci√≥n con otras herramientas
- CSV para an√°lisis de datos

Las exportaciones facilitan el compartir resultados con el equipo.
""",
        "backups": """# Copias de Seguridad

Este directorio contiene copias de seguridad de archivos importantes del proyecto.

## Contenido de backups:
- Configuraciones importantes
- An√°lisis hist√≥ricos
- Versiones anteriores de archivos cr√≠ticos
- Snapshots del estado del proyecto

Las copias de seguridad se crean autom√°ticamente antes de cambios importantes.
"""
    }
    
    return descriptions.get(directory_name, f"# {directory_name.title()}\n\nDirectorio para {directory_name} del proyecto.\n")
