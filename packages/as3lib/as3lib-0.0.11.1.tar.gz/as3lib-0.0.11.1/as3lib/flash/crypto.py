from as3lib import toplevel as as3
from as3lib.configmodule import platform
try:
   if platform == "Windows":
      raise
   from as3lib.flash._crypto import _generateRandomBytes
except:
   from os import urandom
   from binascii import b2a_hex
   def _generateRandomBytes(numberRandomBytes):
      try:
         #return f"{b2a_hex(urandom(int(numberRandomBytes)))}"[2:][:(int(numberRandomBytes)*2)]
         return urandom(int(numberRandomBytes))
      except:
         as3.Error("generateRandomBytes; Could not generate random bytes")

def generateRandomBytes(numberRandomBytes:int|as3.uint|as3.int):
   """
   Generates a sequence of random bytes.
   Use generateRandomBytes() to generate cryptographic keys, strong identifiers, session ids, and so on. The random sequence is generated using cryptographically strong functions provided by the operating system. If the appropriate function is not available on an individual client computer or device, then an error is thrown.
   Parameters:
	   numberRandomBytes:uint — the number random bytes to generate, between 1 and 1024.
   Returns:
	   ByteArray — a ByteArray containing the generated bytes. (Currently returns a string of bytes because ByteArray is not implemented yet)
   """
   #!return flash bytearray instead of string
   if numberRandomBytes > 1024 or numberRandomBytes < 1:
      as3.Error(f"generateRandomBytes; numberRandomBytes outside of expected range; expected uint between 1 and 1024, got {numberRandomBytes}")
   else:
      return _generateRandomBytes(numberRandomBytes)[:numberRandomBytes] #The last part is here because Microsoft's c compiler doesn't support C99 so the c module must return the maximum number of bytes