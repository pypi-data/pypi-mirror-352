# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from graphiant_sdk.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_account_email_patch(self, **kwargs):  # noqa: E501
        """v1_account_email_patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_account_email_patch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountEmailBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_account_email_patch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_account_email_patch_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_account_email_patch_with_http_info(self, **kwargs):  # noqa: E501
        """v1_account_email_patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_account_email_patch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountEmailBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_account_email_patch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account/email', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_account_info_patch(self, **kwargs):  # noqa: E501
        """v1_account_info_patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_account_info_patch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountInfoBody body:   **Field Descriptions**:<br/>  - __firstName__: __(Optional)__ <br/>   - __lastName__: __(Optional)__ <br/>   - __timeZone__: __(Optional)__ <br/>   
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_account_info_patch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_account_info_patch_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_account_info_patch_with_http_info(self, **kwargs):  # noqa: E501
        """v1_account_info_patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_account_info_patch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountInfoBody body:   **Field Descriptions**:<br/>  - __firstName__: __(Optional)__ <br/>   - __lastName__: __(Optional)__ <br/>   - __timeZone__: __(Optional)__ <br/>   
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_account_info_patch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account/info', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_account_mfa_confirmation_post(self, **kwargs):  # noqa: E501
        """v1_account_mfa_confirmation_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_account_mfa_confirmation_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MfaConfirmationBody body:
        :param str authorization:
        :return: InlineResponse20060
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_account_mfa_confirmation_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_account_mfa_confirmation_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_account_mfa_confirmation_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_account_mfa_confirmation_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_account_mfa_confirmation_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MfaConfirmationBody body:
        :param str authorization:
        :return: InlineResponse20060
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_account_mfa_confirmation_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account/mfa/confirmation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20060',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_account_mfa_delete(self, **kwargs):  # noqa: E501
        """v1_account_mfa_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_account_mfa_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_account_mfa_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_account_mfa_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_account_mfa_delete_with_http_info(self, **kwargs):  # noqa: E501
        """v1_account_mfa_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_account_mfa_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_account_mfa_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account/mfa', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_account_mfa_get(self, **kwargs):  # noqa: E501
        """v1_account_mfa_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_account_mfa_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_account_mfa_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_account_mfa_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_account_mfa_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_account_mfa_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_account_mfa_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_account_mfa_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account/mfa', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20065',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_account_mfa_put(self, **kwargs):  # noqa: E501
        """v1_account_mfa_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_account_mfa_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountMfaBody body:
        :param str authorization:
        :return: InlineResponse20066
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_account_mfa_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_account_mfa_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_account_mfa_put_with_http_info(self, **kwargs):  # noqa: E501
        """v1_account_mfa_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_account_mfa_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountMfaBody body:
        :param str authorization:
        :return: InlineResponse20066
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_account_mfa_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account/mfa', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20066',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_account_password_patch(self, **kwargs):  # noqa: E501
        """v1_account_password_patch  # noqa: E501

        **API Description:**<br/> - Graphiant cloud only  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_account_password_patch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountPasswordBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_account_password_patch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_account_password_patch_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_account_password_patch_with_http_info(self, **kwargs):  # noqa: E501
        """v1_account_password_patch  # noqa: E501

        **API Description:**<br/> - Graphiant cloud only  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_account_password_patch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountPasswordBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_account_password_patch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account/password', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_activity_logs_post(self, **kwargs):  # noqa: E501
        """v1_activity_logs_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_activity_logs_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActivityLogsBody body:
        :param str authorization:
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_activity_logs_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_activity_logs_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_activity_logs_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_activity_logs_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_activity_logs_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActivityLogsBody body:
        :param str authorization:
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_activity_logs_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/activity/logs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20046',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alarm_history_get(self, **kwargs):  # noqa: E501
        """v1_alarm_history_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alarm_history_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_alarm_history_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_alarm_history_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_alarm_history_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_alarm_history_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alarm_history_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alarm_history_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/alarm-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alarm_mute_alarm_id_put(self, alarm_id, **kwargs):  # noqa: E501
        """v1_alarm_mute_alarm_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alarm_mute_alarm_id_put(alarm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alarm_id: Unique ID for an alarm. (required)
        :param AlarmmuteAlarmIdBody body:   **Field Descriptions**:<br/>  - __mute__: Flag to specify if you want to mute/unmute the notifications.<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_alarm_mute_alarm_id_put_with_http_info(alarm_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_alarm_mute_alarm_id_put_with_http_info(alarm_id, **kwargs)  # noqa: E501
            return data

    def v1_alarm_mute_alarm_id_put_with_http_info(self, alarm_id, **kwargs):  # noqa: E501
        """v1_alarm_mute_alarm_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alarm_mute_alarm_id_put_with_http_info(alarm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alarm_id: Unique ID for an alarm. (required)
        :param AlarmmuteAlarmIdBody body:   **Field Descriptions**:<br/>  - __mute__: Flag to specify if you want to mute/unmute the notifications.<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alarm_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alarm_mute_alarm_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alarm_id' is set
        if ('alarm_id' not in params or
                params['alarm_id'] is None):
            raise ValueError("Missing the required parameter `alarm_id` when calling `v1_alarm_mute_alarm_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alarm_id' in params:
            path_params['alarmId'] = params['alarm_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/alarm-mute/{alarmId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alarms_events_get(self, **kwargs):  # noqa: E501
        """v1_alarms_events_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alarms_events_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_alarms_events_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_alarms_events_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_alarms_events_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_alarms_events_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alarms_events_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alarms_events_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/alarms-events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_alarms_list_get(self, **kwargs):  # noqa: E501
        """v1_alarms_list_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alarms_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_alarms_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_alarms_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_alarms_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_alarms_list_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_alarms_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_alarms_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/alarms-list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_apps_app_summary_post(self, **kwargs):  # noqa: E501
        """v1_apps_app_summary_post  # noqa: E501

        **API Description:**<br/> - Get app state summary counts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apps_app_summary_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppsAppsummaryBody body:
        :param str authorization:
        :return: InlineResponse20073
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_apps_app_summary_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_apps_app_summary_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_apps_app_summary_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_apps_app_summary_post  # noqa: E501

        **API Description:**<br/> - Get app state summary counts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apps_app_summary_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppsAppsummaryBody body:
        :param str authorization:
        :return: InlineResponse20073
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_apps_app_summary_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/apps/app-summary', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20073',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_apps_bandwidth_post(self, **kwargs):  # noqa: E501
        """v1_apps_bandwidth_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apps_bandwidth_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppsBandwidthBody body:
        :param str authorization:
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_apps_bandwidth_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_apps_bandwidth_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_apps_bandwidth_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_apps_bandwidth_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apps_bandwidth_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppsBandwidthBody body:
        :param str authorization:
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_apps_bandwidth_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/apps/bandwidth', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20071',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_apps_device_device_id_top_post(self, device_id, **kwargs):  # noqa: E501
        """v1_apps_device_device_id_top_post  # noqa: E501

        **API Description:**<br/> - Get top apps for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apps_device_device_id_top_post(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param object body:   **Field Descriptions**:<br/>  - __numApps__: The maximum number of apps to return (100 if left empty)<br/>  
        :param str authorization:
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_apps_device_device_id_top_post_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_apps_device_device_id_top_post_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_apps_device_device_id_top_post_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_apps_device_device_id_top_post  # noqa: E501

        **API Description:**<br/> - Get top apps for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apps_device_device_id_top_post_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param object body:   **Field Descriptions**:<br/>  - __numApps__: The maximum number of apps to return (100 if left empty)<br/>  
        :param str authorization:
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_apps_device_device_id_top_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_apps_device_device_id_top_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/apps/device/{deviceId}/top', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20085',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_apps_site_site_id_top_post(self, site_id, **kwargs):  # noqa: E501
        """v1_apps_site_site_id_top_post  # noqa: E501

        **API Description:**<br/> - Get top apps for a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apps_site_site_id_top_post(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param object body:   **Field Descriptions**:<br/>  - __numApps__: The maximum number of apps to return (100 if left empty)<br/>  
        :param str authorization:
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_apps_site_site_id_top_post_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_apps_site_site_id_top_post_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def v1_apps_site_site_id_top_post_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """v1_apps_site_site_id_top_post  # noqa: E501

        **API Description:**<br/> - Get top apps for a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apps_site_site_id_top_post_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param object body:   **Field Descriptions**:<br/>  - __numApps__: The maximum number of apps to return (100 if left empty)<br/>  
        :param str authorization:
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_apps_site_site_id_top_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `v1_apps_site_site_id_top_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/apps/site/{siteId}/top', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20085',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_apps_visualization_post(self, **kwargs):  # noqa: E501
        """v1_apps_visualization_post  # noqa: E501

        **API Description:**<br/> - Get the app and circuit visualization info for the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apps_visualization_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppsVisualizationBody body:   **Field Descriptions**:<br/>  - __circuitName__: Circuit name is specified if circuit apps utilization data is desired.<br/>  - __slaClass__: SLA class is specified if queue apps utilization data is desired. Circuit name must be provided.<br/>  
        :param str authorization:
        :return: InlineResponse20074
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_apps_visualization_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_apps_visualization_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_apps_visualization_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_apps_visualization_post  # noqa: E501

        **API Description:**<br/> - Get the app and circuit visualization info for the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apps_visualization_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppsVisualizationBody body:   **Field Descriptions**:<br/>  - __circuitName__: Circuit name is specified if circuit apps utilization data is desired.<br/>  - __slaClass__: SLA class is specified if queue apps utilization data is desired. Circuit name must be provided.<br/>  
        :param str authorization:
        :return: InlineResponse20074
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_apps_visualization_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/apps/visualization', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20074',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_audit_complete_post(self, **kwargs):  # noqa: E501
        """v1_audit_complete_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_audit_complete_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditCompleteBody body:   **Field Descriptions**:<br/>  - __activity__: The _what_ of the audited event<br/>  - __actor__: The _who_ of the audited event<br/>  - __category__: Category string of for the event.<br/>  - __reason__: A reason for the status<br/>  - __status__: The status of the audited event<br/>  - __info__: Service specific information<br/>  - __service__: The name of the service that produced the event.<br/>  - __spanId__: 8 bytes (base64 encoded) identifier for the span audited.<br/>  - __traceId__: 16 bytes (base64 encoded) identifier for the trace audited.<br/>  
        :param str authorization:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_audit_complete_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_audit_complete_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_audit_complete_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_audit_complete_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_audit_complete_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditCompleteBody body:   **Field Descriptions**:<br/>  - __activity__: The _what_ of the audited event<br/>  - __actor__: The _who_ of the audited event<br/>  - __category__: Category string of for the event.<br/>  - __reason__: A reason for the status<br/>  - __status__: The status of the audited event<br/>  - __info__: Service specific information<br/>  - __service__: The name of the service that produced the event.<br/>  - __spanId__: 8 bytes (base64 encoded) identifier for the span audited.<br/>  - __traceId__: 16 bytes (base64 encoded) identifier for the trace audited.<br/>  
        :param str authorization:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_audit_complete_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/audit/complete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_audit_init_post(self, **kwargs):  # noqa: E501
        """v1_audit_init_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_audit_init_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditInitBody body:   **Field Descriptions**:<br/>  - __activity__: The _what_ of the audited event<br/>  - __actor__: The _who_ of the audited event<br/>  - __category__: Category string of for the event.<br/>  - __reason__: A reason for the status<br/>  - __status__: The status of the audited event<br/>  - __info__: Service specific information<br/>  - __service__: The name of the service that produced the event.<br/>  - __spanId__: 8 bytes (base64 encoded) identifier for the span audited.<br/>  - __traceId__: 16 bytes (base64 encoded) identifier for the trace audited.<br/>  
        :param str authorization:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_audit_init_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_audit_init_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_audit_init_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_audit_init_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_audit_init_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditInitBody body:   **Field Descriptions**:<br/>  - __activity__: The _what_ of the audited event<br/>  - __actor__: The _who_ of the audited event<br/>  - __category__: Category string of for the event.<br/>  - __reason__: A reason for the status<br/>  - __status__: The status of the audited event<br/>  - __info__: Service specific information<br/>  - __service__: The name of the service that produced the event.<br/>  - __spanId__: 8 bytes (base64 encoded) identifier for the span audited.<br/>  - __traceId__: 16 bytes (base64 encoded) identifier for the trace audited.<br/>  
        :param str authorization:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_audit_init_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/audit/init', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_audit_logs_post(self, **kwargs):  # noqa: E501
        """v1_audit_logs_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_audit_logs_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditLogsBody body:   **Field Descriptions**:<br/>  - __field__: Field to search<br/>  - __values__: Multiple values are treated as OR<br/>  
        :param str authorization:
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_audit_logs_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_audit_logs_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_audit_logs_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_audit_logs_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_audit_logs_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditLogsBody body:   **Field Descriptions**:<br/>  - __field__: Field to search<br/>  - __values__: Multiple values are treated as OR<br/>  
        :param str authorization:
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_audit_logs_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/audit/logs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_auth_delete(self, **kwargs):  # noqa: E501
        """v1_auth_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse2042
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_auth_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_auth_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_auth_delete_with_http_info(self, **kwargs):  # noqa: E501
        """v1_auth_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse2042
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_auth_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/auth', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2042',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_auth_gcs_post(self, **kwargs):  # noqa: E501
        """v1_auth_gcs_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_gcs_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthGcsBody body:
        :param str relay_state:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_auth_gcs_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_auth_gcs_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_auth_gcs_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_auth_gcs_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_gcs_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthGcsBody body:
        :param str relay_state:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'relay_state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_auth_gcs_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'relay_state' in params:
            query_params.append(('relayState', params['relay_state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/auth/gcs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_auth_get(self, **kwargs):  # noqa: E501
        """v1_auth_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20063
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_auth_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_auth_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_auth_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_auth_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20063
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_auth_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/auth', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20063',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_auth_login_callback_post(self, **kwargs):  # noqa: E501
        """v1_auth_login_callback_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_login_callback_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoginCallbackBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_auth_login_callback_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_auth_login_callback_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_auth_login_callback_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_auth_login_callback_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_login_callback_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoginCallbackBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_auth_login_callback_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/auth/login/callback', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_auth_login_post(self, **kwargs):  # noqa: E501
        """v1_auth_login_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_login_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthLoginBody body:
        :param str relay_state:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_auth_login_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_auth_login_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_auth_login_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_auth_login_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_login_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthLoginBody body:
        :param str relay_state:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'relay_state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_auth_login_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'relay_state' in params:
            query_params.append(('relayState', params['relay_state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/auth/login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_auth_login_pre_get(self, **kwargs):  # noqa: E501
        """v1_auth_login_pre_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_login_pre_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_auth_login_pre_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_auth_login_pre_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_auth_login_pre_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_auth_login_pre_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_login_pre_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_auth_login_pre_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/auth/login/pre', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_auth_login_saml_get(self, **kwargs):  # noqa: E501
        """v1_auth_login_saml_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_login_saml_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email:
        :param str relay_state:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_auth_login_saml_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_auth_login_saml_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_auth_login_saml_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_auth_login_saml_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_login_saml_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email:
        :param str relay_state:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'relay_state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_auth_login_saml_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'relay_state' in params:
            query_params.append(('relayState', params['relay_state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/auth/login/saml', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_auth_login_spa_post(self, **kwargs):  # noqa: E501
        """v1_auth_login_spa_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_login_spa_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoginSpaBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_auth_login_spa_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_auth_login_spa_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_auth_login_spa_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_auth_login_spa_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_login_spa_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoginSpaBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_auth_login_spa_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/auth/login/spa', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_auth_logout_post(self, **kwargs):  # noqa: E501
        """v1_auth_logout_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_logout_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_auth_logout_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_auth_logout_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_auth_logout_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_auth_logout_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_logout_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_auth_logout_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/auth/logout', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_auth_mfa_delete(self, **kwargs):  # noqa: E501
        """v1_auth_mfa_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_mfa_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_auth_mfa_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_auth_mfa_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_auth_mfa_delete_with_http_info(self, **kwargs):  # noqa: E501
        """v1_auth_mfa_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_mfa_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_auth_mfa_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/auth/mfa', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_auth_mfa_patch(self, **kwargs):  # noqa: E501
        """v1_auth_mfa_patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_mfa_patch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_auth_mfa_patch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_auth_mfa_patch_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_auth_mfa_patch_with_http_info(self, **kwargs):  # noqa: E501
        """v1_auth_mfa_patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_mfa_patch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_auth_mfa_patch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/auth/mfa', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_auth_mfa_post(self, **kwargs):  # noqa: E501
        """v1_auth_mfa_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_mfa_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthMfaBody body:
        :param str relay_state:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_auth_mfa_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_auth_mfa_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_auth_mfa_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_auth_mfa_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_mfa_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthMfaBody body:
        :param str relay_state:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'relay_state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_auth_mfa_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'relay_state' in params:
            query_params.append(('relayState', params['relay_state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/auth/mfa', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_auth_patch(self, **kwargs):  # noqa: E501
        """v1_auth_patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_patch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse2042
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_auth_patch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_auth_patch_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_auth_patch_with_http_info(self, **kwargs):  # noqa: E501
        """v1_auth_patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_patch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse2042
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_auth_patch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/auth', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2042',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_auth_put(self, **kwargs):  # noqa: E501
        """v1_auth_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse2042
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_auth_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_auth_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_auth_put_with_http_info(self, **kwargs):  # noqa: E501
        """v1_auth_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse2042
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_auth_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/auth', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2042',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_auth_refresh_get(self, **kwargs):  # noqa: E501
        """v1_auth_refresh_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_refresh_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str current_path:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_auth_refresh_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_auth_refresh_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_auth_refresh_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_auth_refresh_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_refresh_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str current_path:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['current_path', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_auth_refresh_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'current_path' in params:
            query_params.append(('currentPath', params['current_path']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/auth/refresh', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_auth_session_get(self, **kwargs):  # noqa: E501
        """v1_auth_session_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_session_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_auth_session_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_auth_session_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_auth_session_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_auth_session_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_session_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_auth_session_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/auth/session', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_auth_session_root_get(self, **kwargs):  # noqa: E501
        """v1_auth_session_root_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_session_root_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_auth_session_root_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_auth_session_root_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_auth_session_root_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_auth_session_root_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_session_root_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_auth_session_root_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/auth/session/root', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_auth_user_get(self, **kwargs):  # noqa: E501
        """v1_auth_user_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_user_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_auth_user_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_auth_user_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_auth_user_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_auth_user_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_auth_user_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_auth_user_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/auth/user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_backbone_health_device_device_id_post(self, device_id, **kwargs):  # noqa: E501
        """v1_backbone_health_device_device_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_backbone_health_device_device_id_post(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param object body:
        :param str authorization:
        :return: InlineResponse200222
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_backbone_health_device_device_id_post_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_backbone_health_device_device_id_post_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_backbone_health_device_device_id_post_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_backbone_health_device_device_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_backbone_health_device_device_id_post_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param object body:
        :param str authorization:
        :return: InlineResponse200222
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_backbone_health_device_device_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_backbone_health_device_device_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/backbone-health/device/{deviceId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200222',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_backbone_health_et_wan_matrix_get(self, **kwargs):  # noqa: E501
        """v1_backbone_health_et_wan_matrix_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_backbone_health_et_wan_matrix_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200223
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_backbone_health_et_wan_matrix_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_backbone_health_et_wan_matrix_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_backbone_health_et_wan_matrix_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_backbone_health_et_wan_matrix_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_backbone_health_et_wan_matrix_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200223
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_backbone_health_et_wan_matrix_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/backbone-health/et-wan-matrix', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200223',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_backbone_health_etet_sla_matrix_get(self, **kwargs):  # noqa: E501
        """v1_backbone_health_etet_sla_matrix_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_backbone_health_etet_sla_matrix_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200224
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_backbone_health_etet_sla_matrix_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_backbone_health_etet_sla_matrix_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_backbone_health_etet_sla_matrix_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_backbone_health_etet_sla_matrix_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_backbone_health_etet_sla_matrix_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200224
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_backbone_health_etet_sla_matrix_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/backbone-health/etet-sla-matrix', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200224',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_backbone_health_filter_get(self, **kwargs):  # noqa: E501
        """v1_backbone_health_filter_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_backbone_health_filter_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200225
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_backbone_health_filter_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_backbone_health_filter_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_backbone_health_filter_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_backbone_health_filter_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_backbone_health_filter_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200225
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_backbone_health_filter_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/backbone-health/filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200225',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_backbone_health_overview_post(self, **kwargs):  # noqa: E501
        """v1_backbone_health_overview_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_backbone_health_overview_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BackbonehealthOverviewBody body:
        :param str authorization:
        :return: InlineResponse200226
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_backbone_health_overview_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_backbone_health_overview_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_backbone_health_overview_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_backbone_health_overview_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_backbone_health_overview_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BackbonehealthOverviewBody body:
        :param str authorization:
        :return: InlineResponse200226
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_backbone_health_overview_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/backbone-health/overview', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200226',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_backbone_health_top_devices_by_alerts_post(self, **kwargs):  # noqa: E501
        """v1_backbone_health_top_devices_by_alerts_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_backbone_health_top_devices_by_alerts_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200227
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_backbone_health_top_devices_by_alerts_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_backbone_health_top_devices_by_alerts_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_backbone_health_top_devices_by_alerts_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_backbone_health_top_devices_by_alerts_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_backbone_health_top_devices_by_alerts_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200227
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_backbone_health_top_devices_by_alerts_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/backbone-health/top-devices-by-alerts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200227',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_bwtracker_enterprise_csv_post(self, **kwargs):  # noqa: E501
        """v1_bwtracker_enterprise_csv_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_enterprise_csv_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200213
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_bwtracker_enterprise_csv_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_bwtracker_enterprise_csv_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_bwtracker_enterprise_csv_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_bwtracker_enterprise_csv_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_enterprise_csv_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200213
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_bwtracker_enterprise_csv_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bwtracker/enterprise/csv', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200213',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_bwtracker_enterprise_details_post(self, **kwargs):  # noqa: E501
        """v1_bwtracker_enterprise_details_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_enterprise_details_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200214
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_bwtracker_enterprise_details_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_bwtracker_enterprise_details_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_bwtracker_enterprise_details_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_bwtracker_enterprise_details_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_enterprise_details_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200214
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_bwtracker_enterprise_details_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bwtracker/enterprise/details', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200214',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_bwtracker_enterprise_summary_post(self, **kwargs):  # noqa: E501
        """v1_bwtracker_enterprise_summary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_enterprise_summary_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200215
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_bwtracker_enterprise_summary_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_bwtracker_enterprise_summary_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_bwtracker_enterprise_summary_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_bwtracker_enterprise_summary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_enterprise_summary_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200215
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_bwtracker_enterprise_summary_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bwtracker/enterprise/summary', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200215',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_bwtracker_region_cloud_chart_post(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_cloud_chart_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_cloud_chart_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200216
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_bwtracker_region_cloud_chart_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_bwtracker_region_cloud_chart_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_bwtracker_region_cloud_chart_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_cloud_chart_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_cloud_chart_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200216
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_bwtracker_region_cloud_chart_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bwtracker/region/cloud/chart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200216',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_bwtracker_region_cloud_csv_post(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_cloud_csv_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_cloud_csv_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200213
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_bwtracker_region_cloud_csv_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_bwtracker_region_cloud_csv_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_bwtracker_region_cloud_csv_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_cloud_csv_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_cloud_csv_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200213
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_bwtracker_region_cloud_csv_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bwtracker/region/cloud/csv', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200213',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_bwtracker_region_cloud_summary_post(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_cloud_summary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_cloud_summary_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200217
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_bwtracker_region_cloud_summary_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_bwtracker_region_cloud_summary_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_bwtracker_region_cloud_summary_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_cloud_summary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_cloud_summary_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200217
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_bwtracker_region_cloud_summary_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bwtracker/region/cloud/summary', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200217',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_bwtracker_region_edge_chart_post(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_edge_chart_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_edge_chart_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200216
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_bwtracker_region_edge_chart_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_bwtracker_region_edge_chart_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_bwtracker_region_edge_chart_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_edge_chart_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_edge_chart_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200216
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_bwtracker_region_edge_chart_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bwtracker/region/edge/chart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200216',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_bwtracker_region_edge_csv_post(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_edge_csv_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_edge_csv_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200213
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_bwtracker_region_edge_csv_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_bwtracker_region_edge_csv_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_bwtracker_region_edge_csv_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_edge_csv_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_edge_csv_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200213
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_bwtracker_region_edge_csv_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bwtracker/region/edge/csv', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200213',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_bwtracker_region_edge_details_post(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_edge_details_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_edge_details_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200218
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_bwtracker_region_edge_details_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_bwtracker_region_edge_details_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_bwtracker_region_edge_details_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_edge_details_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_edge_details_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200218
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_bwtracker_region_edge_details_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bwtracker/region/edge/details', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200218',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_bwtracker_region_edge_summary_post(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_edge_summary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_edge_summary_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200219
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_bwtracker_region_edge_summary_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_bwtracker_region_edge_summary_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_bwtracker_region_edge_summary_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_edge_summary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_edge_summary_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200219
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_bwtracker_region_edge_summary_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bwtracker/region/edge/summary', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200219',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_bwtracker_region_site_chart_post(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_site_chart_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_site_chart_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200216
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_bwtracker_region_site_chart_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_bwtracker_region_site_chart_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_bwtracker_region_site_chart_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_site_chart_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_site_chart_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200216
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_bwtracker_region_site_chart_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bwtracker/region/site/chart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200216',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_bwtracker_region_site_details_post(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_site_details_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_site_details_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200220
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_bwtracker_region_site_details_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_bwtracker_region_site_details_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_bwtracker_region_site_details_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_site_details_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_site_details_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200220
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_bwtracker_region_site_details_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bwtracker/region/site/details', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200220',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_bwtracker_region_site_summary_post(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_site_summary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_site_summary_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200221
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_bwtracker_region_site_summary_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_bwtracker_region_site_summary_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_bwtracker_region_site_summary_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_bwtracker_region_site_summary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_region_site_summary_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200221
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_bwtracker_region_site_summary_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bwtracker/region/site/summary', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200221',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_bwtracker_site_csv_post(self, **kwargs):  # noqa: E501
        """v1_bwtracker_site_csv_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_site_csv_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200213
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_bwtracker_site_csv_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_bwtracker_site_csv_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_bwtracker_site_csv_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_bwtracker_site_csv_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_bwtracker_site_csv_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200213
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_bwtracker_site_csv_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bwtracker/site/csv', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200213',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_cli_command_device_id_post(self, command, device_id, **kwargs):  # noqa: E501
        """v1_cli_command_device_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_cli_command_device_id_post(command, device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str command: (required)
        :param str device_id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_cli_command_device_id_post_with_http_info(command, device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_cli_command_device_id_post_with_http_info(command, device_id, **kwargs)  # noqa: E501
            return data

    def v1_cli_command_device_id_post_with_http_info(self, command, device_id, **kwargs):  # noqa: E501
        """v1_cli_command_device_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_cli_command_device_id_post_with_http_info(command, device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str command: (required)
        :param str device_id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['command', 'device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_cli_command_device_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'command' is set
        if ('command' not in params or
                params['command'] is None):
            raise ValueError("Missing the required parameter `command` when calling `v1_cli_command_device_id_post`")  # noqa: E501
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_cli_command_device_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'command' in params:
            path_params['command'] = params['command']  # noqa: E501
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/cli/{command}/{deviceId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_cli_commands_get(self, **kwargs):  # noqa: E501
        """v1_cli_commands_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_cli_commands_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_cli_commands_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_cli_commands_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_cli_commands_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_cli_commands_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_cli_commands_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_cli_commands_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/cli/commands', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_data_assurance_assurances_applications_bucket_app_name_get(self, bucket_app_name, **kwargs):  # noqa: E501
        """v1_data_assurance_assurances_applications_bucket_app_name_get  # noqa: E501

        **API Description:**<br/> - Gets the assurance details for all edges under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_data_assurance_assurances_applications_bucket_app_name_get(bucket_app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bucket_app_name: (required)
        :param str authorization:
        :return: InlineResponse200117
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_data_assurance_assurances_applications_bucket_app_name_get_with_http_info(bucket_app_name, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_data_assurance_assurances_applications_bucket_app_name_get_with_http_info(bucket_app_name, **kwargs)  # noqa: E501
            return data

    def v1_data_assurance_assurances_applications_bucket_app_name_get_with_http_info(self, bucket_app_name, **kwargs):  # noqa: E501
        """v1_data_assurance_assurances_applications_bucket_app_name_get  # noqa: E501

        **API Description:**<br/> - Gets the assurance details for all edges under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_data_assurance_assurances_applications_bucket_app_name_get_with_http_info(bucket_app_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bucket_app_name: (required)
        :param str authorization:
        :return: InlineResponse200117
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bucket_app_name', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_data_assurance_assurances_applications_bucket_app_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bucket_app_name' is set
        if ('bucket_app_name' not in params or
                params['bucket_app_name'] is None):
            raise ValueError("Missing the required parameter `bucket_app_name` when calling `v1_data_assurance_assurances_applications_bucket_app_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bucket_app_name' in params:
            path_params['bucketAppName'] = params['bucket_app_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/data-assurance/assurances/applications/{bucketAppName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200117',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_data_assurance_assurances_global_get(self, **kwargs):  # noqa: E501
        """v1_data_assurance_assurances_global_get  # noqa: E501

        **API Description:**<br/> - Get all assurances under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_data_assurance_assurances_global_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20090
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_data_assurance_assurances_global_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_data_assurance_assurances_global_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_data_assurance_assurances_global_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_data_assurance_assurances_global_get  # noqa: E501

        **API Description:**<br/> - Get all assurances under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_data_assurance_assurances_global_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20090
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_data_assurance_assurances_global_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/data-assurance/assurances/global', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20090',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_data_assurance_assurances_global_id_delete(self, id, **kwargs):  # noqa: E501
        """v1_data_assurance_assurances_global_id_delete  # noqa: E501

        **API Description:**<br/> - Delete an assurance under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_data_assurance_assurances_global_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_data_assurance_assurances_global_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_data_assurance_assurances_global_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_data_assurance_assurances_global_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_data_assurance_assurances_global_id_delete  # noqa: E501

        **API Description:**<br/> - Delete an assurance under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_data_assurance_assurances_global_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_data_assurance_assurances_global_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_data_assurance_assurances_global_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/data-assurance/assurances/global/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_data_assurance_assurances_global_id_get(self, id, **kwargs):  # noqa: E501
        """v1_data_assurance_assurances_global_id_get  # noqa: E501

        **API Description:**<br/> - Get the config for an assurance under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_data_assurance_assurances_global_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200106
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_data_assurance_assurances_global_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_data_assurance_assurances_global_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_data_assurance_assurances_global_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_data_assurance_assurances_global_id_get  # noqa: E501

        **API Description:**<br/> - Get the config for an assurance under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_data_assurance_assurances_global_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200106
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_data_assurance_assurances_global_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_data_assurance_assurances_global_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/data-assurance/assurances/global/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200106',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_data_assurance_assurances_global_id_put(self, id, **kwargs):  # noqa: E501
        """v1_data_assurance_assurances_global_id_put  # noqa: E501

        **API Description:**<br/> - Overwrite a pre-existing assurance under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_data_assurance_assurances_global_id_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param GlobalIdBody body:
        :param str authorization:
        :return: InlineResponse200107
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_data_assurance_assurances_global_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_data_assurance_assurances_global_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_data_assurance_assurances_global_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_data_assurance_assurances_global_id_put  # noqa: E501

        **API Description:**<br/> - Overwrite a pre-existing assurance under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_data_assurance_assurances_global_id_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param GlobalIdBody body:
        :param str authorization:
        :return: InlineResponse200107
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_data_assurance_assurances_global_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_data_assurance_assurances_global_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/data-assurance/assurances/global/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200107',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_data_assurance_assurances_global_post(self, **kwargs):  # noqa: E501
        """v1_data_assurance_assurances_global_post  # noqa: E501

        **API Description:**<br/> - Configure a new assurance under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_data_assurance_assurances_global_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssurancesGlobalBody body:
        :param str authorization:
        :return: InlineResponse20091
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_data_assurance_assurances_global_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_data_assurance_assurances_global_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_data_assurance_assurances_global_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_data_assurance_assurances_global_post  # noqa: E501

        **API Description:**<br/> - Configure a new assurance under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_data_assurance_assurances_global_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssurancesGlobalBody body:
        :param str authorization:
        :return: InlineResponse20091
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_data_assurance_assurances_global_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/data-assurance/assurances/global', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20091',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_data_assurance_flex_algos_get(self, **kwargs):  # noqa: E501
        """v1_data_assurance_flex_algos_get  # noqa: E501

        **API Description:**<br/> - Get all configurable flex algos under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_data_assurance_flex_algos_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200149
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_data_assurance_flex_algos_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_data_assurance_flex_algos_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_data_assurance_flex_algos_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_data_assurance_flex_algos_get  # noqa: E501

        **API Description:**<br/> - Get all configurable flex algos under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_data_assurance_flex_algos_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200149
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_data_assurance_flex_algos_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/data-assurance/flex-algos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200149',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_bgp_nbr_stats_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_bgp_nbr_stats_get  # noqa: E501

        **API Description:**<br/> - Get BGP Nbr Stats Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_bgp_nbr_stats_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str afi_name: Valid configured BGP AfiSafi
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured BGP Instance name
        :param str nbr_address: Valid configured BGP Nbr address
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200192
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_bgp_nbr_stats_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_bgp_nbr_stats_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_bgp_nbr_stats_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_bgp_nbr_stats_get  # noqa: E501

        **API Description:**<br/> - Get BGP Nbr Stats Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_bgp_nbr_stats_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str afi_name: Valid configured BGP AfiSafi
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured BGP Instance name
        :param str nbr_address: Valid configured BGP Nbr address
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200192
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'afi_name', 'device_id', 'instance_name', 'nbr_address', 'last', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_bgp_nbr_stats_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'afi_name' in params:
            query_params.append(('afiName', params['afi_name']))  # noqa: E501
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'instance_name' in params:
            query_params.append(('instanceName', params['instance_name']))  # noqa: E501
        if 'nbr_address' in params:
            query_params.append(('nbrAddress', params['nbr_address']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/bgp/nbr/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200192',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_bgp_nbrid_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_bgp_nbrid_get  # noqa: E501

        **API Description:**<br/> - Get BGP Neighbor ID Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_bgp_nbrid_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200190
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_bgp_nbrid_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_bgp_nbrid_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_bgp_nbrid_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_bgp_nbrid_get  # noqa: E501

        **API Description:**<br/> - Get BGP Neighbor ID Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_bgp_nbrid_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200190
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'device_id', 'last', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_bgp_nbrid_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/bgp/nbrid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200190',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_bgp_nbrs_counters_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_bgp_nbrs_counters_get  # noqa: E501

        **API Description:**<br/> - Get BGP Neighbor Counters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_bgp_nbrs_counters_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200188
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_bgp_nbrs_counters_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_bgp_nbrs_counters_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_bgp_nbrs_counters_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_bgp_nbrs_counters_get  # noqa: E501

        **API Description:**<br/> - Get BGP Neighbor Counters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_bgp_nbrs_counters_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200188
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_bgp_nbrs_counters_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/bgp/nbrs/counters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200188',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_bgp_nbrs_details_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_bgp_nbrs_details_get  # noqa: E501

        **API Description:**<br/> - Get BGP Neighbor Details Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_bgp_nbrs_details_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str address: BGP Nbr address
        :param str device_id: Valid configured device ID > 0
        :param str interface: Interface name. Used in case of link local address
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200189
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_bgp_nbrs_details_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_bgp_nbrs_details_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_bgp_nbrs_details_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_bgp_nbrs_details_get  # noqa: E501

        **API Description:**<br/> - Get BGP Neighbor Details Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_bgp_nbrs_details_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str address: BGP Nbr address
        :param str device_id: Valid configured device ID > 0
        :param str interface: Interface name. Used in case of link local address
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200189
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'address', 'device_id', 'interface', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_bgp_nbrs_details_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'interface' in params:
            query_params.append(('interface', params['interface']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/bgp/nbrs/details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200189',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_bgp_nbrs_per_afi_prefix_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_bgp_nbrs_per_afi_prefix_get  # noqa: E501

        **API Description:**<br/> - Get BGP Neighbor Per Afi Prefix Counter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_bgp_nbrs_per_afi_prefix_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str address: BGP Nbr address
        :param str device_id: Valid configured device ID > 0
        :param str interface: Interface name. Used in case of link local address
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200191
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_bgp_nbrs_per_afi_prefix_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_bgp_nbrs_per_afi_prefix_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_bgp_nbrs_per_afi_prefix_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_bgp_nbrs_per_afi_prefix_get  # noqa: E501

        **API Description:**<br/> - Get BGP Neighbor Per Afi Prefix Counter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_bgp_nbrs_per_afi_prefix_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str address: BGP Nbr address
        :param str device_id: Valid configured device ID > 0
        :param str interface: Interface name. Used in case of link local address
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200191
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'address', 'device_id', 'interface', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_bgp_nbrs_per_afi_prefix_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'interface' in params:
            query_params.append(('interface', params['interface']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/bgp/nbrs/per-afi-prefix', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200191',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_odp_nbrid_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_odp_nbrid_get  # noqa: E501

        **API Description:**<br/> - Get BGP Neighbor addresses from ODP server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_odp_nbrid_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200190
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_odp_nbrid_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_odp_nbrid_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_odp_nbrid_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_odp_nbrid_get  # noqa: E501

        **API Description:**<br/> - Get BGP Neighbor addresses from ODP server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_odp_nbrid_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200190
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'device_id', 'last', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_odp_nbrid_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/odp/nbrid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200190',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_ospfv2_area_interface_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv2_area_interface_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv2 Area  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv2_area_interface_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200199
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_ospfv2_area_interface_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_ospfv2_area_interface_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_ospfv2_area_interface_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv2_area_interface_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv2 Area  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv2_area_interface_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200199
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'area_id', 'device_id', 'instance_name', 'last', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_ospfv2_area_interface_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'area_id' in params:
            query_params.append(('areaId', params['area_id']))  # noqa: E501
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'instance_name' in params:
            query_params.append(('instanceName', params['instance_name']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/ospfv2/area/interface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200199',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_ospfv2_area_interface_nbrid_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv2_area_interface_nbrid_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv2 Area  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv2_area_interface_nbrid_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param str interface_id: Valid configured Interface name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_ospfv2_area_interface_nbrid_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_ospfv2_area_interface_nbrid_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_ospfv2_area_interface_nbrid_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv2_area_interface_nbrid_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv2 Area  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv2_area_interface_nbrid_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param str interface_id: Valid configured Interface name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'area_id', 'device_id', 'instance_name', 'interface_id', 'last', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_ospfv2_area_interface_nbrid_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'area_id' in params:
            query_params.append(('areaId', params['area_id']))  # noqa: E501
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'instance_name' in params:
            query_params.append(('instanceName', params['instance_name']))  # noqa: E501
        if 'interface_id' in params:
            query_params.append(('interfaceId', params['interface_id']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/ospfv2/area/interface/nbrid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200201',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_ospfv2_area_interfaceid_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv2_area_interfaceid_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv2 Area  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv2_area_interfaceid_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_ospfv2_area_interfaceid_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_ospfv2_area_interfaceid_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_ospfv2_area_interfaceid_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv2_area_interfaceid_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv2 Area  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv2_area_interfaceid_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'area_id', 'device_id', 'instance_name', 'last', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_ospfv2_area_interfaceid_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'area_id' in params:
            query_params.append(('areaId', params['area_id']))  # noqa: E501
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'instance_name' in params:
            query_params.append(('instanceName', params['instance_name']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/ospfv2/area/interfaceid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_ospfv2_area_lsdb_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv2_area_lsdb_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv2 Area specific LSDB Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv2_area_lsdb_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200202
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_ospfv2_area_lsdb_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_ospfv2_area_lsdb_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_ospfv2_area_lsdb_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv2_area_lsdb_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv2 Area specific LSDB Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv2_area_lsdb_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200202
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'area_id', 'device_id', 'instance_name', 'last', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_ospfv2_area_lsdb_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'area_id' in params:
            query_params.append(('areaId', params['area_id']))  # noqa: E501
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'instance_name' in params:
            query_params.append(('instanceName', params['instance_name']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/ospfv2/area/lsdb', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200202',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_ospfv2_area_nbr_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv2_area_nbr_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv2 Area  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv2_area_nbr_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200203
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_ospfv2_area_nbr_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_ospfv2_area_nbr_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_ospfv2_area_nbr_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv2_area_nbr_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv2 Area  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv2_area_nbr_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200203
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'area_id', 'device_id', 'instance_name', 'last', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_ospfv2_area_nbr_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'area_id' in params:
            query_params.append(('areaId', params['area_id']))  # noqa: E501
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'instance_name' in params:
            query_params.append(('instanceName', params['instance_name']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/ospfv2/area/nbr', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200203',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_ospfv2_areaid_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv2_areaid_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv2 Area ID Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv2_areaid_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200198
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_ospfv2_areaid_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_ospfv2_areaid_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_ospfv2_areaid_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv2_areaid_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv2 Area ID Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv2_areaid_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200198
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'device_id', 'instance_name', 'last', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_ospfv2_areaid_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'instance_name' in params:
            query_params.append(('instanceName', params['instance_name']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/ospfv2/areaid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200198',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_ospfv2_lsdb_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv2_lsdb_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv2 global LSDB Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv2_lsdb_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200202
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_ospfv2_lsdb_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_ospfv2_lsdb_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_ospfv2_lsdb_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv2_lsdb_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv2 global LSDB Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv2_lsdb_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200202
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'device_id', 'instance_name', 'last', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_ospfv2_lsdb_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'instance_name' in params:
            query_params.append(('instanceName', params['instance_name']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/ospfv2/lsdb', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200202',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_ospfv2_rib_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv2_rib_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv2 Local RIB Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv2_rib_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param str before:
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200204
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_ospfv2_rib_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_ospfv2_rib_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_ospfv2_rib_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv2_rib_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv2 Local RIB Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv2_rib_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param str before:
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200204
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'device_id', 'instance_name', 'before', 'last', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_ospfv2_rib_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'instance_name' in params:
            query_params.append(('instanceName', params['instance_name']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/ospfv2/rib', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200204',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_ospfv2_statistics_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv2_statistics_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv2 Statistics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv2_statistics_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param list[object] vrf_names: Valid configured VRF name
        :return: InlineResponse200205
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_ospfv2_statistics_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_ospfv2_statistics_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_ospfv2_statistics_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv2_statistics_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv2 Statistics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv2_statistics_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param list[object] vrf_names: Valid configured VRF name
        :return: InlineResponse200205
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'device_id', 'vrf_names']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_ospfv2_statistics_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'vrf_names' in params:
            query_params.append(('vrfNames', params['vrf_names']))  # noqa: E501
            collection_formats['vrfNames'] = 'csv'  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/ospfv2/statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200205',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_ospfv3_area_interface_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv3_area_interface_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv3 Area  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv3_area_interface_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200199
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_ospfv3_area_interface_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_ospfv3_area_interface_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_ospfv3_area_interface_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv3_area_interface_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv3 Area  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv3_area_interface_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200199
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'area_id', 'device_id', 'instance_name', 'last', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_ospfv3_area_interface_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'area_id' in params:
            query_params.append(('areaId', params['area_id']))  # noqa: E501
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'instance_name' in params:
            query_params.append(('instanceName', params['instance_name']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/ospfv3/area/interface', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200199',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_ospfv3_area_interface_nbrid_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv3_area_interface_nbrid_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv3 Area  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv3_area_interface_nbrid_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param str interface_id: Valid configured Interface name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_ospfv3_area_interface_nbrid_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_ospfv3_area_interface_nbrid_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_ospfv3_area_interface_nbrid_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv3_area_interface_nbrid_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv3 Area  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv3_area_interface_nbrid_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param str interface_id: Valid configured Interface name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'area_id', 'device_id', 'instance_name', 'interface_id', 'last', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_ospfv3_area_interface_nbrid_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'area_id' in params:
            query_params.append(('areaId', params['area_id']))  # noqa: E501
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'instance_name' in params:
            query_params.append(('instanceName', params['instance_name']))  # noqa: E501
        if 'interface_id' in params:
            query_params.append(('interfaceId', params['interface_id']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/ospfv3/area/interface/nbrid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200201',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_ospfv3_area_interfaceid_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv3_area_interfaceid_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv3 Area  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv3_area_interfaceid_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_ospfv3_area_interfaceid_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_ospfv3_area_interfaceid_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_ospfv3_area_interfaceid_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv3_area_interfaceid_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv3 Area  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv3_area_interfaceid_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'area_id', 'device_id', 'instance_name', 'last', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_ospfv3_area_interfaceid_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'area_id' in params:
            query_params.append(('areaId', params['area_id']))  # noqa: E501
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'instance_name' in params:
            query_params.append(('instanceName', params['instance_name']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/ospfv3/area/interfaceid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_ospfv3_area_lsdb_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv3_area_lsdb_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv3 Area LSDB Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv3_area_lsdb_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200202
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_ospfv3_area_lsdb_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_ospfv3_area_lsdb_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_ospfv3_area_lsdb_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv3_area_lsdb_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv3 Area LSDB Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv3_area_lsdb_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200202
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'area_id', 'device_id', 'instance_name', 'last', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_ospfv3_area_lsdb_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'area_id' in params:
            query_params.append(('areaId', params['area_id']))  # noqa: E501
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'instance_name' in params:
            query_params.append(('instanceName', params['instance_name']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/ospfv3/area/lsdb', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200202',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_ospfv3_area_nbr_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv3_area_nbr_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv3 Area  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv3_area_nbr_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200203
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_ospfv3_area_nbr_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_ospfv3_area_nbr_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_ospfv3_area_nbr_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv3_area_nbr_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv3 Area  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv3_area_nbr_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str area_id: Valid configured Area ID
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200203
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'area_id', 'device_id', 'instance_name', 'last', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_ospfv3_area_nbr_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'area_id' in params:
            query_params.append(('areaId', params['area_id']))  # noqa: E501
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'instance_name' in params:
            query_params.append(('instanceName', params['instance_name']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/ospfv3/area/nbr', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200203',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_ospfv3_areaid_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv3_areaid_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv3 Area ID Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv3_areaid_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200198
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_ospfv3_areaid_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_ospfv3_areaid_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_ospfv3_areaid_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv3_areaid_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv3 Area ID Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv3_areaid_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200198
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'device_id', 'instance_name', 'last', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_ospfv3_areaid_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'instance_name' in params:
            query_params.append(('instanceName', params['instance_name']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/ospfv3/areaid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200198',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_ospfv3_lsdb_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv3_lsdb_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv3 global LSDB Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv3_lsdb_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200202
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_ospfv3_lsdb_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_ospfv3_lsdb_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_ospfv3_lsdb_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv3_lsdb_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv3 global LSDB Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv3_lsdb_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200202
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'device_id', 'instance_name', 'last', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_ospfv3_lsdb_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'instance_name' in params:
            query_params.append(('instanceName', params['instance_name']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/ospfv3/lsdb', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200202',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_ospfv3_rib_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv3_rib_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv3 Local RIB Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv3_rib_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param str before:
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200204
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_ospfv3_rib_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_ospfv3_rib_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_ospfv3_rib_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv3_rib_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv3 Local RIB Table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv3_rib_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param str instance_name: Valid configured OSPF Instance name
        :param str before:
        :param int last:
        :param str vrf_name: Valid configured VRF name
        :return: InlineResponse200204
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'device_id', 'instance_name', 'before', 'last', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_ospfv3_rib_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'instance_name' in params:
            query_params.append(('instanceName', params['instance_name']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'last' in params:
            query_params.append(('last', params['last']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/ospfv3/rib', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200204',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_ospfv3_statistics_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv3_statistics_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv3 Statistics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv3_statistics_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param list[object] vrf_names: Valid configured VRF name
        :return: InlineResponse200205
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_ospfv3_statistics_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_ospfv3_statistics_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_ospfv3_statistics_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_ospfv3_statistics_get  # noqa: E501

        **API Description:**<br/> - Get OSPFv3 Statistics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_ospfv3_statistics_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param list[object] vrf_names: Valid configured VRF name
        :return: InlineResponse200205
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'device_id', 'vrf_names']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_ospfv3_statistics_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'vrf_names' in params:
            query_params.append(('vrfNames', params['vrf_names']))  # noqa: E501
            collection_formats['vrfNames'] = 'csv'  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/ospfv3/statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200205',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_rib_route_count_post(self, **kwargs):  # noqa: E501
        """v1_device_routing_rib_route_count_post  # noqa: E501

        **API Description:**<br/> - Get BGP VRF installed route count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_rib_route_count_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param list[object] vrf_name: Valid configured VRF names
        :return: InlineResponse200193
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_rib_route_count_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_rib_route_count_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_rib_route_count_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_rib_route_count_post  # noqa: E501

        **API Description:**<br/> - Get BGP VRF installed route count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_rib_route_count_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param list[object] vrf_name: Valid configured VRF names
        :return: InlineResponse200193
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'device_id', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_rib_route_count_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501
            collection_formats['vrfName'] = 'csv'  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/rib/route-count', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200193',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_vrf_bgp_eibgp_route_count_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_vrf_bgp_eibgp_route_count_get  # noqa: E501

        **API Description:**<br/> - Get eBGP/iBGP VRF route count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_vrf_bgp_eibgp_route_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param str vrf_name: Valid configured VRF names
        :return: InlineResponse200194
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_vrf_bgp_eibgp_route_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_vrf_bgp_eibgp_route_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_vrf_bgp_eibgp_route_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_vrf_bgp_eibgp_route_count_get  # noqa: E501

        **API Description:**<br/> - Get eBGP/iBGP VRF route count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_vrf_bgp_eibgp_route_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param str vrf_name: Valid configured VRF names
        :return: InlineResponse200194
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'device_id', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_vrf_bgp_eibgp_route_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/vrf/bgp/eibgp-route-count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200194',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_vrf_bgp_graphiant_eiroute_count_get(self, **kwargs):  # noqa: E501
        """v1_device_routing_vrf_bgp_graphiant_eiroute_count_get  # noqa: E501

        **API Description:**<br/> - Get eBGP and iBGP VRF route count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_vrf_bgp_graphiant_eiroute_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param str vrf_name: Valid configured VRF names
        :return: InlineResponse200195
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_vrf_bgp_graphiant_eiroute_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_vrf_bgp_graphiant_eiroute_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_vrf_bgp_graphiant_eiroute_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_vrf_bgp_graphiant_eiroute_count_get  # noqa: E501

        **API Description:**<br/> - Get eBGP and iBGP VRF route count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_vrf_bgp_graphiant_eiroute_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param str vrf_name: Valid configured VRF names
        :return: InlineResponse200195
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'device_id', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_vrf_bgp_graphiant_eiroute_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/vrf/bgp/graphiant-eiroute-count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200195',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_routing_vrf_bgp_route_count_post(self, **kwargs):  # noqa: E501
        """v1_device_routing_vrf_bgp_route_count_post  # noqa: E501

        **API Description:**<br/> - Get BGP VRF route count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_vrf_bgp_route_count_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BgpRoutecountBody body:   **Field Descriptions**:<br/>  - __deviceId__: Valid configured device ID > 0<br/>  - __vrfName__: Valid configured VRF names<br/>  
        :param str authorization:
        :return: InlineResponse200193
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_routing_vrf_bgp_route_count_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_routing_vrf_bgp_route_count_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_routing_vrf_bgp_route_count_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_routing_vrf_bgp_route_count_post  # noqa: E501

        **API Description:**<br/> - Get BGP VRF route count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_routing_vrf_bgp_route_count_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BgpRoutecountBody body:   **Field Descriptions**:<br/>  - __deviceId__: Valid configured device ID > 0<br/>  - __vrfName__: Valid configured VRF names<br/>  
        :param str authorization:
        :return: InlineResponse200193
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_routing_vrf_bgp_route_count_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/routing/vrf/bgp/route-count', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200193',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_snapshot_device_id_get(self, device_id, **kwargs):  # noqa: E501
        """v1_device_snapshot_device_id_get  # noqa: E501

        **API Description:**<br/> - Get all of a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_snapshot_device_id_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200139
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_snapshot_device_id_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_snapshot_device_id_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_device_snapshot_device_id_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_device_snapshot_device_id_get  # noqa: E501

        **API Description:**<br/> - Get all of a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_snapshot_device_id_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200139
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_snapshot_device_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_device_snapshot_device_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/snapshot/{deviceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200139',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_snapshot_get(self, **kwargs):  # noqa: E501
        """v1_device_snapshot_get  # noqa: E501

        **API Description:**<br/> - Get the specified device snapshots using the snapshot id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_snapshot_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20095
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_snapshot_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_snapshot_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_snapshot_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_snapshot_get  # noqa: E501

        **API Description:**<br/> - Get the specified device snapshots using the snapshot id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_snapshot_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20095
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_snapshot_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/snapshot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20095',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_snapshot_post(self, **kwargs):  # noqa: E501
        """v1_device_snapshot_post  # noqa: E501

        **API Description:**<br/> - Create a device snapshot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_snapshot_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceSnapshotBody1 body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_snapshot_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_snapshot_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_snapshot_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_snapshot_post  # noqa: E501

        **API Description:**<br/> - Create a device snapshot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_snapshot_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceSnapshotBody1 body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_snapshot_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/snapshot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_snapshot_put(self, **kwargs):  # noqa: E501
        """v1_device_snapshot_put  # noqa: E501

        **API Description:**<br/> - Update an existing device snapshot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_snapshot_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceSnapshotBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_snapshot_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_snapshot_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_snapshot_put_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_snapshot_put  # noqa: E501

        **API Description:**<br/> - Update an existing device snapshot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_snapshot_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceSnapshotBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_snapshot_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/snapshot', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_snapshot_snapshot_id_delete(self, snapshot_id, **kwargs):  # noqa: E501
        """v1_device_snapshot_snapshot_id_delete  # noqa: E501

        **API Description:**<br/> - Delete specified device snapshot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_snapshot_snapshot_id_delete(snapshot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str snapshot_id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_snapshot_snapshot_id_delete_with_http_info(snapshot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_snapshot_snapshot_id_delete_with_http_info(snapshot_id, **kwargs)  # noqa: E501
            return data

    def v1_device_snapshot_snapshot_id_delete_with_http_info(self, snapshot_id, **kwargs):  # noqa: E501
        """v1_device_snapshot_snapshot_id_delete  # noqa: E501

        **API Description:**<br/> - Delete specified device snapshot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_snapshot_snapshot_id_delete_with_http_info(snapshot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str snapshot_id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['snapshot_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_snapshot_snapshot_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'snapshot_id' is set
        if ('snapshot_id' not in params or
                params['snapshot_id'] is None):
            raise ValueError("Missing the required parameter `snapshot_id` when calling `v1_device_snapshot_snapshot_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'snapshot_id' in params:
            path_params['snapshotId'] = params['snapshot_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/snapshot/{snapshotId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_status_history_post(self, **kwargs):  # noqa: E501
        """v1_device_status_history_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_status_history_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200185
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_status_history_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_status_history_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_status_history_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_status_history_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_status_history_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200185
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_status_history_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device-status/history', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200185',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_device_status_post(self, **kwargs):  # noqa: E501
        """v1_device_status_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_status_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200186
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_device_status_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_device_status_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_device_status_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_device_status_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_device_status_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200186
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_device_status_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/device-status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200186',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_bringup_post(self, **kwargs):  # noqa: E501
        """v1_devices_bringup_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_bringup_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_bringup_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_bringup_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_bringup_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_bringup_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_bringup_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_bringup_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/bringup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_bringup_put(self, **kwargs):  # noqa: E501
        """v1_devices_bringup_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_bringup_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DevicesBringupBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_bringup_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_bringup_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_bringup_put_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_bringup_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_bringup_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DevicesBringupBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_bringup_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/bringup', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_bringup_token_post(self, **kwargs):  # noqa: E501
        """v1_devices_bringup_token_post  # noqa: E501

        **API Description:**<br/> - VM edge onboarding token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_bringup_token_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BringupTokenBody body:
        :param str authorization:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_bringup_token_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_bringup_token_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_bringup_token_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_bringup_token_post  # noqa: E501

        **API Description:**<br/> - VM edge onboarding token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_bringup_token_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BringupTokenBody body:
        :param str authorization:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_bringup_token_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/bringup/token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_clear_new_flag_post(self, **kwargs):  # noqa: E501
        """v1_devices_clear_new_flag_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_clear_new_flag_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_clear_new_flag_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_clear_new_flag_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_clear_new_flag_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_clear_new_flag_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_clear_new_flag_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_clear_new_flag_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/clear-new-flag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_arp_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_arp_get  # noqa: E501

        **API Description:**<br/> - Get ARP monitoring table for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_arp_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200187
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_arp_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_arp_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_arp_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_arp_get  # noqa: E501

        **API Description:**<br/> - Get ARP monitoring table for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_arp_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200187
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_arp_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_arp_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/arp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200187',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_candidate_circuits_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_candidate_circuits_get  # noqa: E501

        **API Description:**<br/> - Get the candidate circuits for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_candidate_circuits_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200126
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_candidate_circuits_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_candidate_circuits_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_candidate_circuits_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_candidate_circuits_get  # noqa: E501

        **API Description:**<br/> - Get the candidate circuits for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_candidate_circuits_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200126
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_candidate_circuits_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_candidate_circuits_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/candidate-circuits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200126',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_circuits_vrf_associations_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_circuits_vrf_associations_get  # noqa: E501

        **API Description:**<br/> - Get the VRF, interface, &, if relevant, loopback interfaces for a list of circuits  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_circuits_vrf_associations_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200180
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_circuits_vrf_associations_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_circuits_vrf_associations_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_circuits_vrf_associations_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_circuits_vrf_associations_get  # noqa: E501

        **API Description:**<br/> - Get the VRF, interface, &, if relevant, loopback interfaces for a list of circuits  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_circuits_vrf_associations_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200180
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_circuits_vrf_associations_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_circuits_vrf_associations_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/circuits/vrf-associations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200180',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_config_put(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_config_put  # noqa: E501

        **API Description:**<br/> - Update a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_config_put(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param DeviceIdConfigBody body:
        :param str authorization:
        :return: InlineResponse2021
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_config_put_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_config_put_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_config_put_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_config_put  # noqa: E501

        **API Description:**<br/> - Update a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_config_put_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param DeviceIdConfigBody body:
        :param str authorization:
        :return: InlineResponse2021
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_config_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_config_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2021',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_connectivity_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_connectivity_get  # noqa: E501

        **API Description:**<br/> - Get the connectivity graph for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_connectivity_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200131
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_connectivity_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_connectivity_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_connectivity_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_connectivity_get  # noqa: E501

        **API Description:**<br/> - Get the connectivity graph for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_connectivity_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200131
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_connectivity_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_connectivity_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/connectivity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200131',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_dhcp_server_leases_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_dhcp_server_leases_get  # noqa: E501

        **API Description:**<br/> - Get current DHCP leases for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_dhcp_server_leases_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200133
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_dhcp_server_leases_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_dhcp_server_leases_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_dhcp_server_leases_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_dhcp_server_leases_get  # noqa: E501

        **API Description:**<br/> - Get current DHCP leases for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_dhcp_server_leases_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200133
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_dhcp_server_leases_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_dhcp_server_leases_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/dhcp-server/leases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200133',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_draft_delete(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_draft_delete  # noqa: E501

        **API Description:**<br/> - Delete draft configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_draft_delete(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_draft_delete_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_draft_delete_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_draft_delete_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_draft_delete  # noqa: E501

        **API Description:**<br/> - Delete draft configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_draft_delete_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_draft_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_draft_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/draft', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_draft_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_draft_get  # noqa: E501

        **API Description:**<br/> - Get draft configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_draft_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200109
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_draft_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_draft_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_draft_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_draft_get  # noqa: E501

        **API Description:**<br/> - Get draft configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_draft_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200109
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_draft_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_draft_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/draft', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200109',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_draft_post(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_draft_post  # noqa: E501

        **API Description:**<br/> - Save draft configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_draft_post(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param DeviceIdDraftBody body:   **Field Descriptions**:<br/>  - __defaultOriginate__: __(Optional)__ Set when default route needs to be advertised in BGP domain<br/>   - __maxPrefix__: __(Optional)__ Maximum number of prefixes that can be received from neighbor<br/>   - __multiHop__: __(Optional)__ Set when EBGP multi-hop functionality is enabled<br/>   - __sendCommunity__: __(Optional)__ Flag for sending standard, extended, and large communities<br/>   - __adminDistance__: __(Optional)__ Administrative Distance for routes installed<br/>   
        :param str authorization:
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_draft_post_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_draft_post_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_draft_post_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_draft_post  # noqa: E501

        **API Description:**<br/> - Save draft configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_draft_post_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param DeviceIdDraftBody body:   **Field Descriptions**:<br/>  - __defaultOriginate__: __(Optional)__ Set when default route needs to be advertised in BGP domain<br/>   - __maxPrefix__: __(Optional)__ Maximum number of prefixes that can be received from neighbor<br/>   - __multiHop__: __(Optional)__ Set when EBGP multi-hop functionality is enabled<br/>   - __sendCommunity__: __(Optional)__ Flag for sending standard, extended, and large communities<br/>   - __adminDistance__: __(Optional)__ Administrative Distance for routes installed<br/>   
        :param str authorization:
        :return: InlineResponse2012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_draft_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_draft_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/draft', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_edges_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_edges_get  # noqa: E501

        **API Description:**<br/> - Get a list of candidate edges for a Core, ODP server or T2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_edges_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200127
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_edges_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_edges_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_edges_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_edges_get  # noqa: E501

        **API Description:**<br/> - Get a list of candidate edges for a Core, ODP server or T2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_edges_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200127
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_edges_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_edges_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/edges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200127',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_get  # noqa: E501

        **API Description:**<br/> - Get a specific device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200135
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_get  # noqa: E501

        **API Description:**<br/> - Get a specific device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200135
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200135',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_interfaces_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_interfaces_get  # noqa: E501

        **API Description:**<br/> - Get interfaces for the given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_interfaces_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200164
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_interfaces_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_interfaces_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_interfaces_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_interfaces_get  # noqa: E501

        **API Description:**<br/> - Get interfaces for the given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_interfaces_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200164
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_interfaces_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_interfaces_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200164',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_jobs_job_id_get(self, device_id, job_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_jobs_job_id_get  # noqa: E501

        **API Description:**<br/> - Get device job status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_jobs_job_id_get(device_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str job_id: id of the job as received from the Enqueue* calls. (required)
        :param str authorization:
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_jobs_job_id_get_with_http_info(device_id, job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_jobs_job_id_get_with_http_info(device_id, job_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_jobs_job_id_get_with_http_info(self, device_id, job_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_jobs_job_id_get  # noqa: E501

        **API Description:**<br/> - Get device job status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_jobs_job_id_get_with_http_info(device_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str job_id: id of the job as received from the Enqueue* calls. (required)
        :param str authorization:
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'job_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_jobs_job_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_jobs_job_id_get`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `v1_devices_device_id_jobs_job_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/jobs/{jobId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20049',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_ndcache_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_ndcache_get  # noqa: E501

        **API Description:**<br/> - Get ND ipv6 Cache for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_ndcache_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200197
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_ndcache_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_ndcache_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_ndcache_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_ndcache_get  # noqa: E501

        **API Description:**<br/> - Get ND ipv6 Cache for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_ndcache_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200197
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_ndcache_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_ndcache_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/ndcache', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200197',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_ospfv2_default_originate_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_ospfv2_default_originate_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_ospfv2_default_originate_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200169
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_ospfv2_default_originate_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_ospfv2_default_originate_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_ospfv2_default_originate_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_ospfv2_default_originate_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_ospfv2_default_originate_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200169
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_ospfv2_default_originate_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_ospfv2_default_originate_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/ospfv2/defaultOriginate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200169',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_ospfv3_default_originate_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_ospfv3_default_originate_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_ospfv3_default_originate_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200169
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_ospfv3_default_originate_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_ospfv3_default_originate_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_ospfv3_default_originate_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_ospfv3_default_originate_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_ospfv3_default_originate_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200169
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_ospfv3_default_originate_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_ospfv3_default_originate_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/ospfv3/defaultOriginate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200169',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_policy_applications_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_policy_applications_get  # noqa: E501

        **API Description:**<br/> - Get a list of builtin DPI applications able to be configured on a given device based on GNOS version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_policy_applications_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200134
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_policy_applications_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_policy_applications_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_policy_applications_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_policy_applications_get  # noqa: E501

        **API Description:**<br/> - Get a list of builtin DPI applications able to be configured on a given device based on GNOS version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_policy_applications_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200134
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_policy_applications_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_policy_applications_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/policy/applications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200134',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_policy_customapplications_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_policy_customapplications_get  # noqa: E501

        **API Description:**<br/> - Get a list of custom DPI applications able to be configured on a given device based on GNOS version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_policy_customapplications_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200134
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_policy_customapplications_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_policy_customapplications_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_policy_customapplications_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_policy_customapplications_get  # noqa: E501

        **API Description:**<br/> - Get a list of custom DPI applications able to be configured on a given device based on GNOS version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_policy_customapplications_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200134
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_policy_customapplications_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_policy_customapplications_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/policy/customapplications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200134',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_policy_zonepairs_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_policy_zonepairs_get  # noqa: E501

        **API Description:**<br/> - Get a list of firewall zone pairs each with holding nested policy rule sets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_policy_zonepairs_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200148
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_policy_zonepairs_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_policy_zonepairs_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_policy_zonepairs_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_policy_zonepairs_get  # noqa: E501

        **API Description:**<br/> - Get a list of firewall zone pairs each with holding nested policy rule sets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_policy_zonepairs_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200148
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_policy_zonepairs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_policy_zonepairs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/policy/zonepairs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200148',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_slice_peers_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_slice_peers_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_slice_peers_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200179
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_slice_peers_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_slice_peers_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_slice_peers_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_slice_peers_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_slice_peers_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200179
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_slice_peers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_slice_peers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/slice/peers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200179',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_twamp_core_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_twamp_core_get  # noqa: E501

        **API Description:**<br/> - Get core TWAMP neighbors for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_twamp_core_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200132
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_twamp_core_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_twamp_core_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_twamp_core_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_twamp_core_get  # noqa: E501

        **API Description:**<br/> - Get core TWAMP neighbors for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_twamp_core_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200132
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_twamp_core_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_twamp_core_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/twamp/core', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200132',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_versions_compare_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_versions_compare_get  # noqa: E501

        **API Description:**<br/> - Compare device config versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_versions_compare_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: 16 bytes (base64 encoded) identifier for the device. (required)
        :param str authorization:
        :return: InlineResponse200136
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_versions_compare_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_versions_compare_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_versions_compare_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_versions_compare_get  # noqa: E501

        **API Description:**<br/> - Compare device config versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_versions_compare_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: 16 bytes (base64 encoded) identifier for the device. (required)
        :param str authorization:
        :return: InlineResponse200136
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_versions_compare_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_versions_compare_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/versions/compare', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200136',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_versions_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_versions_get  # noqa: E501

        **API Description:**<br/> - Get device config versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_versions_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: 16 bytes (base64 encoded) identifier for the device. (required)
        :param str authorization:
        :return: InlineResponse200138
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_versions_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_versions_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_versions_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_versions_get  # noqa: E501

        **API Description:**<br/> - Get device config versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_versions_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: 16 bytes (base64 encoded) identifier for the device. (required)
        :param str authorization:
        :return: InlineResponse200138
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_versions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_versions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200138',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_versions_version_get(self, device_id, version, **kwargs):  # noqa: E501
        """v1_devices_device_id_versions_version_get  # noqa: E501

        **API Description:**<br/> - Get device config for a specific version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_versions_version_get(device_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: 16 bytes (base64 encoded) identifier for the device. (required)
        :param int version: 8 bytes (base32 encoded) version number. (required)
        :param str authorization:
        :return: InlineResponse200137
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_versions_version_get_with_http_info(device_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_versions_version_get_with_http_info(device_id, version, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_versions_version_get_with_http_info(self, device_id, version, **kwargs):  # noqa: E501
        """v1_devices_device_id_versions_version_get  # noqa: E501

        **API Description:**<br/> - Get device config for a specific version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_versions_version_get_with_http_info(device_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: 16 bytes (base64 encoded) identifier for the device. (required)
        :param int version: 8 bytes (base32 encoded) version number. (required)
        :param str authorization:
        :return: InlineResponse200137
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'version', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_versions_version_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_versions_version_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `v1_devices_device_id_versions_version_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/versions/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200137',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_vrf_bgp_as_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_vrf_bgp_as_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_vrf_bgp_as_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200140
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_vrf_bgp_as_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_vrf_bgp_as_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_vrf_bgp_as_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_vrf_bgp_as_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_vrf_bgp_as_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200140
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_vrf_bgp_as_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_vrf_bgp_as_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/vrf/bgp/as', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200140',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_vrf_protocols_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_vrf_protocols_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_vrf_protocols_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200130
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_vrf_protocols_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_vrf_protocols_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_vrf_protocols_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_vrf_protocols_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_vrf_protocols_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200130
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_vrf_protocols_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_vrf_protocols_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/vrf/protocols', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200130',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_device_id_vrrp_get(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_vrrp_get  # noqa: E501

        **API Description:**<br/> - Get VRRP monitoring table for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_vrrp_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200206
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_device_id_vrrp_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_device_id_vrrp_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_devices_device_id_vrrp_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_devices_device_id_vrrp_get  # noqa: E501

        **API Description:**<br/> - Get VRRP monitoring table for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_device_id_vrrp_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse200206
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_device_id_vrrp_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_devices_device_id_vrrp_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/{deviceId}/vrrp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200206',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_get(self, **kwargs):  # noqa: E501
        """v1_devices_get  # noqa: E501

        **API Description:**<br/> - Get devices for the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200127
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_get  # noqa: E501

        **API Description:**<br/> - Get devices for the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200127
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200127',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_inventory_approve_return_post(self, **kwargs):  # noqa: E501
        """v1_devices_inventory_approve_return_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_inventory_approve_return_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_inventory_approve_return_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_inventory_approve_return_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_inventory_approve_return_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_inventory_approve_return_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_inventory_approve_return_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_inventory_approve_return_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/inventory/approve-return', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_inventory_clear_new_flag_post(self, **kwargs):  # noqa: E501
        """v1_devices_inventory_clear_new_flag_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_inventory_clear_new_flag_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_inventory_clear_new_flag_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_inventory_clear_new_flag_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_inventory_clear_new_flag_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_inventory_clear_new_flag_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_inventory_clear_new_flag_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_inventory_clear_new_flag_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/inventory/clear-new-flag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_inventory_clear_return_post(self, **kwargs):  # noqa: E501
        """v1_devices_inventory_clear_return_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_inventory_clear_return_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_inventory_clear_return_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_inventory_clear_return_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_inventory_clear_return_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_inventory_clear_return_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_inventory_clear_return_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_inventory_clear_return_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/inventory/clear-return', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_inventory_enterprise_put(self, **kwargs):  # noqa: E501
        """v1_devices_inventory_enterprise_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_inventory_enterprise_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InventoryEnterpriseBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_inventory_enterprise_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_inventory_enterprise_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_inventory_enterprise_put_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_inventory_enterprise_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_inventory_enterprise_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InventoryEnterpriseBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_inventory_enterprise_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/inventory/enterprise', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_inventory_get(self, **kwargs):  # noqa: E501
        """v1_devices_inventory_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_inventory_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_inventory_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_inventory_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_inventory_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_inventory_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_inventory_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_inventory_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/inventory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_inventory_post(self, **kwargs):  # noqa: E501
        """v1_devices_inventory_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_inventory_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DevicesInventoryBody body:
        :param str authorization:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_inventory_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_inventory_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_inventory_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_inventory_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_inventory_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DevicesInventoryBody body:
        :param str authorization:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_inventory_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/inventory', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_inventory_request_return_post(self, **kwargs):  # noqa: E501
        """v1_devices_inventory_request_return_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_inventory_request_return_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_inventory_request_return_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_inventory_request_return_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_inventory_request_return_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_inventory_request_return_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_inventory_request_return_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_inventory_request_return_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/inventory/request-return', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_inventory_serial_num_delete(self, **kwargs):  # noqa: E501
        """v1_devices_inventory_serial_num_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_inventory_serial_num_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param list[object] device_serials:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_inventory_serial_num_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_inventory_serial_num_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_inventory_serial_num_delete_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_inventory_serial_num_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_inventory_serial_num_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param list[object] device_serials:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'device_serials']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_inventory_serial_num_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_serials' in params:
            query_params.append(('deviceSerials', params['device_serials']))  # noqa: E501
            collection_formats['deviceSerials'] = 'csv'  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/inventory/serial-num', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_inventory_serial_num_post(self, **kwargs):  # noqa: E501
        """v1_devices_inventory_serial_num_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_inventory_serial_num_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_inventory_serial_num_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_inventory_serial_num_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_inventory_serial_num_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_inventory_serial_num_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_inventory_serial_num_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_inventory_serial_num_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/inventory/serial-num', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_oauth_redirect_get(self, **kwargs):  # noqa: E501
        """v1_devices_oauth_redirect_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_oauth_redirect_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_oauth_redirect_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_oauth_redirect_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_oauth_redirect_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_oauth_redirect_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_oauth_redirect_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_oauth_redirect_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/*v1/devices/oauth/redirect', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_rma_post(self, **kwargs):  # noqa: E501
        """v1_devices_rma_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_rma_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DevicesRmaBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_rma_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_rma_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_rma_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_rma_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_rma_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DevicesRmaBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_rma_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/rma', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_routing_vrf_protocol_route_count_get(self, **kwargs):  # noqa: E501
        """v1_devices_routing_vrf_protocol_route_count_get  # noqa: E501

        **API Description:**<br/> - Get per VRF per protocol route count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_routing_vrf_protocol_route_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param list[object] protocols: List of protocols names for which route count is needed
        :param str vrf_name: Valid configured VRF names
        :return: InlineResponse200196
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_routing_vrf_protocol_route_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_routing_vrf_protocol_route_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_routing_vrf_protocol_route_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_routing_vrf_protocol_route_count_get  # noqa: E501

        **API Description:**<br/> - Get per VRF per protocol route count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_routing_vrf_protocol_route_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str device_id: Valid configured device ID > 0
        :param list[object] protocols: List of protocols names for which route count is needed
        :param str vrf_name: Valid configured VRF names
        :return: InlineResponse200196
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'device_id', 'protocols', 'vrf_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_routing_vrf_protocol_route_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'protocols' in params:
            query_params.append(('protocols', params['protocols']))  # noqa: E501
            collection_formats['protocols'] = 'csv'  # noqa: E501
        if 'vrf_name' in params:
            query_params.append(('vrfName', params['vrf_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/routing/vrf/protocol-route-count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200196',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_running_version_post(self, **kwargs):  # noqa: E501
        """v1_devices_running_version_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_running_version_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200265
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_running_version_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_running_version_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_running_version_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_running_version_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_running_version_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200265
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_running_version_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/running/version', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200265',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_session_status_post(self, **kwargs):  # noqa: E501
        """v1_devices_session_status_post  # noqa: E501

        **API Description:**<br/> - Get all the BGP session states for the devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_session_status_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200125
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_session_status_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_session_status_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_session_status_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_session_status_post  # noqa: E501

        **API Description:**<br/> - Get all the BGP session states for the devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_session_status_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200125
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_session_status_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/session-status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200125',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_summary_get(self, **kwargs):  # noqa: E501
        """v1_devices_summary_get  # noqa: E501

        **API Description:**<br/> - Get devices summary for the specified enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200142
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_summary_get  # noqa: E501

        **API Description:**<br/> - Get devices summary for the specified enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200142
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices-summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200142',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_upgrade_cancel_put(self, **kwargs):  # noqa: E501
        """v1_devices_upgrade_cancel_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_upgrade_cancel_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_upgrade_cancel_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_upgrade_cancel_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_upgrade_cancel_put_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_upgrade_cancel_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_upgrade_cancel_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_upgrade_cancel_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/upgrade/cancel', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_devices_upgrade_schedule_put(self, **kwargs):  # noqa: E501
        """v1_devices_upgrade_schedule_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_upgrade_schedule_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpgradeScheduleBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_devices_upgrade_schedule_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_devices_upgrade_schedule_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_devices_upgrade_schedule_put_with_http_info(self, **kwargs):  # noqa: E501
        """v1_devices_upgrade_schedule_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_devices_upgrade_schedule_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpgradeScheduleBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_devices_upgrade_schedule_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/devices/upgrade/schedule', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_archive_create_device_id_post(self, device_id, **kwargs):  # noqa: E501
        """v1_diagnostic_archive_create_device_id_post  # noqa: E501

        **API Description:**<br/> - Create a device debug archive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_archive_create_device_id_post(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Valid Provisioned device ID (required)
        :param object body:   **Field Descriptions**:<br/>  - __description__: Description of the requested archive<br/>  
        :param str authorization:
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_archive_create_device_id_post_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_archive_create_device_id_post_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_diagnostic_archive_create_device_id_post_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_diagnostic_archive_create_device_id_post  # noqa: E501

        **API Description:**<br/> - Create a device debug archive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_archive_create_device_id_post_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Valid Provisioned device ID (required)
        :param object body:   **Field Descriptions**:<br/>  - __description__: Description of the requested archive<br/>  
        :param str authorization:
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_archive_create_device_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_diagnostic_archive_create_device_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/archive-create/{deviceId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse201',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_archive_delete_archive_id_delete(self, archive_id, **kwargs):  # noqa: E501
        """v1_diagnostic_archive_delete_archive_id_delete  # noqa: E501

        **API Description:**<br/> - Delete a device debug archive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_archive_delete_archive_id_delete(archive_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str archive_id: Unique identifier for a specific archive (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_archive_delete_archive_id_delete_with_http_info(archive_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_archive_delete_archive_id_delete_with_http_info(archive_id, **kwargs)  # noqa: E501
            return data

    def v1_diagnostic_archive_delete_archive_id_delete_with_http_info(self, archive_id, **kwargs):  # noqa: E501
        """v1_diagnostic_archive_delete_archive_id_delete  # noqa: E501

        **API Description:**<br/> - Delete a device debug archive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_archive_delete_archive_id_delete_with_http_info(archive_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str archive_id: Unique identifier for a specific archive (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['archive_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_archive_delete_archive_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'archive_id' is set
        if ('archive_id' not in params or
                params['archive_id'] is None):
            raise ValueError("Missing the required parameter `archive_id` when calling `v1_diagnostic_archive_delete_archive_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'archive_id' in params:
            path_params['archiveId'] = params['archive_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/archive-delete/{archiveId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_archive_edit_archive_id_put(self, archive_id, **kwargs):  # noqa: E501
        """v1_diagnostic_archive_edit_archive_id_put  # noqa: E501

        **API Description:**<br/> - Edit metadata for a previously generated device debug archive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_archive_edit_archive_id_put(archive_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str archive_id: Unique identifier for a specific archive (required)
        :param object body:   **Field Descriptions**:<br/>  - __description__: Description of the requested archive<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_archive_edit_archive_id_put_with_http_info(archive_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_archive_edit_archive_id_put_with_http_info(archive_id, **kwargs)  # noqa: E501
            return data

    def v1_diagnostic_archive_edit_archive_id_put_with_http_info(self, archive_id, **kwargs):  # noqa: E501
        """v1_diagnostic_archive_edit_archive_id_put  # noqa: E501

        **API Description:**<br/> - Edit metadata for a previously generated device debug archive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_archive_edit_archive_id_put_with_http_info(archive_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str archive_id: Unique identifier for a specific archive (required)
        :param object body:   **Field Descriptions**:<br/>  - __description__: Description of the requested archive<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['archive_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_archive_edit_archive_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'archive_id' is set
        if ('archive_id' not in params or
                params['archive_id'] is None):
            raise ValueError("Missing the required parameter `archive_id` when calling `v1_diagnostic_archive_edit_archive_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'archive_id' in params:
            path_params['archiveId'] = params['archive_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/archive-edit/{archiveId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_archives_device_id_get(self, device_id, **kwargs):  # noqa: E501
        """v1_diagnostic_archives_device_id_get  # noqa: E501

        **API Description:**<br/> - Get a list of device debug archive collections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_archives_device_id_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Valid Provisioned device ID (required)
        :param str authorization:
        :return: InlineResponse20051
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_archives_device_id_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_archives_device_id_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_diagnostic_archives_device_id_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_diagnostic_archives_device_id_get  # noqa: E501

        **API Description:**<br/> - Get a list of device debug archive collections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_archives_device_id_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Valid Provisioned device ID (required)
        :param str authorization:
        :return: InlineResponse20051
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_archives_device_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_diagnostic_archives_device_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/archives/{deviceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20051',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_bgp_reset_device_id_put(self, device_id, **kwargs):  # noqa: E501
        """v1_diagnostic_bgp_reset_device_id_put  # noqa: E501

        **API Description:**<br/> - Reset a BGP neighbor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_bgp_reset_device_id_put(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Unique identifier for a specific device (required)
        :param BgpresetDeviceIdBody body:   **Field Descriptions**:<br/>  - __hard__: BGP process restarts if set to true. if false, BGP route is only relearned<br/>  - __lanSegment__: The segment over which this route is learned<br/>  - __localInterface__: The local interface over which this route is learned<br/>  - __neighbor__: The neighbor to reset<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_bgp_reset_device_id_put_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_bgp_reset_device_id_put_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_diagnostic_bgp_reset_device_id_put_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_diagnostic_bgp_reset_device_id_put  # noqa: E501

        **API Description:**<br/> - Reset a BGP neighbor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_bgp_reset_device_id_put_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Unique identifier for a specific device (required)
        :param BgpresetDeviceIdBody body:   **Field Descriptions**:<br/>  - __hard__: BGP process restarts if set to true. if false, BGP route is only relearned<br/>  - __lanSegment__: The segment over which this route is learned<br/>  - __localInterface__: The local interface over which this route is learned<br/>  - __neighbor__: The neighbor to reset<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_bgp_reset_device_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_diagnostic_bgp_reset_device_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/bgp-reset/{deviceId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_clear_arp_device_id_put(self, device_id, **kwargs):  # noqa: E501
        """v1_diagnostic_clear_arp_device_id_put  # noqa: E501

        **API Description:**<br/> - Clear arp entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_clear_arp_device_id_put(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Unique identifier for a specific device (required)
        :param CleararpDeviceIdBody body:   **Field Descriptions**:<br/>  - __address__: IPv4 addresses<br/>  - __allEntry__: All IPv4 addresses<br/>  - __interfaceName__: Interface Name<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_clear_arp_device_id_put_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_clear_arp_device_id_put_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_diagnostic_clear_arp_device_id_put_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_diagnostic_clear_arp_device_id_put  # noqa: E501

        **API Description:**<br/> - Clear arp entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_clear_arp_device_id_put_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Unique identifier for a specific device (required)
        :param CleararpDeviceIdBody body:   **Field Descriptions**:<br/>  - __address__: IPv4 addresses<br/>  - __allEntry__: All IPv4 addresses<br/>  - __interfaceName__: Interface Name<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_clear_arp_device_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_diagnostic_clear_arp_device_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/clear-arp/{deviceId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_gnmi_ping_get(self, **kwargs):  # noqa: E501
        """v1_diagnostic_gnmi_ping_get  # noqa: E501

        **API Description:**<br/> - perform GNMI ping test  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_gnmi_ping_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_gnmi_ping_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_gnmi_ping_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_diagnostic_gnmi_ping_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_diagnostic_gnmi_ping_get  # noqa: E501

        **API Description:**<br/> - perform GNMI ping test  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_gnmi_ping_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_gnmi_ping_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/gnmi-ping', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20050',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_interface_reset_device_id_put(self, device_id, **kwargs):  # noqa: E501
        """v1_diagnostic_interface_reset_device_id_put  # noqa: E501

        **API Description:**<br/> - Reset an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_interface_reset_device_id_put(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Unique identifier for a specific device (required)
        :param InterfaceresetDeviceIdBody body:   **Field Descriptions**:<br/>  - __interface__: interface name<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_interface_reset_device_id_put_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_interface_reset_device_id_put_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_diagnostic_interface_reset_device_id_put_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_diagnostic_interface_reset_device_id_put  # noqa: E501

        **API Description:**<br/> - Reset an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_interface_reset_device_id_put_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Unique identifier for a specific device (required)
        :param InterfaceresetDeviceIdBody body:   **Field Descriptions**:<br/>  - __interface__: interface name<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_interface_reset_device_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_diagnostic_interface_reset_device_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/interface-reset/{deviceId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_otp_device_id_get(self, device_id, **kwargs):  # noqa: E501
        """v1_diagnostic_otp_device_id_get  # noqa: E501

        **API Description:**<br/> - Get a one-time passcode to access a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_otp_device_id_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Unique identifier for a specific device (required)
        :param str authorization:
        :return: InlineResponse20052
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_otp_device_id_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_otp_device_id_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_diagnostic_otp_device_id_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_diagnostic_otp_device_id_get  # noqa: E501

        **API Description:**<br/> - Get a one-time passcode to access a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_otp_device_id_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Unique identifier for a specific device (required)
        :param str authorization:
        :return: InlineResponse20052
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_otp_device_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_diagnostic_otp_device_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/otp/{deviceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20052',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_packetcapture_pcap_id_get(self, pcap_id, **kwargs):  # noqa: E501
        """v1_diagnostic_packetcapture_pcap_id_get  # noqa: E501

        **API Description:**<br/> - get a packet capture  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_packetcapture_pcap_id_get(pcap_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pcap_id: Unique identifier for a specific packet capture (required)
        :param str authorization:
        :return: InlineResponse20053
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_packetcapture_pcap_id_get_with_http_info(pcap_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_packetcapture_pcap_id_get_with_http_info(pcap_id, **kwargs)  # noqa: E501
            return data

    def v1_diagnostic_packetcapture_pcap_id_get_with_http_info(self, pcap_id, **kwargs):  # noqa: E501
        """v1_diagnostic_packetcapture_pcap_id_get  # noqa: E501

        **API Description:**<br/> - get a packet capture  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_packetcapture_pcap_id_get_with_http_info(pcap_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pcap_id: Unique identifier for a specific packet capture (required)
        :param str authorization:
        :return: InlineResponse20053
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pcap_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_packetcapture_pcap_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pcap_id' is set
        if ('pcap_id' not in params or
                params['pcap_id'] is None):
            raise ValueError("Missing the required parameter `pcap_id` when calling `v1_diagnostic_packetcapture_pcap_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pcap_id' in params:
            path_params['pcapId'] = params['pcap_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/packetcapture/{pcapId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20053',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_packetcapture_start_post(self, **kwargs):  # noqa: E501
        """v1_diagnostic_packetcapture_start_post  # noqa: E501

        **API Description:**<br/> - Start packet capture  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_packetcapture_start_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiagnosticPacketcapturestartBody body:   **Field Descriptions**:<br/>  - __deviceId__: Unique identifier for a specific device<br/>  - __duration__: Packet capture duration. Accepted values are 30, 60, 180<br/>  - __port__: __(Optional)__ Filters the capture for the specified port<br/>   - __prefix__: __(Optional)__ Filters the capture for the specified prefix<br/>   - __dscp__: __(Optional)__ Filters the packet capture for the specified DSCP field<br/>   - __protocol__: __(Optional)__ Filters the packet capture for the specified protocol<br/>   - __maxPacketCounter__: __(Optional)__ Packet capture limit.<br/>   - __interface__: __(Optional)__ Source Interface name<br/>   - __vrfName__: __(Optional)__ Configured VRF Name<br/>   
        :param str authorization:
        :return: InlineResponse2011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_packetcapture_start_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_packetcapture_start_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_diagnostic_packetcapture_start_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_diagnostic_packetcapture_start_post  # noqa: E501

        **API Description:**<br/> - Start packet capture  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_packetcapture_start_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiagnosticPacketcapturestartBody body:   **Field Descriptions**:<br/>  - __deviceId__: Unique identifier for a specific device<br/>  - __duration__: Packet capture duration. Accepted values are 30, 60, 180<br/>  - __port__: __(Optional)__ Filters the capture for the specified port<br/>   - __prefix__: __(Optional)__ Filters the capture for the specified prefix<br/>   - __dscp__: __(Optional)__ Filters the packet capture for the specified DSCP field<br/>   - __protocol__: __(Optional)__ Filters the packet capture for the specified protocol<br/>   - __maxPacketCounter__: __(Optional)__ Packet capture limit.<br/>   - __interface__: __(Optional)__ Source Interface name<br/>   - __vrfName__: __(Optional)__ Configured VRF Name<br/>   
        :param str authorization:
        :return: InlineResponse2011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_packetcapture_start_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/packetcapture-start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_packetcapture_stop_post(self, **kwargs):  # noqa: E501
        """v1_diagnostic_packetcapture_stop_post  # noqa: E501

        **API Description:**<br/> - Stop packet capture  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_packetcapture_stop_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiagnosticPacketcapturestopBody body:   **Field Descriptions**:<br/>  - __pcapId__: Unique identifier for a specific packet capture<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_packetcapture_stop_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_packetcapture_stop_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_diagnostic_packetcapture_stop_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_diagnostic_packetcapture_stop_post  # noqa: E501

        **API Description:**<br/> - Stop packet capture  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_packetcapture_stop_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiagnosticPacketcapturestopBody body:   **Field Descriptions**:<br/>  - __pcapId__: Unique identifier for a specific packet capture<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_packetcapture_stop_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/packetcapture-stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_ping_pause_resume_post(self, **kwargs):  # noqa: E501
        """v1_diagnostic_ping_pause_resume_post  # noqa: E501

        **API Description:**<br/> - Pause and/or Resume a ping session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_ping_pause_resume_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:   **Field Descriptions**:<br/>  - __deviceId__: Valid Provisioned device ID<br/>  - __destAddress__: IPv4 or IPv6 Destination address<br/>  - __hopStatsCount__: __(Optional)__ Per hop probes needed for traceroute hop stats<br/>   - __interface__: __(Optional)__ Source Interface name<br/>   - __payloadSize__: __(Optional)__ Size of packet to be sent<br/>   - __port__: Valid in case of TCP ping<br/>  - __probeCount__: __(Optional)__ Number of probes to send<br/>   - __srcAddress__: IPv4 or IPv6 address<br/>  - __tos__: __(Optional)__ Type of service<br/>   - __vrfName__: configure VRF Name<br/>  - __token__: __(Optional)__ Identifier which was received in initial response<br/>   - __transportType__: ICMP or TCP<br/>  
        :param str authorization:
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_ping_pause_resume_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_ping_pause_resume_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_diagnostic_ping_pause_resume_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_diagnostic_ping_pause_resume_post  # noqa: E501

        **API Description:**<br/> - Pause and/or Resume a ping session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_ping_pause_resume_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:   **Field Descriptions**:<br/>  - __deviceId__: Valid Provisioned device ID<br/>  - __destAddress__: IPv4 or IPv6 Destination address<br/>  - __hopStatsCount__: __(Optional)__ Per hop probes needed for traceroute hop stats<br/>   - __interface__: __(Optional)__ Source Interface name<br/>   - __payloadSize__: __(Optional)__ Size of packet to be sent<br/>   - __port__: Valid in case of TCP ping<br/>  - __probeCount__: __(Optional)__ Number of probes to send<br/>   - __srcAddress__: IPv4 or IPv6 address<br/>  - __tos__: __(Optional)__ Type of service<br/>   - __vrfName__: configure VRF Name<br/>  - __token__: __(Optional)__ Identifier which was received in initial response<br/>   - __transportType__: ICMP or TCP<br/>  
        :param str authorization:
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_ping_pause_resume_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/ping-pause-resume', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse204',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_ping_post(self, **kwargs):  # noqa: E501
        """v1_diagnostic_ping_post  # noqa: E501

        **API Description:**<br/> - Trigger a diagnostic test  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_ping_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:   **Field Descriptions**:<br/>  - __deviceId__: Valid Provisioned device ID<br/>  - __destAddress__: IPv4 or IPv6 Destination address<br/>  - __hopStatsCount__: __(Optional)__ Per hop probes needed for traceroute hop stats<br/>   - __interface__: __(Optional)__ Source Interface name<br/>   - __payloadSize__: __(Optional)__ Size of packet to be sent<br/>   - __port__: Valid in case of TCP ping<br/>  - __probeCount__: __(Optional)__ Number of probes to send<br/>   - __srcAddress__: IPv4 or IPv6 address<br/>  - __tos__: __(Optional)__ Type of service<br/>   - __vrfName__: configure VRF Name<br/>  - __token__: __(Optional)__ Identifier which was received in initial response<br/>   - __transportType__: ICMP or TCP<br/>  
        :param str authorization:
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_ping_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_ping_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_diagnostic_ping_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_diagnostic_ping_post  # noqa: E501

        **API Description:**<br/> - Trigger a diagnostic test  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_ping_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:   **Field Descriptions**:<br/>  - __deviceId__: Valid Provisioned device ID<br/>  - __destAddress__: IPv4 or IPv6 Destination address<br/>  - __hopStatsCount__: __(Optional)__ Per hop probes needed for traceroute hop stats<br/>   - __interface__: __(Optional)__ Source Interface name<br/>   - __payloadSize__: __(Optional)__ Size of packet to be sent<br/>   - __port__: Valid in case of TCP ping<br/>  - __probeCount__: __(Optional)__ Number of probes to send<br/>   - __srcAddress__: IPv4 or IPv6 address<br/>  - __tos__: __(Optional)__ Type of service<br/>   - __vrfName__: configure VRF Name<br/>  - __token__: __(Optional)__ Identifier which was received in initial response<br/>   - __transportType__: ICMP or TCP<br/>  
        :param str authorization:
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_ping_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/ping', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse204',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_ping_stop_token_post(self, token, **kwargs):  # noqa: E501
        """v1_diagnostic_ping_stop_token_post  # noqa: E501

        **API Description:**<br/> - Stop ping session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_ping_stop_token_post(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: Identifier which was received in initial response (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_ping_stop_token_post_with_http_info(token, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_ping_stop_token_post_with_http_info(token, **kwargs)  # noqa: E501
            return data

    def v1_diagnostic_ping_stop_token_post_with_http_info(self, token, **kwargs):  # noqa: E501
        """v1_diagnostic_ping_stop_token_post  # noqa: E501

        **API Description:**<br/> - Stop ping session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_ping_stop_token_post_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: Identifier which was received in initial response (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_ping_stop_token_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `v1_diagnostic_ping_stop_token_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/ping-stop/{token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_reboot_device_id_put(self, device_id, **kwargs):  # noqa: E501
        """v1_diagnostic_reboot_device_id_put  # noqa: E501

        **API Description:**<br/> - Trigger a device reboot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_reboot_device_id_put(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Valid Provisioned device ID (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_reboot_device_id_put_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_reboot_device_id_put_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_diagnostic_reboot_device_id_put_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_diagnostic_reboot_device_id_put  # noqa: E501

        **API Description:**<br/> - Trigger a device reboot  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_reboot_device_id_put_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Valid Provisioned device ID (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_reboot_device_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_diagnostic_reboot_device_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/reboot/{deviceId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_reset_ipsec_session_device_id_put(self, device_id, **kwargs):  # noqa: E501
        """v1_diagnostic_reset_ipsec_session_device_id_put  # noqa: E501

        **API Description:**<br/> - Reset IPSec sessions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_reset_ipsec_session_device_id_put(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Unique identifier for a specific device (required)
        :param ResetipsecsessionDeviceIdBody body:   **Field Descriptions**:<br/>  - __all3RdParty__: All 3rd Party IPSec sessions<br/>  - __allControllers__: All Graphiant controllers IPSec sessions<br/>  - __allE2E__: All Edge to Edge sessions<br/>  - __vrf__: List of circuit VRFs<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_reset_ipsec_session_device_id_put_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_reset_ipsec_session_device_id_put_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_diagnostic_reset_ipsec_session_device_id_put_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_diagnostic_reset_ipsec_session_device_id_put  # noqa: E501

        **API Description:**<br/> - Reset IPSec sessions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_reset_ipsec_session_device_id_put_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Unique identifier for a specific device (required)
        :param ResetipsecsessionDeviceIdBody body:   **Field Descriptions**:<br/>  - __all3RdParty__: All 3rd Party IPSec sessions<br/>  - __allControllers__: All Graphiant controllers IPSec sessions<br/>  - __allE2E__: All Edge to Edge sessions<br/>  - __vrf__: List of circuit VRFs<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_reset_ipsec_session_device_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_diagnostic_reset_ipsec_session_device_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/reset-ipsec-session/{deviceId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_speedtest_post(self, **kwargs):  # noqa: E501
        """v1_diagnostic_speedtest_post  # noqa: E501

        **API Description:**<br/> - Trigger Speedtest utility  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_speedtest_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiagnosticSpeedtestBody body:   **Field Descriptions**:<br/>  - __deviceId__: Unique identifier for a specific device<br/>  - __provider__: Speedtest provider name<br/>  - __serverId__: __(Optional)__ This is fetched using GetSpeedtestServers API<br/>   - __interface__: __(Optional)__ Source Interface name<br/>   - __vrfName__: __(Optional)__ Configured VRF Name<br/>   - __token__: __(Optional)__ Token to be sent in subsequent lookup<br/>   
        :param str authorization:
        :return: InlineResponse20057
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_speedtest_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_speedtest_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_diagnostic_speedtest_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_diagnostic_speedtest_post  # noqa: E501

        **API Description:**<br/> - Trigger Speedtest utility  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_speedtest_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiagnosticSpeedtestBody body:   **Field Descriptions**:<br/>  - __deviceId__: Unique identifier for a specific device<br/>  - __provider__: Speedtest provider name<br/>  - __serverId__: __(Optional)__ This is fetched using GetSpeedtestServers API<br/>   - __interface__: __(Optional)__ Source Interface name<br/>   - __vrfName__: __(Optional)__ Configured VRF Name<br/>   - __token__: __(Optional)__ Token to be sent in subsequent lookup<br/>   
        :param str authorization:
        :return: InlineResponse20057
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_speedtest_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/speedtest', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20057',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_speedtest_providers_get(self, **kwargs):  # noqa: E501
        """v1_diagnostic_speedtest_providers_get  # noqa: E501

        **API Description:**<br/> - Get list of supported speedtest service providers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_speedtest_providers_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20054
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_speedtest_providers_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_speedtest_providers_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_diagnostic_speedtest_providers_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_diagnostic_speedtest_providers_get  # noqa: E501

        **API Description:**<br/> - Get list of supported speedtest service providers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_speedtest_providers_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20054
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_speedtest_providers_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/speedtest-providers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20054',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_speedtest_report_put(self, **kwargs):  # noqa: E501
        """v1_diagnostic_speedtest_report_put  # noqa: E501

        **API Description:**<br/> - Generate a speedtest history report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_speedtest_report_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiagnosticSpeedtestreportBody body:   **Field Descriptions**:<br/>  - __deviceId__: Unique identifier for a specific device<br/>  - __historyLength__: Number of most recent speedtest records to return for a specific device<br/>  
        :param str authorization:
        :return: InlineResponse20056
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_speedtest_report_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_speedtest_report_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_diagnostic_speedtest_report_put_with_http_info(self, **kwargs):  # noqa: E501
        """v1_diagnostic_speedtest_report_put  # noqa: E501

        **API Description:**<br/> - Generate a speedtest history report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_speedtest_report_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiagnosticSpeedtestreportBody body:   **Field Descriptions**:<br/>  - __deviceId__: Unique identifier for a specific device<br/>  - __historyLength__: Number of most recent speedtest records to return for a specific device<br/>  
        :param str authorization:
        :return: InlineResponse20056
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_speedtest_report_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/speedtest-report', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20056',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_speedtest_servers_get(self, **kwargs):  # noqa: E501
        """v1_diagnostic_speedtest_servers_get  # noqa: E501

        **API Description:**<br/> - Get list of servers for a provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_speedtest_servers_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20055
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_speedtest_servers_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_speedtest_servers_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_diagnostic_speedtest_servers_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_diagnostic_speedtest_servers_get  # noqa: E501

        **API Description:**<br/> - Get list of servers for a provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_speedtest_servers_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20055
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_speedtest_servers_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/speedtest-servers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20055',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_diagnostic_traceroute_post(self, **kwargs):  # noqa: E501
        """v1_diagnostic_traceroute_post  # noqa: E501

        **API Description:**<br/> - Trigger a diagnostic test  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_traceroute_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:   **Field Descriptions**:<br/>  - __deviceId__: Valid Provisioned device ID<br/>  - __destAddress__: IPv4 or IPv6 Destination address<br/>  - __hopStatsCount__: __(Optional)__ Per hop probes needed for traceroute hop stats<br/>   - __interface__: __(Optional)__ Source Interface name<br/>   - __payloadSize__: __(Optional)__ Size of packet to be sent<br/>   - __port__: Valid in case of TCP ping<br/>  - __probeCount__: __(Optional)__ Number of probes to send<br/>   - __srcAddress__: IPv4 or IPv6 address<br/>  - __tos__: __(Optional)__ Type of service<br/>   - __vrfName__: configure VRF Name<br/>  - __token__: __(Optional)__ Identifier which was received in initial response<br/>   - __transportType__: ICMP or TCP<br/>  
        :param str authorization:
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_diagnostic_traceroute_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_diagnostic_traceroute_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_diagnostic_traceroute_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_diagnostic_traceroute_post  # noqa: E501

        **API Description:**<br/> - Trigger a diagnostic test  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_diagnostic_traceroute_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:   **Field Descriptions**:<br/>  - __deviceId__: Valid Provisioned device ID<br/>  - __destAddress__: IPv4 or IPv6 Destination address<br/>  - __hopStatsCount__: __(Optional)__ Per hop probes needed for traceroute hop stats<br/>   - __interface__: __(Optional)__ Source Interface name<br/>   - __payloadSize__: __(Optional)__ Size of packet to be sent<br/>   - __port__: Valid in case of TCP ping<br/>  - __probeCount__: __(Optional)__ Number of probes to send<br/>   - __srcAddress__: IPv4 or IPv6 address<br/>  - __tos__: __(Optional)__ Type of service<br/>   - __vrfName__: configure VRF Name<br/>  - __token__: __(Optional)__ Identifier which was received in initial response<br/>   - __transportType__: ICMP or TCP<br/>  
        :param str authorization:
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_diagnostic_traceroute_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/diagnostic/traceroute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse204',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_docs_get(self, **kwargs):  # noqa: E501
        """v1_docs_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_docs_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_docs_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_docs_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_docs_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_docs_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_docs_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_docs_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/docs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_edges_hardware_assigned_get(self, **kwargs):  # noqa: E501
        """v1_edges_hardware_assigned_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_edges_hardware_assigned_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200207
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_edges_hardware_assigned_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_edges_hardware_assigned_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_edges_hardware_assigned_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_edges_hardware_assigned_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_edges_hardware_assigned_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200207
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_edges_hardware_assigned_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/edges-hardware/assigned', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200207',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_edges_hardware_unassigned_get(self, **kwargs):  # noqa: E501
        """v1_edges_hardware_unassigned_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_edges_hardware_unassigned_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200209
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_edges_hardware_unassigned_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_edges_hardware_unassigned_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_edges_hardware_unassigned_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_edges_hardware_unassigned_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_edges_hardware_unassigned_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200209
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_edges_hardware_unassigned_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/edges-hardware/unassigned', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200209',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_edges_summary_get(self, **kwargs):  # noqa: E501
        """v1_edges_summary_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_edges_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200208
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_edges_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_edges_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_edges_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_edges_summary_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_edges_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200208
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_edges_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/edges-summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200208',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_enterprise_allocation_get(self, **kwargs):  # noqa: E501
        """v1_enterprise_allocation_get  # noqa: E501

        **API Description:**<br/> - Get all allocation for the given enterprise on a given month  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprise_allocation_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_enterprise_allocation_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_enterprise_allocation_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_enterprise_allocation_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_enterprise_allocation_get  # noqa: E501

        **API Description:**<br/> - Get all allocation for the given enterprise on a given month  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprise_allocation_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enterprise_allocation_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/enterprise/allocation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_enterprise_configuration_get(self, **kwargs):  # noqa: E501
        """v1_enterprise_configuration_get  # noqa: E501

        **API Description:**<br/> - Get enterprise-level information relevant to device configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprise_configuration_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200143
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_enterprise_configuration_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_enterprise_configuration_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_enterprise_configuration_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_enterprise_configuration_get  # noqa: E501

        **API Description:**<br/> - Get enterprise-level information relevant to device configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprise_configuration_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200143
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enterprise_configuration_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/enterprise/configuration', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200143',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_enterprise_configuration_put(self, **kwargs):  # noqa: E501
        """v1_enterprise_configuration_put  # noqa: E501

        **API Description:**<br/> - Update enterprise-level information relevant to device configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprise_configuration_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnterpriseConfigurationBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_enterprise_configuration_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_enterprise_configuration_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_enterprise_configuration_put_with_http_info(self, **kwargs):  # noqa: E501
        """v1_enterprise_configuration_put  # noqa: E501

        **API Description:**<br/> - Update enterprise-level information relevant to device configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprise_configuration_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnterpriseConfigurationBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enterprise_configuration_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/enterprise/configuration', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_enterprise_contract_put(self, **kwargs):  # noqa: E501
        """v1_enterprise_contract_put  # noqa: E501

        **API Description:**<br/> - Update an enterprise to use a new monthly or term-based contract  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprise_contract_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnterpriseContractBody body:   **Field Descriptions**:<br/>  - __contractedCredits__: Amount of credits billed for a contract term or monthly if no expiration date is provided<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_enterprise_contract_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_enterprise_contract_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_enterprise_contract_put_with_http_info(self, **kwargs):  # noqa: E501
        """v1_enterprise_contract_put  # noqa: E501

        **API Description:**<br/> - Update an enterprise to use a new monthly or term-based contract  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprise_contract_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnterpriseContractBody body:   **Field Descriptions**:<br/>  - __contractedCredits__: Amount of credits billed for a contract term or monthly if no expiration date is provided<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enterprise_contract_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/enterprise/contract', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_enterprise_snapshot_get(self, **kwargs):  # noqa: E501
        """v1_enterprise_snapshot_get  # noqa: E501

        **API Description:**<br/> - Get a all of the device snapshots for every device in an enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprise_snapshot_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200113
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_enterprise_snapshot_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_enterprise_snapshot_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_enterprise_snapshot_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_enterprise_snapshot_get  # noqa: E501

        **API Description:**<br/> - Get a all of the device snapshots for every device in an enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprise_snapshot_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200113
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enterprise_snapshot_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/enterprise/snapshot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200113',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_enterprises_enterprise_id_admin_get(self, enterprise_id, **kwargs):  # noqa: E501
        """v1_enterprises_enterprise_id_admin_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprises_enterprise_id_admin_get(enterprise_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enterprise_id: (required)
        :param str authorization:
        :return: InlineResponse20069
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_enterprises_enterprise_id_admin_get_with_http_info(enterprise_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_enterprises_enterprise_id_admin_get_with_http_info(enterprise_id, **kwargs)  # noqa: E501
            return data

    def v1_enterprises_enterprise_id_admin_get_with_http_info(self, enterprise_id, **kwargs):  # noqa: E501
        """v1_enterprises_enterprise_id_admin_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprises_enterprise_id_admin_get_with_http_info(enterprise_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enterprise_id: (required)
        :param str authorization:
        :return: InlineResponse20069
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enterprise_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enterprises_enterprise_id_admin_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enterprise_id' is set
        if ('enterprise_id' not in params or
                params['enterprise_id'] is None):
            raise ValueError("Missing the required parameter `enterprise_id` when calling `v1_enterprises_enterprise_id_admin_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'enterprise_id' in params:
            path_params['enterpriseId'] = params['enterprise_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/enterprises/{enterpriseId}/admin', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20069',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_enterprises_enterprise_id_delete(self, enterprise_id, **kwargs):  # noqa: E501
        """v1_enterprises_enterprise_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprises_enterprise_id_delete(enterprise_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enterprise_id: (required)
        :param str authorization:
        :return: InlineResponse2042
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_enterprises_enterprise_id_delete_with_http_info(enterprise_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_enterprises_enterprise_id_delete_with_http_info(enterprise_id, **kwargs)  # noqa: E501
            return data

    def v1_enterprises_enterprise_id_delete_with_http_info(self, enterprise_id, **kwargs):  # noqa: E501
        """v1_enterprises_enterprise_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprises_enterprise_id_delete_with_http_info(enterprise_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enterprise_id: (required)
        :param str authorization:
        :return: InlineResponse2042
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enterprise_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enterprises_enterprise_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enterprise_id' is set
        if ('enterprise_id' not in params or
                params['enterprise_id'] is None):
            raise ValueError("Missing the required parameter `enterprise_id` when calling `v1_enterprises_enterprise_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'enterprise_id' in params:
            path_params['enterpriseId'] = params['enterprise_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/enterprises/{enterpriseId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2042',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_enterprises_enterprise_id_device_status_get(self, enterprise_id, **kwargs):  # noqa: E501
        """v1_enterprises_enterprise_id_device_status_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprises_enterprise_id_device_status_get(enterprise_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enterprise_id: (required)
        :param str authorization:
        :return: InlineResponse200186
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_enterprises_enterprise_id_device_status_get_with_http_info(enterprise_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_enterprises_enterprise_id_device_status_get_with_http_info(enterprise_id, **kwargs)  # noqa: E501
            return data

    def v1_enterprises_enterprise_id_device_status_get_with_http_info(self, enterprise_id, **kwargs):  # noqa: E501
        """v1_enterprises_enterprise_id_device_status_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprises_enterprise_id_device_status_get_with_http_info(enterprise_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enterprise_id: (required)
        :param str authorization:
        :return: InlineResponse200186
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enterprise_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enterprises_enterprise_id_device_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enterprise_id' is set
        if ('enterprise_id' not in params or
                params['enterprise_id'] is None):
            raise ValueError("Missing the required parameter `enterprise_id` when calling `v1_enterprises_enterprise_id_device_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'enterprise_id' in params:
            path_params['enterpriseId'] = params['enterprise_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/enterprises/{enterpriseId}/device-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200186',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_enterprises_eula_post(self, **kwargs):  # noqa: E501
        """v1_enterprises_eula_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprises_eula_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_enterprises_eula_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_enterprises_eula_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_enterprises_eula_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_enterprises_eula_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprises_eula_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enterprises_eula_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/enterprises/eula', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_enterprises_get(self, **kwargs):  # noqa: E501
        """v1_enterprises_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprises_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param list[object] enterprise_ids: Lists enterprises
        :return: InlineResponse20061
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_enterprises_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_enterprises_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_enterprises_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_enterprises_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprises_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param list[object] enterprise_ids: Lists enterprises
        :return: InlineResponse20061
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'enterprise_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enterprises_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'enterprise_ids' in params:
            query_params.append(('enterpriseIds', params['enterprise_ids']))  # noqa: E501
            collection_formats['enterpriseIds'] = 'csv'  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/enterprises', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20061',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_enterprises_managed_get(self, **kwargs):  # noqa: E501
        """v1_enterprises_managed_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprises_managed_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str type:
        :return: InlineResponse20070
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_enterprises_managed_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_enterprises_managed_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_enterprises_managed_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_enterprises_managed_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprises_managed_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str type:
        :return: InlineResponse20070
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enterprises_managed_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/enterprises/managed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20070',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_enterprises_patch(self, **kwargs):  # noqa: E501
        """v1_enterprises_patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprises_patch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1EnterprisesBody1 body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_enterprises_patch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_enterprises_patch_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_enterprises_patch_with_http_info(self, **kwargs):  # noqa: E501
        """v1_enterprises_patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprises_patch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1EnterprisesBody1 body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enterprises_patch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/enterprises', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_enterprises_put(self, **kwargs):  # noqa: E501
        """v1_enterprises_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprises_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1EnterprisesBody body:   **Field Descriptions**:<br/>  - __adminTimeZone__: __(Optional)__ <br/>   
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_enterprises_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_enterprises_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_enterprises_put_with_http_info(self, **kwargs):  # noqa: E501
        """v1_enterprises_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprises_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1EnterprisesBody body:   **Field Descriptions**:<br/>  - __adminTimeZone__: __(Optional)__ <br/>   
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enterprises_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/enterprises', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_enterprises_self_delete(self, **kwargs):  # noqa: E501
        """v1_enterprises_self_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprises_self_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse2042
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_enterprises_self_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_enterprises_self_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_enterprises_self_delete_with_http_info(self, **kwargs):  # noqa: E501
        """v1_enterprises_self_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_enterprises_self_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse2042
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_enterprises_self_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/enterprises/self', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2042',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_event_device_get(self, **kwargs):  # noqa: E501
        """v1_event_device_get  # noqa: E501

        **API Description:**<br/> - Get All events by DeviceID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_event_device_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20058
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_event_device_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_event_device_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_event_device_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_event_device_get  # noqa: E501

        **API Description:**<br/> - Get All events by DeviceID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_event_device_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20058
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_event_device_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/event/device', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20058',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_event_enterprise_get(self, **kwargs):  # noqa: E501
        """v1_event_enterprise_get  # noqa: E501

        **API Description:**<br/> - Get All events by EnterpriseID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_event_enterprise_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20058
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_event_enterprise_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_event_enterprise_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_event_enterprise_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_event_enterprise_get  # noqa: E501

        **API Description:**<br/> - Get All events by EnterpriseID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_event_enterprise_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20058
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_event_enterprise_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/event/enterprise', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20058',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_event_system_ack_post(self, **kwargs):  # noqa: E501
        """v1_event_system_ack_post  # noqa: E501

        **API Description:**<br/> - Update User Acknowledgement for an event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_event_system_ack_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SystemAckBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_event_system_ack_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_event_system_ack_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_event_system_ack_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_event_system_ack_post  # noqa: E501

        **API Description:**<br/> - Update User Acknowledgement for an event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_event_system_ack_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SystemAckBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_event_system_ack_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/event/system/ack', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_event_system_get(self, **kwargs):  # noqa: E501
        """v1_event_system_get  # noqa: E501

        **API Description:**<br/> - Get All system level events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_event_system_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20058
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_event_system_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_event_system_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_event_system_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_event_system_get  # noqa: E501

        **API Description:**<br/> - Get All system level events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_event_system_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20058
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_event_system_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/event/system', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20058',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranet_sites_usage_post(self, **kwargs):  # noqa: E501
        """v1_extranet_sites_usage_post  # noqa: E501

        **API Description:**<br/> - Get extranet service sites usage stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranet_sites_usage_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:   **Field Descriptions**:<br/>  - __id__: the id associated with an entity - consumer_id for consumer, and service_id for the producer/service<br/>  
        :param str authorization:
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranet_sites_usage_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranet_sites_usage_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_extranet_sites_usage_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_extranet_sites_usage_post  # noqa: E501

        **API Description:**<br/> - Get extranet service sites usage stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranet_sites_usage_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:   **Field Descriptions**:<br/>  - __id__: the id associated with an entity - consumer_id for consumer, and service_id for the producer/service<br/>  
        :param str authorization:
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranet_sites_usage_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranet/sites-usage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20077',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranet_sites_usage_top_post(self, **kwargs):  # noqa: E501
        """v1_extranet_sites_usage_top_post  # noqa: E501

        **API Description:**<br/> - Get extranet service top sites usage stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranet_sites_usage_top_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SitesusageTopBody body:
        :param str authorization:
        :return: InlineResponse20080
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranet_sites_usage_top_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranet_sites_usage_top_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_extranet_sites_usage_top_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_extranet_sites_usage_top_post  # noqa: E501

        **API Description:**<br/> - Get extranet service top sites usage stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranet_sites_usage_top_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SitesusageTopBody body:
        :param str authorization:
        :return: InlineResponse20080
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranet_sites_usage_top_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranet/sites-usage/top', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20080',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_b2b_consumer_device_status_id_get(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_consumer_device_status_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_consumer_device_status_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200121
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_b2b_consumer_device_status_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_b2b_consumer_device_status_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_extranets_b2b_consumer_device_status_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_consumer_device_status_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_consumer_device_status_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200121
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_b2b_consumer_device_status_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_extranets_b2b_consumer_device_status_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets-b2b/consumer-device-status/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200121',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_b2b_consumer_id_delete(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_consumer_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_consumer_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_b2b_consumer_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_b2b_consumer_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_extranets_b2b_consumer_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_consumer_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_consumer_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_b2b_consumer_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_extranets_b2b_consumer_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets-b2b/consumer/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_b2b_consumer_id_get(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_consumer_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_consumer_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200108
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_b2b_consumer_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_b2b_consumer_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_extranets_b2b_consumer_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_consumer_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_consumer_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200108
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_b2b_consumer_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_extranets_b2b_consumer_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets-b2b/consumer/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200108',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_b2b_consumer_post(self, **kwargs):  # noqa: E501
        """v1_extranets_b2b_consumer_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_consumer_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Extranetsb2bConsumerBody body:
        :param str authorization:
        :return: InlineResponse20093
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_b2b_consumer_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_b2b_consumer_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_extranets_b2b_consumer_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_extranets_b2b_consumer_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_consumer_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Extranetsb2bConsumerBody body:
        :param str authorization:
        :return: InlineResponse20093
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_b2b_consumer_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets-b2b/consumer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20093',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_b2b_consumer_summary_get(self, **kwargs):  # noqa: E501
        """v1_extranets_b2b_consumer_summary_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_consumer_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200122
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_b2b_consumer_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_b2b_consumer_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_extranets_b2b_consumer_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_extranets_b2b_consumer_summary_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_consumer_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200122
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_b2b_consumer_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets-b2b/consumer-summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200122',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_b2b_customer_id_delete(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_customer_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_customer_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_b2b_customer_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_b2b_customer_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_extranets_b2b_customer_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_customer_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_customer_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_b2b_customer_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_extranets_b2b_customer_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets-b2b/customer/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_b2b_customer_info_id_get(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_customer_info_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_customer_info_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200119
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_b2b_customer_info_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_b2b_customer_info_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_extranets_b2b_customer_info_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_customer_info_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_customer_info_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200119
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_b2b_customer_info_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_extranets_b2b_customer_info_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets-b2b/customer-info/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200119',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_b2b_id_customer_invite_retry_post(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_id_customer_invite_retry_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_id_customer_invite_retry_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_b2b_id_customer_invite_retry_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_b2b_id_customer_invite_retry_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_extranets_b2b_id_customer_invite_retry_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_id_customer_invite_retry_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_id_customer_invite_retry_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_b2b_id_customer_invite_retry_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_extranets_b2b_id_customer_invite_retry_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets-b2b/{id}/customer-invite/retry/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_b2b_id_customer_post(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_id_customer_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_id_customer_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param IdCustomerBody body:
        :param str authorization:
        :return: InlineResponse20092
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_b2b_id_customer_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_b2b_id_customer_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_extranets_b2b_id_customer_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_id_customer_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_id_customer_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param IdCustomerBody body:
        :param str authorization:
        :return: InlineResponse20092
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_b2b_id_customer_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_extranets_b2b_id_customer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets-b2b/{id}/customer/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20092',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_b2b_id_customer_summary_get(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_id_customer_summary_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_id_customer_summary_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200120
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_b2b_id_customer_summary_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_b2b_id_customer_summary_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_extranets_b2b_id_customer_summary_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_id_customer_summary_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_id_customer_summary_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200120
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_b2b_id_customer_summary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_extranets_b2b_id_customer_summary_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets-b2b/{id}/customer-summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200120',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_b2b_id_delete(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_b2b_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_b2b_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_extranets_b2b_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_b2b_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_extranets_b2b_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets-b2b/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_b2b_id_producer_get(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_id_producer_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_id_producer_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse20094
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_b2b_id_producer_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_b2b_id_producer_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_extranets_b2b_id_producer_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_id_producer_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_id_producer_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse20094
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_b2b_id_producer_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_extranets_b2b_id_producer_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets-b2b/{id}/producer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20094',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_b2b_id_put(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_id_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param Extranetsb2bIdBody body:
        :param str authorization:
        :return: InlineResponse20094
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_b2b_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_b2b_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_extranets_b2b_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_id_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param Extranetsb2bIdBody body:
        :param str authorization:
        :return: InlineResponse20094
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_b2b_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_extranets_b2b_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets-b2b/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20094',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_b2b_post(self, **kwargs):  # noqa: E501
        """v1_extranets_b2b_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1Extranetsb2bBody body:
        :param str authorization:
        :return: InlineResponse20094
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_b2b_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_b2b_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_extranets_b2b_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_extranets_b2b_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1Extranetsb2bBody body:
        :param str authorization:
        :return: InlineResponse20094
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_b2b_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets-b2b', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20094',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_b2b_producer_device_status_id_get(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_producer_device_status_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_producer_device_status_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200123
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_b2b_producer_device_status_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_b2b_producer_device_status_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_extranets_b2b_producer_device_status_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_extranets_b2b_producer_device_status_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_producer_device_status_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200123
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_b2b_producer_device_status_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_extranets_b2b_producer_device_status_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets-b2b/producer-device-status/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200123',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_b2b_producers_summary_get(self, **kwargs):  # noqa: E501
        """v1_extranets_b2b_producers_summary_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_producers_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200124
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_b2b_producers_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_b2b_producers_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_extranets_b2b_producers_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_extranets_b2b_producers_summary_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_b2b_producers_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200124
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_b2b_producers_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets-b2b/producers-summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200124',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_get(self, **kwargs):  # noqa: E501
        """v1_extranets_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20096
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_extranets_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_extranets_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20096
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20096',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_id_apply_post(self, id, **kwargs):  # noqa: E501
        """v1_extranets_id_apply_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_id_apply_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param IdApplyBody body:
        :param str authorization:
        :return: InlineResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_id_apply_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_id_apply_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_extranets_id_apply_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_extranets_id_apply_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_id_apply_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param IdApplyBody body:
        :param str authorization:
        :return: InlineResponse202
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_id_apply_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_extranets_id_apply_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets/{id}/apply', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse202',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_id_delete(self, id, **kwargs):  # noqa: E501
        """v1_extranets_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200110
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_extranets_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_extranets_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200110
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_extranets_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200110',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_id_get(self, id, **kwargs):  # noqa: E501
        """v1_extranets_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse20097
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_extranets_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_extranets_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse20097
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_extranets_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20097',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_id_put(self, id, **kwargs):  # noqa: E501
        """v1_extranets_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_id_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param object body:
        :param str authorization:
        :return: InlineResponse20097
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_extranets_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_extranets_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_id_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param object body:
        :param str authorization:
        :return: InlineResponse20097
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_extranets_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20097',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_id_status_get(self, id, **kwargs):  # noqa: E501
        """v1_extranets_id_status_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_id_status_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200110
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_id_status_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_id_status_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_extranets_id_status_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_extranets_id_status_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_id_status_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200110
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_id_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_extranets_id_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets/{id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200110',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_monitoring_lan_segments_get(self, **kwargs):  # noqa: E501
        """v1_extranets_monitoring_lan_segments_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_monitoring_lan_segments_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200145
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_monitoring_lan_segments_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_monitoring_lan_segments_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_extranets_monitoring_lan_segments_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_extranets_monitoring_lan_segments_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_monitoring_lan_segments_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200145
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_monitoring_lan_segments_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets-monitoring/lan-segments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200145',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_monitoring_nat_usage_get(self, **kwargs):  # noqa: E501
        """v1_extranets_monitoring_nat_usage_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_monitoring_nat_usage_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200146
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_monitoring_nat_usage_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_monitoring_nat_usage_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_extranets_monitoring_nat_usage_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_extranets_monitoring_nat_usage_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_monitoring_nat_usage_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200146
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_monitoring_nat_usage_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets-monitoring/nat-usage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200146',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_monitoring_traffic_security_policy_post(self, **kwargs):  # noqa: E501
        """v1_extranets_monitoring_traffic_security_policy_post  # noqa: E501

        **API Description:**<br/> - Get lists of traffic and security policies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_monitoring_traffic_security_policy_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExtranetsmonitoringTrafficsecuritypolicyBody body:
        :param str authorization:
        :return: InlineResponse200147
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_monitoring_traffic_security_policy_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_monitoring_traffic_security_policy_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_extranets_monitoring_traffic_security_policy_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_extranets_monitoring_traffic_security_policy_post  # noqa: E501

        **API Description:**<br/> - Get lists of traffic and security policies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_monitoring_traffic_security_policy_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExtranetsmonitoringTrafficsecuritypolicyBody body:
        :param str authorization:
        :return: InlineResponse200147
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_monitoring_traffic_security_policy_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets-monitoring/traffic-security-policy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200147',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_post(self, **kwargs):  # noqa: E501
        """v1_extranets_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse20097
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_extranets_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_extranets_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse20097
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20097',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_resolve_policy_target_post(self, **kwargs):  # noqa: E501
        """v1_extranets_resolve_policy_target_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_resolve_policy_target_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExtranetsResolvepolicytargetBody body:
        :param str authorization:
        :return: InlineResponse200183
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_resolve_policy_target_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_resolve_policy_target_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_extranets_resolve_policy_target_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_extranets_resolve_policy_target_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_resolve_policy_target_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExtranetsResolvepolicytargetBody body:
        :param str authorization:
        :return: InlineResponse200183
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_resolve_policy_target_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets/resolve-policy-target', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200183',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_extranets_source_segments_post(self, **kwargs):  # noqa: E501
        """v1_extranets_source_segments_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_source_segments_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExtranetsSourcesegmentsBody body:
        :param str authorization:
        :return: InlineResponse200112
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_extranets_source_segments_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_extranets_source_segments_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_extranets_source_segments_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_extranets_source_segments_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_extranets_source_segments_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExtranetsSourcesegmentsBody body:
        :param str authorization:
        :return: InlineResponse200112
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_extranets_source_segments_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/extranets/source-segments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200112',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_flows_flow_table_post(self, **kwargs):  # noqa: E501
        """v1_flows_flow_table_post  # noqa: E501

        **API Description:**<br/> - Get flow table for the app on the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_flows_flow_table_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FlowsFlowtableBody body:   **Field Descriptions**:<br/>  - __appId__: the app ID in the question from overall visuals view<br/>  - __numFlowRecords__: Number of app flow records requested by UI.<br/>  - __circuitName__: Filter by circuit name(s)<br/>  - __slaClass__: Filter by SLA class(es)<br/>  
        :param str authorization:
        :return: InlineResponse20072
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_flows_flow_table_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_flows_flow_table_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_flows_flow_table_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_flows_flow_table_post  # noqa: E501

        **API Description:**<br/> - Get flow table for the app on the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_flows_flow_table_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FlowsFlowtableBody body:   **Field Descriptions**:<br/>  - __appId__: the app ID in the question from overall visuals view<br/>  - __numFlowRecords__: Number of app flow records requested by UI.<br/>  - __circuitName__: Filter by circuit name(s)<br/>  - __slaClass__: Filter by SLA class(es)<br/>  
        :param str authorization:
        :return: InlineResponse20072
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_flows_flow_table_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/flows/flow-table', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20072',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_flows_topology_post(self, **kwargs):  # noqa: E501
        """v1_flows_topology_post  # noqa: E501

        **API Description:**<br/> - Get flow based node and circuit topology for the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_flows_topology_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FlowsTopologyBody body:   **Field Descriptions**:<br/>  - __appId__: Filter by app ID<br/>  - __appName__: Filter by application name<br/>  - __slaClass__: Filter by SLA class<br/>  
        :param str authorization:
        :return: InlineResponse20084
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_flows_topology_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_flows_topology_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_flows_topology_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_flows_topology_post  # noqa: E501

        **API Description:**<br/> - Get flow based node and circuit topology for the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_flows_topology_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FlowsTopologyBody body:   **Field Descriptions**:<br/>  - __appId__: Filter by app ID<br/>  - __appName__: Filter by application name<br/>  - __slaClass__: Filter by SLA class<br/>  
        :param str authorization:
        :return: InlineResponse20084
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_flows_topology_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/flows/topology', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20084',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_gateways_delete(self, **kwargs):  # noqa: E501
        """v1_gateways_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_gateways_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_gateways_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_gateways_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_gateways_delete_with_http_info(self, **kwargs):  # noqa: E501
        """v1_gateways_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_gateways_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_gateways_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/gateways', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_gateways_id_details_get(self, id, **kwargs):  # noqa: E501
        """v1_gateways_id_details_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_gateways_id_details_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200150
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_gateways_id_details_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_gateways_id_details_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_gateways_id_details_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_gateways_id_details_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_gateways_id_details_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200150
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_gateways_id_details_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_gateways_id_details_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/gateways/{id}/details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200150',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_gateways_ipsec_regions_region_id_vrfs_vrf_id_inside_subnet_get(self, region_id, vrf_id, **kwargs):  # noqa: E501
        """v1_gateways_ipsec_regions_region_id_vrfs_vrf_id_inside_subnet_get  # noqa: E501

        **API Description:**<br/> - Get the IPv4/Ipv6 Overlay Subnet for an ipsec gateway  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_gateways_ipsec_regions_region_id_vrfs_vrf_id_inside_subnet_get(region_id, vrf_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int region_id: (required)
        :param str vrf_id: (required)
        :param str authorization:
        :param str address_family:
        :return: InlineResponse200163
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_gateways_ipsec_regions_region_id_vrfs_vrf_id_inside_subnet_get_with_http_info(region_id, vrf_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_gateways_ipsec_regions_region_id_vrfs_vrf_id_inside_subnet_get_with_http_info(region_id, vrf_id, **kwargs)  # noqa: E501
            return data

    def v1_gateways_ipsec_regions_region_id_vrfs_vrf_id_inside_subnet_get_with_http_info(self, region_id, vrf_id, **kwargs):  # noqa: E501
        """v1_gateways_ipsec_regions_region_id_vrfs_vrf_id_inside_subnet_get  # noqa: E501

        **API Description:**<br/> - Get the IPv4/Ipv6 Overlay Subnet for an ipsec gateway  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_gateways_ipsec_regions_region_id_vrfs_vrf_id_inside_subnet_get_with_http_info(region_id, vrf_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int region_id: (required)
        :param str vrf_id: (required)
        :param str authorization:
        :param str address_family:
        :return: InlineResponse200163
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_id', 'vrf_id', 'authorization', 'address_family']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_gateways_ipsec_regions_region_id_vrfs_vrf_id_inside_subnet_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_id' is set
        if ('region_id' not in params or
                params['region_id'] is None):
            raise ValueError("Missing the required parameter `region_id` when calling `v1_gateways_ipsec_regions_region_id_vrfs_vrf_id_inside_subnet_get`")  # noqa: E501
        # verify the required parameter 'vrf_id' is set
        if ('vrf_id' not in params or
                params['vrf_id'] is None):
            raise ValueError("Missing the required parameter `vrf_id` when calling `v1_gateways_ipsec_regions_region_id_vrfs_vrf_id_inside_subnet_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'region_id' in params:
            path_params['regionId'] = params['region_id']  # noqa: E501
        if 'vrf_id' in params:
            path_params['vrfId'] = params['vrf_id']  # noqa: E501

        query_params = []
        if 'address_family' in params:
            query_params.append(('addressFamily', params['address_family']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/gateways/ipsec/regions/{regionId}/vrfs/{vrfId}/inside-subnet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200163',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_gateways_post(self, **kwargs):  # noqa: E501
        """v1_gateways_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_gateways_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GatewaysBody1 body:
        :param str authorization:
        :return: InlineResponse20098
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_gateways_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_gateways_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_gateways_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_gateways_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_gateways_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GatewaysBody1 body:
        :param str authorization:
        :return: InlineResponse20098
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_gateways_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/gateways', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20098',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_gateways_put(self, **kwargs):  # noqa: E501
        """v1_gateways_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_gateways_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GatewaysBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_gateways_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_gateways_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_gateways_put_with_http_info(self, **kwargs):  # noqa: E501
        """v1_gateways_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_gateways_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GatewaysBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_gateways_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/gateways', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_gateways_regions_get(self, **kwargs):  # noqa: E501
        """v1_gateways_regions_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_gateways_regions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200151
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_gateways_regions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_gateways_regions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_gateways_regions_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_gateways_regions_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_gateways_regions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200151
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_gateways_regions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/gateways/regions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200151',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_gateways_status_post(self, **kwargs):  # noqa: E501
        """v1_gateways_status_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_gateways_status_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GatewaysStatusBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_gateways_status_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_gateways_status_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_gateways_status_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_gateways_status_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_gateways_status_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GatewaysStatusBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_gateways_status_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/gateways/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_gateways_summary_get(self, **kwargs):  # noqa: E501
        """v1_gateways_summary_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_gateways_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200152
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_gateways_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_gateways_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_gateways_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_gateways_summary_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_gateways_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200152
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_gateways_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/gateways/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200152',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_apps_app_list_options_get(self, **kwargs):  # noqa: E501
        """v1_global_apps_app_list_options_get  # noqa: E501

        **API Description:**<br/> - Gets all apps and categories assignable to an app list for the the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_app_list_options_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200116
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_apps_app_list_options_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_apps_app_list_options_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_apps_app_list_options_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_apps_app_list_options_get  # noqa: E501

        **API Description:**<br/> - Gets all apps and categories assignable to an app list for the the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_app_list_options_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200116
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_apps_app_list_options_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/apps/app-list-options', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200116',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_apps_app_lists_app_list_id_delete(self, app_list_id, **kwargs):  # noqa: E501
        """v1_global_apps_app_lists_app_list_id_delete  # noqa: E501

        **API Description:**<br/> - Delete an app list under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_app_lists_app_list_id_delete(app_list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_list_id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_apps_app_lists_app_list_id_delete_with_http_info(app_list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_apps_app_lists_app_list_id_delete_with_http_info(app_list_id, **kwargs)  # noqa: E501
            return data

    def v1_global_apps_app_lists_app_list_id_delete_with_http_info(self, app_list_id, **kwargs):  # noqa: E501
        """v1_global_apps_app_lists_app_list_id_delete  # noqa: E501

        **API Description:**<br/> - Delete an app list under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_app_lists_app_list_id_delete_with_http_info(app_list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_list_id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_list_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_apps_app_lists_app_list_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_list_id' is set
        if ('app_list_id' not in params or
                params['app_list_id'] is None):
            raise ValueError("Missing the required parameter `app_list_id` when calling `v1_global_apps_app_lists_app_list_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_list_id' in params:
            path_params['appListId'] = params['app_list_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/apps/app-lists/{appListId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_apps_app_lists_app_list_id_details_apps_get(self, app_list_id, **kwargs):  # noqa: E501
        """v1_global_apps_app_lists_app_list_id_details_apps_get  # noqa: E501

        **API Description:**<br/> - Get all apps that are members of the provided app list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_app_lists_app_list_id_details_apps_get(app_list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_list_id: (required)
        :param str authorization:
        :return: InlineResponse200116
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_apps_app_lists_app_list_id_details_apps_get_with_http_info(app_list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_apps_app_lists_app_list_id_details_apps_get_with_http_info(app_list_id, **kwargs)  # noqa: E501
            return data

    def v1_global_apps_app_lists_app_list_id_details_apps_get_with_http_info(self, app_list_id, **kwargs):  # noqa: E501
        """v1_global_apps_app_lists_app_list_id_details_apps_get  # noqa: E501

        **API Description:**<br/> - Get all apps that are members of the provided app list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_app_lists_app_list_id_details_apps_get_with_http_info(app_list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_list_id: (required)
        :param str authorization:
        :return: InlineResponse200116
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_list_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_apps_app_lists_app_list_id_details_apps_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_list_id' is set
        if ('app_list_id' not in params or
                params['app_list_id'] is None):
            raise ValueError("Missing the required parameter `app_list_id` when calling `v1_global_apps_app_lists_app_list_id_details_apps_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_list_id' in params:
            path_params['appListId'] = params['app_list_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/apps/app-lists/{appListId}/details/apps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200116',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_apps_app_lists_app_list_id_get(self, app_list_id, **kwargs):  # noqa: E501
        """v1_global_apps_app_lists_app_list_id_get  # noqa: E501

        **API Description:**<br/> - Get the configuration for an app list under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_app_lists_app_list_id_get(app_list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_list_id: (required)
        :param str authorization:
        :return: InlineResponse200105
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_apps_app_lists_app_list_id_get_with_http_info(app_list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_apps_app_lists_app_list_id_get_with_http_info(app_list_id, **kwargs)  # noqa: E501
            return data

    def v1_global_apps_app_lists_app_list_id_get_with_http_info(self, app_list_id, **kwargs):  # noqa: E501
        """v1_global_apps_app_lists_app_list_id_get  # noqa: E501

        **API Description:**<br/> - Get the configuration for an app list under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_app_lists_app_list_id_get_with_http_info(app_list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_list_id: (required)
        :param str authorization:
        :return: InlineResponse200105
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_list_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_apps_app_lists_app_list_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_list_id' is set
        if ('app_list_id' not in params or
                params['app_list_id'] is None):
            raise ValueError("Missing the required parameter `app_list_id` when calling `v1_global_apps_app_lists_app_list_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_list_id' in params:
            path_params['appListId'] = params['app_list_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/apps/app-lists/{appListId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200105',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_apps_app_lists_app_list_id_put(self, app_list_id, **kwargs):  # noqa: E501
        """v1_global_apps_app_lists_app_list_id_put  # noqa: E501

        **API Description:**<br/> - Overwrite the configuration for an app list under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_app_lists_app_list_id_put(app_list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_list_id: (required)
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_apps_app_lists_app_list_id_put_with_http_info(app_list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_apps_app_lists_app_list_id_put_with_http_info(app_list_id, **kwargs)  # noqa: E501
            return data

    def v1_global_apps_app_lists_app_list_id_put_with_http_info(self, app_list_id, **kwargs):  # noqa: E501
        """v1_global_apps_app_lists_app_list_id_put  # noqa: E501

        **API Description:**<br/> - Overwrite the configuration for an app list under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_app_lists_app_list_id_put_with_http_info(app_list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_list_id: (required)
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_list_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_apps_app_lists_app_list_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_list_id' is set
        if ('app_list_id' not in params or
                params['app_list_id'] is None):
            raise ValueError("Missing the required parameter `app_list_id` when calling `v1_global_apps_app_lists_app_list_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_list_id' in params:
            path_params['appListId'] = params['app_list_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/apps/app-lists/{appListId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_apps_app_lists_get(self, **kwargs):  # noqa: E501
        """v1_global_apps_app_lists_get  # noqa: E501

        **API Description:**<br/> - Get all app lists for the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_app_lists_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20088
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_apps_app_lists_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_apps_app_lists_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_apps_app_lists_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_apps_app_lists_get  # noqa: E501

        **API Description:**<br/> - Get all app lists for the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_app_lists_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20088
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_apps_app_lists_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/apps/app-lists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20088',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_apps_app_lists_post(self, **kwargs):  # noqa: E501
        """v1_global_apps_app_lists_post  # noqa: E501

        **API Description:**<br/> - Create an app list under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_app_lists_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse20089
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_apps_app_lists_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_apps_app_lists_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_apps_app_lists_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_apps_app_lists_post  # noqa: E501

        **API Description:**<br/> - Create an app list under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_app_lists_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse20089
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_apps_app_lists_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/apps/app-lists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20089',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_apps_categories_category_id_apps_get(self, category_id, **kwargs):  # noqa: E501
        """v1_global_apps_categories_category_id_apps_get  # noqa: E501

        **API Description:**<br/> - Get all Graphiant apps in an app category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_categories_category_id_apps_get(category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category_id: (required)
        :param str authorization:
        :return: InlineResponse200116
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_apps_categories_category_id_apps_get_with_http_info(category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_apps_categories_category_id_apps_get_with_http_info(category_id, **kwargs)  # noqa: E501
            return data

    def v1_global_apps_categories_category_id_apps_get_with_http_info(self, category_id, **kwargs):  # noqa: E501
        """v1_global_apps_categories_category_id_apps_get  # noqa: E501

        **API Description:**<br/> - Get all Graphiant apps in an app category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_categories_category_id_apps_get_with_http_info(category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category_id: (required)
        :param str authorization:
        :return: InlineResponse200116
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_apps_categories_category_id_apps_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params or
                params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `v1_global_apps_categories_category_id_apps_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'category_id' in params:
            path_params['categoryId'] = params['category_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/apps/categories/{categoryId}/apps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200116',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_apps_categories_get(self, **kwargs):  # noqa: E501
        """v1_global_apps_categories_get  # noqa: E501

        **API Description:**<br/> - Get all app categories holding Graphiant apps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_categories_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200114
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_apps_categories_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_apps_categories_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_apps_categories_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_apps_categories_get  # noqa: E501

        **API Description:**<br/> - Get all app categories holding Graphiant apps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_categories_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200114
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_apps_categories_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/apps/categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200114',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_apps_custom_app_id_delete(self, app_id, **kwargs):  # noqa: E501
        """v1_global_apps_custom_app_id_delete  # noqa: E501

        **API Description:**<br/> - Delete a global app under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_custom_app_id_delete(app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_apps_custom_app_id_delete_with_http_info(app_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_apps_custom_app_id_delete_with_http_info(app_id, **kwargs)  # noqa: E501
            return data

    def v1_global_apps_custom_app_id_delete_with_http_info(self, app_id, **kwargs):  # noqa: E501
        """v1_global_apps_custom_app_id_delete  # noqa: E501

        **API Description:**<br/> - Delete a global app under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_custom_app_id_delete_with_http_info(app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_apps_custom_app_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `v1_global_apps_custom_app_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/apps/custom/{appId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_apps_custom_app_id_details_app_lists_get(self, app_id, **kwargs):  # noqa: E501
        """v1_global_apps_custom_app_id_details_app_lists_get  # noqa: E501

        **API Description:**<br/> - Get all app lists that contain the relevant global app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_custom_app_id_details_app_lists_get(app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization:
        :return: InlineResponse200115
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_apps_custom_app_id_details_app_lists_get_with_http_info(app_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_apps_custom_app_id_details_app_lists_get_with_http_info(app_id, **kwargs)  # noqa: E501
            return data

    def v1_global_apps_custom_app_id_details_app_lists_get_with_http_info(self, app_id, **kwargs):  # noqa: E501
        """v1_global_apps_custom_app_id_details_app_lists_get  # noqa: E501

        **API Description:**<br/> - Get all app lists that contain the relevant global app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_custom_app_id_details_app_lists_get_with_http_info(app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization:
        :return: InlineResponse200115
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_apps_custom_app_id_details_app_lists_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `v1_global_apps_custom_app_id_details_app_lists_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/apps/custom/{appId}/details/app-lists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200115',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_apps_custom_app_id_get(self, app_id, **kwargs):  # noqa: E501
        """v1_global_apps_custom_app_id_get  # noqa: E501

        **API Description:**<br/> - Get the configuration for a global app under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_custom_app_id_get(app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization:
        :return: InlineResponse200111
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_apps_custom_app_id_get_with_http_info(app_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_apps_custom_app_id_get_with_http_info(app_id, **kwargs)  # noqa: E501
            return data

    def v1_global_apps_custom_app_id_get_with_http_info(self, app_id, **kwargs):  # noqa: E501
        """v1_global_apps_custom_app_id_get  # noqa: E501

        **API Description:**<br/> - Get the configuration for a global app under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_custom_app_id_get_with_http_info(app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param str authorization:
        :return: InlineResponse200111
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_apps_custom_app_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `v1_global_apps_custom_app_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/apps/custom/{appId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200111',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_apps_custom_app_id_put(self, app_id, **kwargs):  # noqa: E501
        """v1_global_apps_custom_app_id_put  # noqa: E501

        **API Description:**<br/> - Overwrite the configuration for a global app under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_custom_app_id_put(app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_apps_custom_app_id_put_with_http_info(app_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_apps_custom_app_id_put_with_http_info(app_id, **kwargs)  # noqa: E501
            return data

    def v1_global_apps_custom_app_id_put_with_http_info(self, app_id, **kwargs):  # noqa: E501
        """v1_global_apps_custom_app_id_put  # noqa: E501

        **API Description:**<br/> - Overwrite the configuration for a global app under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_custom_app_id_put_with_http_info(app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str app_id: (required)
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_apps_custom_app_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `v1_global_apps_custom_app_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/apps/custom/{appId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_apps_custom_get(self, **kwargs):  # noqa: E501
        """v1_global_apps_custom_get  # noqa: E501

        **API Description:**<br/> - Get all global apps mapped by the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_custom_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20099
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_apps_custom_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_apps_custom_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_apps_custom_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_apps_custom_get  # noqa: E501

        **API Description:**<br/> - Get all global apps mapped by the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_custom_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20099
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_apps_custom_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/apps/custom', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20099',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_apps_custom_post(self, **kwargs):  # noqa: E501
        """v1_global_apps_custom_post  # noqa: E501

        **API Description:**<br/> - Create a new global app under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_custom_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse20089
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_apps_custom_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_apps_custom_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_apps_custom_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_apps_custom_post  # noqa: E501

        **API Description:**<br/> - Create a new global app under the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_custom_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse20089
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_apps_custom_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/apps/custom', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20089',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_apps_graphiant_get(self, **kwargs):  # noqa: E501
        """v1_global_apps_graphiant_get  # noqa: E501

        **API Description:**<br/> - Get all apps mapped by Graphiant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_graphiant_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200162
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_apps_graphiant_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_apps_graphiant_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_apps_graphiant_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_apps_graphiant_get  # noqa: E501

        **API Description:**<br/> - Get all apps mapped by Graphiant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_apps_graphiant_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200162
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_apps_graphiant_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/apps/graphiant', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200162',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_attached_edges_post(self, **kwargs):  # noqa: E501
        """v1_global_attached_edges_post  # noqa: E501

        **API Description:**<br/> - Returns attached edges for global object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_attached_edges_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GlobalAttachededgesBody body:
        :param str authorization:
        :return: InlineResponse200118
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_attached_edges_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_attached_edges_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_attached_edges_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_attached_edges_post  # noqa: E501

        **API Description:**<br/> - Returns attached edges for global object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_attached_edges_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GlobalAttachededgesBody body:
        :param str authorization:
        :return: InlineResponse200118
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_attached_edges_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/attached-edges', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200118',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_config_patch(self, **kwargs):  # noqa: E501
        """v1_global_config_patch  # noqa: E501

        **API Description:**<br/> - Update global objects for an enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_config_patch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GlobalConfigBody body:
        :param str authorization:
        :return: InlineResponse20087
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_config_patch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_config_patch_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_config_patch_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_config_patch  # noqa: E501

        **API Description:**<br/> - Update global objects for an enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_config_patch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GlobalConfigBody body:
        :param str authorization:
        :return: InlineResponse20087
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_config_patch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20087',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_config_site_post(self, **kwargs):  # noqa: E501
        """v1_global_config_site_post  # noqa: E501

        **API Description:**<br/> - Attach or detach global objects from a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_config_site_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigSiteBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_config_site_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_config_site_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_config_site_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_config_site_post  # noqa: E501

        **API Description:**<br/> - Attach or detach global objects from a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_config_site_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigSiteBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_config_site_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/config/site', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_device_status_get(self, **kwargs):  # noqa: E501
        """v1_global_device_status_get  # noqa: E501

        **API Description:**<br/> - Get status on global collector attached to devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_device_status_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200118
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_device_status_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_device_status_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_device_status_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_device_status_get  # noqa: E501

        **API Description:**<br/> - Get status on global collector attached to devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_device_status_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200118
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_device_status_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/device-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200118',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_ipfix_device_get(self, **kwargs):  # noqa: E501
        """v1_global_ipfix_device_get  # noqa: E501

        **API Description:**<br/> - Get global ipfix exporters objects that failed to attach for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_ipfix_device_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200153
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_ipfix_device_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_ipfix_device_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_ipfix_device_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_ipfix_device_get  # noqa: E501

        **API Description:**<br/> - Get global ipfix exporters objects that failed to attach for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_ipfix_device_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200153
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_ipfix_device_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/ipfix/device', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200153',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_ipfix_post(self, **kwargs):  # noqa: E501
        """v1_global_ipfix_post  # noqa: E501

        **API Description:**<br/> - Get configured global ipfix exporters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_ipfix_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200153
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_ipfix_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_ipfix_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_ipfix_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_ipfix_post  # noqa: E501

        **API Description:**<br/> - Get configured global ipfix exporters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_ipfix_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200153
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_ipfix_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/ipfix', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200153',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_ipfix_site_get(self, **kwargs):  # noqa: E501
        """v1_global_ipfix_site_get  # noqa: E501

        **API Description:**<br/> - Get configured global ipfix exporters for a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_ipfix_site_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200153
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_ipfix_site_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_ipfix_site_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_ipfix_site_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_ipfix_site_get  # noqa: E501

        **API Description:**<br/> - Get configured global ipfix exporters for a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_ipfix_site_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200153
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_ipfix_site_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/ipfix/site', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200153',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_ipsec_profile_get(self, **kwargs):  # noqa: E501
        """v1_global_ipsec_profile_get  # noqa: E501

        **API Description:**<br/> - Get all the configured global IPsec Profiles for the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_ipsec_profile_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200160
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_ipsec_profile_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_ipsec_profile_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_ipsec_profile_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_ipsec_profile_get  # noqa: E501

        **API Description:**<br/> - Get all the configured global IPsec Profiles for the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_ipsec_profile_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200160
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_ipsec_profile_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/ipsec-profile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200160',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_ipsec_profile_id_get(self, id, **kwargs):  # noqa: E501
        """v1_global_ipsec_profile_id_get  # noqa: E501

        **API Description:**<br/> - Get details of the configured global IPsec Profiles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_ipsec_profile_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200159
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_ipsec_profile_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_ipsec_profile_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_global_ipsec_profile_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_global_ipsec_profile_id_get  # noqa: E501

        **API Description:**<br/> - Get details of the configured global IPsec Profiles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_ipsec_profile_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200159
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_ipsec_profile_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_global_ipsec_profile_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/ipsec-profile/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200159',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_ipsec_profile_vpn_profile_id_site_to_site_get(self, vpn_profile_id, **kwargs):  # noqa: E501
        """v1_global_ipsec_profile_vpn_profile_id_site_to_site_get  # noqa: E501

        **API Description:**<br/> - Get Site-to-site VPNs that are using the given global IPsec Profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_ipsec_profile_vpn_profile_id_site_to_site_get(vpn_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vpn_profile_id: (required)
        :param str authorization:
        :return: InlineResponse200177
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_ipsec_profile_vpn_profile_id_site_to_site_get_with_http_info(vpn_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_ipsec_profile_vpn_profile_id_site_to_site_get_with_http_info(vpn_profile_id, **kwargs)  # noqa: E501
            return data

    def v1_global_ipsec_profile_vpn_profile_id_site_to_site_get_with_http_info(self, vpn_profile_id, **kwargs):  # noqa: E501
        """v1_global_ipsec_profile_vpn_profile_id_site_to_site_get  # noqa: E501

        **API Description:**<br/> - Get Site-to-site VPNs that are using the given global IPsec Profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_ipsec_profile_vpn_profile_id_site_to_site_get_with_http_info(vpn_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vpn_profile_id: (required)
        :param str authorization:
        :return: InlineResponse200177
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vpn_profile_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_ipsec_profile_vpn_profile_id_site_to_site_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vpn_profile_id' is set
        if ('vpn_profile_id' not in params or
                params['vpn_profile_id'] is None):
            raise ValueError("Missing the required parameter `vpn_profile_id` when calling `v1_global_ipsec_profile_vpn_profile_id_site_to_site_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vpn_profile_id' in params:
            path_params['vpnProfileId'] = params['vpn_profile_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/ipsec-profile/{vpnProfileId}/site-to-site', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200177',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_lan_segments_get(self, **kwargs):  # noqa: E501
        """v1_global_lan_segments_get  # noqa: E501

        **API Description:**<br/> - Get a list of lan-segments under the currently logged in enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_lan_segments_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200100
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_lan_segments_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_lan_segments_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_lan_segments_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_lan_segments_get  # noqa: E501

        **API Description:**<br/> - Get a list of lan-segments under the currently logged in enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_lan_segments_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200100
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_lan_segments_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/lan-segments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200100',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_lan_segments_id_delete(self, id, **kwargs):  # noqa: E501
        """v1_global_lan_segments_id_delete  # noqa: E501

        **API Description:**<br/> - Delete a lan-segment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_lan_segments_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse20098
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_lan_segments_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_lan_segments_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_global_lan_segments_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_global_lan_segments_id_delete  # noqa: E501

        **API Description:**<br/> - Delete a lan-segment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_lan_segments_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse20098
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_lan_segments_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_global_lan_segments_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/lan-segments/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20098',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_lan_segments_post(self, **kwargs):  # noqa: E501
        """v1_global_lan_segments_post  # noqa: E501

        **API Description:**<br/> - Create a new lan-segment scoped to the enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_lan_segments_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GlobalLansegmentsBody body:
        :param str authorization:
        :return: InlineResponse20098
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_lan_segments_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_lan_segments_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_lan_segments_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_lan_segments_post  # noqa: E501

        **API Description:**<br/> - Create a new lan-segment scoped to the enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_lan_segments_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GlobalLansegmentsBody body:
        :param str authorization:
        :return: InlineResponse20098
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_lan_segments_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/lan-segments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20098',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_lan_segments_vrf_id_devices_get(self, vrf_id, **kwargs):  # noqa: E501
        """v1_global_lan_segments_vrf_id_devices_get  # noqa: E501

        **API Description:**<br/> - Get a list of lan-segment devices under the currently logged in enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_lan_segments_vrf_id_devices_get(vrf_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vrf_id: (required)
        :param str authorization:
        :return: InlineResponse200168
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_lan_segments_vrf_id_devices_get_with_http_info(vrf_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_lan_segments_vrf_id_devices_get_with_http_info(vrf_id, **kwargs)  # noqa: E501
            return data

    def v1_global_lan_segments_vrf_id_devices_get_with_http_info(self, vrf_id, **kwargs):  # noqa: E501
        """v1_global_lan_segments_vrf_id_devices_get  # noqa: E501

        **API Description:**<br/> - Get a list of lan-segment devices under the currently logged in enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_lan_segments_vrf_id_devices_get_with_http_info(vrf_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vrf_id: (required)
        :param str authorization:
        :return: InlineResponse200168
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vrf_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_lan_segments_vrf_id_devices_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vrf_id' is set
        if ('vrf_id' not in params or
                params['vrf_id'] is None):
            raise ValueError("Missing the required parameter `vrf_id` when calling `v1_global_lan_segments_vrf_id_devices_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vrf_id' in params:
            path_params['vrfId'] = params['vrf_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/lan-segments/{vrfId}/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200168',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_prefix_sets_device_get(self, **kwargs):  # noqa: E501
        """v1_global_prefix_sets_device_get  # noqa: E501

        **API Description:**<br/> - Get global prefix-set objects that failed to attach for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_prefix_sets_device_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200154
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_prefix_sets_device_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_prefix_sets_device_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_prefix_sets_device_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_prefix_sets_device_get  # noqa: E501

        **API Description:**<br/> - Get global prefix-set objects that failed to attach for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_prefix_sets_device_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200154
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_prefix_sets_device_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/prefix-sets/device', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200154',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_prefix_sets_post(self, **kwargs):  # noqa: E501
        """v1_global_prefix_sets_post  # noqa: E501

        **API Description:**<br/> - Get configured global prefix-sets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_prefix_sets_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200154
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_prefix_sets_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_prefix_sets_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_prefix_sets_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_prefix_sets_post  # noqa: E501

        **API Description:**<br/> - Get configured global prefix-sets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_prefix_sets_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200154
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_prefix_sets_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/prefix-sets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200154',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_prefix_sets_site_get(self, **kwargs):  # noqa: E501
        """v1_global_prefix_sets_site_get  # noqa: E501

        **API Description:**<br/> - Get configured global prefix-sets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_prefix_sets_site_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200154
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_prefix_sets_site_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_prefix_sets_site_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_prefix_sets_site_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_prefix_sets_site_get  # noqa: E501

        **API Description:**<br/> - Get configured global prefix-sets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_prefix_sets_site_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200154
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_prefix_sets_site_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/prefix-sets/site', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200154',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_routing_policies_device_get(self, **kwargs):  # noqa: E501
        """v1_global_routing_policies_device_get  # noqa: E501

        **API Description:**<br/> - Get global routing-policy objects that failed to attach for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_routing_policies_device_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200155
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_routing_policies_device_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_routing_policies_device_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_routing_policies_device_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_routing_policies_device_get  # noqa: E501

        **API Description:**<br/> - Get global routing-policy objects that failed to attach for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_routing_policies_device_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200155
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_routing_policies_device_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/routing-policies/device', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200155',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_routing_policies_post(self, **kwargs):  # noqa: E501
        """v1_global_routing_policies_post  # noqa: E501

        **API Description:**<br/> - Get configured global routing-policies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_routing_policies_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200155
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_routing_policies_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_routing_policies_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_routing_policies_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_routing_policies_post  # noqa: E501

        **API Description:**<br/> - Get configured global routing-policies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_routing_policies_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200155
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_routing_policies_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/routing-policies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200155',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_routing_policies_site_get(self, **kwargs):  # noqa: E501
        """v1_global_routing_policies_site_get  # noqa: E501

        **API Description:**<br/> - Get configured global routing-policies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_routing_policies_site_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200155
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_routing_policies_site_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_routing_policies_site_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_routing_policies_site_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_routing_policies_site_get  # noqa: E501

        **API Description:**<br/> - Get configured global routing-policies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_routing_policies_site_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200155
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_routing_policies_site_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/routing-policies/site', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200155',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_site_lists_id_sites_get(self, id, **kwargs):  # noqa: E501
        """v1_global_site_lists_id_sites_get  # noqa: E501

        **API Description:**<br/> - Get a details of a site list sites  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_site_lists_id_sites_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200176
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_site_lists_id_sites_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_site_lists_id_sites_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_global_site_lists_id_sites_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_global_site_lists_id_sites_get  # noqa: E501

        **API Description:**<br/> - Get a details of a site list sites  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_site_lists_id_sites_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200176
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_site_lists_id_sites_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_global_site_lists_id_sites_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/site-lists/{id}/sites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200176',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_site_status_get(self, **kwargs):  # noqa: E501
        """v1_global_site_status_get  # noqa: E501

        **API Description:**<br/> - Get status on global objects attached to a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_site_status_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200118
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_site_status_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_site_status_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_site_status_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_site_status_get  # noqa: E501

        **API Description:**<br/> - Get status on global objects attached to a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_site_status_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200118
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_site_status_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/site-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200118',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_snmps_device_get(self, **kwargs):  # noqa: E501
        """v1_global_snmps_device_get  # noqa: E501

        **API Description:**<br/> - Get global snmp objects that failed to attach for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_snmps_device_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200156
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_snmps_device_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_snmps_device_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_snmps_device_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_snmps_device_get  # noqa: E501

        **API Description:**<br/> - Get global snmp objects that failed to attach for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_snmps_device_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200156
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_snmps_device_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/snmps/device', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200156',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_snmps_post(self, **kwargs):  # noqa: E501
        """v1_global_snmps_post  # noqa: E501

        **API Description:**<br/> - Get configured global snmps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_snmps_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200156
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_snmps_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_snmps_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_snmps_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_snmps_post  # noqa: E501

        **API Description:**<br/> - Get configured global snmps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_snmps_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200156
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_snmps_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/snmps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200156',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_snmps_site_get(self, **kwargs):  # noqa: E501
        """v1_global_snmps_site_get  # noqa: E501

        **API Description:**<br/> - Get configured global snmps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_snmps_site_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200156
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_snmps_site_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_snmps_site_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_snmps_site_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_snmps_site_get  # noqa: E501

        **API Description:**<br/> - Get configured global snmps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_snmps_site_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200156
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_snmps_site_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/snmps/site', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200156',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_summary_post(self, **kwargs):  # noqa: E501
        """v1_global_summary_post  # noqa: E501

        **API Description:**<br/> - Get summary on global objects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_summary_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GlobalSummaryBody body:
        :param str authorization:
        :return: InlineResponse200161
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_summary_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_summary_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_summary_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_summary_post  # noqa: E501

        **API Description:**<br/> - Get summary on global objects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_summary_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GlobalSummaryBody body:
        :param str authorization:
        :return: InlineResponse200161
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_summary_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/summary', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200161',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_sync_post(self, **kwargs):  # noqa: E501
        """v1_global_sync_post  # noqa: E501

        **API Description:**<br/> - Tries synching device with the global objects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_sync_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GlobalSyncBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_sync_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_sync_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_sync_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_sync_post  # noqa: E501

        **API Description:**<br/> - Tries synching device with the global objects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_sync_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GlobalSyncBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_sync_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/sync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_syslogs_device_get(self, **kwargs):  # noqa: E501
        """v1_global_syslogs_device_get  # noqa: E501

        **API Description:**<br/> - Get global syslog objects that failed to attach for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_syslogs_device_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200157
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_syslogs_device_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_syslogs_device_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_syslogs_device_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_syslogs_device_get  # noqa: E501

        **API Description:**<br/> - Get global syslog objects that failed to attach for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_syslogs_device_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200157
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_syslogs_device_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/syslogs/device', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200157',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_syslogs_post(self, **kwargs):  # noqa: E501
        """v1_global_syslogs_post  # noqa: E501

        **API Description:**<br/> - Get configured global syslog collectors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_syslogs_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200157
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_syslogs_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_syslogs_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_syslogs_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_syslogs_post  # noqa: E501

        **API Description:**<br/> - Get configured global syslog collectors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_syslogs_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200157
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_syslogs_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/syslogs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200157',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_syslogs_site_get(self, **kwargs):  # noqa: E501
        """v1_global_syslogs_site_get  # noqa: E501

        **API Description:**<br/> - Get configured global syslog collectors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_syslogs_site_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200157
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_syslogs_site_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_syslogs_site_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_syslogs_site_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_syslogs_site_get  # noqa: E501

        **API Description:**<br/> - Get configured global syslog collectors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_syslogs_site_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200157
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_syslogs_site_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/syslogs/site', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200157',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_traffic_policies_device_get(self, **kwargs):  # noqa: E501
        """v1_global_traffic_policies_device_get  # noqa: E501

        **API Description:**<br/> - Get global traffic-policy objects that failed to attach for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_traffic_policies_device_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200158
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_traffic_policies_device_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_traffic_policies_device_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_traffic_policies_device_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_traffic_policies_device_get  # noqa: E501

        **API Description:**<br/> - Get global traffic-policy objects that failed to attach for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_traffic_policies_device_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200158
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_traffic_policies_device_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/traffic-policies/device', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200158',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_traffic_policies_post(self, **kwargs):  # noqa: E501
        """v1_global_traffic_policies_post  # noqa: E501

        **API Description:**<br/> - Get configured global traffic-policies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_traffic_policies_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200158
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_traffic_policies_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_traffic_policies_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_traffic_policies_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_traffic_policies_post  # noqa: E501

        **API Description:**<br/> - Get configured global traffic-policies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_traffic_policies_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200158
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_traffic_policies_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/traffic-policies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200158',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_global_traffic_policies_site_get(self, **kwargs):  # noqa: E501
        """v1_global_traffic_policies_site_get  # noqa: E501

        **API Description:**<br/> - Get configured global traffic-policies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_traffic_policies_site_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200158
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_global_traffic_policies_site_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_global_traffic_policies_site_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_global_traffic_policies_site_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_global_traffic_policies_site_get  # noqa: E501

        **API Description:**<br/> - Get configured global traffic-policies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_global_traffic_policies_site_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200158
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_global_traffic_policies_site_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/traffic-policies/site', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200158',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_groups_enterprises_get(self, **kwargs):  # noqa: E501
        """v1_groups_enterprises_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_enterprises_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_groups_enterprises_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_groups_enterprises_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_groups_enterprises_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_groups_enterprises_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_enterprises_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_groups_enterprises_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/enterprises', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20062',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_groups_get(self, **kwargs):  # noqa: E501
        """v1_groups_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_groups_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_groups_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_groups_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_groups_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_groups_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20062',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_groups_id_delete(self, id, **kwargs):  # noqa: E501
        """v1_groups_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse2041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_groups_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_groups_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_groups_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_groups_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse2041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_groups_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_groups_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2041',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_groups_id_enterprises_enterprise_id_delete(self, id, enterprise_id, **kwargs):  # noqa: E501
        """v1_groups_id_enterprises_enterprise_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_id_enterprises_enterprise_id_delete(id, enterprise_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str enterprise_id: (required)
        :param str authorization:
        :return: InlineResponse2041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_groups_id_enterprises_enterprise_id_delete_with_http_info(id, enterprise_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_groups_id_enterprises_enterprise_id_delete_with_http_info(id, enterprise_id, **kwargs)  # noqa: E501
            return data

    def v1_groups_id_enterprises_enterprise_id_delete_with_http_info(self, id, enterprise_id, **kwargs):  # noqa: E501
        """v1_groups_id_enterprises_enterprise_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_id_enterprises_enterprise_id_delete_with_http_info(id, enterprise_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str enterprise_id: (required)
        :param str authorization:
        :return: InlineResponse2041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'enterprise_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_groups_id_enterprises_enterprise_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_groups_id_enterprises_enterprise_id_delete`")  # noqa: E501
        # verify the required parameter 'enterprise_id' is set
        if ('enterprise_id' not in params or
                params['enterprise_id'] is None):
            raise ValueError("Missing the required parameter `enterprise_id` when calling `v1_groups_id_enterprises_enterprise_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'enterprise_id' in params:
            path_params['enterpriseId'] = params['enterprise_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/enterprises/{enterpriseId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2041',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_groups_id_enterprises_post(self, id, **kwargs):  # noqa: E501
        """v1_groups_id_enterprises_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_id_enterprises_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param IdEnterprisesBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_groups_id_enterprises_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_groups_id_enterprises_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_groups_id_enterprises_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_groups_id_enterprises_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_id_enterprises_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param IdEnterprisesBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_groups_id_enterprises_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_groups_id_enterprises_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/enterprises', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_groups_id_get(self, id, **kwargs):  # noqa: E501
        """v1_groups_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse20064
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_groups_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_groups_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_groups_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_groups_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse20064
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_groups_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_groups_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20064',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_groups_id_members_get(self, id, **kwargs):  # noqa: E501
        """v1_groups_id_members_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_id_members_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_groups_id_members_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_groups_id_members_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_groups_id_members_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_groups_id_members_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_id_members_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_groups_id_members_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_groups_id_members_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20059',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_groups_id_members_member_id_delete(self, id, member_id, **kwargs):  # noqa: E501
        """v1_groups_id_members_member_id_delete  # noqa: E501

        **API Description:**<br/> - graphiant cloud only  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_id_members_member_id_delete(id, member_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str member_id: (required)
        :param str authorization:
        :return: InlineResponse2041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_groups_id_members_member_id_delete_with_http_info(id, member_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_groups_id_members_member_id_delete_with_http_info(id, member_id, **kwargs)  # noqa: E501
            return data

    def v1_groups_id_members_member_id_delete_with_http_info(self, id, member_id, **kwargs):  # noqa: E501
        """v1_groups_id_members_member_id_delete  # noqa: E501

        **API Description:**<br/> - graphiant cloud only  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_id_members_member_id_delete_with_http_info(id, member_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str member_id: (required)
        :param str authorization:
        :return: InlineResponse2041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'member_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_groups_id_members_member_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_groups_id_members_member_id_delete`")  # noqa: E501
        # verify the required parameter 'member_id' is set
        if ('member_id' not in params or
                params['member_id'] is None):
            raise ValueError("Missing the required parameter `member_id` when calling `v1_groups_id_members_member_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'member_id' in params:
            path_params['memberId'] = params['member_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/members/{memberId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2041',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_groups_id_members_post(self, id, **kwargs):  # noqa: E501
        """v1_groups_id_members_post  # noqa: E501

        **API Description:**<br/> - graphiant cloud only  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_id_members_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param IdMembersBody body:
        :param str authorization:
        :return: InlineResponse2041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_groups_id_members_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_groups_id_members_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_groups_id_members_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_groups_id_members_post  # noqa: E501

        **API Description:**<br/> - graphiant cloud only  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_id_members_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param IdMembersBody body:
        :param str authorization:
        :return: InlineResponse2041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_groups_id_members_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_groups_id_members_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2041',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_groups_id_patch(self, id, **kwargs):  # noqa: E501
        """v1_groups_id_patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_id_patch(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param GroupsIdBody body:   **Field Descriptions**:<br/>  - __description__: __(Optional)__ <br/>   - __displayName__: __(Optional)__ <br/>   - __groupType__: __(Optional)__ <br/>   - __timeWindowEnd__: __(Optional)__ <br/>   - __timeWindowStart__: __(Optional)__ <br/>   
        :param str authorization:
        :return: InlineResponse2041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_groups_id_patch_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_groups_id_patch_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_groups_id_patch_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_groups_id_patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_id_patch_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param GroupsIdBody body:   **Field Descriptions**:<br/>  - __description__: __(Optional)__ <br/>   - __displayName__: __(Optional)__ <br/>   - __groupType__: __(Optional)__ <br/>   - __timeWindowEnd__: __(Optional)__ <br/>   - __timeWindowStart__: __(Optional)__ <br/>   
        :param str authorization:
        :return: InlineResponse2041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_groups_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_groups_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2041',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_groups_put(self, **kwargs):  # noqa: E501
        """v1_groups_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GroupsBody body:   **Field Descriptions**:<br/>  - __groupId__: __(Optional)__ Only supply if enterprise uses an idp<br/>   - __groupType__: __(Optional)__ <br/>   - __managesEnterprises__: __(Optional)__ <br/>   - __timeWindowEnd__: __(Optional)__ <br/>   - __timeWindowStart__: __(Optional)__ <br/>   
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_groups_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_groups_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_groups_put_with_http_info(self, **kwargs):  # noqa: E501
        """v1_groups_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GroupsBody body:   **Field Descriptions**:<br/>  - __groupId__: __(Optional)__ Only supply if enterprise uses an idp<br/>   - __groupType__: __(Optional)__ <br/>   - __managesEnterprises__: __(Optional)__ <br/>   - __timeWindowEnd__: __(Optional)__ <br/>   - __timeWindowStart__: __(Optional)__ <br/>   
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_groups_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_groups_root_get(self, **kwargs):  # noqa: E501
        """v1_groups_root_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_root_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_groups_root_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_groups_root_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_groups_root_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_groups_root_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_groups_root_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_groups_root_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/root', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20062',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_id_password_recover_patch(self, id, **kwargs):  # noqa: E501
        """v1_id_password_recover_patch  # noqa: E501

        **API Description:**<br/> - Graphiant cloud only  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_id_password_recover_patch(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_id_password_recover_patch_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_id_password_recover_patch_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_id_password_recover_patch_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_id_password_recover_patch  # noqa: E501

        **API Description:**<br/> - Graphiant cloud only  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_id_password_recover_patch_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_id_password_recover_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_id_password_recover_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{id}/password/recover', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_lan_segments_get(self, **kwargs):  # noqa: E501
        """v1_lan_segments_get  # noqa: E501

        **API Description:**<br/> - Get LAN Segments for the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_lan_segments_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200181
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_lan_segments_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_lan_segments_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_lan_segments_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_lan_segments_get  # noqa: E501

        **API Description:**<br/> - Get LAN Segments for the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_lan_segments_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200181
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_lan_segments_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/lan-segments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200181',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_lldp_interface_id_neighbors_get(self, interface_id, **kwargs):  # noqa: E501
        """v1_lldp_interface_id_neighbors_get  # noqa: E501

        **API Description:**<br/> - Get the LLDP neighbors for an interface and optionally for a specific vendor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_lldp_interface_id_neighbors_get(interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str interface_id: (required)
        :param str authorization:
        :return: InlineResponse200165
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_lldp_interface_id_neighbors_get_with_http_info(interface_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_lldp_interface_id_neighbors_get_with_http_info(interface_id, **kwargs)  # noqa: E501
            return data

    def v1_lldp_interface_id_neighbors_get_with_http_info(self, interface_id, **kwargs):  # noqa: E501
        """v1_lldp_interface_id_neighbors_get  # noqa: E501

        **API Description:**<br/> - Get the LLDP neighbors for an interface and optionally for a specific vendor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_lldp_interface_id_neighbors_get_with_http_info(interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str interface_id: (required)
        :param str authorization:
        :return: InlineResponse200165
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interface_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_lldp_interface_id_neighbors_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interface_id' is set
        if ('interface_id' not in params or
                params['interface_id'] is None):
            raise ValueError("Missing the required parameter `interface_id` when calling `v1_lldp_interface_id_neighbors_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'interface_id' in params:
            path_params['interfaceId'] = params['interface_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/lldp/{interfaceId}/neighbors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200165',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_lldp_interface_id_summary_get(self, interface_id, **kwargs):  # noqa: E501
        """v1_lldp_interface_id_summary_get  # noqa: E501

        **API Description:**<br/> - Get the summary of LLDP neighbors for an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_lldp_interface_id_summary_get(interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str interface_id: (required)
        :param str authorization:
        :return: InlineResponse200166
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_lldp_interface_id_summary_get_with_http_info(interface_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_lldp_interface_id_summary_get_with_http_info(interface_id, **kwargs)  # noqa: E501
            return data

    def v1_lldp_interface_id_summary_get_with_http_info(self, interface_id, **kwargs):  # noqa: E501
        """v1_lldp_interface_id_summary_get  # noqa: E501

        **API Description:**<br/> - Get the summary of LLDP neighbors for an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_lldp_interface_id_summary_get_with_http_info(interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str interface_id: (required)
        :param str authorization:
        :return: InlineResponse200166
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interface_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_lldp_interface_id_summary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interface_id' is set
        if ('interface_id' not in params or
                params['interface_id'] is None):
            raise ValueError("Missing the required parameter `interface_id` when calling `v1_lldp_interface_id_summary_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'interface_id' in params:
            path_params['interfaceId'] = params['interface_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/lldp/{interfaceId}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200166',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_lldp_interface_id_vendors_get(self, interface_id, **kwargs):  # noqa: E501
        """v1_lldp_interface_id_vendors_get  # noqa: E501

        **API Description:**<br/> - Get the list LLDP vendors for an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_lldp_interface_id_vendors_get(interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str interface_id: (required)
        :param str authorization:
        :return: InlineResponse200167
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_lldp_interface_id_vendors_get_with_http_info(interface_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_lldp_interface_id_vendors_get_with_http_info(interface_id, **kwargs)  # noqa: E501
            return data

    def v1_lldp_interface_id_vendors_get_with_http_info(self, interface_id, **kwargs):  # noqa: E501
        """v1_lldp_interface_id_vendors_get  # noqa: E501

        **API Description:**<br/> - Get the list LLDP vendors for an interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_lldp_interface_id_vendors_get_with_http_info(interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str interface_id: (required)
        :param str authorization:
        :return: InlineResponse200167
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interface_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_lldp_interface_id_vendors_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interface_id' is set
        if ('interface_id' not in params or
                params['interface_id'] is None):
            raise ValueError("Missing the required parameter `interface_id` when calling `v1_lldp_interface_id_vendors_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'interface_id' in params:
            path_params['interfaceId'] = params['interface_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/lldp/{interfaceId}/vendors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200167',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_logs_post(self, **kwargs):  # noqa: E501
        """v1_logs_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_logs_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1LogsBody body:
        :param str authorization:
        :return: InlineResponse200260
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_logs_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_logs_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_logs_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_logs_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_logs_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1LogsBody body:
        :param str authorization:
        :return: InlineResponse200260
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_logs_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/logs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200260',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_monitoring_circuits_bandwidth_post(self, **kwargs):  # noqa: E501
        """v1_monitoring_circuits_bandwidth_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_monitoring_circuits_bandwidth_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200228
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_monitoring_circuits_bandwidth_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_monitoring_circuits_bandwidth_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_monitoring_circuits_bandwidth_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_monitoring_circuits_bandwidth_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_monitoring_circuits_bandwidth_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200228
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_monitoring_circuits_bandwidth_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/monitoring/circuits/bandwidth', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200228',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_monitoring_circuits_incidents_post(self, **kwargs):  # noqa: E501
        """v1_monitoring_circuits_incidents_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_monitoring_circuits_incidents_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200231
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_monitoring_circuits_incidents_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_monitoring_circuits_incidents_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_monitoring_circuits_incidents_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_monitoring_circuits_incidents_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_monitoring_circuits_incidents_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200231
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_monitoring_circuits_incidents_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/monitoring/circuits/incidents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200231',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_monitoring_circuits_summary_post(self, **kwargs):  # noqa: E501
        """v1_monitoring_circuits_summary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_monitoring_circuits_summary_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200232
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_monitoring_circuits_summary_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_monitoring_circuits_summary_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_monitoring_circuits_summary_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_monitoring_circuits_summary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_monitoring_circuits_summary_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200232
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_monitoring_circuits_summary_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/monitoring/circuits/summary', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200232',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_monitoring_circuits_utilization_post(self, **kwargs):  # noqa: E501
        """v1_monitoring_circuits_utilization_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_monitoring_circuits_utilization_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200233
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_monitoring_circuits_utilization_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_monitoring_circuits_utilization_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_monitoring_circuits_utilization_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_monitoring_circuits_utilization_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_monitoring_circuits_utilization_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200233
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_monitoring_circuits_utilization_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/monitoring/circuits/utilization', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200233',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_monitoring_circuits_visualization_post(self, **kwargs):  # noqa: E501
        """v1_monitoring_circuits_visualization_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_monitoring_circuits_visualization_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200255
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_monitoring_circuits_visualization_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_monitoring_circuits_visualization_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_monitoring_circuits_visualization_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_monitoring_circuits_visualization_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_monitoring_circuits_visualization_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200255
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_monitoring_circuits_visualization_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/monitoring/circuits/visualization', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200255',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_nat_entries_device_id_get(self, device_id, **kwargs):  # noqa: E501
        """v1_nat_entries_device_id_get  # noqa: E501

        **API Description:**<br/> - Get the NAT entries for the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_nat_entries_device_id_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse20082
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_nat_entries_device_id_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_nat_entries_device_id_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_nat_entries_device_id_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_nat_entries_device_id_get  # noqa: E501

        **API Description:**<br/> - Get the NAT entries for the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_nat_entries_device_id_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse20082
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_nat_entries_device_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_nat_entries_device_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/nat/entries/{deviceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20082',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_nat_utilization_device_id_get(self, device_id, **kwargs):  # noqa: E501
        """v1_nat_utilization_device_id_get  # noqa: E501

        **API Description:**<br/> - Get the NAT usage for the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_nat_utilization_device_id_get(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse20083
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_nat_utilization_device_id_get_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_nat_utilization_device_id_get_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_nat_utilization_device_id_get_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_nat_utilization_device_id_get  # noqa: E501

        **API Description:**<br/> - Get the NAT usage for the device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_nat_utilization_device_id_get_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param str authorization:
        :return: InlineResponse20083
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_nat_utilization_device_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_nat_utilization_device_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/nat/utilization/{deviceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20083',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_policy_applications_get(self, **kwargs):  # noqa: E501
        """v1_policy_applications_get  # noqa: E501

        **API Description:**<br/> - Get a list of builtin DPI applications  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_policy_applications_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200134
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_policy_applications_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_policy_applications_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_policy_applications_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_policy_applications_get  # noqa: E501

        **API Description:**<br/> - Get a list of builtin DPI applications  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_policy_applications_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200134
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_policy_applications_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/policy/applications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200134',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_policy_prefix_sets_id_delete(self, id, **kwargs):  # noqa: E501
        """v1_policy_prefix_sets_id_delete  # noqa: E501

        **API Description:**<br/> - Delete a prefix-set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_policy_prefix_sets_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_policy_prefix_sets_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_policy_prefix_sets_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_policy_prefix_sets_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_policy_prefix_sets_id_delete  # noqa: E501

        **API Description:**<br/> - Delete a prefix-set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_policy_prefix_sets_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_policy_prefix_sets_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_policy_prefix_sets_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/policy/prefix-sets/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_policy_prefix_sets_id_put(self, id, **kwargs):  # noqa: E501
        """v1_policy_prefix_sets_id_put  # noqa: E501

        **API Description:**<br/> - Update a prefix-set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_policy_prefix_sets_id_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param PrefixsetsIdBody body:
        :param str authorization:
        :return: InlineResponse200101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_policy_prefix_sets_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_policy_prefix_sets_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_policy_prefix_sets_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_policy_prefix_sets_id_put  # noqa: E501

        **API Description:**<br/> - Update a prefix-set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_policy_prefix_sets_id_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param PrefixsetsIdBody body:
        :param str authorization:
        :return: InlineResponse200101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_policy_prefix_sets_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_policy_prefix_sets_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/policy/prefix-sets/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200101',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_policy_prefix_sets_post(self, **kwargs):  # noqa: E501
        """v1_policy_prefix_sets_post  # noqa: E501

        **API Description:**<br/> - Create a new prefix-set scoped to the enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_policy_prefix_sets_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PolicyPrefixsetsBody body:
        :param str authorization:
        :return: InlineResponse200101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_policy_prefix_sets_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_policy_prefix_sets_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_policy_prefix_sets_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_policy_prefix_sets_post  # noqa: E501

        **API Description:**<br/> - Create a new prefix-set scoped to the enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_policy_prefix_sets_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PolicyPrefixsetsBody body:
        :param str authorization:
        :return: InlineResponse200101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_policy_prefix_sets_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/policy/prefix-sets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200101',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_policy_route_tag_sets_id_delete(self, id, **kwargs):  # noqa: E501
        """v1_policy_route_tag_sets_id_delete  # noqa: E501

        **API Description:**<br/> - Create a new route-tag scoped to the enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_policy_route_tag_sets_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :param int level:
        :return: InlineResponse200102
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_policy_route_tag_sets_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_policy_route_tag_sets_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_policy_route_tag_sets_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_policy_route_tag_sets_id_delete  # noqa: E501

        **API Description:**<br/> - Create a new route-tag scoped to the enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_policy_route_tag_sets_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :param int level:
        :return: InlineResponse200102
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization', 'level']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_policy_route_tag_sets_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_policy_route_tag_sets_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'level' in params:
            query_params.append(('level', params['level']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/policy/route-tag-sets/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200102',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_policy_route_tag_sets_post(self, **kwargs):  # noqa: E501
        """v1_policy_route_tag_sets_post  # noqa: E501

        **API Description:**<br/> - Create a new route tag scoped to the enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_policy_route_tag_sets_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PolicyRoutetagsetsBody body:
        :param str authorization:
        :return: InlineResponse200102
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_policy_route_tag_sets_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_policy_route_tag_sets_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_policy_route_tag_sets_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_policy_route_tag_sets_post  # noqa: E501

        **API Description:**<br/> - Create a new route tag scoped to the enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_policy_route_tag_sets_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PolicyRoutetagsetsBody body:
        :param str authorization:
        :return: InlineResponse200102
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_policy_route_tag_sets_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/policy/route-tag-sets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200102',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_policy_route_tag_sets_tag_detail_get(self, **kwargs):  # noqa: E501
        """v1_policy_route_tag_sets_tag_detail_get  # noqa: E501

        **API Description:**<br/> - Get all the route tags summary for the the enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_policy_route_tag_sets_tag_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200171
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_policy_route_tag_sets_tag_detail_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_policy_route_tag_sets_tag_detail_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_policy_route_tag_sets_tag_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_policy_route_tag_sets_tag_detail_get  # noqa: E501

        **API Description:**<br/> - Get all the route tags summary for the the enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_policy_route_tag_sets_tag_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200171
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_policy_route_tag_sets_tag_detail_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/policy/route-tag-sets/tag-detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200171',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_policy_route_tag_sets_tags_get(self, **kwargs):  # noqa: E501
        """v1_policy_route_tag_sets_tags_get  # noqa: E501

        **API Description:**<br/> - Get all the route tags for the enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_policy_route_tag_sets_tags_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200172
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_policy_route_tag_sets_tags_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_policy_route_tag_sets_tags_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_policy_route_tag_sets_tags_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_policy_route_tag_sets_tags_get  # noqa: E501

        **API Description:**<br/> - Get all the route tags for the enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_policy_route_tag_sets_tags_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200172
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_policy_route_tag_sets_tags_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/policy/route-tag-sets/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200172',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_policy_route_tag_sets_tags_summary_get(self, **kwargs):  # noqa: E501
        """v1_policy_route_tag_sets_tags_summary_get  # noqa: E501

        **API Description:**<br/> - Get all the route tags summary for the the enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_policy_route_tag_sets_tags_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200173
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_policy_route_tag_sets_tags_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_policy_route_tag_sets_tags_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_policy_route_tag_sets_tags_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_policy_route_tag_sets_tags_summary_get  # noqa: E501

        **API Description:**<br/> - Get all the route tags summary for the the enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_policy_route_tag_sets_tags_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200173
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_policy_route_tag_sets_tags_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/policy/route-tag-sets/tags-summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200173',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_portal_apikeys_delete(self, **kwargs):  # noqa: E501
        """v1_portal_apikeys_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_portal_apikeys_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str gcs_name:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_portal_apikeys_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_portal_apikeys_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_portal_apikeys_delete_with_http_info(self, **kwargs):  # noqa: E501
        """v1_portal_apikeys_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_portal_apikeys_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str gcs_name:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'gcs_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_portal_apikeys_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'gcs_name' in params:
            query_params.append(('gcsName', params['gcs_name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/portal/apikeys', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_portal_apikeys_get(self, **kwargs):  # noqa: E501
        """v1_portal_apikeys_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_portal_apikeys_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20067
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_portal_apikeys_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_portal_apikeys_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_portal_apikeys_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_portal_apikeys_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_portal_apikeys_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20067
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_portal_apikeys_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/portal/apikeys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20067',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_portal_apikeys_post(self, **kwargs):  # noqa: E501
        """v1_portal_apikeys_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_portal_apikeys_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PortalApikeysBody body:
        :param str authorization:
        :return: InlineResponse20068
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_portal_apikeys_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_portal_apikeys_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_portal_apikeys_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_portal_apikeys_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_portal_apikeys_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PortalApikeysBody body:
        :param str authorization:
        :return: InlineResponse20068
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_portal_apikeys_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/portal/apikeys', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20068',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_portal_private_details_get(self, **kwargs):  # noqa: E501
        """v1_portal_private_details_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_portal_private_details_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_portal_private_details_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_portal_private_details_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_portal_private_details_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_portal_private_details_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_portal_private_details_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_portal_private_details_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/portal/private/details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_portal_private_inventory_details_get(self, **kwargs):  # noqa: E501
        """v1_portal_private_inventory_details_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_portal_private_inventory_details_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_portal_private_inventory_details_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_portal_private_inventory_details_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_portal_private_inventory_details_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_portal_private_inventory_details_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_portal_private_inventory_details_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_portal_private_inventory_details_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/portal/private/inventory_details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_portal_private_post(self, **kwargs):  # noqa: E501
        """v1_portal_private_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_portal_private_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_portal_private_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_portal_private_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_portal_private_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_portal_private_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_portal_private_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_portal_private_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/portal/private', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_portal_private_register_post(self, **kwargs):  # noqa: E501
        """v1_portal_private_register_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_portal_private_register_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_portal_private_register_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_portal_private_register_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_portal_private_register_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_portal_private_register_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_portal_private_register_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_portal_private_register_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/portal/private/register', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_portal_private_sync_post(self, **kwargs):  # noqa: E501
        """v1_portal_private_sync_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_portal_private_sync_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrivateSyncBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_portal_private_sync_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_portal_private_sync_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_portal_private_sync_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_portal_private_sync_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_portal_private_sync_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrivateSyncBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_portal_private_sync_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/portal/private/sync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_presharedkey_get(self, **kwargs):  # noqa: E501
        """v1_presharedkey_get  # noqa: E501

        **API Description:**<br/> - Get all domain categories from the DPI engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_presharedkey_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200170
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_presharedkey_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_presharedkey_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_presharedkey_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_presharedkey_get  # noqa: E501

        **API Description:**<br/> - Get all domain categories from the DPI engine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_presharedkey_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200170
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_presharedkey_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/presharedkey', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200170',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_qos_circuit_profiles_get(self, **kwargs):  # noqa: E501
        """v1_qos_circuit_profiles_get  # noqa: E501

        **API Description:**<br/> - Returns a list of QoS profiles for circuits with associated queues & attributes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_qos_circuit_profiles_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200128
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_qos_circuit_profiles_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_qos_circuit_profiles_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_qos_circuit_profiles_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_qos_circuit_profiles_get  # noqa: E501

        **API Description:**<br/> - Returns a list of QoS profiles for circuits with associated queues & attributes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_qos_circuit_profiles_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200128
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_qos_circuit_profiles_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/qos/circuit-profiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200128',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_regions_get(self, **kwargs):  # noqa: E501
        """v1_regions_get  # noqa: E501

        **API Description:**<br/> - Get regions used for the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_regions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200151
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_regions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_regions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_regions_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_regions_get  # noqa: E501

        **API Description:**<br/> - Get regions used for the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_regions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200151
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_regions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/regions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200151',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_search_get(self, **kwargs):  # noqa: E501
        """v1_search_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param int max_results:
        :param str search:
        :return: InlineResponse200210
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_search_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_search_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_search_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_search_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_search_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param int max_results:
        :param str search:
        :return: InlineResponse200210
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'max_results', 'search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_search_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'max_results' in params:
            query_params.append(('maxResults', params['max_results']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200210',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_site_details_sitelists_post(self, **kwargs):  # noqa: E501
        """v1_site_details_sitelists_post  # noqa: E501

        **API Description:**<br/> - Get a list of site list references for a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_site_details_sitelists_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DetailsSitelistsBody body:
        :param str authorization:
        :return: InlineResponse200175
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_site_details_sitelists_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_site_details_sitelists_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_site_details_sitelists_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_site_details_sitelists_post  # noqa: E501

        **API Description:**<br/> - Get a list of site list references for a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_site_details_sitelists_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DetailsSitelistsBody body:
        :param str authorization:
        :return: InlineResponse200175
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_site_details_sitelists_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/site/details/sitelists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200175',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_site_id_details_interfaces_get(self, id, **kwargs):  # noqa: E501
        """v1_site_id_details_interfaces_get  # noqa: E501

        **API Description:**<br/> - Get a list of a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_site_id_details_interfaces_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200174
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_site_id_details_interfaces_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_site_id_details_interfaces_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_site_id_details_interfaces_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_site_id_details_interfaces_get  # noqa: E501

        **API Description:**<br/> - Get a list of a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_site_id_details_interfaces_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse200174
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_site_id_details_interfaces_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_site_id_details_interfaces_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/site/{id}/details/interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200174',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_sites_details_get(self, **kwargs):  # noqa: E501
        """v1_sites_details_get  # noqa: E501

        **API Description:**<br/> - Get a list of sites with aggregated values and site wide status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_sites_details_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200178
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_sites_details_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_sites_details_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_sites_details_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_sites_details_get  # noqa: E501

        **API Description:**<br/> - Get a list of sites with aggregated values and site wide status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_sites_details_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200178
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_sites_details_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200178',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_sites_get(self, **kwargs):  # noqa: E501
        """v1_sites_get  # noqa: E501

        **API Description:**<br/> - Get sites for the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_sites_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200103
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_sites_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_sites_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_sites_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_sites_get  # noqa: E501

        **API Description:**<br/> - Get sites for the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_sites_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200103
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_sites_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200103',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_sites_post(self, **kwargs):  # noqa: E501
        """v1_sites_post  # noqa: E501

        **API Description:**<br/> - Create an enterprise site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_sites_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1SitesBody body:
        :param str authorization:
        :return: InlineResponse200104
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_sites_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_sites_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_sites_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_sites_post  # noqa: E501

        **API Description:**<br/> - Create an enterprise site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_sites_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1SitesBody body:
        :param str authorization:
        :return: InlineResponse200104
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_sites_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200104',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_sites_site_id_circuits_get(self, site_id, **kwargs):  # noqa: E501
        """v1_sites_site_id_circuits_get  # noqa: E501

        **API Description:**<br/> - Get Circuits for the site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_sites_site_id_circuits_get(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param str authorization:
        :return: InlineResponse200129
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_sites_site_id_circuits_get_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_sites_site_id_circuits_get_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def v1_sites_site_id_circuits_get_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """v1_sites_site_id_circuits_get  # noqa: E501

        **API Description:**<br/> - Get Circuits for the site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_sites_site_id_circuits_get_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param str authorization:
        :return: InlineResponse200129
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_sites_site_id_circuits_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `v1_sites_site_id_circuits_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/circuits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200129',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_sites_site_id_delete(self, site_id, **kwargs):  # noqa: E501
        """v1_sites_site_id_delete  # noqa: E501

        **API Description:**<br/> - Delete a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_sites_site_id_delete(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_sites_site_id_delete_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_sites_site_id_delete_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def v1_sites_site_id_delete_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """v1_sites_site_id_delete  # noqa: E501

        **API Description:**<br/> - Delete a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_sites_site_id_delete_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_sites_site_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `v1_sites_site_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_sites_site_id_devices_get(self, site_id, **kwargs):  # noqa: E501
        """v1_sites_site_id_devices_get  # noqa: E501

        **API Description:**<br/> - Get Devices for the site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_sites_site_id_devices_get(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param str authorization:
        :return: InlineResponse200141
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_sites_site_id_devices_get_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_sites_site_id_devices_get_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def v1_sites_site_id_devices_get_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """v1_sites_site_id_devices_get  # noqa: E501

        **API Description:**<br/> - Get Devices for the site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_sites_site_id_devices_get_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param str authorization:
        :return: InlineResponse200141
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_sites_site_id_devices_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `v1_sites_site_id_devices_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200141',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_sites_site_id_post(self, site_id, **kwargs):  # noqa: E501
        """v1_sites_site_id_post  # noqa: E501

        **API Description:**<br/> - Update a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_sites_site_id_post(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param SitesSiteIdBody body:
        :param str authorization:
        :return: InlineResponse200104
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_sites_site_id_post_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_sites_site_id_post_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def v1_sites_site_id_post_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """v1_sites_site_id_post  # noqa: E501

        **API Description:**<br/> - Update a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_sites_site_id_post_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param SitesSiteIdBody body:
        :param str authorization:
        :return: InlineResponse200104
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_sites_site_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `v1_sites_site_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200104',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_software_auto_upgrade_default_get(self, **kwargs):  # noqa: E501
        """v1_software_auto_upgrade_default_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_software_auto_upgrade_default_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200261
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_software_auto_upgrade_default_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_software_auto_upgrade_default_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_software_auto_upgrade_default_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_software_auto_upgrade_default_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_software_auto_upgrade_default_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200261
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_software_auto_upgrade_default_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/software/auto-upgrade/default', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200261',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_software_auto_upgrade_default_put(self, **kwargs):  # noqa: E501
        """v1_software_auto_upgrade_default_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_software_auto_upgrade_default_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutoupgradeDefaultBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_software_auto_upgrade_default_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_software_auto_upgrade_default_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_software_auto_upgrade_default_put_with_http_info(self, **kwargs):  # noqa: E501
        """v1_software_auto_upgrade_default_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_software_auto_upgrade_default_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AutoupgradeDefaultBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_software_auto_upgrade_default_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/software/auto-upgrade/default', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_software_gcsrelease_upload_notes_post(self, **kwargs):  # noqa: E501
        """v1_software_gcsrelease_upload_notes_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_software_gcsrelease_upload_notes_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadNotesBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_software_gcsrelease_upload_notes_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_software_gcsrelease_upload_notes_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_software_gcsrelease_upload_notes_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_software_gcsrelease_upload_notes_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_software_gcsrelease_upload_notes_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UploadNotesBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_software_gcsrelease_upload_notes_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/software/gcsrelease/upload/notes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_software_release_notes_get(self, **kwargs):  # noqa: E501
        """v1_software_release_notes_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_software_release_notes_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200263
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_software_release_notes_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_software_release_notes_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_software_release_notes_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_software_release_notes_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_software_release_notes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200263
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_software_release_notes_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/software/release/notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200263',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_software_releases_download_get(self, **kwargs):  # noqa: E501
        """v1_software_releases_download_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_software_releases_download_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200262
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_software_releases_download_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_software_releases_download_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_software_releases_download_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_software_releases_download_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_software_releases_download_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200262
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_software_releases_download_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/software/releases/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200262',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_software_releases_summary_get(self, **kwargs):  # noqa: E501
        """v1_software_releases_summary_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_software_releases_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200264
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_software_releases_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_software_releases_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_software_releases_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_software_releases_summary_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_software_releases_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200264
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_software_releases_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/software/releases/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200264',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_software_running_details_get(self, **kwargs):  # noqa: E501
        """v1_software_running_details_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_software_running_details_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200266
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_software_running_details_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_software_running_details_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_software_running_details_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_software_running_details_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_software_running_details_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200266
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_software_running_details_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/software/running/details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200266',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_software_running_summary_get(self, **kwargs):  # noqa: E501
        """v1_software_running_summary_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_software_running_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200267
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_software_running_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_software_running_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_software_running_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_software_running_summary_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_software_running_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200267
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_software_running_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/software/running/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200267',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_talkers_device_device_id_top_post(self, device_id, **kwargs):  # noqa: E501
        """v1_talkers_device_device_id_top_post  # noqa: E501

        **API Description:**<br/> - Get top talkers for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_talkers_device_device_id_top_post(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param DeviceIdTopBody body:   **Field Descriptions**:<br/>  - __numClients__: The maximum number of client usage info to be returned (10 if left empty)<br/>  
        :param str authorization:
        :return: InlineResponse20086
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_talkers_device_device_id_top_post_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_talkers_device_device_id_top_post_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_talkers_device_device_id_top_post_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_talkers_device_device_id_top_post  # noqa: E501

        **API Description:**<br/> - Get top talkers for a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_talkers_device_device_id_top_post_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param DeviceIdTopBody body:   **Field Descriptions**:<br/>  - __numClients__: The maximum number of client usage info to be returned (10 if left empty)<br/>  
        :param str authorization:
        :return: InlineResponse20086
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_talkers_device_device_id_top_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_talkers_device_device_id_top_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/talkers/device/{deviceId}/top', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20086',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_talkers_site_site_id_top_post(self, site_id, **kwargs):  # noqa: E501
        """v1_talkers_site_site_id_top_post  # noqa: E501

        **API Description:**<br/> - Get top talkers for a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_talkers_site_site_id_top_post(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param SiteIdTopBody body:   **Field Descriptions**:<br/>  - __numClients__: The maximum number of apps to return (10 if left empty)<br/>  
        :param str authorization:
        :return: InlineResponse20086
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_talkers_site_site_id_top_post_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_talkers_site_site_id_top_post_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def v1_talkers_site_site_id_top_post_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """v1_talkers_site_site_id_top_post  # noqa: E501

        **API Description:**<br/> - Get top talkers for a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_talkers_site_site_id_top_post_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param SiteIdTopBody body:   **Field Descriptions**:<br/>  - __numClients__: The maximum number of apps to return (10 if left empty)<br/>  
        :param str authorization:
        :return: InlineResponse20086
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_talkers_site_site_id_top_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `v1_talkers_site_site_id_top_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/talkers/site/{siteId}/top', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20086',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_troubleshooting_device_device_id_post(self, device_id, **kwargs):  # noqa: E501
        """v1_troubleshooting_device_device_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_troubleshooting_device_device_id_post(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param object body:
        :param str authorization:
        :return: InlineResponse200256
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_troubleshooting_device_device_id_post_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_troubleshooting_device_device_id_post_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v1_troubleshooting_device_device_id_post_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v1_troubleshooting_device_device_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_troubleshooting_device_device_id_post_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param object body:
        :param str authorization:
        :return: InlineResponse200256
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_troubleshooting_device_device_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v1_troubleshooting_device_device_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/troubleshooting/device/{deviceId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200256',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_troubleshooting_enterprise_post(self, **kwargs):  # noqa: E501
        """v1_troubleshooting_enterprise_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_troubleshooting_enterprise_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TroubleshootingEnterpriseBody body:
        :param str authorization:
        :return: InlineResponse200257
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_troubleshooting_enterprise_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_troubleshooting_enterprise_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_troubleshooting_enterprise_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_troubleshooting_enterprise_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_troubleshooting_enterprise_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TroubleshootingEnterpriseBody body:
        :param str authorization:
        :return: InlineResponse200257
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_troubleshooting_enterprise_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/troubleshooting/enterprise', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200257',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_troubleshooting_filter_get(self, **kwargs):  # noqa: E501
        """v1_troubleshooting_filter_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_troubleshooting_filter_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200225
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_troubleshooting_filter_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_troubleshooting_filter_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_troubleshooting_filter_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_troubleshooting_filter_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_troubleshooting_filter_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200225
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_troubleshooting_filter_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/troubleshooting/filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200225',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_troubleshooting_site_connectivity_status_get(self, **kwargs):  # noqa: E501
        """v1_troubleshooting_site_connectivity_status_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_troubleshooting_site_connectivity_status_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200252
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_troubleshooting_site_connectivity_status_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_troubleshooting_site_connectivity_status_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_troubleshooting_site_connectivity_status_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_troubleshooting_site_connectivity_status_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_troubleshooting_site_connectivity_status_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200252
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_troubleshooting_site_connectivity_status_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/troubleshooting/site-connectivity-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200252',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_troubleshooting_site_site_id_get(self, site_id, **kwargs):  # noqa: E501
        """v1_troubleshooting_site_site_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_troubleshooting_site_site_id_get(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param str authorization:
        :return: InlineResponse200258
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_troubleshooting_site_site_id_get_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_troubleshooting_site_site_id_get_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def v1_troubleshooting_site_site_id_get_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """v1_troubleshooting_site_site_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_troubleshooting_site_site_id_get_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param str authorization:
        :return: InlineResponse200258
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_troubleshooting_site_site_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `v1_troubleshooting_site_site_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/troubleshooting/site/{siteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200258',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_troubleshooting_top_sites_by_alerts_post(self, **kwargs):  # noqa: E501
        """v1_troubleshooting_top_sites_by_alerts_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_troubleshooting_top_sites_by_alerts_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200259
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_troubleshooting_top_sites_by_alerts_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_troubleshooting_top_sites_by_alerts_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_troubleshooting_top_sites_by_alerts_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_troubleshooting_top_sites_by_alerts_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_troubleshooting_top_sites_by_alerts_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200259
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_troubleshooting_top_sites_by_alerts_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/troubleshooting/top-sites-by-alerts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200259',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_tt_tt_identity_device_status_get(self, tt_identity, **kwargs):  # noqa: E501
        """v1_tt_tt_identity_device_status_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_tt_tt_identity_device_status_get(tt_identity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tt_identity: (required)
        :param str authorization:
        :return: InlineResponse200186
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_tt_tt_identity_device_status_get_with_http_info(tt_identity, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_tt_tt_identity_device_status_get_with_http_info(tt_identity, **kwargs)  # noqa: E501
            return data

    def v1_tt_tt_identity_device_status_get_with_http_info(self, tt_identity, **kwargs):  # noqa: E501
        """v1_tt_tt_identity_device_status_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_tt_tt_identity_device_status_get_with_http_info(tt_identity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tt_identity: (required)
        :param str authorization:
        :return: InlineResponse200186
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tt_identity', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_tt_tt_identity_device_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tt_identity' is set
        if ('tt_identity' not in params or
                params['tt_identity'] is None):
            raise ValueError("Missing the required parameter `tt_identity` when calling `v1_tt_tt_identity_device_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tt_identity' in params:
            path_params['ttIdentity'] = params['tt_identity']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/tt/{ttIdentity}/device-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200186',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_user_profile_get(self, **kwargs):  # noqa: E501
        """v1_user_profile_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_user_profile_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_user_profile_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_user_profile_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_user_profile_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_user_profile_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_user_profile_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_user_profile_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/user-profile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_user_profile_put(self, **kwargs):  # noqa: E501
        """v1_user_profile_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_user_profile_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_user_profile_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_user_profile_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_user_profile_put_with_http_info(self, **kwargs):  # noqa: E501
        """v1_user_profile_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_user_profile_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_user_profile_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/user-profile', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_users_email_password_patch(self, email, **kwargs):  # noqa: E501
        """v1_users_email_password_patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_email_password_patch(email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param EmailPasswordBody body:
        :param str token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_users_email_password_patch_with_http_info(email, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_users_email_password_patch_with_http_info(email, **kwargs)  # noqa: E501
            return data

    def v1_users_email_password_patch_with_http_info(self, email, **kwargs):  # noqa: E501
        """v1_users_email_password_patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_email_password_patch_with_http_info(email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param EmailPasswordBody body:
        :param str token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'body', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_users_email_password_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `v1_users_email_password_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'email' in params:
            path_params['email'] = params['email']  # noqa: E501

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{email}/password', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_users_email_recovery_get(self, email, **kwargs):  # noqa: E501
        """v1_users_email_recovery_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_email_recovery_get(email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_users_email_recovery_get_with_http_info(email, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_users_email_recovery_get_with_http_info(email, **kwargs)  # noqa: E501
            return data

    def v1_users_email_recovery_get_with_http_info(self, email, **kwargs):  # noqa: E501
        """v1_users_email_recovery_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_email_recovery_get_with_http_info(email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_users_email_recovery_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `v1_users_email_recovery_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'email' in params:
            path_params['email'] = params['email']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{email}/recovery', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_users_email_verified_patch(self, email, **kwargs):  # noqa: E501
        """v1_users_email_verified_patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_email_verified_patch(email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param str token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_users_email_verified_patch_with_http_info(email, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_users_email_verified_patch_with_http_info(email, **kwargs)  # noqa: E501
            return data

    def v1_users_email_verified_patch_with_http_info(self, email, **kwargs):  # noqa: E501
        """v1_users_email_verified_patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_email_verified_patch_with_http_info(email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param str token:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_users_email_verified_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `v1_users_email_verified_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'email' in params:
            path_params['email'] = params['email']  # noqa: E501

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{email}/verified', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_users_get(self, **kwargs):  # noqa: E501
        """v1_users_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str id:
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_users_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_users_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_users_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_users_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str id:
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_users_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20059',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_users_id_delete(self, id, **kwargs):  # noqa: E501
        """v1_users_id_delete  # noqa: E501

        **API Description:**<br/> - Graphiant cloud only  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_users_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_users_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_users_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_users_id_delete  # noqa: E501

        **API Description:**<br/> - Graphiant cloud only  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_users_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_users_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_users_id_enterprises_get(self, id, **kwargs):  # noqa: E501
        """v1_users_id_enterprises_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_id_enterprises_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse20061
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_users_id_enterprises_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_users_id_enterprises_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_users_id_enterprises_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_users_id_enterprises_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_id_enterprises_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse20061
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_users_id_enterprises_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_users_id_enterprises_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}/enterprises', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20061',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_users_id_groups_enterprises_get(self, id, **kwargs):  # noqa: E501
        """v1_users_id_groups_enterprises_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_id_groups_enterprises_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_users_id_groups_enterprises_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_users_id_groups_enterprises_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_users_id_groups_enterprises_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_users_id_groups_enterprises_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_id_groups_enterprises_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_users_id_groups_enterprises_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_users_id_groups_enterprises_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}/groups/enterprises', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20062',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_users_id_groups_get(self, id, **kwargs):  # noqa: E501
        """v1_users_id_groups_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_id_groups_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_users_id_groups_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_users_id_groups_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_users_id_groups_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_users_id_groups_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_id_groups_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_users_id_groups_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_users_id_groups_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20062',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_users_id_groups_root_get(self, id, **kwargs):  # noqa: E501
        """v1_users_id_groups_root_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_id_groups_root_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_users_id_groups_root_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_users_id_groups_root_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_users_id_groups_root_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_users_id_groups_root_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_id_groups_root_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_users_id_groups_root_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_users_id_groups_root_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}/groups/root', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20062',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_users_id_verify_patch(self, id, **kwargs):  # noqa: E501
        """v1_users_id_verify_patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_id_verify_patch(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_users_id_verify_patch_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_users_id_verify_patch_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def v1_users_id_verify_patch_with_http_info(self, id, **kwargs):  # noqa: E501
        """v1_users_id_verify_patch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_id_verify_patch_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_users_id_verify_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `v1_users_id_verify_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{id}/verify', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_users_put(self, **kwargs):  # noqa: E501
        """v1_users_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UsersBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_users_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_users_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_users_put_with_http_info(self, **kwargs):  # noqa: E501
        """v1_users_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_users_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1UsersBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_users_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/users', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_version_post(self, **kwargs):  # noqa: E501
        """v1_version_post  # noqa: E501

        **API Description:**<br/> - Update device config version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_version_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1VersionBody body:
        :param str authorization:
        :return: InlineResponse200184
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_version_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_version_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_version_post_with_http_info(self, **kwargs):  # noqa: E501
        """v1_version_post  # noqa: E501

        **API Description:**<br/> - Update device config version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_version_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1VersionBody body:
        :param str authorization:
        :return: InlineResponse200184
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_version_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/version', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200184',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_zones_get(self, **kwargs):  # noqa: E501
        """v1_zones_get  # noqa: E501

        **API Description:**<br/> - Get Zones for the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_zones_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200182
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_zones_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_zones_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_zones_get_with_http_info(self, **kwargs):  # noqa: E501
        """v1_zones_get  # noqa: E501

        **API Description:**<br/> - Get Zones for the current enterprise  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_zones_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200182
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_zones_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/zones', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200182',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_ack_createupdate_post(self, **kwargs):  # noqa: E501
        """v2_ack_createupdate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_ack_createupdate_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AckCreateupdateBody body:   **Field Descriptions**:<br/>  - __alertIdList__: List of ids of alerts to acknowledge<br/>  - __reason__: __(Optional)__ Optional triage message in acknowledgement<br/>   
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_ack_createupdate_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_ack_createupdate_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_ack_createupdate_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_ack_createupdate_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_ack_createupdate_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AckCreateupdateBody body:   **Field Descriptions**:<br/>  - __alertIdList__: List of ids of alerts to acknowledge<br/>  - __reason__: __(Optional)__ Optional triage message in acknowledgement<br/>   
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_ack_createupdate_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/ack/createupdate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_allowlist_by_enterprise_get(self, **kwargs):  # noqa: E501
        """v2_allowlist_by_enterprise_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_allowlist_by_enterprise_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_allowlist_by_enterprise_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_allowlist_by_enterprise_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_allowlist_by_enterprise_get_with_http_info(self, **kwargs):  # noqa: E501
        """v2_allowlist_by_enterprise_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_allowlist_by_enterprise_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_allowlist_by_enterprise_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/allowlist-by-enterprise', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_allowlist_create_post(self, **kwargs):  # noqa: E501
        """v2_allowlist_create_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_allowlist_create_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:   **Field Descriptions**:<br/>  - __alertId__: Alert id of the alert to create allowlist/mutelist for<br/>  - __noteText__: __(Optional)__ Optional note<br/>   
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_allowlist_create_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_allowlist_create_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_allowlist_create_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_allowlist_create_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_allowlist_create_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:   **Field Descriptions**:<br/>  - __alertId__: Alert id of the alert to create allowlist/mutelist for<br/>  - __noteText__: __(Optional)__ Optional note<br/>   
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_allowlist_create_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/allowlist/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_allowlist_deletebyalertid_alert_id_delete(self, alert_id, **kwargs):  # noqa: E501
        """v2_allowlist_deletebyalertid_alert_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_allowlist_deletebyalertid_alert_id_delete(alert_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_id: Alert id of the alert to delete allowlist/mutelist for (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_allowlist_deletebyalertid_alert_id_delete_with_http_info(alert_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_allowlist_deletebyalertid_alert_id_delete_with_http_info(alert_id, **kwargs)  # noqa: E501
            return data

    def v2_allowlist_deletebyalertid_alert_id_delete_with_http_info(self, alert_id, **kwargs):  # noqa: E501
        """v2_allowlist_deletebyalertid_alert_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_allowlist_deletebyalertid_alert_id_delete_with_http_info(alert_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_id: Alert id of the alert to delete allowlist/mutelist for (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_allowlist_deletebyalertid_alert_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_id' is set
        if ('alert_id' not in params or
                params['alert_id'] is None):
            raise ValueError("Missing the required parameter `alert_id` when calling `v2_allowlist_deletebyalertid_alert_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_id' in params:
            path_params['alertId'] = params['alert_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/allowlist/deletebyalertid/{alertId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_allowlist_deletebyentityid_entity_id_delete(self, entity_id, **kwargs):  # noqa: E501
        """v2_allowlist_deletebyentityid_entity_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_allowlist_deletebyentityid_entity_id_delete(entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_id: Entity id of the alert to delete allowlist/mutelist for (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_allowlist_deletebyentityid_entity_id_delete_with_http_info(entity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_allowlist_deletebyentityid_entity_id_delete_with_http_info(entity_id, **kwargs)  # noqa: E501
            return data

    def v2_allowlist_deletebyentityid_entity_id_delete_with_http_info(self, entity_id, **kwargs):  # noqa: E501
        """v2_allowlist_deletebyentityid_entity_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_allowlist_deletebyentityid_entity_id_delete_with_http_info(entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_id: Entity id of the alert to delete allowlist/mutelist for (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_allowlist_deletebyentityid_entity_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `v2_allowlist_deletebyentityid_entity_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_id' in params:
            path_params['entityId'] = params['entity_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/allowlist/deletebyentityid/{entityId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_allowlist_rule_id_get(self, rule_id, **kwargs):  # noqa: E501
        """v2_allowlist_rule_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_allowlist_rule_id_get(rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule_id: Alert id of the alert to retrieve allowlist/mutelist for (required)
        :param str authorization:
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_allowlist_rule_id_get_with_http_info(rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_allowlist_rule_id_get_with_http_info(rule_id, **kwargs)  # noqa: E501
            return data

    def v2_allowlist_rule_id_get_with_http_info(self, rule_id, **kwargs):  # noqa: E501
        """v2_allowlist_rule_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_allowlist_rule_id_get_with_http_info(rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule_id: Alert id of the alert to retrieve allowlist/mutelist for (required)
        :param str authorization:
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_allowlist_rule_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `v2_allowlist_rule_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule_id' in params:
            path_params['ruleId'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/allowlist/{ruleId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assistant_add_to_conversation_post(self, **kwargs):  # noqa: E501
        """v2_assistant_add_to_conversation_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assistant_add_to_conversation_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssistantAddtoconversationBody body:
        :param str authorization:
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assistant_add_to_conversation_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assistant_add_to_conversation_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assistant_add_to_conversation_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assistant_add_to_conversation_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assistant_add_to_conversation_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssistantAddtoconversationBody body:
        :param str authorization:
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assistant_add_to_conversation_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assistant/add-to-conversation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20019',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assistant_conversation_id_delete(self, conversation_id, **kwargs):  # noqa: E501
        """v2_assistant_conversation_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assistant_conversation_id_delete(conversation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_id: (required)
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assistant_conversation_id_delete_with_http_info(conversation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_assistant_conversation_id_delete_with_http_info(conversation_id, **kwargs)  # noqa: E501
            return data

    def v2_assistant_conversation_id_delete_with_http_info(self, conversation_id, **kwargs):  # noqa: E501
        """v2_assistant_conversation_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assistant_conversation_id_delete_with_http_info(conversation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_id: (required)
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assistant_conversation_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_id' is set
        if ('conversation_id' not in params or
                params['conversation_id'] is None):
            raise ValueError("Missing the required parameter `conversation_id` when calling `v2_assistant_conversation_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_id' in params:
            path_params['conversationId'] = params['conversation_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assistant/{conversationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assistant_delete_conversation_chat_conversation_id_delete(self, conversation_id, **kwargs):  # noqa: E501
        """v2_assistant_delete_conversation_chat_conversation_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assistant_delete_conversation_chat_conversation_id_delete(conversation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assistant_delete_conversation_chat_conversation_id_delete_with_http_info(conversation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_assistant_delete_conversation_chat_conversation_id_delete_with_http_info(conversation_id, **kwargs)  # noqa: E501
            return data

    def v2_assistant_delete_conversation_chat_conversation_id_delete_with_http_info(self, conversation_id, **kwargs):  # noqa: E501
        """v2_assistant_delete_conversation_chat_conversation_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assistant_delete_conversation_chat_conversation_id_delete_with_http_info(conversation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_id: (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assistant_delete_conversation_chat_conversation_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_id' is set
        if ('conversation_id' not in params or
                params['conversation_id'] is None):
            raise ValueError("Missing the required parameter `conversation_id` when calling `v2_assistant_delete_conversation_chat_conversation_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_id' in params:
            path_params['conversationId'] = params['conversation_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assistant/delete-conversation-chat/{conversationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assistant_delete_conversation_conversation_id_delete(self, conversation_id, **kwargs):  # noqa: E501
        """v2_assistant_delete_conversation_conversation_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assistant_delete_conversation_conversation_id_delete(conversation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_id: (required)
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assistant_delete_conversation_conversation_id_delete_with_http_info(conversation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_assistant_delete_conversation_conversation_id_delete_with_http_info(conversation_id, **kwargs)  # noqa: E501
            return data

    def v2_assistant_delete_conversation_conversation_id_delete_with_http_info(self, conversation_id, **kwargs):  # noqa: E501
        """v2_assistant_delete_conversation_conversation_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assistant_delete_conversation_conversation_id_delete_with_http_info(conversation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str conversation_id: (required)
        :param object body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conversation_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assistant_delete_conversation_conversation_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'conversation_id' is set
        if ('conversation_id' not in params or
                params['conversation_id'] is None):
            raise ValueError("Missing the required parameter `conversation_id` when calling `v2_assistant_delete_conversation_conversation_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'conversation_id' in params:
            path_params['conversationId'] = params['conversation_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assistant/delete-conversation/{conversationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assistant_get_conversation_details_post(self, **kwargs):  # noqa: E501
        """v2_assistant_get_conversation_details_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assistant_get_conversation_details_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssistantGetconversationdetailsBody body:
        :param str authorization:
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assistant_get_conversation_details_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assistant_get_conversation_details_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assistant_get_conversation_details_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assistant_get_conversation_details_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assistant_get_conversation_details_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssistantGetconversationdetailsBody body:
        :param str authorization:
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assistant_get_conversation_details_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assistant/get-conversation-details', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20020',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assistant_get_conversations_post(self, **kwargs):  # noqa: E501
        """v2_assistant_get_conversations_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assistant_get_conversations_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssistantGetconversationsBody body:
        :param str authorization:
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assistant_get_conversations_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assistant_get_conversations_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assistant_get_conversations_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assistant_get_conversations_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assistant_get_conversations_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssistantGetconversationsBody body:
        :param str authorization:
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assistant_get_conversations_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assistant/get-conversations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20021',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assistant_update_conversation_name_post(self, **kwargs):  # noqa: E501
        """v2_assistant_update_conversation_name_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assistant_update_conversation_name_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssistantUpdateconversationnameBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assistant_update_conversation_name_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assistant_update_conversation_name_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assistant_update_conversation_name_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assistant_update_conversation_name_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assistant_update_conversation_name_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssistantUpdateconversationnameBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assistant_update_conversation_name_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assistant/update-conversation-name', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assistant_version_post(self, **kwargs):  # noqa: E501
        """v2_assistant_version_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assistant_version_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assistant_version_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assistant_version_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assistant_version_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assistant_version_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assistant_version_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assistant_version_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assistant/version', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_applicationdetailsbyname_post(self, **kwargs):  # noqa: E501
        """v2_assurance_applicationdetailsbyname_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_applicationdetailsbyname_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceApplicationdetailsbynameBody body:
        :param str authorization:
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_applicationdetailsbyname_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_applicationdetailsbyname_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_applicationdetailsbyname_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_applicationdetailsbyname_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_applicationdetailsbyname_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceApplicationdetailsbynameBody body:
        :param str authorization:
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_applicationdetailsbyname_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/applicationdetailsbyname', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_applicationprofilesummary_post(self, **kwargs):  # noqa: E501
        """v2_assurance_applicationprofilesummary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_applicationprofilesummary_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_applicationprofilesummary_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_applicationprofilesummary_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_applicationprofilesummary_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_applicationprofilesummary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_applicationprofilesummary_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_applicationprofilesummary_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/applicationprofilesummary', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_bucket_app_servers_all_get(self, **kwargs):  # noqa: E501
        """v2_assurance_bucket_app_servers_all_get  # noqa: E501

        **API Description:**<br/> - Get all servers associated with each item in a list of bucket apps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_bucket_app_servers_all_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_bucket_app_servers_all_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_bucket_app_servers_all_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_bucket_app_servers_all_get_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_bucket_app_servers_all_get  # noqa: E501

        **API Description:**<br/> - Get all servers associated with each item in a list of bucket apps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_bucket_app_servers_all_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_bucket_app_servers_all_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/bucket-app-servers/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20025',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_bucket_app_servers_post(self, **kwargs):  # noqa: E501
        """v2_assurance_bucket_app_servers_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_bucket_app_servers_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceBucketappserversBody body:
        :param str authorization:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_bucket_app_servers_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_bucket_app_servers_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_bucket_app_servers_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_bucket_app_servers_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_bucket_app_servers_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceBucketappserversBody body:
        :param str authorization:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_bucket_app_servers_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/bucket-app-servers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_bucket_apps_post(self, **kwargs):  # noqa: E501
        """v2_assurance_bucket_apps_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_bucket_apps_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceBucketappsBody body:
        :param str authorization:
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_bucket_apps_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_bucket_apps_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_bucket_apps_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_bucket_apps_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_bucket_apps_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceBucketappsBody body:
        :param str authorization:
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_bucket_apps_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/bucket-apps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20029',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_bucket_topologies_post(self, **kwargs):  # noqa: E501
        """v2_assurance_bucket_topologies_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_bucket_topologies_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceBuckettopologiesBody body:
        :param str authorization:
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_bucket_topologies_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_bucket_topologies_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_bucket_topologies_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_bucket_topologies_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_bucket_topologies_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceBuckettopologiesBody body:
        :param str authorization:
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_bucket_topologies_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/bucket-topologies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20031',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_bucketdetails_post(self, **kwargs):  # noqa: E501
        """v2_assurance_bucketdetails_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_bucketdetails_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceBucketdetailsBody body:
        :param str authorization:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_bucketdetails_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_bucketdetails_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_bucketdetails_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_bucketdetails_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_bucketdetails_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceBucketdetailsBody body:
        :param str authorization:
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_bucketdetails_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/bucketdetails', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_create_user_report_post(self, **kwargs):  # noqa: E501
        """v2_assurance_create_user_report_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_create_user_report_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceCreateuserreportBody body:
        :param str authorization:
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_create_user_report_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_create_user_report_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_create_user_report_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_create_user_report_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_create_user_report_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceCreateuserreportBody body:
        :param str authorization:
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_create_user_report_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/create-user-report', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20023',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_createclassifiedapplication_post(self, **kwargs):  # noqa: E501
        """v2_assurance_createclassifiedapplication_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_createclassifiedapplication_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceCreateclassifiedapplicationBody body:
        :param str authorization:
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_createclassifiedapplication_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_createclassifiedapplication_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_createclassifiedapplication_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_createclassifiedapplication_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_createclassifiedapplication_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceCreateclassifiedapplicationBody body:
        :param str authorization:
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_createclassifiedapplication_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/createclassifiedapplication', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20022',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_delete_user_report_delete(self, **kwargs):  # noqa: E501
        """v2_assurance_delete_user_report_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_delete_user_report_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str report_id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_delete_user_report_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_delete_user_report_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_delete_user_report_delete_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_delete_user_report_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_delete_user_report_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param str report_id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'report_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_delete_user_report_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'report_id' in params:
            query_params.append(('reportId', params['report_id']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/delete-user-report', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_deleteclassifiedapplication_delete(self, **kwargs):  # noqa: E501
        """v2_assurance_deleteclassifiedapplication_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_deleteclassifiedapplication_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param list[object] classification_entry_id_list:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_deleteclassifiedapplication_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_deleteclassifiedapplication_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_deleteclassifiedapplication_delete_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_deleteclassifiedapplication_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_deleteclassifiedapplication_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :param list[object] classification_entry_id_list:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'classification_entry_id_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_deleteclassifiedapplication_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'classification_entry_id_list' in params:
            query_params.append(('classificationEntryIdList', params['classification_entry_id_list']))  # noqa: E501
            collection_formats['classificationEntryIdList'] = 'csv'  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/deleteclassifiedapplication', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_download_user_report_get(self, **kwargs):  # noqa: E501
        """v2_assurance_download_user_report_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_download_user_report_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_download_user_report_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_download_user_report_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_download_user_report_get_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_download_user_report_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_download_user_report_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_download_user_report_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/download-user-report', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20024',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_endpoint_intel_post(self, **kwargs):  # noqa: E501
        """v2_assurance_endpoint_intel_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_endpoint_intel_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceEndpointintelBody body:
        :param str authorization:
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_endpoint_intel_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_endpoint_intel_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_endpoint_intel_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_endpoint_intel_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_endpoint_intel_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceEndpointintelBody body:
        :param str authorization:
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_endpoint_intel_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/endpoint-intel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20033',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_enterprisesummary_post(self, **kwargs):  # noqa: E501
        """v2_assurance_enterprisesummary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_enterprisesummary_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse20034
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_enterprisesummary_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_enterprisesummary_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_enterprisesummary_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_enterprisesummary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_enterprisesummary_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse20034
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_enterprisesummary_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/enterprisesummary', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20034',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_flow_summary_post(self, **kwargs):  # noqa: E501
        """v2_assurance_flow_summary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_flow_summary_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceFlowsummaryBody body:
        :param str authorization:
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_flow_summary_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_flow_summary_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_flow_summary_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_flow_summary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_flow_summary_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceFlowsummaryBody body:
        :param str authorization:
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_flow_summary_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/flow-summary', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20035',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_getclassifiedapplicationlist_get(self, **kwargs):  # noqa: E501
        """v2_assurance_getclassifiedapplicationlist_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_getclassifiedapplicationlist_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_getclassifiedapplicationlist_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_getclassifiedapplicationlist_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_getclassifiedapplicationlist_get_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_getclassifiedapplicationlist_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_getclassifiedapplicationlist_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_getclassifiedapplicationlist_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/getclassifiedapplicationlist', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20032',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_read_user_report_list_get(self, **kwargs):  # noqa: E501
        """v2_assurance_read_user_report_list_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_read_user_report_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_read_user_report_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_read_user_report_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_read_user_report_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_read_user_report_list_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_read_user_report_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_read_user_report_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/read-user-report-list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20045',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_scoredetails_post(self, **kwargs):  # noqa: E501
        """v2_assurance_scoredetails_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_scoredetails_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_scoredetails_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_scoredetails_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_scoredetails_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_scoredetails_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_scoredetails_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_scoredetails_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/scoredetails', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20036',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_topology_client_session_details_post(self, **kwargs):  # noqa: E501
        """v2_assurance_topology_client_session_details_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_topology_client_session_details_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceTopologyclientsessiondetailsBody body:
        :param str authorization:
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_topology_client_session_details_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_topology_client_session_details_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_topology_client_session_details_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_topology_client_session_details_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_topology_client_session_details_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceTopologyclientsessiondetailsBody body:
        :param str authorization:
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_topology_client_session_details_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/topology-client-session-details', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20037',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_topology_client_sessions_post(self, **kwargs):  # noqa: E501
        """v2_assurance_topology_client_sessions_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_topology_client_sessions_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceTopologyclientsessionsBody body:
        :param str authorization:
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_topology_client_sessions_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_topology_client_sessions_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_topology_client_sessions_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_topology_client_sessions_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_topology_client_sessions_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceTopologyclientsessionsBody body:
        :param str authorization:
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_topology_client_sessions_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/topology-client-sessions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20038',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_topology_client_summaries_post(self, **kwargs):  # noqa: E501
        """v2_assurance_topology_client_summaries_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_topology_client_summaries_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceTopologyclientsummariesBody body:
        :param str authorization:
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_topology_client_summaries_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_topology_client_summaries_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_topology_client_summaries_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_topology_client_summaries_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_topology_client_summaries_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceTopologyclientsummariesBody body:
        :param str authorization:
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_topology_client_summaries_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/topology-client-summaries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20039',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_topology_flows_post(self, **kwargs):  # noqa: E501
        """v2_assurance_topology_flows_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_topology_flows_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceTopologyflowsBody body:
        :param str authorization:
        :return: InlineResponse20040
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_topology_flows_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_topology_flows_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_topology_flows_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_topology_flows_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_topology_flows_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceTopologyflowsBody body:
        :param str authorization:
        :return: InlineResponse20040
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_topology_flows_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/topology-flows', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20040',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_topology_inventory_post(self, **kwargs):  # noqa: E501
        """v2_assurance_topology_inventory_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_topology_inventory_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceTopologyinventoryBody body:
        :param str authorization:
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_topology_inventory_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_topology_inventory_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_topology_inventory_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_topology_inventory_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_topology_inventory_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceTopologyinventoryBody body:
        :param str authorization:
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_topology_inventory_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/topology-inventory', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20041',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_topology_overview_post(self, **kwargs):  # noqa: E501
        """v2_assurance_topology_overview_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_topology_overview_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceTopologyoverviewBody body:
        :param str authorization:
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_topology_overview_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_topology_overview_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_topology_overview_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_topology_overview_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_topology_overview_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceTopologyoverviewBody body:
        :param str authorization:
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_topology_overview_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/topology-overview', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20042',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_topology_region_summary_post(self, **kwargs):  # noqa: E501
        """v2_assurance_topology_region_summary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_topology_region_summary_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceTopologyregionsummaryBody body:
        :param str authorization:
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_topology_region_summary_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_topology_region_summary_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_topology_region_summary_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_topology_region_summary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_topology_region_summary_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceTopologyregionsummaryBody body:
        :param str authorization:
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_topology_region_summary_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/topology-region-summary', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20043',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_topology_site_summaries_post(self, **kwargs):  # noqa: E501
        """v2_assurance_topology_site_summaries_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_topology_site_summaries_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceTopologysitesummariesBody body:
        :param str authorization:
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_topology_site_summaries_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_topology_site_summaries_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_topology_site_summaries_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_topology_site_summaries_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_topology_site_summaries_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceTopologysitesummariesBody body:
        :param str authorization:
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_topology_site_summaries_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/topology-site-summaries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20044',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_unclassifiedapplicationprofilesummary_post(self, **kwargs):  # noqa: E501
        """v2_assurance_unclassifiedapplicationprofilesummary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_unclassifiedapplicationprofilesummary_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_unclassifiedapplicationprofilesummary_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_unclassifiedapplicationprofilesummary_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_unclassifiedapplicationprofilesummary_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_unclassifiedapplicationprofilesummary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_unclassifiedapplicationprofilesummary_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_unclassifiedapplicationprofilesummary_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/unclassifiedapplicationprofilesummary', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_updateclassifiedapplication_post(self, **kwargs):  # noqa: E501
        """v2_assurance_updateclassifiedapplication_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_updateclassifiedapplication_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceUpdateclassifiedapplicationBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_updateclassifiedapplication_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_updateclassifiedapplication_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_updateclassifiedapplication_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_updateclassifiedapplication_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_updateclassifiedapplication_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssuranceUpdateclassifiedapplicationBody body:
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_updateclassifiedapplication_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/updateclassifiedapplication', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_assurance_version_post(self, **kwargs):  # noqa: E501
        """v2_assurance_version_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_version_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_assurance_version_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_assurance_version_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_assurance_version_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_assurance_version_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_assurance_version_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_assurance_version_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assurance/version', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_audit_logs_post(self, **kwargs):  # noqa: E501
        """v2_audit_logs_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_audit_logs_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditLogsBody1 body:
        :param str authorization:
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_audit_logs_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_audit_logs_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_audit_logs_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_audit_logs_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_audit_logs_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditLogsBody1 body:
        :param str authorization:
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_audit_logs_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/audit/logs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20048',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_childalertlist_post(self, **kwargs):  # noqa: E501
        """v2_childalertlist_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_childalertlist_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2ChildalertlistBody body:   **Field Descriptions**:<br/>  - __alertId__: Alert id of the parent alert<br/>  
        :param str authorization:
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_childalertlist_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_childalertlist_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_childalertlist_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_childalertlist_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_childalertlist_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2ChildalertlistBody body:   **Field Descriptions**:<br/>  - __alertId__: Alert id of the parent alert<br/>  
        :param str authorization:
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_childalertlist_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/childalertlist', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_device_device_id_lan_segments_post(self, device_id, **kwargs):  # noqa: E501
        """v2_device_device_id_lan_segments_post  # noqa: E501

        **API Description:**<br/> - Get route count for all the LAN Segments in a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_device_device_id_lan_segments_post(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param object body:
        :param str authorization:
        :return: InlineResponse200235
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_device_device_id_lan_segments_post_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_device_device_id_lan_segments_post_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v2_device_device_id_lan_segments_post_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v2_device_device_id_lan_segments_post  # noqa: E501

        **API Description:**<br/> - Get route count for all the LAN Segments in a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_device_device_id_lan_segments_post_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param object body:
        :param str authorization:
        :return: InlineResponse200235
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_device_device_id_lan_segments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v2_device_device_id_lan_segments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/device/{deviceId}/lan-segments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200235',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_device_device_id_topology_post(self, device_id, **kwargs):  # noqa: E501
        """v2_device_device_id_topology_post  # noqa: E501

        **API Description:**<br/> - Get the device topology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_device_device_id_topology_post(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param object body:
        :param str authorization:
        :return: InlineResponse200234
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_device_device_id_topology_post_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_device_device_id_topology_post_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def v2_device_device_id_topology_post_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """v2_device_device_id_topology_post  # noqa: E501

        **API Description:**<br/> - Get the device topology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_device_device_id_topology_post_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: (required)
        :param object body:
        :param str authorization:
        :return: InlineResponse200234
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_device_device_id_topology_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params or
                params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `v2_device_device_id_topology_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/device/{deviceId}/topology', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200234',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_extranet_consumers_usage_top_post(self, **kwargs):  # noqa: E501
        """v2_extranet_consumers_usage_top_post  # noqa: E501

        **API Description:**<br/> - Get extranet service top consumer usage stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_extranet_consumers_usage_top_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConsumersusageTopBody body:   **Field Descriptions**:<br/>  - __id__: the id of a producer/service<br/>  
        :param str authorization:
        :return: InlineResponse20078
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_extranet_consumers_usage_top_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_extranet_consumers_usage_top_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_extranet_consumers_usage_top_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_extranet_consumers_usage_top_post  # noqa: E501

        **API Description:**<br/> - Get extranet service top consumer usage stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_extranet_consumers_usage_top_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConsumersusageTopBody body:   **Field Descriptions**:<br/>  - __id__: the id of a producer/service<br/>  
        :param str authorization:
        :return: InlineResponse20078
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_extranet_consumers_usage_top_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/extranet/consumers-usage/top', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20078',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_extranet_lan_segments_usage_top_post(self, **kwargs):  # noqa: E501
        """v2_extranet_lan_segments_usage_top_post  # noqa: E501

        **API Description:**<br/> - Get extranet service top lan segment usage stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_extranet_lan_segments_usage_top_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LansegmentsusageTopBody body:   **Field Descriptions**:<br/>  - __id__: the id associated with an entity - consumer_id for consumer, and service_id for the producer/service<br/>  
        :param str authorization:
        :return: InlineResponse20079
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_extranet_lan_segments_usage_top_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_extranet_lan_segments_usage_top_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_extranet_lan_segments_usage_top_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_extranet_lan_segments_usage_top_post  # noqa: E501

        **API Description:**<br/> - Get extranet service top lan segment usage stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_extranet_lan_segments_usage_top_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LansegmentsusageTopBody body:   **Field Descriptions**:<br/>  - __id__: the id associated with an entity - consumer_id for consumer, and service_id for the producer/service<br/>  
        :param str authorization:
        :return: InlineResponse20079
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_extranet_lan_segments_usage_top_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/extranet/lan-segments-usage/top', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20079',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_extranet_service_overtime_consumption_post(self, **kwargs):  # noqa: E501
        """v2_extranet_service_overtime_consumption_post  # noqa: E501

        **API Description:**<br/> - Get extranet service cumulative consumption over timewindow  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_extranet_service_overtime_consumption_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:   **Field Descriptions**:<br/>  - __id__: the id associated with an entity - consumer_id for consumer, and service_id for the producer/service<br/>  
        :param str authorization:
        :return: InlineResponse20076
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_extranet_service_overtime_consumption_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_extranet_service_overtime_consumption_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_extranet_service_overtime_consumption_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_extranet_service_overtime_consumption_post  # noqa: E501

        **API Description:**<br/> - Get extranet service cumulative consumption over timewindow  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_extranet_service_overtime_consumption_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:   **Field Descriptions**:<br/>  - __id__: the id associated with an entity - consumer_id for consumer, and service_id for the producer/service<br/>  
        :param str authorization:
        :return: InlineResponse20076
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_extranet_service_overtime_consumption_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/extranet/service-overtime-consumption', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20076',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_extranet_sites_consumption_overview_post(self, **kwargs):  # noqa: E501
        """v2_extranet_sites_consumption_overview_post  # noqa: E501

        **API Description:**<br/> - Get extranet service consumption overview over timewindow  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_extranet_sites_consumption_overview_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:   **Field Descriptions**:<br/>  - __id__: the id associated with an entity - consumer_id for consumer, and service_id for the producer/service<br/>  
        :param str authorization:
        :return: InlineResponse20075
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_extranet_sites_consumption_overview_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_extranet_sites_consumption_overview_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_extranet_sites_consumption_overview_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_extranet_sites_consumption_overview_post  # noqa: E501

        **API Description:**<br/> - Get extranet service consumption overview over timewindow  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_extranet_sites_consumption_overview_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:   **Field Descriptions**:<br/>  - __id__: the id associated with an entity - consumer_id for consumer, and service_id for the producer/service<br/>  
        :param str authorization:
        :return: InlineResponse20075
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_extranet_sites_consumption_overview_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/extranet/sites-consumption-overview', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20075',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_extranet_sites_usage_post(self, **kwargs):  # noqa: E501
        """v2_extranet_sites_usage_post  # noqa: E501

        **API Description:**<br/> - Get extranet service sites usage stats v2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_extranet_sites_usage_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:   **Field Descriptions**:<br/>  - __id__: the id associated with an entity - consumer_id for consumer, and service_id for the producer/service<br/>  
        :param str authorization:
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_extranet_sites_usage_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_extranet_sites_usage_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_extranet_sites_usage_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_extranet_sites_usage_post  # noqa: E501

        **API Description:**<br/> - Get extranet service sites usage stats v2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_extranet_sites_usage_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:   **Field Descriptions**:<br/>  - __id__: the id associated with an entity - consumer_id for consumer, and service_id for the producer/service<br/>  
        :param str authorization:
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_extranet_sites_usage_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/extranet/sites-usage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20077',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_extranet_total_usage_post(self, **kwargs):  # noqa: E501
        """v2_extranet_total_usage_post  # noqa: E501

        **API Description:**<br/> - Get extranet service total usage stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_extranet_total_usage_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExtranetTotalusageBody body:   **Field Descriptions**:<br/>  - __id__: the ID associated with an entity - consumer_id for consumer, and service_id for the producer/service<br/>  
        :param str authorization:
        :return: InlineResponse20081
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_extranet_total_usage_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_extranet_total_usage_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_extranet_total_usage_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_extranet_total_usage_post  # noqa: E501

        **API Description:**<br/> - Get extranet service total usage stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_extranet_total_usage_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExtranetTotalusageBody body:   **Field Descriptions**:<br/>  - __id__: the ID associated with an entity - consumer_id for consumer, and service_id for the producer/service<br/>  
        :param str authorization:
        :return: InlineResponse20081
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_extranet_total_usage_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/extranet/total-usage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20081',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_extranets_monitoring_consumers_post(self, **kwargs):  # noqa: E501
        """v2_extranets_monitoring_consumers_post  # noqa: E501

        **API Description:**<br/> - Get consumer list for b2b producer service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_extranets_monitoring_consumers_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExtranetsmonitoringConsumersBody body:
        :param str authorization:
        :return: InlineResponse200144
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_extranets_monitoring_consumers_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_extranets_monitoring_consumers_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_extranets_monitoring_consumers_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_extranets_monitoring_consumers_post  # noqa: E501

        **API Description:**<br/> - Get consumer list for b2b producer service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_extranets_monitoring_consumers_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExtranetsmonitoringConsumersBody body:
        :param str authorization:
        :return: InlineResponse200144
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_extranets_monitoring_consumers_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/extranets-monitoring/consumers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200144',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_integration_getall_enterprise_id_get(self, enterprise_id, **kwargs):  # noqa: E501
        """v2_integration_getall_enterprise_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_integration_getall_enterprise_id_get(enterprise_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enterprise_id: Enterprise id (required)
        :param str authorization:
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_integration_getall_enterprise_id_get_with_http_info(enterprise_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_integration_getall_enterprise_id_get_with_http_info(enterprise_id, **kwargs)  # noqa: E501
            return data

    def v2_integration_getall_enterprise_id_get_with_http_info(self, enterprise_id, **kwargs):  # noqa: E501
        """v2_integration_getall_enterprise_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_integration_getall_enterprise_id_get_with_http_info(enterprise_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enterprise_id: Enterprise id (required)
        :param str authorization:
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enterprise_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_integration_getall_enterprise_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enterprise_id' is set
        if ('enterprise_id' not in params or
                params['enterprise_id'] is None):
            raise ValueError("Missing the required parameter `enterprise_id` when calling `v2_integration_getall_enterprise_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'enterprise_id' in params:
            path_params['enterpriseId'] = params['enterprise_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/integration/getall/{enterpriseId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_integration_integration_id_delete(self, integration_id, **kwargs):  # noqa: E501
        """v2_integration_integration_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_integration_integration_id_delete(integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_id: ID of the integration to be deleted (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_integration_integration_id_delete_with_http_info(integration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_integration_integration_id_delete_with_http_info(integration_id, **kwargs)  # noqa: E501
            return data

    def v2_integration_integration_id_delete_with_http_info(self, integration_id, **kwargs):  # noqa: E501
        """v2_integration_integration_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_integration_integration_id_delete_with_http_info(integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_id: ID of the integration to be deleted (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['integration_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_integration_integration_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'integration_id' is set
        if ('integration_id' not in params or
                params['integration_id'] is None):
            raise ValueError("Missing the required parameter `integration_id` when calling `v2_integration_integration_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'integration_id' in params:
            path_params['integrationId'] = params['integration_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/integration/{integrationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_integration_integration_id_put(self, integration_id, **kwargs):  # noqa: E501
        """v2_integration_integration_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_integration_integration_id_put(integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_id: integration id (required)
        :param IntegrationIntegrationIdBody body:   **Field Descriptions**:<br/>  - __enterprise__: ID of the enterprise<br/>  - __integrationType__: Type of integration<br/>  - __isActive__: __(Optional)__ Indicates whether the integration is active<br/>   - __nickName__: nick name of the integration<br/>  - __updatedBy__: __(Optional)__ ID of the user who updated the integration<br/>   
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_integration_integration_id_put_with_http_info(integration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_integration_integration_id_put_with_http_info(integration_id, **kwargs)  # noqa: E501
            return data

    def v2_integration_integration_id_put_with_http_info(self, integration_id, **kwargs):  # noqa: E501
        """v2_integration_integration_id_put  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_integration_integration_id_put_with_http_info(integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str integration_id: integration id (required)
        :param IntegrationIntegrationIdBody body:   **Field Descriptions**:<br/>  - __enterprise__: ID of the enterprise<br/>  - __integrationType__: Type of integration<br/>  - __isActive__: __(Optional)__ Indicates whether the integration is active<br/>   - __nickName__: nick name of the integration<br/>  - __updatedBy__: __(Optional)__ ID of the user who updated the integration<br/>   
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['integration_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_integration_integration_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'integration_id' is set
        if ('integration_id' not in params or
                params['integration_id'] is None):
            raise ValueError("Missing the required parameter `integration_id` when calling `v2_integration_integration_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'integration_id' in params:
            path_params['integrationId'] = params['integration_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/integration/{integrationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_integration_post(self, **kwargs):  # noqa: E501
        """v2_integration_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_integration_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2IntegrationBody body:   **Field Descriptions**:<br/>  - __createdBy__: __(Optional)__ ID of the user who created the integration<br/>   - __enterprise__: ID of the enterprise<br/>  - __integrationType__: Type of integration<br/>  - __isActive__: __(Optional)__ Indicates whether the integration is active<br/>   - __nickName__: Name of the integration<br/>  
        :param str authorization:
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_integration_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_integration_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_integration_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_integration_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_integration_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2IntegrationBody body:   **Field Descriptions**:<br/>  - __createdBy__: __(Optional)__ ID of the user who created the integration<br/>   - __enterprise__: ID of the enterprise<br/>  - __integrationType__: Type of integration<br/>  - __isActive__: __(Optional)__ Indicates whether the integration is active<br/>   - __nickName__: Name of the integration<br/>  
        :param str authorization:
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_integration_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/integration/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_integration_test_enterprise_id_integration_id_get(self, enterprise_id, integration_id, **kwargs):  # noqa: E501
        """v2_integration_test_enterprise_id_integration_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_integration_test_enterprise_id_integration_id_get(enterprise_id, integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enterprise_id: Enterprise id (required)
        :param str integration_id: Integration id (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_integration_test_enterprise_id_integration_id_get_with_http_info(enterprise_id, integration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_integration_test_enterprise_id_integration_id_get_with_http_info(enterprise_id, integration_id, **kwargs)  # noqa: E501
            return data

    def v2_integration_test_enterprise_id_integration_id_get_with_http_info(self, enterprise_id, integration_id, **kwargs):  # noqa: E501
        """v2_integration_test_enterprise_id_integration_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_integration_test_enterprise_id_integration_id_get_with_http_info(enterprise_id, integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enterprise_id: Enterprise id (required)
        :param str integration_id: Integration id (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enterprise_id', 'integration_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_integration_test_enterprise_id_integration_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enterprise_id' is set
        if ('enterprise_id' not in params or
                params['enterprise_id'] is None):
            raise ValueError("Missing the required parameter `enterprise_id` when calling `v2_integration_test_enterprise_id_integration_id_get`")  # noqa: E501
        # verify the required parameter 'integration_id' is set
        if ('integration_id' not in params or
                params['integration_id'] is None):
            raise ValueError("Missing the required parameter `integration_id` when calling `v2_integration_test_enterprise_id_integration_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'enterprise_id' in params:
            path_params['enterpriseId'] = params['enterprise_id']  # noqa: E501
        if 'integration_id' in params:
            path_params['integrationId'] = params['integration_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/integration/test/{enterpriseId}/{integrationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_bfd_post(self, **kwargs):  # noqa: E501
        """v2_monitoring_bfd_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_bfd_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringBfdBody body:
        :param str authorization:
        :return: InlineResponse200211
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_bfd_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_bfd_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_bfd_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_bfd_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_bfd_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringBfdBody body:
        :param str authorization:
        :return: InlineResponse200211
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_bfd_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/bfd', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200211',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_bgp_post(self, **kwargs):  # noqa: E501
        """v2_monitoring_bgp_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_bgp_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringBgpBody body:
        :param str authorization:
        :return: InlineResponse200212
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_bgp_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_bgp_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_bgp_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_bgp_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_bgp_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringBgpBody body:
        :param str authorization:
        :return: InlineResponse200212
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_bgp_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/bgp', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200212',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_circuits_bandwidth_post(self, **kwargs):  # noqa: E501
        """v2_monitoring_circuits_bandwidth_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_circuits_bandwidth_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200228
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_circuits_bandwidth_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_circuits_bandwidth_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_circuits_bandwidth_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_circuits_bandwidth_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_circuits_bandwidth_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200228
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_circuits_bandwidth_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/circuits/bandwidth', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200228',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_circuits_summary_post(self, **kwargs):  # noqa: E501
        """v2_monitoring_circuits_summary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_circuits_summary_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200229
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_circuits_summary_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_circuits_summary_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_circuits_summary_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_circuits_summary_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_circuits_summary_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200229
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_circuits_summary_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/circuits/summary', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200229',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_circuits_utilization_post(self, **kwargs):  # noqa: E501
        """v2_monitoring_circuits_utilization_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_circuits_utilization_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200230
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_circuits_utilization_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_circuits_utilization_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_circuits_utilization_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_circuits_utilization_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_circuits_utilization_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200230
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_circuits_utilization_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/circuits/utilization', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200230',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_circuits_visualization_post(self, **kwargs):  # noqa: E501
        """v2_monitoring_circuits_visualization_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_circuits_visualization_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200255
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_circuits_visualization_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_circuits_visualization_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_circuits_visualization_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_circuits_visualization_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_circuits_visualization_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200255
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_circuits_visualization_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/circuits/visualization', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200255',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_circuitsummary_circuit_name_post(self, circuit_name, **kwargs):  # noqa: E501
        """v2_monitoring_circuitsummary_circuit_name_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_circuitsummary_circuit_name_post(circuit_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str circuit_name: (required)
        :param CircuitsummaryCircuitnameBody body:
        :param str authorization:
        :return: InlineResponse200245
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_circuitsummary_circuit_name_post_with_http_info(circuit_name, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_circuitsummary_circuit_name_post_with_http_info(circuit_name, **kwargs)  # noqa: E501
            return data

    def v2_monitoring_circuitsummary_circuit_name_post_with_http_info(self, circuit_name, **kwargs):  # noqa: E501
        """v2_monitoring_circuitsummary_circuit_name_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_circuitsummary_circuit_name_post_with_http_info(circuit_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str circuit_name: (required)
        :param CircuitsummaryCircuitnameBody body:
        :param str authorization:
        :return: InlineResponse200245
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['circuit_name', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_circuitsummary_circuit_name_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'circuit_name' is set
        if ('circuit_name' not in params or
                params['circuit_name'] is None):
            raise ValueError("Missing the required parameter `circuit_name` when calling `v2_monitoring_circuitsummary_circuit_name_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'circuit_name' in params:
            path_params['circuit-name'] = params['circuit_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/circuitsummary/{circuit-name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200245',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_extranet_log_details_post(self, **kwargs):  # noqa: E501
        """v2_monitoring_extranet_log_details_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_extranet_log_details_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExtranetLogdetailsBody body:
        :param str authorization:
        :return: InlineResponse200238
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_extranet_log_details_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_extranet_log_details_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_extranet_log_details_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_extranet_log_details_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_extranet_log_details_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExtranetLogdetailsBody body:
        :param str authorization:
        :return: InlineResponse200238
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_extranet_log_details_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/extranet/log-details', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200238',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_extranet_service_status_details_get(self, **kwargs):  # noqa: E501
        """v2_monitoring_extranet_service_status_details_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_extranet_service_status_details_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200236
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_extranet_service_status_details_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_extranet_service_status_details_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_extranet_service_status_details_get_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_extranet_service_status_details_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_extranet_service_status_details_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200236
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_extranet_service_status_details_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/extranet/service-status/details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200236',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_extranet_service_status_get(self, **kwargs):  # noqa: E501
        """v2_monitoring_extranet_service_status_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_extranet_service_status_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200237
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_extranet_service_status_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_extranet_service_status_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_extranet_service_status_get_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_extranet_service_status_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_extranet_service_status_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200237
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_extranet_service_status_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/extranet/service-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200237',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_extranet_site_status_get(self, **kwargs):  # noqa: E501
        """v2_monitoring_extranet_site_status_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_extranet_site_status_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200236
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_extranet_site_status_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_extranet_site_status_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_extranet_site_status_get_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_extranet_site_status_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_extranet_site_status_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200236
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_extranet_site_status_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/extranet/site-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200236',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_extranet_status_details_get(self, **kwargs):  # noqa: E501
        """v2_monitoring_extranet_status_details_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_extranet_status_details_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200239
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_extranet_status_details_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_extranet_status_details_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_extranet_status_details_get_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_extranet_status_details_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_extranet_status_details_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse200239
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_extranet_status_details_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/extranet/status-details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200239',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_ike_error_history_post(self, **kwargs):  # noqa: E501
        """v2_monitoring_ike_error_history_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_ike_error_history_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringIkeerrorhistoryBody body:
        :param str authorization:
        :return: InlineResponse200242
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_ike_error_history_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_ike_error_history_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_ike_error_history_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_ike_error_history_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_ike_error_history_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringIkeerrorhistoryBody body:
        :param str authorization:
        :return: InlineResponse200242
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_ike_error_history_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/ike-error-history', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200242',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_interface_post(self, **kwargs):  # noqa: E501
        """v2_monitoring_interface_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_interface_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringInterfaceBody body:
        :param str authorization:
        :return: InlineResponse200243
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_interface_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_interface_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_interface_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_interface_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_interface_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringInterfaceBody body:
        :param str authorization:
        :return: InlineResponse200243
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_interface_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/interface', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200243',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_ipsec_post(self, **kwargs):  # noqa: E501
        """v2_monitoring_ipsec_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_ipsec_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringIpsecBody body:
        :param str authorization:
        :return: InlineResponse200241
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_ipsec_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_ipsec_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_ipsec_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_ipsec_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_ipsec_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringIpsecBody body:
        :param str authorization:
        :return: InlineResponse200241
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_ipsec_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/ipsec', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200241',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_ospf_post(self, **kwargs):  # noqa: E501
        """v2_monitoring_ospf_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_ospf_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringOspfBody body:
        :param str authorization:
        :return: InlineResponse200244
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_ospf_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_ospf_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_ospf_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_ospf_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_ospf_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringOspfBody body:
        :param str authorization:
        :return: InlineResponse200244
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_ospf_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/ospf', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200244',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_policy_post(self, **kwargs):  # noqa: E501
        """v2_monitoring_policy_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_policy_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringPolicyBody body:
        :param str authorization:
        :return: InlineResponse200246
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_policy_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_policy_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_policy_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_policy_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_policy_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringPolicyBody body:
        :param str authorization:
        :return: InlineResponse200246
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_policy_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/policy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200246',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_queue_instant_post(self, **kwargs):  # noqa: E501
        """v2_monitoring_queue_instant_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_queue_instant_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringQueueinstantBody body:
        :param str authorization:
        :return: InlineResponse200247
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_queue_instant_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_queue_instant_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_queue_instant_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_queue_instant_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_queue_instant_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringQueueinstantBody body:
        :param str authorization:
        :return: InlineResponse200247
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_queue_instant_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/queue-instant', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200247',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_queue_post(self, **kwargs):  # noqa: E501
        """v2_monitoring_queue_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_queue_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringQueueBody body:
        :param str authorization:
        :return: InlineResponse200248
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_queue_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_queue_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_queue_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_queue_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_queue_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringQueueBody body:
        :param str authorization:
        :return: InlineResponse200248
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_queue_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/queue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200248',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_segment_route_counts_post(self, **kwargs):  # noqa: E501
        """v2_monitoring_segment_route_counts_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_segment_route_counts_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200249
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_segment_route_counts_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_segment_route_counts_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_segment_route_counts_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_segment_route_counts_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_segment_route_counts_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200249
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_segment_route_counts_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/segment-route-counts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200249',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_site_circuits_bandwidth_site_id_post(self, site_id, **kwargs):  # noqa: E501
        """v2_monitoring_site_circuits_bandwidth_site_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_site_circuits_bandwidth_site_id_post(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param BandwidthSiteIdBody body:
        :param str authorization:
        :return: InlineResponse200251
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_site_circuits_bandwidth_site_id_post_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_site_circuits_bandwidth_site_id_post_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def v2_monitoring_site_circuits_bandwidth_site_id_post_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """v2_monitoring_site_circuits_bandwidth_site_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_site_circuits_bandwidth_site_id_post_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param BandwidthSiteIdBody body:
        :param str authorization:
        :return: InlineResponse200251
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_site_circuits_bandwidth_site_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `v2_monitoring_site_circuits_bandwidth_site_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/site-circuits/bandwidth/{siteId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200251',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_site_twamp_site_id_post(self, site_id, **kwargs):  # noqa: E501
        """v2_monitoring_site_twamp_site_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_site_twamp_site_id_post(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param SitetwampSiteIdBody body:
        :param str authorization:
        :return: InlineResponse200253
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_site_twamp_site_id_post_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_site_twamp_site_id_post_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def v2_monitoring_site_twamp_site_id_post_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """v2_monitoring_site_twamp_site_id_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_site_twamp_site_id_post_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param SitetwampSiteIdBody body:
        :param str authorization:
        :return: InlineResponse200253
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_site_twamp_site_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `v2_monitoring_site_twamp_site_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/site-twamp/{siteId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200253',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_system_generic_post(self, **kwargs):  # noqa: E501
        """v2_monitoring_system_generic_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_system_generic_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200240
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_system_generic_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_system_generic_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_system_generic_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_system_generic_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_system_generic_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200240
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_system_generic_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/system/generic', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200240',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_system_post(self, **kwargs):  # noqa: E501
        """v2_monitoring_system_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_system_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200240
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_system_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_system_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_system_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_system_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_system_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse200240
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_system_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/system', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200240',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_monitoring_twamp_post(self, **kwargs):  # noqa: E501
        """v2_monitoring_twamp_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_twamp_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringTwampBody body:
        :param str authorization:
        :return: InlineResponse200254
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_monitoring_twamp_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_monitoring_twamp_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_monitoring_twamp_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_monitoring_twamp_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_monitoring_twamp_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MonitoringTwampBody body:
        :param str authorization:
        :return: InlineResponse200254
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_monitoring_twamp_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/monitoring/twamp', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200254',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_notification_create_post(self, **kwargs):  # noqa: E501
        """v2_notification_create_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_notification_create_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NotificationCreateBody body:   **Field Descriptions**:<br/>  - __description__: __(Optional)__ Description of notification<br/>   - __duration__: Time interval for notification<br/>  - __enabled__: Enable or disable notification<br/>  - __frequency__: Frequency of notifying a continuing alert<br/>  - __messageBody__: __(Optional)__ Message body to prepend to actual message<br/>   - __notificationName__: Name of the notification record<br/>  - __opsgenieList__: __(Optional)__ List of opsgenie recipients<br/>   - __opsrampList__: __(Optional)__ List of opsramp recipients<br/>   - __recipientList__: Non-empty list of email recipients<br/>  - __teamsList__: __(Optional)__ List of teams recipients<br/>   - __ruleIdList__: List of rule ids<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_notification_create_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_notification_create_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_notification_create_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_notification_create_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_notification_create_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NotificationCreateBody body:   **Field Descriptions**:<br/>  - __description__: __(Optional)__ Description of notification<br/>   - __duration__: Time interval for notification<br/>  - __enabled__: Enable or disable notification<br/>  - __frequency__: Frequency of notifying a continuing alert<br/>  - __messageBody__: __(Optional)__ Message body to prepend to actual message<br/>   - __notificationName__: Name of the notification record<br/>  - __opsgenieList__: __(Optional)__ List of opsgenie recipients<br/>   - __opsrampList__: __(Optional)__ List of opsramp recipients<br/>   - __recipientList__: Non-empty list of email recipients<br/>  - __teamsList__: __(Optional)__ List of teams recipients<br/>   - __ruleIdList__: List of rule ids<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_notification_create_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/notification/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_notification_delete_post(self, **kwargs):  # noqa: E501
        """v2_notification_delete_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_notification_delete_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NotificationDeleteBody body:   **Field Descriptions**:<br/>  - __notificationIdList__: List of notification ids to delete notification records<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_notification_delete_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_notification_delete_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_notification_delete_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_notification_delete_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_notification_delete_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NotificationDeleteBody body:   **Field Descriptions**:<br/>  - __notificationIdList__: List of notification ids to delete notification records<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_notification_delete_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/notification/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_notification_enabledisable_post(self, **kwargs):  # noqa: E501
        """v2_notification_enabledisable_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_notification_enabledisable_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NotificationEnabledisableBody body:   **Field Descriptions**:<br/>  - __enable__: Enable or disable. True means enable<br/>  - __notificationIdList__: List of notification ids to enable disable<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_notification_enabledisable_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_notification_enabledisable_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_notification_enabledisable_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_notification_enabledisable_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_notification_enabledisable_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NotificationEnabledisableBody body:   **Field Descriptions**:<br/>  - __enable__: Enable or disable. True means enable<br/>  - __notificationIdList__: List of notification ids to enable disable<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_notification_enabledisable_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/notification/enabledisable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_notification_update_post(self, **kwargs):  # noqa: E501
        """v2_notification_update_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_notification_update_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NotificationUpdateBody body:   **Field Descriptions**:<br/>  - __description__: __(Optional)__ Description of notification<br/>   - __duration__: Time interval for notification<br/>  - __enabled__: Enable or disable notification<br/>  - __frequency__: Frequency of notifying a continuing alert<br/>  - __messageBody__: __(Optional)__ Message body to prepend to actual message<br/>   - __notificationName__: Name of the notification record<br/>  - __opsgenieList__: __(Optional)__ List of opsgenie recipients<br/>   - __opsrampList__: __(Optional)__ List of opsramp recipients<br/>   - __recipientList__: Non-empty list of email recipients<br/>  - __teamsList__: __(Optional)__ List of teams recipients<br/>   - __notificationIdList__: List of notification ids to update<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_notification_update_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_notification_update_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_notification_update_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_notification_update_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_notification_update_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NotificationUpdateBody body:   **Field Descriptions**:<br/>  - __description__: __(Optional)__ Description of notification<br/>   - __duration__: Time interval for notification<br/>  - __enabled__: Enable or disable notification<br/>  - __frequency__: Frequency of notifying a continuing alert<br/>  - __messageBody__: __(Optional)__ Message body to prepend to actual message<br/>   - __notificationName__: Name of the notification record<br/>  - __opsgenieList__: __(Optional)__ List of opsgenie recipients<br/>   - __opsrampList__: __(Optional)__ List of opsramp recipients<br/>   - __recipientList__: Non-empty list of email recipients<br/>  - __teamsList__: __(Optional)__ List of teams recipients<br/>   - __notificationIdList__: List of notification ids to update<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_notification_update_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/notification/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_notificationlist_post(self, **kwargs):  # noqa: E501
        """v2_notificationlist_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_notificationlist_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_notificationlist_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_notificationlist_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_notificationlist_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_notificationlist_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_notificationlist_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_notificationlist_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/notificationlist', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_notificationmutelist_create_post(self, **kwargs):  # noqa: E501
        """v2_notificationmutelist_create_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_notificationmutelist_create_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:   **Field Descriptions**:<br/>  - __alertId__: Alert id of the alert to create allowlist/mutelist for<br/>  - __noteText__: __(Optional)__ Optional note<br/>   
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_notificationmutelist_create_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_notificationmutelist_create_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_notificationmutelist_create_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_notificationmutelist_create_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_notificationmutelist_create_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:   **Field Descriptions**:<br/>  - __alertId__: Alert id of the alert to create allowlist/mutelist for<br/>  - __noteText__: __(Optional)__ Optional note<br/>   
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_notificationmutelist_create_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/notificationmutelist/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_notificationmutelist_deletebyalertid_alert_id_delete(self, alert_id, **kwargs):  # noqa: E501
        """v2_notificationmutelist_deletebyalertid_alert_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_notificationmutelist_deletebyalertid_alert_id_delete(alert_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_id: Alert id of the alert to delete allowlist/mutelist for (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_notificationmutelist_deletebyalertid_alert_id_delete_with_http_info(alert_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_notificationmutelist_deletebyalertid_alert_id_delete_with_http_info(alert_id, **kwargs)  # noqa: E501
            return data

    def v2_notificationmutelist_deletebyalertid_alert_id_delete_with_http_info(self, alert_id, **kwargs):  # noqa: E501
        """v2_notificationmutelist_deletebyalertid_alert_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_notificationmutelist_deletebyalertid_alert_id_delete_with_http_info(alert_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str alert_id: Alert id of the alert to delete allowlist/mutelist for (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_notificationmutelist_deletebyalertid_alert_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_id' is set
        if ('alert_id' not in params or
                params['alert_id'] is None):
            raise ValueError("Missing the required parameter `alert_id` when calling `v2_notificationmutelist_deletebyalertid_alert_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_id' in params:
            path_params['alertId'] = params['alert_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/notificationmutelist/deletebyalertid/{alertId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_notificationmutelist_deletebyentityid_entity_id_delete(self, entity_id, **kwargs):  # noqa: E501
        """v2_notificationmutelist_deletebyentityid_entity_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_notificationmutelist_deletebyentityid_entity_id_delete(entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_id: Entity id of the alert to delete allowlist/mutelist for (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_notificationmutelist_deletebyentityid_entity_id_delete_with_http_info(entity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_notificationmutelist_deletebyentityid_entity_id_delete_with_http_info(entity_id, **kwargs)  # noqa: E501
            return data

    def v2_notificationmutelist_deletebyentityid_entity_id_delete_with_http_info(self, entity_id, **kwargs):  # noqa: E501
        """v2_notificationmutelist_deletebyentityid_entity_id_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_notificationmutelist_deletebyentityid_entity_id_delete_with_http_info(entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_id: Entity id of the alert to delete allowlist/mutelist for (required)
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_notificationmutelist_deletebyentityid_entity_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `v2_notificationmutelist_deletebyentityid_entity_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_id' in params:
            path_params['entityId'] = params['entity_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/notificationmutelist/deletebyentityid/{entityId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_notificationmutelist_rule_id_get(self, rule_id, **kwargs):  # noqa: E501
        """v2_notificationmutelist_rule_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_notificationmutelist_rule_id_get(rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule_id: Alert id of the alert to retrieve allowlist/mutelist for (required)
        :param str authorization:
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_notificationmutelist_rule_id_get_with_http_info(rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_notificationmutelist_rule_id_get_with_http_info(rule_id, **kwargs)  # noqa: E501
            return data

    def v2_notificationmutelist_rule_id_get_with_http_info(self, rule_id, **kwargs):  # noqa: E501
        """v2_notificationmutelist_rule_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_notificationmutelist_rule_id_get_with_http_info(rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rule_id: Alert id of the alert to retrieve allowlist/mutelist for (required)
        :param str authorization:
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_notificationmutelist_rule_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `v2_notificationmutelist_rule_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule_id' in params:
            path_params['ruleId'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/notificationmutelist/{ruleId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_parentalertlist_post(self, **kwargs):  # noqa: E501
        """v2_parentalertlist_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_parentalertlist_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_parentalertlist_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_parentalertlist_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_parentalertlist_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_parentalertlist_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_parentalertlist_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :param str authorization:
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_parentalertlist_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/parentalertlist', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rule_enabledisable_post(self, **kwargs):  # noqa: E501
        """v2_rule_enabledisable_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rule_enabledisable_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RuleEnabledisableBody body:   **Field Descriptions**:<br/>  - __enable__: Enable or disable. True means enable<br/>  - __ruleIdList__: List of rule ids to enable/disable<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rule_enabledisable_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rule_enabledisable_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rule_enabledisable_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_rule_enabledisable_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rule_enabledisable_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RuleEnabledisableBody body:   **Field Descriptions**:<br/>  - __enable__: Enable or disable. True means enable<br/>  - __ruleIdList__: List of rule ids to enable/disable<br/>  
        :param str authorization:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rule_enabledisable_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/rule/enabledisable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_rulelist_post(self, **kwargs):  # noqa: E501
        """v2_rulelist_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rulelist_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_rulelist_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_rulelist_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_rulelist_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_rulelist_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_rulelist_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_rulelist_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/rulelist', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_site_site_id_detail_post(self, site_id, **kwargs):  # noqa: E501
        """v2_site_site_id_detail_post  # noqa: E501

        **API Description:**<br/> - Get site by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_site_site_id_detail_post(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param object body:
        :param str authorization:
        :return: InlineResponse200250
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_site_site_id_detail_post_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_site_site_id_detail_post_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def v2_site_site_id_detail_post_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """v2_site_site_id_detail_post  # noqa: E501

        **API Description:**<br/> - Get site by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_site_site_id_detail_post_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param object body:
        :param str authorization:
        :return: InlineResponse200250
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_site_site_id_detail_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `v2_site_site_id_detail_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/site/{siteId}/detail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200250',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_site_site_id_lan_segments_post(self, site_id, **kwargs):  # noqa: E501
        """v2_site_site_id_lan_segments_post  # noqa: E501

        **API Description:**<br/> - Get route count for all the LAN Segments in a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_site_site_id_lan_segments_post(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param object body:
        :param str authorization:
        :return: InlineResponse200235
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_site_site_id_lan_segments_post_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_site_site_id_lan_segments_post_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def v2_site_site_id_lan_segments_post_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """v2_site_site_id_lan_segments_post  # noqa: E501

        **API Description:**<br/> - Get route count for all the LAN Segments in a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_site_site_id_lan_segments_post_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param object body:
        :param str authorization:
        :return: InlineResponse200235
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_site_site_id_lan_segments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `v2_site_site_id_lan_segments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/site/{siteId}/lan-segments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200235',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_site_site_id_topology_post(self, site_id, **kwargs):  # noqa: E501
        """v2_site_site_id_topology_post  # noqa: E501

        **API Description:**<br/> - Get the site topology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_site_site_id_topology_post(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param object body:
        :param str authorization:
        :return: InlineResponse200234
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_site_site_id_topology_post_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_site_site_id_topology_post_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def v2_site_site_id_topology_post_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """v2_site_site_id_topology_post  # noqa: E501

        **API Description:**<br/> - Get the site topology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_site_site_id_topology_post_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: (required)
        :param object body:
        :param str authorization:
        :return: InlineResponse200234
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_site_site_id_topology_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `v2_site_site_id_topology_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/site/{siteId}/topology', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200234',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_version_post(self, **kwargs):  # noqa: E501
        """v2_version_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_version_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_version_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_version_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_version_post_with_http_info(self, **kwargs):  # noqa: E501
        """v2_version_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_version_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_version_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/version', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
