# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200112Ospfv2Process(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admin_distance': 'str',
        'areas': 'list[InlineResponse200112Ospfv2ProcessAreas]',
        'auto_router_id': 'str',
        'default_originate': 'str',
        'id': 'str',
        'redistributed_protocols': 'list[InlineResponse200112Ospfv2ProcessRedistributedProtocols]',
        'router_id': 'str'
    }

    attribute_map = {
        'admin_distance': 'adminDistance',
        'areas': 'areas',
        'auto_router_id': 'autoRouterId',
        'default_originate': 'defaultOriginate',
        'id': 'id',
        'redistributed_protocols': 'redistributedProtocols',
        'router_id': 'routerId'
    }

    def __init__(self, admin_distance=None, areas=None, auto_router_id=None, default_originate=None, id=None, redistributed_protocols=None, router_id=None):  # noqa: E501
        """InlineResponse200112Ospfv2Process - a model defined in Swagger"""  # noqa: E501
        self._admin_distance = None
        self._areas = None
        self._auto_router_id = None
        self._default_originate = None
        self._id = None
        self._redistributed_protocols = None
        self._router_id = None
        self.discriminator = None
        if admin_distance is not None:
            self.admin_distance = admin_distance
        if areas is not None:
            self.areas = areas
        if auto_router_id is not None:
            self.auto_router_id = auto_router_id
        if default_originate is not None:
            self.default_originate = default_originate
        if id is not None:
            self.id = id
        if redistributed_protocols is not None:
            self.redistributed_protocols = redistributed_protocols
        if router_id is not None:
            self.router_id = router_id

    @property
    def admin_distance(self):
        """Gets the admin_distance of this InlineResponse200112Ospfv2Process.  # noqa: E501


        :return: The admin_distance of this InlineResponse200112Ospfv2Process.  # noqa: E501
        :rtype: str
        """
        return self._admin_distance

    @admin_distance.setter
    def admin_distance(self, admin_distance):
        """Sets the admin_distance of this InlineResponse200112Ospfv2Process.


        :param admin_distance: The admin_distance of this InlineResponse200112Ospfv2Process.  # noqa: E501
        :type: str
        """

        self._admin_distance = admin_distance

    @property
    def areas(self):
        """Gets the areas of this InlineResponse200112Ospfv2Process.  # noqa: E501


        :return: The areas of this InlineResponse200112Ospfv2Process.  # noqa: E501
        :rtype: list[InlineResponse200112Ospfv2ProcessAreas]
        """
        return self._areas

    @areas.setter
    def areas(self, areas):
        """Sets the areas of this InlineResponse200112Ospfv2Process.


        :param areas: The areas of this InlineResponse200112Ospfv2Process.  # noqa: E501
        :type: list[InlineResponse200112Ospfv2ProcessAreas]
        """

        self._areas = areas

    @property
    def auto_router_id(self):
        """Gets the auto_router_id of this InlineResponse200112Ospfv2Process.  # noqa: E501


        :return: The auto_router_id of this InlineResponse200112Ospfv2Process.  # noqa: E501
        :rtype: str
        """
        return self._auto_router_id

    @auto_router_id.setter
    def auto_router_id(self, auto_router_id):
        """Sets the auto_router_id of this InlineResponse200112Ospfv2Process.


        :param auto_router_id: The auto_router_id of this InlineResponse200112Ospfv2Process.  # noqa: E501
        :type: str
        """

        self._auto_router_id = auto_router_id

    @property
    def default_originate(self):
        """Gets the default_originate of this InlineResponse200112Ospfv2Process.  # noqa: E501


        :return: The default_originate of this InlineResponse200112Ospfv2Process.  # noqa: E501
        :rtype: str
        """
        return self._default_originate

    @default_originate.setter
    def default_originate(self, default_originate):
        """Sets the default_originate of this InlineResponse200112Ospfv2Process.


        :param default_originate: The default_originate of this InlineResponse200112Ospfv2Process.  # noqa: E501
        :type: str
        """

        self._default_originate = default_originate

    @property
    def id(self):
        """Gets the id of this InlineResponse200112Ospfv2Process.  # noqa: E501


        :return: The id of this InlineResponse200112Ospfv2Process.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200112Ospfv2Process.


        :param id: The id of this InlineResponse200112Ospfv2Process.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def redistributed_protocols(self):
        """Gets the redistributed_protocols of this InlineResponse200112Ospfv2Process.  # noqa: E501


        :return: The redistributed_protocols of this InlineResponse200112Ospfv2Process.  # noqa: E501
        :rtype: list[InlineResponse200112Ospfv2ProcessRedistributedProtocols]
        """
        return self._redistributed_protocols

    @redistributed_protocols.setter
    def redistributed_protocols(self, redistributed_protocols):
        """Sets the redistributed_protocols of this InlineResponse200112Ospfv2Process.


        :param redistributed_protocols: The redistributed_protocols of this InlineResponse200112Ospfv2Process.  # noqa: E501
        :type: list[InlineResponse200112Ospfv2ProcessRedistributedProtocols]
        """

        self._redistributed_protocols = redistributed_protocols

    @property
    def router_id(self):
        """Gets the router_id of this InlineResponse200112Ospfv2Process.  # noqa: E501


        :return: The router_id of this InlineResponse200112Ospfv2Process.  # noqa: E501
        :rtype: str
        """
        return self._router_id

    @router_id.setter
    def router_id(self, router_id):
        """Sets the router_id of this InlineResponse200112Ospfv2Process.


        :param router_id: The router_id of this InlineResponse200112Ospfv2Process.  # noqa: E501
        :type: str
        """

        self._router_id = router_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200112Ospfv2Process, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200112Ospfv2Process):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
