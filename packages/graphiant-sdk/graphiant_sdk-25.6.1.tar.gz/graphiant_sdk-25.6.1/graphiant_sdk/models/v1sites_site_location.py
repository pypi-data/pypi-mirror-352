# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1sitesSiteLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_line1': 'str',
        'address_line2': 'str',
        'city': 'str',
        'country': 'str',
        'country_code': 'str',
        'latitude': 'str',
        'longitude': 'str',
        'notes': 'str',
        'province_code': 'str',
        'state': 'str',
        'state_code': 'str'
    }

    attribute_map = {
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'city': 'city',
        'country': 'country',
        'country_code': 'countryCode',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'notes': 'notes',
        'province_code': 'provinceCode',
        'state': 'state',
        'state_code': 'stateCode'
    }

    def __init__(self, address_line1=None, address_line2=None, city=None, country=None, country_code=None, latitude=None, longitude=None, notes=None, province_code=None, state=None, state_code=None):  # noqa: E501
        """V1sitesSiteLocation - a model defined in Swagger"""  # noqa: E501
        self._address_line1 = None
        self._address_line2 = None
        self._city = None
        self._country = None
        self._country_code = None
        self._latitude = None
        self._longitude = None
        self._notes = None
        self._province_code = None
        self._state = None
        self._state_code = None
        self.discriminator = None
        if address_line1 is not None:
            self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if country_code is not None:
            self.country_code = country_code
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if notes is not None:
            self.notes = notes
        if province_code is not None:
            self.province_code = province_code
        if state is not None:
            self.state = state
        if state_code is not None:
            self.state_code = state_code

    @property
    def address_line1(self):
        """Gets the address_line1 of this V1sitesSiteLocation.  # noqa: E501


        :return: The address_line1 of this V1sitesSiteLocation.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this V1sitesSiteLocation.


        :param address_line1: The address_line1 of this V1sitesSiteLocation.  # noqa: E501
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this V1sitesSiteLocation.  # noqa: E501


        :return: The address_line2 of this V1sitesSiteLocation.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this V1sitesSiteLocation.


        :param address_line2: The address_line2 of this V1sitesSiteLocation.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def city(self):
        """Gets the city of this V1sitesSiteLocation.  # noqa: E501


        :return: The city of this V1sitesSiteLocation.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this V1sitesSiteLocation.


        :param city: The city of this V1sitesSiteLocation.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this V1sitesSiteLocation.  # noqa: E501


        :return: The country of this V1sitesSiteLocation.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this V1sitesSiteLocation.


        :param country: The country of this V1sitesSiteLocation.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this V1sitesSiteLocation.  # noqa: E501


        :return: The country_code of this V1sitesSiteLocation.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this V1sitesSiteLocation.


        :param country_code: The country_code of this V1sitesSiteLocation.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def latitude(self):
        """Gets the latitude of this V1sitesSiteLocation.  # noqa: E501


        :return: The latitude of this V1sitesSiteLocation.  # noqa: E501
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this V1sitesSiteLocation.


        :param latitude: The latitude of this V1sitesSiteLocation.  # noqa: E501
        :type: str
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this V1sitesSiteLocation.  # noqa: E501


        :return: The longitude of this V1sitesSiteLocation.  # noqa: E501
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this V1sitesSiteLocation.


        :param longitude: The longitude of this V1sitesSiteLocation.  # noqa: E501
        :type: str
        """

        self._longitude = longitude

    @property
    def notes(self):
        """Gets the notes of this V1sitesSiteLocation.  # noqa: E501


        :return: The notes of this V1sitesSiteLocation.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this V1sitesSiteLocation.


        :param notes: The notes of this V1sitesSiteLocation.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def province_code(self):
        """Gets the province_code of this V1sitesSiteLocation.  # noqa: E501


        :return: The province_code of this V1sitesSiteLocation.  # noqa: E501
        :rtype: str
        """
        return self._province_code

    @province_code.setter
    def province_code(self, province_code):
        """Sets the province_code of this V1sitesSiteLocation.


        :param province_code: The province_code of this V1sitesSiteLocation.  # noqa: E501
        :type: str
        """

        self._province_code = province_code

    @property
    def state(self):
        """Gets the state of this V1sitesSiteLocation.  # noqa: E501


        :return: The state of this V1sitesSiteLocation.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this V1sitesSiteLocation.


        :param state: The state of this V1sitesSiteLocation.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def state_code(self):
        """Gets the state_code of this V1sitesSiteLocation.  # noqa: E501


        :return: The state_code of this V1sitesSiteLocation.  # noqa: E501
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this V1sitesSiteLocation.


        :param state_code: The state_code of this V1sitesSiteLocation.  # noqa: E501
        :type: str
        """

        self._state_code = state_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1sitesSiteLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1sitesSiteLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
