# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20097PolicyAuto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_propagate': 'str',
        'excluded_prefixes': 'list[str]'
    }

    attribute_map = {
        'auto_propagate': 'autoPropagate',
        'excluded_prefixes': 'excludedPrefixes'
    }

    def __init__(self, auto_propagate=None, excluded_prefixes=None):  # noqa: E501
        """InlineResponse20097PolicyAuto - a model defined in Swagger"""  # noqa: E501
        self._auto_propagate = None
        self._excluded_prefixes = None
        self.discriminator = None
        if auto_propagate is not None:
            self.auto_propagate = auto_propagate
        if excluded_prefixes is not None:
            self.excluded_prefixes = excluded_prefixes

    @property
    def auto_propagate(self):
        """Gets the auto_propagate of this InlineResponse20097PolicyAuto.  # noqa: E501


        :return: The auto_propagate of this InlineResponse20097PolicyAuto.  # noqa: E501
        :rtype: str
        """
        return self._auto_propagate

    @auto_propagate.setter
    def auto_propagate(self, auto_propagate):
        """Sets the auto_propagate of this InlineResponse20097PolicyAuto.


        :param auto_propagate: The auto_propagate of this InlineResponse20097PolicyAuto.  # noqa: E501
        :type: str
        """

        self._auto_propagate = auto_propagate

    @property
    def excluded_prefixes(self):
        """Gets the excluded_prefixes of this InlineResponse20097PolicyAuto.  # noqa: E501


        :return: The excluded_prefixes of this InlineResponse20097PolicyAuto.  # noqa: E501
        :rtype: list[str]
        """
        return self._excluded_prefixes

    @excluded_prefixes.setter
    def excluded_prefixes(self, excluded_prefixes):
        """Sets the excluded_prefixes of this InlineResponse20097PolicyAuto.


        :param excluded_prefixes: The excluded_prefixes of this InlineResponse20097PolicyAuto.  # noqa: E501
        :type: list[str]
        """

        self._excluded_prefixes = excluded_prefixes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20097PolicyAuto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20097PolicyAuto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
