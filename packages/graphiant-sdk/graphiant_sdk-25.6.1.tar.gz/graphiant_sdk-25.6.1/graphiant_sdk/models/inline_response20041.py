# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20041(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_names': 'list[str]',
        'client_sites': 'list[InlineResponse20035ClientEndpointSite]',
        'regions': 'list[InlineResponse200224Region]',
        'server_sites': 'list[InlineResponse20035ClientEndpointSite]',
        'topology_change_ts': 'list[V1devicesbringuptokenValidTillTs]'
    }

    attribute_map = {
        'app_names': 'appNames',
        'client_sites': 'clientSites',
        'regions': 'regions',
        'server_sites': 'serverSites',
        'topology_change_ts': 'topologyChangeTs'
    }

    def __init__(self, app_names=None, client_sites=None, regions=None, server_sites=None, topology_change_ts=None):  # noqa: E501
        """InlineResponse20041 - a model defined in Swagger"""  # noqa: E501
        self._app_names = None
        self._client_sites = None
        self._regions = None
        self._server_sites = None
        self._topology_change_ts = None
        self.discriminator = None
        if app_names is not None:
            self.app_names = app_names
        if client_sites is not None:
            self.client_sites = client_sites
        if regions is not None:
            self.regions = regions
        if server_sites is not None:
            self.server_sites = server_sites
        if topology_change_ts is not None:
            self.topology_change_ts = topology_change_ts

    @property
    def app_names(self):
        """Gets the app_names of this InlineResponse20041.  # noqa: E501


        :return: The app_names of this InlineResponse20041.  # noqa: E501
        :rtype: list[str]
        """
        return self._app_names

    @app_names.setter
    def app_names(self, app_names):
        """Sets the app_names of this InlineResponse20041.


        :param app_names: The app_names of this InlineResponse20041.  # noqa: E501
        :type: list[str]
        """

        self._app_names = app_names

    @property
    def client_sites(self):
        """Gets the client_sites of this InlineResponse20041.  # noqa: E501


        :return: The client_sites of this InlineResponse20041.  # noqa: E501
        :rtype: list[InlineResponse20035ClientEndpointSite]
        """
        return self._client_sites

    @client_sites.setter
    def client_sites(self, client_sites):
        """Sets the client_sites of this InlineResponse20041.


        :param client_sites: The client_sites of this InlineResponse20041.  # noqa: E501
        :type: list[InlineResponse20035ClientEndpointSite]
        """

        self._client_sites = client_sites

    @property
    def regions(self):
        """Gets the regions of this InlineResponse20041.  # noqa: E501


        :return: The regions of this InlineResponse20041.  # noqa: E501
        :rtype: list[InlineResponse200224Region]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this InlineResponse20041.


        :param regions: The regions of this InlineResponse20041.  # noqa: E501
        :type: list[InlineResponse200224Region]
        """

        self._regions = regions

    @property
    def server_sites(self):
        """Gets the server_sites of this InlineResponse20041.  # noqa: E501


        :return: The server_sites of this InlineResponse20041.  # noqa: E501
        :rtype: list[InlineResponse20035ClientEndpointSite]
        """
        return self._server_sites

    @server_sites.setter
    def server_sites(self, server_sites):
        """Sets the server_sites of this InlineResponse20041.


        :param server_sites: The server_sites of this InlineResponse20041.  # noqa: E501
        :type: list[InlineResponse20035ClientEndpointSite]
        """

        self._server_sites = server_sites

    @property
    def topology_change_ts(self):
        """Gets the topology_change_ts of this InlineResponse20041.  # noqa: E501


        :return: The topology_change_ts of this InlineResponse20041.  # noqa: E501
        :rtype: list[V1devicesbringuptokenValidTillTs]
        """
        return self._topology_change_ts

    @topology_change_ts.setter
    def topology_change_ts(self, topology_change_ts):
        """Sets the topology_change_ts of this InlineResponse20041.


        :param topology_change_ts: The topology_change_ts of this InlineResponse20041.  # noqa: E501
        :type: list[V1devicesbringuptokenValidTillTs]
        """

        self._topology_change_ts = topology_change_ts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20041, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20041):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
