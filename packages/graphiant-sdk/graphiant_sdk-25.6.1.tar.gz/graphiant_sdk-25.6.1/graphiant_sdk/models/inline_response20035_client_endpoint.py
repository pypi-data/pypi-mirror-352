# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20035ClientEndpoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'circuits': 'list[str]',
        'edges': 'list[InlineResponse20035ClientEndpointEdges]',
        'jitter': 'InlineResponse20035ClientEndpointJitter',
        'latency': 'InlineResponse20035ClientEndpointJitter',
        'loss': 'InlineResponse20035ClientEndpointJitter',
        'site': 'InlineResponse20035ClientEndpointSite',
        'total_downlink_usage': 'str',
        'total_uplink_usage': 'str'
    }

    attribute_map = {
        'circuits': 'circuits',
        'edges': 'edges',
        'jitter': 'jitter',
        'latency': 'latency',
        'loss': 'loss',
        'site': 'site',
        'total_downlink_usage': 'totalDownlinkUsage',
        'total_uplink_usage': 'totalUplinkUsage'
    }

    def __init__(self, circuits=None, edges=None, jitter=None, latency=None, loss=None, site=None, total_downlink_usage=None, total_uplink_usage=None):  # noqa: E501
        """InlineResponse20035ClientEndpoint - a model defined in Swagger"""  # noqa: E501
        self._circuits = None
        self._edges = None
        self._jitter = None
        self._latency = None
        self._loss = None
        self._site = None
        self._total_downlink_usage = None
        self._total_uplink_usage = None
        self.discriminator = None
        if circuits is not None:
            self.circuits = circuits
        if edges is not None:
            self.edges = edges
        if jitter is not None:
            self.jitter = jitter
        if latency is not None:
            self.latency = latency
        if loss is not None:
            self.loss = loss
        if site is not None:
            self.site = site
        if total_downlink_usage is not None:
            self.total_downlink_usage = total_downlink_usage
        if total_uplink_usage is not None:
            self.total_uplink_usage = total_uplink_usage

    @property
    def circuits(self):
        """Gets the circuits of this InlineResponse20035ClientEndpoint.  # noqa: E501


        :return: The circuits of this InlineResponse20035ClientEndpoint.  # noqa: E501
        :rtype: list[str]
        """
        return self._circuits

    @circuits.setter
    def circuits(self, circuits):
        """Sets the circuits of this InlineResponse20035ClientEndpoint.


        :param circuits: The circuits of this InlineResponse20035ClientEndpoint.  # noqa: E501
        :type: list[str]
        """

        self._circuits = circuits

    @property
    def edges(self):
        """Gets the edges of this InlineResponse20035ClientEndpoint.  # noqa: E501


        :return: The edges of this InlineResponse20035ClientEndpoint.  # noqa: E501
        :rtype: list[InlineResponse20035ClientEndpointEdges]
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this InlineResponse20035ClientEndpoint.


        :param edges: The edges of this InlineResponse20035ClientEndpoint.  # noqa: E501
        :type: list[InlineResponse20035ClientEndpointEdges]
        """

        self._edges = edges

    @property
    def jitter(self):
        """Gets the jitter of this InlineResponse20035ClientEndpoint.  # noqa: E501


        :return: The jitter of this InlineResponse20035ClientEndpoint.  # noqa: E501
        :rtype: InlineResponse20035ClientEndpointJitter
        """
        return self._jitter

    @jitter.setter
    def jitter(self, jitter):
        """Sets the jitter of this InlineResponse20035ClientEndpoint.


        :param jitter: The jitter of this InlineResponse20035ClientEndpoint.  # noqa: E501
        :type: InlineResponse20035ClientEndpointJitter
        """

        self._jitter = jitter

    @property
    def latency(self):
        """Gets the latency of this InlineResponse20035ClientEndpoint.  # noqa: E501


        :return: The latency of this InlineResponse20035ClientEndpoint.  # noqa: E501
        :rtype: InlineResponse20035ClientEndpointJitter
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this InlineResponse20035ClientEndpoint.


        :param latency: The latency of this InlineResponse20035ClientEndpoint.  # noqa: E501
        :type: InlineResponse20035ClientEndpointJitter
        """

        self._latency = latency

    @property
    def loss(self):
        """Gets the loss of this InlineResponse20035ClientEndpoint.  # noqa: E501


        :return: The loss of this InlineResponse20035ClientEndpoint.  # noqa: E501
        :rtype: InlineResponse20035ClientEndpointJitter
        """
        return self._loss

    @loss.setter
    def loss(self, loss):
        """Sets the loss of this InlineResponse20035ClientEndpoint.


        :param loss: The loss of this InlineResponse20035ClientEndpoint.  # noqa: E501
        :type: InlineResponse20035ClientEndpointJitter
        """

        self._loss = loss

    @property
    def site(self):
        """Gets the site of this InlineResponse20035ClientEndpoint.  # noqa: E501


        :return: The site of this InlineResponse20035ClientEndpoint.  # noqa: E501
        :rtype: InlineResponse20035ClientEndpointSite
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this InlineResponse20035ClientEndpoint.


        :param site: The site of this InlineResponse20035ClientEndpoint.  # noqa: E501
        :type: InlineResponse20035ClientEndpointSite
        """

        self._site = site

    @property
    def total_downlink_usage(self):
        """Gets the total_downlink_usage of this InlineResponse20035ClientEndpoint.  # noqa: E501


        :return: The total_downlink_usage of this InlineResponse20035ClientEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._total_downlink_usage

    @total_downlink_usage.setter
    def total_downlink_usage(self, total_downlink_usage):
        """Sets the total_downlink_usage of this InlineResponse20035ClientEndpoint.


        :param total_downlink_usage: The total_downlink_usage of this InlineResponse20035ClientEndpoint.  # noqa: E501
        :type: str
        """

        self._total_downlink_usage = total_downlink_usage

    @property
    def total_uplink_usage(self):
        """Gets the total_uplink_usage of this InlineResponse20035ClientEndpoint.  # noqa: E501


        :return: The total_uplink_usage of this InlineResponse20035ClientEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._total_uplink_usage

    @total_uplink_usage.setter
    def total_uplink_usage(self, total_uplink_usage):
        """Sets the total_uplink_usage of this InlineResponse20035ClientEndpoint.


        :param total_uplink_usage: The total_uplink_usage of this InlineResponse20035ClientEndpoint.  # noqa: E501
        :type: str
        """

        self._total_uplink_usage = total_uplink_usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20035ClientEndpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20035ClientEndpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
