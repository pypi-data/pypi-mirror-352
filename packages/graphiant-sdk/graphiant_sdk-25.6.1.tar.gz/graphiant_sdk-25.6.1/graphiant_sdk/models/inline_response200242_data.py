# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200242Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_address': 'str',
        'destination_port': 'str',
        'error_type': 'str',
        'message': 'str',
        'timestamp': 'V1devicesbringuptokenValidTillTs',
        'tunnel_name': 'str'
    }

    attribute_map = {
        'destination_address': 'destinationAddress',
        'destination_port': 'destinationPort',
        'error_type': 'errorType',
        'message': 'message',
        'timestamp': 'timestamp',
        'tunnel_name': 'tunnelName'
    }

    def __init__(self, destination_address=None, destination_port=None, error_type=None, message=None, timestamp=None, tunnel_name=None):  # noqa: E501
        """InlineResponse200242Data - a model defined in Swagger"""  # noqa: E501
        self._destination_address = None
        self._destination_port = None
        self._error_type = None
        self._message = None
        self._timestamp = None
        self._tunnel_name = None
        self.discriminator = None
        if destination_address is not None:
            self.destination_address = destination_address
        if destination_port is not None:
            self.destination_port = destination_port
        if error_type is not None:
            self.error_type = error_type
        if message is not None:
            self.message = message
        if timestamp is not None:
            self.timestamp = timestamp
        if tunnel_name is not None:
            self.tunnel_name = tunnel_name

    @property
    def destination_address(self):
        """Gets the destination_address of this InlineResponse200242Data.  # noqa: E501


        :return: The destination_address of this InlineResponse200242Data.  # noqa: E501
        :rtype: str
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, destination_address):
        """Sets the destination_address of this InlineResponse200242Data.


        :param destination_address: The destination_address of this InlineResponse200242Data.  # noqa: E501
        :type: str
        """

        self._destination_address = destination_address

    @property
    def destination_port(self):
        """Gets the destination_port of this InlineResponse200242Data.  # noqa: E501


        :return: The destination_port of this InlineResponse200242Data.  # noqa: E501
        :rtype: str
        """
        return self._destination_port

    @destination_port.setter
    def destination_port(self, destination_port):
        """Sets the destination_port of this InlineResponse200242Data.


        :param destination_port: The destination_port of this InlineResponse200242Data.  # noqa: E501
        :type: str
        """

        self._destination_port = destination_port

    @property
    def error_type(self):
        """Gets the error_type of this InlineResponse200242Data.  # noqa: E501


        :return: The error_type of this InlineResponse200242Data.  # noqa: E501
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this InlineResponse200242Data.


        :param error_type: The error_type of this InlineResponse200242Data.  # noqa: E501
        :type: str
        """

        self._error_type = error_type

    @property
    def message(self):
        """Gets the message of this InlineResponse200242Data.  # noqa: E501


        :return: The message of this InlineResponse200242Data.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InlineResponse200242Data.


        :param message: The message of this InlineResponse200242Data.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def timestamp(self):
        """Gets the timestamp of this InlineResponse200242Data.  # noqa: E501


        :return: The timestamp of this InlineResponse200242Data.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this InlineResponse200242Data.


        :param timestamp: The timestamp of this InlineResponse200242Data.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._timestamp = timestamp

    @property
    def tunnel_name(self):
        """Gets the tunnel_name of this InlineResponse200242Data.  # noqa: E501


        :return: The tunnel_name of this InlineResponse200242Data.  # noqa: E501
        :rtype: str
        """
        return self._tunnel_name

    @tunnel_name.setter
    def tunnel_name(self, tunnel_name):
        """Sets the tunnel_name of this InlineResponse200242Data.


        :param tunnel_name: The tunnel_name of this InlineResponse200242Data.  # noqa: E501
        :type: str
        """

        self._tunnel_name = tunnel_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200242Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200242Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
