# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200225(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'circuits': 'list[InlineResponse20037SessionLocalDiaLinks]',
        'devices': 'list[InlineResponse20035ClientEndpointEdges]',
        'lan_segments': 'list[InlineResponse200225LanSegments]',
        'regions': 'list[InlineResponse200225Regions]',
        'sites': 'list[InlineResponse200225Sites]'
    }

    attribute_map = {
        'circuits': 'circuits',
        'devices': 'devices',
        'lan_segments': 'lanSegments',
        'regions': 'regions',
        'sites': 'sites'
    }

    def __init__(self, circuits=None, devices=None, lan_segments=None, regions=None, sites=None):  # noqa: E501
        """InlineResponse200225 - a model defined in Swagger"""  # noqa: E501
        self._circuits = None
        self._devices = None
        self._lan_segments = None
        self._regions = None
        self._sites = None
        self.discriminator = None
        if circuits is not None:
            self.circuits = circuits
        if devices is not None:
            self.devices = devices
        if lan_segments is not None:
            self.lan_segments = lan_segments
        if regions is not None:
            self.regions = regions
        if sites is not None:
            self.sites = sites

    @property
    def circuits(self):
        """Gets the circuits of this InlineResponse200225.  # noqa: E501


        :return: The circuits of this InlineResponse200225.  # noqa: E501
        :rtype: list[InlineResponse20037SessionLocalDiaLinks]
        """
        return self._circuits

    @circuits.setter
    def circuits(self, circuits):
        """Sets the circuits of this InlineResponse200225.


        :param circuits: The circuits of this InlineResponse200225.  # noqa: E501
        :type: list[InlineResponse20037SessionLocalDiaLinks]
        """

        self._circuits = circuits

    @property
    def devices(self):
        """Gets the devices of this InlineResponse200225.  # noqa: E501


        :return: The devices of this InlineResponse200225.  # noqa: E501
        :rtype: list[InlineResponse20035ClientEndpointEdges]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this InlineResponse200225.


        :param devices: The devices of this InlineResponse200225.  # noqa: E501
        :type: list[InlineResponse20035ClientEndpointEdges]
        """

        self._devices = devices

    @property
    def lan_segments(self):
        """Gets the lan_segments of this InlineResponse200225.  # noqa: E501


        :return: The lan_segments of this InlineResponse200225.  # noqa: E501
        :rtype: list[InlineResponse200225LanSegments]
        """
        return self._lan_segments

    @lan_segments.setter
    def lan_segments(self, lan_segments):
        """Sets the lan_segments of this InlineResponse200225.


        :param lan_segments: The lan_segments of this InlineResponse200225.  # noqa: E501
        :type: list[InlineResponse200225LanSegments]
        """

        self._lan_segments = lan_segments

    @property
    def regions(self):
        """Gets the regions of this InlineResponse200225.  # noqa: E501


        :return: The regions of this InlineResponse200225.  # noqa: E501
        :rtype: list[InlineResponse200225Regions]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this InlineResponse200225.


        :param regions: The regions of this InlineResponse200225.  # noqa: E501
        :type: list[InlineResponse200225Regions]
        """

        self._regions = regions

    @property
    def sites(self):
        """Gets the sites of this InlineResponse200225.  # noqa: E501


        :return: The sites of this InlineResponse200225.  # noqa: E501
        :rtype: list[InlineResponse200225Sites]
        """
        return self._sites

    @sites.setter
    def sites(self, sites):
        """Sets the sites of this InlineResponse200225.


        :param sites: The sites of this InlineResponse200225.  # noqa: E501
        :type: list[InlineResponse200225Sites]
        """

        self._sites = sites

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200225, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200225):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
