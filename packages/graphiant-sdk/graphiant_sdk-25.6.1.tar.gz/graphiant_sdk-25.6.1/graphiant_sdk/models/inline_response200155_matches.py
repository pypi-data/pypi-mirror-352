# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200155Matches(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'community': 'list[str]',
        'id': 'str',
        'prefix_set': 'str',
        'protocol_route_type': 'str',
        'route_tag': 'object',
        'seq': 'str',
        'source_interface': 'str',
        'source_protocol': 'str',
        'stale_purge': 'str'
    }

    attribute_map = {
        'community': 'community',
        'id': 'id',
        'prefix_set': 'prefixSet',
        'protocol_route_type': 'protocolRouteType',
        'route_tag': 'routeTag',
        'seq': 'seq',
        'source_interface': 'sourceInterface',
        'source_protocol': 'sourceProtocol',
        'stale_purge': 'stalePurge'
    }

    def __init__(self, community=None, id=None, prefix_set=None, protocol_route_type=None, route_tag=None, seq=None, source_interface=None, source_protocol=None, stale_purge=None):  # noqa: E501
        """InlineResponse200155Matches - a model defined in Swagger"""  # noqa: E501
        self._community = None
        self._id = None
        self._prefix_set = None
        self._protocol_route_type = None
        self._route_tag = None
        self._seq = None
        self._source_interface = None
        self._source_protocol = None
        self._stale_purge = None
        self.discriminator = None
        if community is not None:
            self.community = community
        if id is not None:
            self.id = id
        if prefix_set is not None:
            self.prefix_set = prefix_set
        if protocol_route_type is not None:
            self.protocol_route_type = protocol_route_type
        if route_tag is not None:
            self.route_tag = route_tag
        if seq is not None:
            self.seq = seq
        if source_interface is not None:
            self.source_interface = source_interface
        if source_protocol is not None:
            self.source_protocol = source_protocol
        if stale_purge is not None:
            self.stale_purge = stale_purge

    @property
    def community(self):
        """Gets the community of this InlineResponse200155Matches.  # noqa: E501


        :return: The community of this InlineResponse200155Matches.  # noqa: E501
        :rtype: list[str]
        """
        return self._community

    @community.setter
    def community(self, community):
        """Sets the community of this InlineResponse200155Matches.


        :param community: The community of this InlineResponse200155Matches.  # noqa: E501
        :type: list[str]
        """

        self._community = community

    @property
    def id(self):
        """Gets the id of this InlineResponse200155Matches.  # noqa: E501


        :return: The id of this InlineResponse200155Matches.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200155Matches.


        :param id: The id of this InlineResponse200155Matches.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def prefix_set(self):
        """Gets the prefix_set of this InlineResponse200155Matches.  # noqa: E501


        :return: The prefix_set of this InlineResponse200155Matches.  # noqa: E501
        :rtype: str
        """
        return self._prefix_set

    @prefix_set.setter
    def prefix_set(self, prefix_set):
        """Sets the prefix_set of this InlineResponse200155Matches.


        :param prefix_set: The prefix_set of this InlineResponse200155Matches.  # noqa: E501
        :type: str
        """

        self._prefix_set = prefix_set

    @property
    def protocol_route_type(self):
        """Gets the protocol_route_type of this InlineResponse200155Matches.  # noqa: E501


        :return: The protocol_route_type of this InlineResponse200155Matches.  # noqa: E501
        :rtype: str
        """
        return self._protocol_route_type

    @protocol_route_type.setter
    def protocol_route_type(self, protocol_route_type):
        """Sets the protocol_route_type of this InlineResponse200155Matches.


        :param protocol_route_type: The protocol_route_type of this InlineResponse200155Matches.  # noqa: E501
        :type: str
        """

        self._protocol_route_type = protocol_route_type

    @property
    def route_tag(self):
        """Gets the route_tag of this InlineResponse200155Matches.  # noqa: E501


        :return: The route_tag of this InlineResponse200155Matches.  # noqa: E501
        :rtype: object
        """
        return self._route_tag

    @route_tag.setter
    def route_tag(self, route_tag):
        """Sets the route_tag of this InlineResponse200155Matches.


        :param route_tag: The route_tag of this InlineResponse200155Matches.  # noqa: E501
        :type: object
        """

        self._route_tag = route_tag

    @property
    def seq(self):
        """Gets the seq of this InlineResponse200155Matches.  # noqa: E501


        :return: The seq of this InlineResponse200155Matches.  # noqa: E501
        :rtype: str
        """
        return self._seq

    @seq.setter
    def seq(self, seq):
        """Sets the seq of this InlineResponse200155Matches.


        :param seq: The seq of this InlineResponse200155Matches.  # noqa: E501
        :type: str
        """

        self._seq = seq

    @property
    def source_interface(self):
        """Gets the source_interface of this InlineResponse200155Matches.  # noqa: E501


        :return: The source_interface of this InlineResponse200155Matches.  # noqa: E501
        :rtype: str
        """
        return self._source_interface

    @source_interface.setter
    def source_interface(self, source_interface):
        """Sets the source_interface of this InlineResponse200155Matches.


        :param source_interface: The source_interface of this InlineResponse200155Matches.  # noqa: E501
        :type: str
        """

        self._source_interface = source_interface

    @property
    def source_protocol(self):
        """Gets the source_protocol of this InlineResponse200155Matches.  # noqa: E501


        :return: The source_protocol of this InlineResponse200155Matches.  # noqa: E501
        :rtype: str
        """
        return self._source_protocol

    @source_protocol.setter
    def source_protocol(self, source_protocol):
        """Sets the source_protocol of this InlineResponse200155Matches.


        :param source_protocol: The source_protocol of this InlineResponse200155Matches.  # noqa: E501
        :type: str
        """

        self._source_protocol = source_protocol

    @property
    def stale_purge(self):
        """Gets the stale_purge of this InlineResponse200155Matches.  # noqa: E501


        :return: The stale_purge of this InlineResponse200155Matches.  # noqa: E501
        :rtype: str
        """
        return self._stale_purge

    @stale_purge.setter
    def stale_purge(self, stale_purge):
        """Sets the stale_purge of this InlineResponse200155Matches.


        :param stale_purge: The stale_purge of this InlineResponse200155Matches.  # noqa: E501
        :type: str
        """

        self._stale_purge = stale_purge

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200155Matches, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200155Matches):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
