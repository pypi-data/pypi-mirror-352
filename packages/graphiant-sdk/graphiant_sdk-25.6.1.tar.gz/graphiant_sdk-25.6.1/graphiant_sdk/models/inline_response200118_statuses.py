# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200118Statuses(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'str',
        'error_message': 'str',
        'hostname': 'str',
        'internal_state': 'str',
        'site_name': 'str',
        'status': 'str',
        'status_since': 'V1devicesbringuptokenValidTillTs'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'error_message': 'errorMessage',
        'hostname': 'hostname',
        'internal_state': 'internalState',
        'site_name': 'siteName',
        'status': 'status',
        'status_since': 'statusSince'
    }

    def __init__(self, device_id=None, error_message=None, hostname=None, internal_state=None, site_name=None, status=None, status_since=None):  # noqa: E501
        """InlineResponse200118Statuses - a model defined in Swagger"""  # noqa: E501
        self._device_id = None
        self._error_message = None
        self._hostname = None
        self._internal_state = None
        self._site_name = None
        self._status = None
        self._status_since = None
        self.discriminator = None
        if device_id is not None:
            self.device_id = device_id
        if error_message is not None:
            self.error_message = error_message
        if hostname is not None:
            self.hostname = hostname
        if internal_state is not None:
            self.internal_state = internal_state
        if site_name is not None:
            self.site_name = site_name
        if status is not None:
            self.status = status
        if status_since is not None:
            self.status_since = status_since

    @property
    def device_id(self):
        """Gets the device_id of this InlineResponse200118Statuses.  # noqa: E501


        :return: The device_id of this InlineResponse200118Statuses.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this InlineResponse200118Statuses.


        :param device_id: The device_id of this InlineResponse200118Statuses.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def error_message(self):
        """Gets the error_message of this InlineResponse200118Statuses.  # noqa: E501


        :return: The error_message of this InlineResponse200118Statuses.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this InlineResponse200118Statuses.


        :param error_message: The error_message of this InlineResponse200118Statuses.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def hostname(self):
        """Gets the hostname of this InlineResponse200118Statuses.  # noqa: E501


        :return: The hostname of this InlineResponse200118Statuses.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this InlineResponse200118Statuses.


        :param hostname: The hostname of this InlineResponse200118Statuses.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def internal_state(self):
        """Gets the internal_state of this InlineResponse200118Statuses.  # noqa: E501


        :return: The internal_state of this InlineResponse200118Statuses.  # noqa: E501
        :rtype: str
        """
        return self._internal_state

    @internal_state.setter
    def internal_state(self, internal_state):
        """Sets the internal_state of this InlineResponse200118Statuses.


        :param internal_state: The internal_state of this InlineResponse200118Statuses.  # noqa: E501
        :type: str
        """

        self._internal_state = internal_state

    @property
    def site_name(self):
        """Gets the site_name of this InlineResponse200118Statuses.  # noqa: E501


        :return: The site_name of this InlineResponse200118Statuses.  # noqa: E501
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this InlineResponse200118Statuses.


        :param site_name: The site_name of this InlineResponse200118Statuses.  # noqa: E501
        :type: str
        """

        self._site_name = site_name

    @property
    def status(self):
        """Gets the status of this InlineResponse200118Statuses.  # noqa: E501


        :return: The status of this InlineResponse200118Statuses.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200118Statuses.


        :param status: The status of this InlineResponse200118Statuses.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_since(self):
        """Gets the status_since of this InlineResponse200118Statuses.  # noqa: E501


        :return: The status_since of this InlineResponse200118Statuses.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._status_since

    @status_since.setter
    def status_since(self, status_since):
        """Sets the status_since of this InlineResponse200118Statuses.


        :param status_since: The status_since of this InlineResponse200118Statuses.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._status_since = status_since

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200118Statuses, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200118Statuses):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
