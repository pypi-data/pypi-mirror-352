# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200199Interfaces(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bdr_ip_addr': 'str',
        'bdr_router_id': 'str',
        'dr_ip_addr': 'str',
        'dr_router_id': 'str',
        'hello_interval': 'str',
        'hello_timer': 'str',
        'name': 'str',
        'neighbors': 'list[str]',
        'state': 'str',
        'wait_timer': 'str'
    }

    attribute_map = {
        'bdr_ip_addr': 'bdrIpAddr',
        'bdr_router_id': 'bdrRouterId',
        'dr_ip_addr': 'drIpAddr',
        'dr_router_id': 'drRouterId',
        'hello_interval': 'helloInterval',
        'hello_timer': 'helloTimer',
        'name': 'name',
        'neighbors': 'neighbors',
        'state': 'state',
        'wait_timer': 'waitTimer'
    }

    def __init__(self, bdr_ip_addr=None, bdr_router_id=None, dr_ip_addr=None, dr_router_id=None, hello_interval=None, hello_timer=None, name=None, neighbors=None, state=None, wait_timer=None):  # noqa: E501
        """InlineResponse200199Interfaces - a model defined in Swagger"""  # noqa: E501
        self._bdr_ip_addr = None
        self._bdr_router_id = None
        self._dr_ip_addr = None
        self._dr_router_id = None
        self._hello_interval = None
        self._hello_timer = None
        self._name = None
        self._neighbors = None
        self._state = None
        self._wait_timer = None
        self.discriminator = None
        if bdr_ip_addr is not None:
            self.bdr_ip_addr = bdr_ip_addr
        if bdr_router_id is not None:
            self.bdr_router_id = bdr_router_id
        if dr_ip_addr is not None:
            self.dr_ip_addr = dr_ip_addr
        if dr_router_id is not None:
            self.dr_router_id = dr_router_id
        if hello_interval is not None:
            self.hello_interval = hello_interval
        if hello_timer is not None:
            self.hello_timer = hello_timer
        if name is not None:
            self.name = name
        if neighbors is not None:
            self.neighbors = neighbors
        if state is not None:
            self.state = state
        if wait_timer is not None:
            self.wait_timer = wait_timer

    @property
    def bdr_ip_addr(self):
        """Gets the bdr_ip_addr of this InlineResponse200199Interfaces.  # noqa: E501


        :return: The bdr_ip_addr of this InlineResponse200199Interfaces.  # noqa: E501
        :rtype: str
        """
        return self._bdr_ip_addr

    @bdr_ip_addr.setter
    def bdr_ip_addr(self, bdr_ip_addr):
        """Sets the bdr_ip_addr of this InlineResponse200199Interfaces.


        :param bdr_ip_addr: The bdr_ip_addr of this InlineResponse200199Interfaces.  # noqa: E501
        :type: str
        """

        self._bdr_ip_addr = bdr_ip_addr

    @property
    def bdr_router_id(self):
        """Gets the bdr_router_id of this InlineResponse200199Interfaces.  # noqa: E501


        :return: The bdr_router_id of this InlineResponse200199Interfaces.  # noqa: E501
        :rtype: str
        """
        return self._bdr_router_id

    @bdr_router_id.setter
    def bdr_router_id(self, bdr_router_id):
        """Sets the bdr_router_id of this InlineResponse200199Interfaces.


        :param bdr_router_id: The bdr_router_id of this InlineResponse200199Interfaces.  # noqa: E501
        :type: str
        """

        self._bdr_router_id = bdr_router_id

    @property
    def dr_ip_addr(self):
        """Gets the dr_ip_addr of this InlineResponse200199Interfaces.  # noqa: E501


        :return: The dr_ip_addr of this InlineResponse200199Interfaces.  # noqa: E501
        :rtype: str
        """
        return self._dr_ip_addr

    @dr_ip_addr.setter
    def dr_ip_addr(self, dr_ip_addr):
        """Sets the dr_ip_addr of this InlineResponse200199Interfaces.


        :param dr_ip_addr: The dr_ip_addr of this InlineResponse200199Interfaces.  # noqa: E501
        :type: str
        """

        self._dr_ip_addr = dr_ip_addr

    @property
    def dr_router_id(self):
        """Gets the dr_router_id of this InlineResponse200199Interfaces.  # noqa: E501


        :return: The dr_router_id of this InlineResponse200199Interfaces.  # noqa: E501
        :rtype: str
        """
        return self._dr_router_id

    @dr_router_id.setter
    def dr_router_id(self, dr_router_id):
        """Sets the dr_router_id of this InlineResponse200199Interfaces.


        :param dr_router_id: The dr_router_id of this InlineResponse200199Interfaces.  # noqa: E501
        :type: str
        """

        self._dr_router_id = dr_router_id

    @property
    def hello_interval(self):
        """Gets the hello_interval of this InlineResponse200199Interfaces.  # noqa: E501


        :return: The hello_interval of this InlineResponse200199Interfaces.  # noqa: E501
        :rtype: str
        """
        return self._hello_interval

    @hello_interval.setter
    def hello_interval(self, hello_interval):
        """Sets the hello_interval of this InlineResponse200199Interfaces.


        :param hello_interval: The hello_interval of this InlineResponse200199Interfaces.  # noqa: E501
        :type: str
        """

        self._hello_interval = hello_interval

    @property
    def hello_timer(self):
        """Gets the hello_timer of this InlineResponse200199Interfaces.  # noqa: E501


        :return: The hello_timer of this InlineResponse200199Interfaces.  # noqa: E501
        :rtype: str
        """
        return self._hello_timer

    @hello_timer.setter
    def hello_timer(self, hello_timer):
        """Sets the hello_timer of this InlineResponse200199Interfaces.


        :param hello_timer: The hello_timer of this InlineResponse200199Interfaces.  # noqa: E501
        :type: str
        """

        self._hello_timer = hello_timer

    @property
    def name(self):
        """Gets the name of this InlineResponse200199Interfaces.  # noqa: E501


        :return: The name of this InlineResponse200199Interfaces.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200199Interfaces.


        :param name: The name of this InlineResponse200199Interfaces.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def neighbors(self):
        """Gets the neighbors of this InlineResponse200199Interfaces.  # noqa: E501


        :return: The neighbors of this InlineResponse200199Interfaces.  # noqa: E501
        :rtype: list[str]
        """
        return self._neighbors

    @neighbors.setter
    def neighbors(self, neighbors):
        """Sets the neighbors of this InlineResponse200199Interfaces.


        :param neighbors: The neighbors of this InlineResponse200199Interfaces.  # noqa: E501
        :type: list[str]
        """

        self._neighbors = neighbors

    @property
    def state(self):
        """Gets the state of this InlineResponse200199Interfaces.  # noqa: E501


        :return: The state of this InlineResponse200199Interfaces.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse200199Interfaces.


        :param state: The state of this InlineResponse200199Interfaces.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def wait_timer(self):
        """Gets the wait_timer of this InlineResponse200199Interfaces.  # noqa: E501


        :return: The wait_timer of this InlineResponse200199Interfaces.  # noqa: E501
        :rtype: str
        """
        return self._wait_timer

    @wait_timer.setter
    def wait_timer(self, wait_timer):
        """Sets the wait_timer of this InlineResponse200199Interfaces.


        :param wait_timer: The wait_timer of this InlineResponse200199Interfaces.  # noqa: E501
        :type: str
        """

        self._wait_timer = wait_timer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200199Interfaces, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200199Interfaces):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
