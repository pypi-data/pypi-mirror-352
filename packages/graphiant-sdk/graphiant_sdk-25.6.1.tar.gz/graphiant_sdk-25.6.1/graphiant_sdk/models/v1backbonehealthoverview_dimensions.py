# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1backbonehealthoverviewDimensions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificate_expiry': 'str',
        'core_connectivity': 'str',
        'core_core_sla_performance': 'str',
        'core_wan_performance': 'str',
        'cpu': 'str',
        'crashes': 'str',
        'credit_expiry': 'str',
        'disk': 'str',
        'fan_speed': 'str',
        'license_expiry': 'str',
        'memory': 'str',
        'odp_connectivity': 'str',
        't2_connectivity': 'str',
        'temperature': 'str'
    }

    attribute_map = {
        'certificate_expiry': 'certificateExpiry',
        'core_connectivity': 'coreConnectivity',
        'core_core_sla_performance': 'coreCoreSlaPerformance',
        'core_wan_performance': 'coreWanPerformance',
        'cpu': 'cpu',
        'crashes': 'crashes',
        'credit_expiry': 'creditExpiry',
        'disk': 'disk',
        'fan_speed': 'fanSpeed',
        'license_expiry': 'licenseExpiry',
        'memory': 'memory',
        'odp_connectivity': 'odpConnectivity',
        't2_connectivity': 't2Connectivity',
        'temperature': 'temperature'
    }

    def __init__(self, certificate_expiry=None, core_connectivity=None, core_core_sla_performance=None, core_wan_performance=None, cpu=None, crashes=None, credit_expiry=None, disk=None, fan_speed=None, license_expiry=None, memory=None, odp_connectivity=None, t2_connectivity=None, temperature=None):  # noqa: E501
        """V1backbonehealthoverviewDimensions - a model defined in Swagger"""  # noqa: E501
        self._certificate_expiry = None
        self._core_connectivity = None
        self._core_core_sla_performance = None
        self._core_wan_performance = None
        self._cpu = None
        self._crashes = None
        self._credit_expiry = None
        self._disk = None
        self._fan_speed = None
        self._license_expiry = None
        self._memory = None
        self._odp_connectivity = None
        self._t2_connectivity = None
        self._temperature = None
        self.discriminator = None
        if certificate_expiry is not None:
            self.certificate_expiry = certificate_expiry
        if core_connectivity is not None:
            self.core_connectivity = core_connectivity
        if core_core_sla_performance is not None:
            self.core_core_sla_performance = core_core_sla_performance
        if core_wan_performance is not None:
            self.core_wan_performance = core_wan_performance
        if cpu is not None:
            self.cpu = cpu
        if crashes is not None:
            self.crashes = crashes
        if credit_expiry is not None:
            self.credit_expiry = credit_expiry
        if disk is not None:
            self.disk = disk
        if fan_speed is not None:
            self.fan_speed = fan_speed
        if license_expiry is not None:
            self.license_expiry = license_expiry
        if memory is not None:
            self.memory = memory
        if odp_connectivity is not None:
            self.odp_connectivity = odp_connectivity
        if t2_connectivity is not None:
            self.t2_connectivity = t2_connectivity
        if temperature is not None:
            self.temperature = temperature

    @property
    def certificate_expiry(self):
        """Gets the certificate_expiry of this V1backbonehealthoverviewDimensions.  # noqa: E501


        :return: The certificate_expiry of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :rtype: str
        """
        return self._certificate_expiry

    @certificate_expiry.setter
    def certificate_expiry(self, certificate_expiry):
        """Sets the certificate_expiry of this V1backbonehealthoverviewDimensions.


        :param certificate_expiry: The certificate_expiry of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :type: str
        """

        self._certificate_expiry = certificate_expiry

    @property
    def core_connectivity(self):
        """Gets the core_connectivity of this V1backbonehealthoverviewDimensions.  # noqa: E501


        :return: The core_connectivity of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :rtype: str
        """
        return self._core_connectivity

    @core_connectivity.setter
    def core_connectivity(self, core_connectivity):
        """Sets the core_connectivity of this V1backbonehealthoverviewDimensions.


        :param core_connectivity: The core_connectivity of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :type: str
        """

        self._core_connectivity = core_connectivity

    @property
    def core_core_sla_performance(self):
        """Gets the core_core_sla_performance of this V1backbonehealthoverviewDimensions.  # noqa: E501


        :return: The core_core_sla_performance of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :rtype: str
        """
        return self._core_core_sla_performance

    @core_core_sla_performance.setter
    def core_core_sla_performance(self, core_core_sla_performance):
        """Sets the core_core_sla_performance of this V1backbonehealthoverviewDimensions.


        :param core_core_sla_performance: The core_core_sla_performance of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :type: str
        """

        self._core_core_sla_performance = core_core_sla_performance

    @property
    def core_wan_performance(self):
        """Gets the core_wan_performance of this V1backbonehealthoverviewDimensions.  # noqa: E501


        :return: The core_wan_performance of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :rtype: str
        """
        return self._core_wan_performance

    @core_wan_performance.setter
    def core_wan_performance(self, core_wan_performance):
        """Sets the core_wan_performance of this V1backbonehealthoverviewDimensions.


        :param core_wan_performance: The core_wan_performance of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :type: str
        """

        self._core_wan_performance = core_wan_performance

    @property
    def cpu(self):
        """Gets the cpu of this V1backbonehealthoverviewDimensions.  # noqa: E501


        :return: The cpu of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this V1backbonehealthoverviewDimensions.


        :param cpu: The cpu of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :type: str
        """

        self._cpu = cpu

    @property
    def crashes(self):
        """Gets the crashes of this V1backbonehealthoverviewDimensions.  # noqa: E501


        :return: The crashes of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :rtype: str
        """
        return self._crashes

    @crashes.setter
    def crashes(self, crashes):
        """Sets the crashes of this V1backbonehealthoverviewDimensions.


        :param crashes: The crashes of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :type: str
        """

        self._crashes = crashes

    @property
    def credit_expiry(self):
        """Gets the credit_expiry of this V1backbonehealthoverviewDimensions.  # noqa: E501


        :return: The credit_expiry of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :rtype: str
        """
        return self._credit_expiry

    @credit_expiry.setter
    def credit_expiry(self, credit_expiry):
        """Sets the credit_expiry of this V1backbonehealthoverviewDimensions.


        :param credit_expiry: The credit_expiry of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :type: str
        """

        self._credit_expiry = credit_expiry

    @property
    def disk(self):
        """Gets the disk of this V1backbonehealthoverviewDimensions.  # noqa: E501


        :return: The disk of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :rtype: str
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this V1backbonehealthoverviewDimensions.


        :param disk: The disk of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :type: str
        """

        self._disk = disk

    @property
    def fan_speed(self):
        """Gets the fan_speed of this V1backbonehealthoverviewDimensions.  # noqa: E501


        :return: The fan_speed of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :rtype: str
        """
        return self._fan_speed

    @fan_speed.setter
    def fan_speed(self, fan_speed):
        """Sets the fan_speed of this V1backbonehealthoverviewDimensions.


        :param fan_speed: The fan_speed of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :type: str
        """

        self._fan_speed = fan_speed

    @property
    def license_expiry(self):
        """Gets the license_expiry of this V1backbonehealthoverviewDimensions.  # noqa: E501


        :return: The license_expiry of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :rtype: str
        """
        return self._license_expiry

    @license_expiry.setter
    def license_expiry(self, license_expiry):
        """Sets the license_expiry of this V1backbonehealthoverviewDimensions.


        :param license_expiry: The license_expiry of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :type: str
        """

        self._license_expiry = license_expiry

    @property
    def memory(self):
        """Gets the memory of this V1backbonehealthoverviewDimensions.  # noqa: E501


        :return: The memory of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this V1backbonehealthoverviewDimensions.


        :param memory: The memory of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :type: str
        """

        self._memory = memory

    @property
    def odp_connectivity(self):
        """Gets the odp_connectivity of this V1backbonehealthoverviewDimensions.  # noqa: E501


        :return: The odp_connectivity of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :rtype: str
        """
        return self._odp_connectivity

    @odp_connectivity.setter
    def odp_connectivity(self, odp_connectivity):
        """Sets the odp_connectivity of this V1backbonehealthoverviewDimensions.


        :param odp_connectivity: The odp_connectivity of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :type: str
        """

        self._odp_connectivity = odp_connectivity

    @property
    def t2_connectivity(self):
        """Gets the t2_connectivity of this V1backbonehealthoverviewDimensions.  # noqa: E501


        :return: The t2_connectivity of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :rtype: str
        """
        return self._t2_connectivity

    @t2_connectivity.setter
    def t2_connectivity(self, t2_connectivity):
        """Sets the t2_connectivity of this V1backbonehealthoverviewDimensions.


        :param t2_connectivity: The t2_connectivity of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :type: str
        """

        self._t2_connectivity = t2_connectivity

    @property
    def temperature(self):
        """Gets the temperature of this V1backbonehealthoverviewDimensions.  # noqa: E501


        :return: The temperature of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :rtype: str
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this V1backbonehealthoverviewDimensions.


        :param temperature: The temperature of this V1backbonehealthoverviewDimensions.  # noqa: E501
        :type: str
        """

        self._temperature = temperature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1backbonehealthoverviewDimensions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1backbonehealthoverviewDimensions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
