# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20074AppsVisualization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_id': 'str',
        'app_name': 'str',
        'circuit_availability': 'list[InlineResponse20073AppSummaryAppHealth]',
        'circuit_map': 'list[InlineResponse20074CircuitMap]',
        'current_status': 'str'
    }

    attribute_map = {
        'app_id': 'appId',
        'app_name': 'appName',
        'circuit_availability': 'circuitAvailability',
        'circuit_map': 'circuitMap',
        'current_status': 'currentStatus'
    }

    def __init__(self, app_id=None, app_name=None, circuit_availability=None, circuit_map=None, current_status=None):  # noqa: E501
        """InlineResponse20074AppsVisualization - a model defined in Swagger"""  # noqa: E501
        self._app_id = None
        self._app_name = None
        self._circuit_availability = None
        self._circuit_map = None
        self._current_status = None
        self.discriminator = None
        if app_id is not None:
            self.app_id = app_id
        if app_name is not None:
            self.app_name = app_name
        if circuit_availability is not None:
            self.circuit_availability = circuit_availability
        if circuit_map is not None:
            self.circuit_map = circuit_map
        if current_status is not None:
            self.current_status = current_status

    @property
    def app_id(self):
        """Gets the app_id of this InlineResponse20074AppsVisualization.  # noqa: E501


        :return: The app_id of this InlineResponse20074AppsVisualization.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this InlineResponse20074AppsVisualization.


        :param app_id: The app_id of this InlineResponse20074AppsVisualization.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def app_name(self):
        """Gets the app_name of this InlineResponse20074AppsVisualization.  # noqa: E501


        :return: The app_name of this InlineResponse20074AppsVisualization.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this InlineResponse20074AppsVisualization.


        :param app_name: The app_name of this InlineResponse20074AppsVisualization.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def circuit_availability(self):
        """Gets the circuit_availability of this InlineResponse20074AppsVisualization.  # noqa: E501


        :return: The circuit_availability of this InlineResponse20074AppsVisualization.  # noqa: E501
        :rtype: list[InlineResponse20073AppSummaryAppHealth]
        """
        return self._circuit_availability

    @circuit_availability.setter
    def circuit_availability(self, circuit_availability):
        """Sets the circuit_availability of this InlineResponse20074AppsVisualization.


        :param circuit_availability: The circuit_availability of this InlineResponse20074AppsVisualization.  # noqa: E501
        :type: list[InlineResponse20073AppSummaryAppHealth]
        """

        self._circuit_availability = circuit_availability

    @property
    def circuit_map(self):
        """Gets the circuit_map of this InlineResponse20074AppsVisualization.  # noqa: E501


        :return: The circuit_map of this InlineResponse20074AppsVisualization.  # noqa: E501
        :rtype: list[InlineResponse20074CircuitMap]
        """
        return self._circuit_map

    @circuit_map.setter
    def circuit_map(self, circuit_map):
        """Sets the circuit_map of this InlineResponse20074AppsVisualization.


        :param circuit_map: The circuit_map of this InlineResponse20074AppsVisualization.  # noqa: E501
        :type: list[InlineResponse20074CircuitMap]
        """

        self._circuit_map = circuit_map

    @property
    def current_status(self):
        """Gets the current_status of this InlineResponse20074AppsVisualization.  # noqa: E501


        :return: The current_status of this InlineResponse20074AppsVisualization.  # noqa: E501
        :rtype: str
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this InlineResponse20074AppsVisualization.


        :param current_status: The current_status of this InlineResponse20074AppsVisualization.  # noqa: E501
        :type: str
        """

        self._current_status = current_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20074AppsVisualization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20074AppsVisualization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
