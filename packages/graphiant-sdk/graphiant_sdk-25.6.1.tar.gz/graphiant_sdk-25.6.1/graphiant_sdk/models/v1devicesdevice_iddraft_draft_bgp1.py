# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1devicesdeviceIddraftDraftBgp1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_families': 'list[object]',
        'hold_timer': 'str',
        'keepalive_timer': 'str',
        'md5_password': 'str',
        'peer_asn': 'str',
        'send_community': 'str'
    }

    attribute_map = {
        'address_families': 'addressFamilies',
        'hold_timer': 'holdTimer',
        'keepalive_timer': 'keepaliveTimer',
        'md5_password': 'md5Password',
        'peer_asn': 'peerAsn',
        'send_community': 'sendCommunity'
    }

    def __init__(self, address_families=None, hold_timer=None, keepalive_timer=None, md5_password=None, peer_asn=None, send_community=None):  # noqa: E501
        """V1devicesdeviceIddraftDraftBgp1 - a model defined in Swagger"""  # noqa: E501
        self._address_families = None
        self._hold_timer = None
        self._keepalive_timer = None
        self._md5_password = None
        self._peer_asn = None
        self._send_community = None
        self.discriminator = None
        if address_families is not None:
            self.address_families = address_families
        if hold_timer is not None:
            self.hold_timer = hold_timer
        if keepalive_timer is not None:
            self.keepalive_timer = keepalive_timer
        if md5_password is not None:
            self.md5_password = md5_password
        if peer_asn is not None:
            self.peer_asn = peer_asn
        if send_community is not None:
            self.send_community = send_community

    @property
    def address_families(self):
        """Gets the address_families of this V1devicesdeviceIddraftDraftBgp1.  # noqa: E501


        :return: The address_families of this V1devicesdeviceIddraftDraftBgp1.  # noqa: E501
        :rtype: list[object]
        """
        return self._address_families

    @address_families.setter
    def address_families(self, address_families):
        """Sets the address_families of this V1devicesdeviceIddraftDraftBgp1.


        :param address_families: The address_families of this V1devicesdeviceIddraftDraftBgp1.  # noqa: E501
        :type: list[object]
        """

        self._address_families = address_families

    @property
    def hold_timer(self):
        """Gets the hold_timer of this V1devicesdeviceIddraftDraftBgp1.  # noqa: E501


        :return: The hold_timer of this V1devicesdeviceIddraftDraftBgp1.  # noqa: E501
        :rtype: str
        """
        return self._hold_timer

    @hold_timer.setter
    def hold_timer(self, hold_timer):
        """Sets the hold_timer of this V1devicesdeviceIddraftDraftBgp1.


        :param hold_timer: The hold_timer of this V1devicesdeviceIddraftDraftBgp1.  # noqa: E501
        :type: str
        """

        self._hold_timer = hold_timer

    @property
    def keepalive_timer(self):
        """Gets the keepalive_timer of this V1devicesdeviceIddraftDraftBgp1.  # noqa: E501


        :return: The keepalive_timer of this V1devicesdeviceIddraftDraftBgp1.  # noqa: E501
        :rtype: str
        """
        return self._keepalive_timer

    @keepalive_timer.setter
    def keepalive_timer(self, keepalive_timer):
        """Sets the keepalive_timer of this V1devicesdeviceIddraftDraftBgp1.


        :param keepalive_timer: The keepalive_timer of this V1devicesdeviceIddraftDraftBgp1.  # noqa: E501
        :type: str
        """

        self._keepalive_timer = keepalive_timer

    @property
    def md5_password(self):
        """Gets the md5_password of this V1devicesdeviceIddraftDraftBgp1.  # noqa: E501


        :return: The md5_password of this V1devicesdeviceIddraftDraftBgp1.  # noqa: E501
        :rtype: str
        """
        return self._md5_password

    @md5_password.setter
    def md5_password(self, md5_password):
        """Sets the md5_password of this V1devicesdeviceIddraftDraftBgp1.


        :param md5_password: The md5_password of this V1devicesdeviceIddraftDraftBgp1.  # noqa: E501
        :type: str
        """

        self._md5_password = md5_password

    @property
    def peer_asn(self):
        """Gets the peer_asn of this V1devicesdeviceIddraftDraftBgp1.  # noqa: E501


        :return: The peer_asn of this V1devicesdeviceIddraftDraftBgp1.  # noqa: E501
        :rtype: str
        """
        return self._peer_asn

    @peer_asn.setter
    def peer_asn(self, peer_asn):
        """Sets the peer_asn of this V1devicesdeviceIddraftDraftBgp1.


        :param peer_asn: The peer_asn of this V1devicesdeviceIddraftDraftBgp1.  # noqa: E501
        :type: str
        """

        self._peer_asn = peer_asn

    @property
    def send_community(self):
        """Gets the send_community of this V1devicesdeviceIddraftDraftBgp1.  # noqa: E501


        :return: The send_community of this V1devicesdeviceIddraftDraftBgp1.  # noqa: E501
        :rtype: str
        """
        return self._send_community

    @send_community.setter
    def send_community(self, send_community):
        """Sets the send_community of this V1devicesdeviceIddraftDraftBgp1.


        :param send_community: The send_community of this V1devicesdeviceIddraftDraftBgp1.  # noqa: E501
        :type: str
        """

        self._send_community = send_community

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1devicesdeviceIddraftDraftBgp1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1devicesdeviceIddraftDraftBgp1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
