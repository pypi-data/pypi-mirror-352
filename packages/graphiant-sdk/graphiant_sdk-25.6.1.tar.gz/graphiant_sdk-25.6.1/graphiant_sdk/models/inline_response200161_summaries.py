# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200161Summaries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attach_point': 'str',
        'id': 'str',
        'ip_version': 'str',
        'name': 'str',
        'num_attached_devices': 'str',
        'num_attached_sites': 'str',
        'num_failures': 'str',
        'num_in_sync_devices': 'str',
        'num_override_devices': 'str',
        'num_policies': 'str',
        'num_prefixes': 'str',
        'num_rules': 'str',
        'num_statements': 'str',
        'traffic_policy_type': 'str'
    }

    attribute_map = {
        'attach_point': 'attachPoint',
        'id': 'id',
        'ip_version': 'ipVersion',
        'name': 'name',
        'num_attached_devices': 'numAttachedDevices',
        'num_attached_sites': 'numAttachedSites',
        'num_failures': 'numFailures',
        'num_in_sync_devices': 'numInSyncDevices',
        'num_override_devices': 'numOverrideDevices',
        'num_policies': 'numPolicies',
        'num_prefixes': 'numPrefixes',
        'num_rules': 'numRules',
        'num_statements': 'numStatements',
        'traffic_policy_type': 'trafficPolicyType'
    }

    def __init__(self, attach_point=None, id=None, ip_version=None, name=None, num_attached_devices=None, num_attached_sites=None, num_failures=None, num_in_sync_devices=None, num_override_devices=None, num_policies=None, num_prefixes=None, num_rules=None, num_statements=None, traffic_policy_type=None):  # noqa: E501
        """InlineResponse200161Summaries - a model defined in Swagger"""  # noqa: E501
        self._attach_point = None
        self._id = None
        self._ip_version = None
        self._name = None
        self._num_attached_devices = None
        self._num_attached_sites = None
        self._num_failures = None
        self._num_in_sync_devices = None
        self._num_override_devices = None
        self._num_policies = None
        self._num_prefixes = None
        self._num_rules = None
        self._num_statements = None
        self._traffic_policy_type = None
        self.discriminator = None
        if attach_point is not None:
            self.attach_point = attach_point
        if id is not None:
            self.id = id
        if ip_version is not None:
            self.ip_version = ip_version
        if name is not None:
            self.name = name
        if num_attached_devices is not None:
            self.num_attached_devices = num_attached_devices
        if num_attached_sites is not None:
            self.num_attached_sites = num_attached_sites
        if num_failures is not None:
            self.num_failures = num_failures
        if num_in_sync_devices is not None:
            self.num_in_sync_devices = num_in_sync_devices
        if num_override_devices is not None:
            self.num_override_devices = num_override_devices
        if num_policies is not None:
            self.num_policies = num_policies
        if num_prefixes is not None:
            self.num_prefixes = num_prefixes
        if num_rules is not None:
            self.num_rules = num_rules
        if num_statements is not None:
            self.num_statements = num_statements
        if traffic_policy_type is not None:
            self.traffic_policy_type = traffic_policy_type

    @property
    def attach_point(self):
        """Gets the attach_point of this InlineResponse200161Summaries.  # noqa: E501


        :return: The attach_point of this InlineResponse200161Summaries.  # noqa: E501
        :rtype: str
        """
        return self._attach_point

    @attach_point.setter
    def attach_point(self, attach_point):
        """Sets the attach_point of this InlineResponse200161Summaries.


        :param attach_point: The attach_point of this InlineResponse200161Summaries.  # noqa: E501
        :type: str
        """

        self._attach_point = attach_point

    @property
    def id(self):
        """Gets the id of this InlineResponse200161Summaries.  # noqa: E501


        :return: The id of this InlineResponse200161Summaries.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200161Summaries.


        :param id: The id of this InlineResponse200161Summaries.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ip_version(self):
        """Gets the ip_version of this InlineResponse200161Summaries.  # noqa: E501


        :return: The ip_version of this InlineResponse200161Summaries.  # noqa: E501
        :rtype: str
        """
        return self._ip_version

    @ip_version.setter
    def ip_version(self, ip_version):
        """Sets the ip_version of this InlineResponse200161Summaries.


        :param ip_version: The ip_version of this InlineResponse200161Summaries.  # noqa: E501
        :type: str
        """

        self._ip_version = ip_version

    @property
    def name(self):
        """Gets the name of this InlineResponse200161Summaries.  # noqa: E501


        :return: The name of this InlineResponse200161Summaries.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200161Summaries.


        :param name: The name of this InlineResponse200161Summaries.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num_attached_devices(self):
        """Gets the num_attached_devices of this InlineResponse200161Summaries.  # noqa: E501


        :return: The num_attached_devices of this InlineResponse200161Summaries.  # noqa: E501
        :rtype: str
        """
        return self._num_attached_devices

    @num_attached_devices.setter
    def num_attached_devices(self, num_attached_devices):
        """Sets the num_attached_devices of this InlineResponse200161Summaries.


        :param num_attached_devices: The num_attached_devices of this InlineResponse200161Summaries.  # noqa: E501
        :type: str
        """

        self._num_attached_devices = num_attached_devices

    @property
    def num_attached_sites(self):
        """Gets the num_attached_sites of this InlineResponse200161Summaries.  # noqa: E501


        :return: The num_attached_sites of this InlineResponse200161Summaries.  # noqa: E501
        :rtype: str
        """
        return self._num_attached_sites

    @num_attached_sites.setter
    def num_attached_sites(self, num_attached_sites):
        """Sets the num_attached_sites of this InlineResponse200161Summaries.


        :param num_attached_sites: The num_attached_sites of this InlineResponse200161Summaries.  # noqa: E501
        :type: str
        """

        self._num_attached_sites = num_attached_sites

    @property
    def num_failures(self):
        """Gets the num_failures of this InlineResponse200161Summaries.  # noqa: E501


        :return: The num_failures of this InlineResponse200161Summaries.  # noqa: E501
        :rtype: str
        """
        return self._num_failures

    @num_failures.setter
    def num_failures(self, num_failures):
        """Sets the num_failures of this InlineResponse200161Summaries.


        :param num_failures: The num_failures of this InlineResponse200161Summaries.  # noqa: E501
        :type: str
        """

        self._num_failures = num_failures

    @property
    def num_in_sync_devices(self):
        """Gets the num_in_sync_devices of this InlineResponse200161Summaries.  # noqa: E501


        :return: The num_in_sync_devices of this InlineResponse200161Summaries.  # noqa: E501
        :rtype: str
        """
        return self._num_in_sync_devices

    @num_in_sync_devices.setter
    def num_in_sync_devices(self, num_in_sync_devices):
        """Sets the num_in_sync_devices of this InlineResponse200161Summaries.


        :param num_in_sync_devices: The num_in_sync_devices of this InlineResponse200161Summaries.  # noqa: E501
        :type: str
        """

        self._num_in_sync_devices = num_in_sync_devices

    @property
    def num_override_devices(self):
        """Gets the num_override_devices of this InlineResponse200161Summaries.  # noqa: E501


        :return: The num_override_devices of this InlineResponse200161Summaries.  # noqa: E501
        :rtype: str
        """
        return self._num_override_devices

    @num_override_devices.setter
    def num_override_devices(self, num_override_devices):
        """Sets the num_override_devices of this InlineResponse200161Summaries.


        :param num_override_devices: The num_override_devices of this InlineResponse200161Summaries.  # noqa: E501
        :type: str
        """

        self._num_override_devices = num_override_devices

    @property
    def num_policies(self):
        """Gets the num_policies of this InlineResponse200161Summaries.  # noqa: E501


        :return: The num_policies of this InlineResponse200161Summaries.  # noqa: E501
        :rtype: str
        """
        return self._num_policies

    @num_policies.setter
    def num_policies(self, num_policies):
        """Sets the num_policies of this InlineResponse200161Summaries.


        :param num_policies: The num_policies of this InlineResponse200161Summaries.  # noqa: E501
        :type: str
        """

        self._num_policies = num_policies

    @property
    def num_prefixes(self):
        """Gets the num_prefixes of this InlineResponse200161Summaries.  # noqa: E501


        :return: The num_prefixes of this InlineResponse200161Summaries.  # noqa: E501
        :rtype: str
        """
        return self._num_prefixes

    @num_prefixes.setter
    def num_prefixes(self, num_prefixes):
        """Sets the num_prefixes of this InlineResponse200161Summaries.


        :param num_prefixes: The num_prefixes of this InlineResponse200161Summaries.  # noqa: E501
        :type: str
        """

        self._num_prefixes = num_prefixes

    @property
    def num_rules(self):
        """Gets the num_rules of this InlineResponse200161Summaries.  # noqa: E501


        :return: The num_rules of this InlineResponse200161Summaries.  # noqa: E501
        :rtype: str
        """
        return self._num_rules

    @num_rules.setter
    def num_rules(self, num_rules):
        """Sets the num_rules of this InlineResponse200161Summaries.


        :param num_rules: The num_rules of this InlineResponse200161Summaries.  # noqa: E501
        :type: str
        """

        self._num_rules = num_rules

    @property
    def num_statements(self):
        """Gets the num_statements of this InlineResponse200161Summaries.  # noqa: E501


        :return: The num_statements of this InlineResponse200161Summaries.  # noqa: E501
        :rtype: str
        """
        return self._num_statements

    @num_statements.setter
    def num_statements(self, num_statements):
        """Sets the num_statements of this InlineResponse200161Summaries.


        :param num_statements: The num_statements of this InlineResponse200161Summaries.  # noqa: E501
        :type: str
        """

        self._num_statements = num_statements

    @property
    def traffic_policy_type(self):
        """Gets the traffic_policy_type of this InlineResponse200161Summaries.  # noqa: E501


        :return: The traffic_policy_type of this InlineResponse200161Summaries.  # noqa: E501
        :rtype: str
        """
        return self._traffic_policy_type

    @traffic_policy_type.setter
    def traffic_policy_type(self, traffic_policy_type):
        """Sets the traffic_policy_type of this InlineResponse200161Summaries.


        :param traffic_policy_type: The traffic_policy_type of this InlineResponse200161Summaries.  # noqa: E501
        :type: str
        """

        self._traffic_policy_type = traffic_policy_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200161Summaries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200161Summaries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
