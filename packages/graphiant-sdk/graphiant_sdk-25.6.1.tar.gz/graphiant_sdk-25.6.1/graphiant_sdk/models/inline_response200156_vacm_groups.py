# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200156VacmGroups(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accesses': 'list[InlineResponse200156Accesses]',
        'group_members': 'list[InlineResponse200156GroupMembers]',
        'id': 'str',
        'name': 'str',
        'views': 'list[InlineResponse200156Views]'
    }

    attribute_map = {
        'accesses': 'accesses',
        'group_members': 'groupMembers',
        'id': 'id',
        'name': 'name',
        'views': 'views'
    }

    def __init__(self, accesses=None, group_members=None, id=None, name=None, views=None):  # noqa: E501
        """InlineResponse200156VacmGroups - a model defined in Swagger"""  # noqa: E501
        self._accesses = None
        self._group_members = None
        self._id = None
        self._name = None
        self._views = None
        self.discriminator = None
        if accesses is not None:
            self.accesses = accesses
        if group_members is not None:
            self.group_members = group_members
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if views is not None:
            self.views = views

    @property
    def accesses(self):
        """Gets the accesses of this InlineResponse200156VacmGroups.  # noqa: E501


        :return: The accesses of this InlineResponse200156VacmGroups.  # noqa: E501
        :rtype: list[InlineResponse200156Accesses]
        """
        return self._accesses

    @accesses.setter
    def accesses(self, accesses):
        """Sets the accesses of this InlineResponse200156VacmGroups.


        :param accesses: The accesses of this InlineResponse200156VacmGroups.  # noqa: E501
        :type: list[InlineResponse200156Accesses]
        """

        self._accesses = accesses

    @property
    def group_members(self):
        """Gets the group_members of this InlineResponse200156VacmGroups.  # noqa: E501


        :return: The group_members of this InlineResponse200156VacmGroups.  # noqa: E501
        :rtype: list[InlineResponse200156GroupMembers]
        """
        return self._group_members

    @group_members.setter
    def group_members(self, group_members):
        """Sets the group_members of this InlineResponse200156VacmGroups.


        :param group_members: The group_members of this InlineResponse200156VacmGroups.  # noqa: E501
        :type: list[InlineResponse200156GroupMembers]
        """

        self._group_members = group_members

    @property
    def id(self):
        """Gets the id of this InlineResponse200156VacmGroups.  # noqa: E501


        :return: The id of this InlineResponse200156VacmGroups.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200156VacmGroups.


        :param id: The id of this InlineResponse200156VacmGroups.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse200156VacmGroups.  # noqa: E501


        :return: The name of this InlineResponse200156VacmGroups.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200156VacmGroups.


        :param name: The name of this InlineResponse200156VacmGroups.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def views(self):
        """Gets the views of this InlineResponse200156VacmGroups.  # noqa: E501


        :return: The views of this InlineResponse200156VacmGroups.  # noqa: E501
        :rtype: list[InlineResponse200156Views]
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this InlineResponse200156VacmGroups.


        :param views: The views of this InlineResponse200156VacmGroups.  # noqa: E501
        :type: list[InlineResponse200156Views]
        """

        self._views = views

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200156VacmGroups, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200156VacmGroups):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
