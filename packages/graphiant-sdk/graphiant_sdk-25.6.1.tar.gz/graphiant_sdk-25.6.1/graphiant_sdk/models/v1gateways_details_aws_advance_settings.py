# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1gatewaysDetailsAwsAdvanceSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_family': 'str',
        'allowed_prefixes': 'list[str]',
        'amazon_bgp_router_ip': 'str',
        'bgp_auth_key': 'str',
        'customer_bgp_router_ip': 'str',
        'is_jumbo': 'str'
    }

    attribute_map = {
        'address_family': 'addressFamily',
        'allowed_prefixes': 'allowedPrefixes',
        'amazon_bgp_router_ip': 'amazonBgpRouterIp',
        'bgp_auth_key': 'bgpAuthKey',
        'customer_bgp_router_ip': 'customerBgpRouterIp',
        'is_jumbo': 'isJumbo'
    }

    def __init__(self, address_family=None, allowed_prefixes=None, amazon_bgp_router_ip=None, bgp_auth_key=None, customer_bgp_router_ip=None, is_jumbo=None):  # noqa: E501
        """V1gatewaysDetailsAwsAdvanceSettings - a model defined in Swagger"""  # noqa: E501
        self._address_family = None
        self._allowed_prefixes = None
        self._amazon_bgp_router_ip = None
        self._bgp_auth_key = None
        self._customer_bgp_router_ip = None
        self._is_jumbo = None
        self.discriminator = None
        if address_family is not None:
            self.address_family = address_family
        if allowed_prefixes is not None:
            self.allowed_prefixes = allowed_prefixes
        if amazon_bgp_router_ip is not None:
            self.amazon_bgp_router_ip = amazon_bgp_router_ip
        if bgp_auth_key is not None:
            self.bgp_auth_key = bgp_auth_key
        if customer_bgp_router_ip is not None:
            self.customer_bgp_router_ip = customer_bgp_router_ip
        if is_jumbo is not None:
            self.is_jumbo = is_jumbo

    @property
    def address_family(self):
        """Gets the address_family of this V1gatewaysDetailsAwsAdvanceSettings.  # noqa: E501


        :return: The address_family of this V1gatewaysDetailsAwsAdvanceSettings.  # noqa: E501
        :rtype: str
        """
        return self._address_family

    @address_family.setter
    def address_family(self, address_family):
        """Sets the address_family of this V1gatewaysDetailsAwsAdvanceSettings.


        :param address_family: The address_family of this V1gatewaysDetailsAwsAdvanceSettings.  # noqa: E501
        :type: str
        """

        self._address_family = address_family

    @property
    def allowed_prefixes(self):
        """Gets the allowed_prefixes of this V1gatewaysDetailsAwsAdvanceSettings.  # noqa: E501


        :return: The allowed_prefixes of this V1gatewaysDetailsAwsAdvanceSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_prefixes

    @allowed_prefixes.setter
    def allowed_prefixes(self, allowed_prefixes):
        """Sets the allowed_prefixes of this V1gatewaysDetailsAwsAdvanceSettings.


        :param allowed_prefixes: The allowed_prefixes of this V1gatewaysDetailsAwsAdvanceSettings.  # noqa: E501
        :type: list[str]
        """

        self._allowed_prefixes = allowed_prefixes

    @property
    def amazon_bgp_router_ip(self):
        """Gets the amazon_bgp_router_ip of this V1gatewaysDetailsAwsAdvanceSettings.  # noqa: E501


        :return: The amazon_bgp_router_ip of this V1gatewaysDetailsAwsAdvanceSettings.  # noqa: E501
        :rtype: str
        """
        return self._amazon_bgp_router_ip

    @amazon_bgp_router_ip.setter
    def amazon_bgp_router_ip(self, amazon_bgp_router_ip):
        """Sets the amazon_bgp_router_ip of this V1gatewaysDetailsAwsAdvanceSettings.


        :param amazon_bgp_router_ip: The amazon_bgp_router_ip of this V1gatewaysDetailsAwsAdvanceSettings.  # noqa: E501
        :type: str
        """

        self._amazon_bgp_router_ip = amazon_bgp_router_ip

    @property
    def bgp_auth_key(self):
        """Gets the bgp_auth_key of this V1gatewaysDetailsAwsAdvanceSettings.  # noqa: E501


        :return: The bgp_auth_key of this V1gatewaysDetailsAwsAdvanceSettings.  # noqa: E501
        :rtype: str
        """
        return self._bgp_auth_key

    @bgp_auth_key.setter
    def bgp_auth_key(self, bgp_auth_key):
        """Sets the bgp_auth_key of this V1gatewaysDetailsAwsAdvanceSettings.


        :param bgp_auth_key: The bgp_auth_key of this V1gatewaysDetailsAwsAdvanceSettings.  # noqa: E501
        :type: str
        """

        self._bgp_auth_key = bgp_auth_key

    @property
    def customer_bgp_router_ip(self):
        """Gets the customer_bgp_router_ip of this V1gatewaysDetailsAwsAdvanceSettings.  # noqa: E501


        :return: The customer_bgp_router_ip of this V1gatewaysDetailsAwsAdvanceSettings.  # noqa: E501
        :rtype: str
        """
        return self._customer_bgp_router_ip

    @customer_bgp_router_ip.setter
    def customer_bgp_router_ip(self, customer_bgp_router_ip):
        """Sets the customer_bgp_router_ip of this V1gatewaysDetailsAwsAdvanceSettings.


        :param customer_bgp_router_ip: The customer_bgp_router_ip of this V1gatewaysDetailsAwsAdvanceSettings.  # noqa: E501
        :type: str
        """

        self._customer_bgp_router_ip = customer_bgp_router_ip

    @property
    def is_jumbo(self):
        """Gets the is_jumbo of this V1gatewaysDetailsAwsAdvanceSettings.  # noqa: E501


        :return: The is_jumbo of this V1gatewaysDetailsAwsAdvanceSettings.  # noqa: E501
        :rtype: str
        """
        return self._is_jumbo

    @is_jumbo.setter
    def is_jumbo(self, is_jumbo):
        """Sets the is_jumbo of this V1gatewaysDetailsAwsAdvanceSettings.


        :param is_jumbo: The is_jumbo of this V1gatewaysDetailsAwsAdvanceSettings.  # noqa: E501
        :type: str
        """

        self._is_jumbo = is_jumbo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1gatewaysDetailsAwsAdvanceSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1gatewaysDetailsAwsAdvanceSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
