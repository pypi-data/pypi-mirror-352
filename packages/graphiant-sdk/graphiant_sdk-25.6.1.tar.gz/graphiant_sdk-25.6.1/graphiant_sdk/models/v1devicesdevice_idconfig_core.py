# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1devicesdeviceIdconfigCore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bgp_instance': 'V1devicesdeviceIdconfigCoreBgpInstance',
        'core_vrf': 'V1devicesdeviceIdconfigCoreCoreVrf',
        'interfaces': 'list[V1devicesdeviceIdconfigCoreInterfaces]',
        'ipfix_exporters': 'list[V1devicesdeviceIdconfigCoreIpfixExporters]',
        'isp_vrfs': 'list[V1devicesdeviceIdconfigCoreIspVrfs]',
        'maintenance_mode': 'str',
        'name': 'str',
        'prefix_sets': 'list[V1devicesdeviceIdconfigCorePrefixSets]',
        'prometheus': 'V1devicesdeviceIdconfigCorePrometheus',
        'region': 'str',
        'region_name': 'str',
        'route_policies': 'list[V1devicesdeviceIdconfigCoreRoutePolicies]',
        'site': 'V1devicesdeviceIdconfigCoreSite',
        'traffic_policy': 'V1devicesdeviceIdconfigCoreTrafficPolicy',
        'vrfs': 'list[V1devicesdeviceIdconfigCoreIspVrfs]'
    }

    attribute_map = {
        'bgp_instance': 'bgpInstance',
        'core_vrf': 'coreVrf',
        'interfaces': 'interfaces',
        'ipfix_exporters': 'ipfixExporters',
        'isp_vrfs': 'ispVrfs',
        'maintenance_mode': 'maintenanceMode',
        'name': 'name',
        'prefix_sets': 'prefixSets',
        'prometheus': 'prometheus',
        'region': 'region',
        'region_name': 'regionName',
        'route_policies': 'routePolicies',
        'site': 'site',
        'traffic_policy': 'trafficPolicy',
        'vrfs': 'vrfs'
    }

    def __init__(self, bgp_instance=None, core_vrf=None, interfaces=None, ipfix_exporters=None, isp_vrfs=None, maintenance_mode=None, name=None, prefix_sets=None, prometheus=None, region=None, region_name=None, route_policies=None, site=None, traffic_policy=None, vrfs=None):  # noqa: E501
        """V1devicesdeviceIdconfigCore - a model defined in Swagger"""  # noqa: E501
        self._bgp_instance = None
        self._core_vrf = None
        self._interfaces = None
        self._ipfix_exporters = None
        self._isp_vrfs = None
        self._maintenance_mode = None
        self._name = None
        self._prefix_sets = None
        self._prometheus = None
        self._region = None
        self._region_name = None
        self._route_policies = None
        self._site = None
        self._traffic_policy = None
        self._vrfs = None
        self.discriminator = None
        if bgp_instance is not None:
            self.bgp_instance = bgp_instance
        if core_vrf is not None:
            self.core_vrf = core_vrf
        if interfaces is not None:
            self.interfaces = interfaces
        if ipfix_exporters is not None:
            self.ipfix_exporters = ipfix_exporters
        if isp_vrfs is not None:
            self.isp_vrfs = isp_vrfs
        if maintenance_mode is not None:
            self.maintenance_mode = maintenance_mode
        if name is not None:
            self.name = name
        if prefix_sets is not None:
            self.prefix_sets = prefix_sets
        if prometheus is not None:
            self.prometheus = prometheus
        if region is not None:
            self.region = region
        if region_name is not None:
            self.region_name = region_name
        if route_policies is not None:
            self.route_policies = route_policies
        if site is not None:
            self.site = site
        if traffic_policy is not None:
            self.traffic_policy = traffic_policy
        if vrfs is not None:
            self.vrfs = vrfs

    @property
    def bgp_instance(self):
        """Gets the bgp_instance of this V1devicesdeviceIdconfigCore.  # noqa: E501


        :return: The bgp_instance of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :rtype: V1devicesdeviceIdconfigCoreBgpInstance
        """
        return self._bgp_instance

    @bgp_instance.setter
    def bgp_instance(self, bgp_instance):
        """Sets the bgp_instance of this V1devicesdeviceIdconfigCore.


        :param bgp_instance: The bgp_instance of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :type: V1devicesdeviceIdconfigCoreBgpInstance
        """

        self._bgp_instance = bgp_instance

    @property
    def core_vrf(self):
        """Gets the core_vrf of this V1devicesdeviceIdconfigCore.  # noqa: E501


        :return: The core_vrf of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :rtype: V1devicesdeviceIdconfigCoreCoreVrf
        """
        return self._core_vrf

    @core_vrf.setter
    def core_vrf(self, core_vrf):
        """Sets the core_vrf of this V1devicesdeviceIdconfigCore.


        :param core_vrf: The core_vrf of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :type: V1devicesdeviceIdconfigCoreCoreVrf
        """

        self._core_vrf = core_vrf

    @property
    def interfaces(self):
        """Gets the interfaces of this V1devicesdeviceIdconfigCore.  # noqa: E501


        :return: The interfaces of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCoreInterfaces]
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """Sets the interfaces of this V1devicesdeviceIdconfigCore.


        :param interfaces: The interfaces of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCoreInterfaces]
        """

        self._interfaces = interfaces

    @property
    def ipfix_exporters(self):
        """Gets the ipfix_exporters of this V1devicesdeviceIdconfigCore.  # noqa: E501


        :return: The ipfix_exporters of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCoreIpfixExporters]
        """
        return self._ipfix_exporters

    @ipfix_exporters.setter
    def ipfix_exporters(self, ipfix_exporters):
        """Sets the ipfix_exporters of this V1devicesdeviceIdconfigCore.


        :param ipfix_exporters: The ipfix_exporters of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCoreIpfixExporters]
        """

        self._ipfix_exporters = ipfix_exporters

    @property
    def isp_vrfs(self):
        """Gets the isp_vrfs of this V1devicesdeviceIdconfigCore.  # noqa: E501


        :return: The isp_vrfs of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCoreIspVrfs]
        """
        return self._isp_vrfs

    @isp_vrfs.setter
    def isp_vrfs(self, isp_vrfs):
        """Sets the isp_vrfs of this V1devicesdeviceIdconfigCore.


        :param isp_vrfs: The isp_vrfs of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCoreIspVrfs]
        """

        self._isp_vrfs = isp_vrfs

    @property
    def maintenance_mode(self):
        """Gets the maintenance_mode of this V1devicesdeviceIdconfigCore.  # noqa: E501


        :return: The maintenance_mode of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """Sets the maintenance_mode of this V1devicesdeviceIdconfigCore.


        :param maintenance_mode: The maintenance_mode of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :type: str
        """

        self._maintenance_mode = maintenance_mode

    @property
    def name(self):
        """Gets the name of this V1devicesdeviceIdconfigCore.  # noqa: E501


        :return: The name of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1devicesdeviceIdconfigCore.


        :param name: The name of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def prefix_sets(self):
        """Gets the prefix_sets of this V1devicesdeviceIdconfigCore.  # noqa: E501


        :return: The prefix_sets of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCorePrefixSets]
        """
        return self._prefix_sets

    @prefix_sets.setter
    def prefix_sets(self, prefix_sets):
        """Sets the prefix_sets of this V1devicesdeviceIdconfigCore.


        :param prefix_sets: The prefix_sets of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCorePrefixSets]
        """

        self._prefix_sets = prefix_sets

    @property
    def prometheus(self):
        """Gets the prometheus of this V1devicesdeviceIdconfigCore.  # noqa: E501


        :return: The prometheus of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :rtype: V1devicesdeviceIdconfigCorePrometheus
        """
        return self._prometheus

    @prometheus.setter
    def prometheus(self, prometheus):
        """Sets the prometheus of this V1devicesdeviceIdconfigCore.


        :param prometheus: The prometheus of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :type: V1devicesdeviceIdconfigCorePrometheus
        """

        self._prometheus = prometheus

    @property
    def region(self):
        """Gets the region of this V1devicesdeviceIdconfigCore.  # noqa: E501


        :return: The region of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this V1devicesdeviceIdconfigCore.


        :param region: The region of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def region_name(self):
        """Gets the region_name of this V1devicesdeviceIdconfigCore.  # noqa: E501


        :return: The region_name of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this V1devicesdeviceIdconfigCore.


        :param region_name: The region_name of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :type: str
        """

        self._region_name = region_name

    @property
    def route_policies(self):
        """Gets the route_policies of this V1devicesdeviceIdconfigCore.  # noqa: E501


        :return: The route_policies of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCoreRoutePolicies]
        """
        return self._route_policies

    @route_policies.setter
    def route_policies(self, route_policies):
        """Sets the route_policies of this V1devicesdeviceIdconfigCore.


        :param route_policies: The route_policies of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCoreRoutePolicies]
        """

        self._route_policies = route_policies

    @property
    def site(self):
        """Gets the site of this V1devicesdeviceIdconfigCore.  # noqa: E501


        :return: The site of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :rtype: V1devicesdeviceIdconfigCoreSite
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this V1devicesdeviceIdconfigCore.


        :param site: The site of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :type: V1devicesdeviceIdconfigCoreSite
        """

        self._site = site

    @property
    def traffic_policy(self):
        """Gets the traffic_policy of this V1devicesdeviceIdconfigCore.  # noqa: E501


        :return: The traffic_policy of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :rtype: V1devicesdeviceIdconfigCoreTrafficPolicy
        """
        return self._traffic_policy

    @traffic_policy.setter
    def traffic_policy(self, traffic_policy):
        """Sets the traffic_policy of this V1devicesdeviceIdconfigCore.


        :param traffic_policy: The traffic_policy of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :type: V1devicesdeviceIdconfigCoreTrafficPolicy
        """

        self._traffic_policy = traffic_policy

    @property
    def vrfs(self):
        """Gets the vrfs of this V1devicesdeviceIdconfigCore.  # noqa: E501


        :return: The vrfs of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCoreIspVrfs]
        """
        return self._vrfs

    @vrfs.setter
    def vrfs(self, vrfs):
        """Sets the vrfs of this V1devicesdeviceIdconfigCore.


        :param vrfs: The vrfs of this V1devicesdeviceIdconfigCore.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCoreIspVrfs]
        """

        self._vrfs = vrfs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1devicesdeviceIdconfigCore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1devicesdeviceIdconfigCore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
