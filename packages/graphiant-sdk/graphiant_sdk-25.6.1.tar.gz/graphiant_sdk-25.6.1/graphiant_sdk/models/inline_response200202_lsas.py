# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200202Lsas(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertising_router': 'str',
        'age': 'str',
        'asexternal_lsa': 'InlineResponse200202AsexternalLsa',
        'checksum': 'str',
        'length': 'str',
        'link_id': 'str',
        'network_lsa': 'InlineResponse200202NetworkLsa',
        'router_lsa': 'InlineResponse200202RouterLsa',
        'sequence_number': 'str',
        'summary_lsa': 'InlineResponse200202SummaryLsa',
        'type': 'str'
    }

    attribute_map = {
        'advertising_router': 'advertisingRouter',
        'age': 'age',
        'asexternal_lsa': 'asexternalLsa',
        'checksum': 'checksum',
        'length': 'length',
        'link_id': 'linkId',
        'network_lsa': 'networkLsa',
        'router_lsa': 'routerLsa',
        'sequence_number': 'sequenceNumber',
        'summary_lsa': 'summaryLsa',
        'type': 'type'
    }

    def __init__(self, advertising_router=None, age=None, asexternal_lsa=None, checksum=None, length=None, link_id=None, network_lsa=None, router_lsa=None, sequence_number=None, summary_lsa=None, type=None):  # noqa: E501
        """InlineResponse200202Lsas - a model defined in Swagger"""  # noqa: E501
        self._advertising_router = None
        self._age = None
        self._asexternal_lsa = None
        self._checksum = None
        self._length = None
        self._link_id = None
        self._network_lsa = None
        self._router_lsa = None
        self._sequence_number = None
        self._summary_lsa = None
        self._type = None
        self.discriminator = None
        if advertising_router is not None:
            self.advertising_router = advertising_router
        if age is not None:
            self.age = age
        if asexternal_lsa is not None:
            self.asexternal_lsa = asexternal_lsa
        if checksum is not None:
            self.checksum = checksum
        if length is not None:
            self.length = length
        if link_id is not None:
            self.link_id = link_id
        if network_lsa is not None:
            self.network_lsa = network_lsa
        if router_lsa is not None:
            self.router_lsa = router_lsa
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if summary_lsa is not None:
            self.summary_lsa = summary_lsa
        if type is not None:
            self.type = type

    @property
    def advertising_router(self):
        """Gets the advertising_router of this InlineResponse200202Lsas.  # noqa: E501


        :return: The advertising_router of this InlineResponse200202Lsas.  # noqa: E501
        :rtype: str
        """
        return self._advertising_router

    @advertising_router.setter
    def advertising_router(self, advertising_router):
        """Sets the advertising_router of this InlineResponse200202Lsas.


        :param advertising_router: The advertising_router of this InlineResponse200202Lsas.  # noqa: E501
        :type: str
        """

        self._advertising_router = advertising_router

    @property
    def age(self):
        """Gets the age of this InlineResponse200202Lsas.  # noqa: E501


        :return: The age of this InlineResponse200202Lsas.  # noqa: E501
        :rtype: str
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this InlineResponse200202Lsas.


        :param age: The age of this InlineResponse200202Lsas.  # noqa: E501
        :type: str
        """

        self._age = age

    @property
    def asexternal_lsa(self):
        """Gets the asexternal_lsa of this InlineResponse200202Lsas.  # noqa: E501


        :return: The asexternal_lsa of this InlineResponse200202Lsas.  # noqa: E501
        :rtype: InlineResponse200202AsexternalLsa
        """
        return self._asexternal_lsa

    @asexternal_lsa.setter
    def asexternal_lsa(self, asexternal_lsa):
        """Sets the asexternal_lsa of this InlineResponse200202Lsas.


        :param asexternal_lsa: The asexternal_lsa of this InlineResponse200202Lsas.  # noqa: E501
        :type: InlineResponse200202AsexternalLsa
        """

        self._asexternal_lsa = asexternal_lsa

    @property
    def checksum(self):
        """Gets the checksum of this InlineResponse200202Lsas.  # noqa: E501


        :return: The checksum of this InlineResponse200202Lsas.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this InlineResponse200202Lsas.


        :param checksum: The checksum of this InlineResponse200202Lsas.  # noqa: E501
        :type: str
        """

        self._checksum = checksum

    @property
    def length(self):
        """Gets the length of this InlineResponse200202Lsas.  # noqa: E501


        :return: The length of this InlineResponse200202Lsas.  # noqa: E501
        :rtype: str
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this InlineResponse200202Lsas.


        :param length: The length of this InlineResponse200202Lsas.  # noqa: E501
        :type: str
        """

        self._length = length

    @property
    def link_id(self):
        """Gets the link_id of this InlineResponse200202Lsas.  # noqa: E501


        :return: The link_id of this InlineResponse200202Lsas.  # noqa: E501
        :rtype: str
        """
        return self._link_id

    @link_id.setter
    def link_id(self, link_id):
        """Sets the link_id of this InlineResponse200202Lsas.


        :param link_id: The link_id of this InlineResponse200202Lsas.  # noqa: E501
        :type: str
        """

        self._link_id = link_id

    @property
    def network_lsa(self):
        """Gets the network_lsa of this InlineResponse200202Lsas.  # noqa: E501


        :return: The network_lsa of this InlineResponse200202Lsas.  # noqa: E501
        :rtype: InlineResponse200202NetworkLsa
        """
        return self._network_lsa

    @network_lsa.setter
    def network_lsa(self, network_lsa):
        """Sets the network_lsa of this InlineResponse200202Lsas.


        :param network_lsa: The network_lsa of this InlineResponse200202Lsas.  # noqa: E501
        :type: InlineResponse200202NetworkLsa
        """

        self._network_lsa = network_lsa

    @property
    def router_lsa(self):
        """Gets the router_lsa of this InlineResponse200202Lsas.  # noqa: E501


        :return: The router_lsa of this InlineResponse200202Lsas.  # noqa: E501
        :rtype: InlineResponse200202RouterLsa
        """
        return self._router_lsa

    @router_lsa.setter
    def router_lsa(self, router_lsa):
        """Sets the router_lsa of this InlineResponse200202Lsas.


        :param router_lsa: The router_lsa of this InlineResponse200202Lsas.  # noqa: E501
        :type: InlineResponse200202RouterLsa
        """

        self._router_lsa = router_lsa

    @property
    def sequence_number(self):
        """Gets the sequence_number of this InlineResponse200202Lsas.  # noqa: E501


        :return: The sequence_number of this InlineResponse200202Lsas.  # noqa: E501
        :rtype: str
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this InlineResponse200202Lsas.


        :param sequence_number: The sequence_number of this InlineResponse200202Lsas.  # noqa: E501
        :type: str
        """

        self._sequence_number = sequence_number

    @property
    def summary_lsa(self):
        """Gets the summary_lsa of this InlineResponse200202Lsas.  # noqa: E501


        :return: The summary_lsa of this InlineResponse200202Lsas.  # noqa: E501
        :rtype: InlineResponse200202SummaryLsa
        """
        return self._summary_lsa

    @summary_lsa.setter
    def summary_lsa(self, summary_lsa):
        """Sets the summary_lsa of this InlineResponse200202Lsas.


        :param summary_lsa: The summary_lsa of this InlineResponse200202Lsas.  # noqa: E501
        :type: InlineResponse200202SummaryLsa
        """

        self._summary_lsa = summary_lsa

    @property
    def type(self):
        """Gets the type of this InlineResponse200202Lsas.  # noqa: E501


        :return: The type of this InlineResponse200202Lsas.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse200202Lsas.


        :param type: The type of this InlineResponse200202Lsas.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200202Lsas, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200202Lsas):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
