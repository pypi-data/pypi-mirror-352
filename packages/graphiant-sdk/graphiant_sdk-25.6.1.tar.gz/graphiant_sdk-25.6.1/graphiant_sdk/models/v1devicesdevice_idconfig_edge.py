# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1devicesdeviceIdconfigEdge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bgp_enabled': 'str',
        'bgp_instance': 'V1devicesdeviceIdconfigCoreBgpInstance',
        'circuits': 'list[V1devicesdeviceIdconfigEdgeCircuits]',
        'dhcp_server_enabled': 'str',
        'dns': 'V1devicesdeviceIdconfigEdgeDns',
        'interfaces': 'list[V1devicesdeviceIdconfigCoreInterfaces]',
        'ipfix_enabled': 'str',
        'ipfix_exporters': 'list[V1devicesdeviceIdconfigCoreIpfixExporters]',
        'lldp_enabled': 'str',
        'local_route_tag': 'V1devicesdeviceIdconfigEdgeLocalRouteTag',
        'local_web_server_password': 'str',
        'location': 'V1sitesSiteLocation',
        'maintenance_mode': 'str',
        'name': 'str',
        'nat_policy': 'V1devicesdeviceIdconfigEdgeNatPolicy',
        'ospfv2_enabled': 'str',
        'ospfv3_enabled': 'str',
        'prefix_sets': 'list[V1devicesdeviceIdconfigCorePrefixSets]',
        'region': 'str',
        'region_name': 'str',
        'route_policies': 'list[V1devicesdeviceIdconfigCoreRoutePolicies]',
        'segments': 'list[V1devicesdeviceIdconfigCoreIspVrfs]',
        'site': 'V1devicesdeviceIdconfigCoreSite',
        'site_to_site_vpn': 'list[V1devicesdeviceIdconfigEdgeSiteToSiteVpn]',
        'snmp': 'V1globalconfigValue4',
        'snmp_global_object': 'list[V1devicesdeviceIdconfigEdgeSnmpGlobalObject]',
        'static_routes_enabled': 'str',
        'traffic_policy': 'V1devicesdeviceIdconfigCoreTrafficPolicy',
        'vrrp_enabled': 'str'
    }

    attribute_map = {
        'bgp_enabled': 'bgpEnabled',
        'bgp_instance': 'bgpInstance',
        'circuits': 'circuits',
        'dhcp_server_enabled': 'dhcpServerEnabled',
        'dns': 'dns',
        'interfaces': 'interfaces',
        'ipfix_enabled': 'ipfixEnabled',
        'ipfix_exporters': 'ipfixExporters',
        'lldp_enabled': 'lldpEnabled',
        'local_route_tag': 'localRouteTag',
        'local_web_server_password': 'localWebServerPassword',
        'location': 'location',
        'maintenance_mode': 'maintenanceMode',
        'name': 'name',
        'nat_policy': 'natPolicy',
        'ospfv2_enabled': 'ospfv2Enabled',
        'ospfv3_enabled': 'ospfv3Enabled',
        'prefix_sets': 'prefixSets',
        'region': 'region',
        'region_name': 'regionName',
        'route_policies': 'routePolicies',
        'segments': 'segments',
        'site': 'site',
        'site_to_site_vpn': 'siteToSiteVpn',
        'snmp': 'snmp',
        'snmp_global_object': 'snmpGlobalObject',
        'static_routes_enabled': 'staticRoutesEnabled',
        'traffic_policy': 'trafficPolicy',
        'vrrp_enabled': 'vrrpEnabled'
    }

    def __init__(self, bgp_enabled=None, bgp_instance=None, circuits=None, dhcp_server_enabled=None, dns=None, interfaces=None, ipfix_enabled=None, ipfix_exporters=None, lldp_enabled=None, local_route_tag=None, local_web_server_password=None, location=None, maintenance_mode=None, name=None, nat_policy=None, ospfv2_enabled=None, ospfv3_enabled=None, prefix_sets=None, region=None, region_name=None, route_policies=None, segments=None, site=None, site_to_site_vpn=None, snmp=None, snmp_global_object=None, static_routes_enabled=None, traffic_policy=None, vrrp_enabled=None):  # noqa: E501
        """V1devicesdeviceIdconfigEdge - a model defined in Swagger"""  # noqa: E501
        self._bgp_enabled = None
        self._bgp_instance = None
        self._circuits = None
        self._dhcp_server_enabled = None
        self._dns = None
        self._interfaces = None
        self._ipfix_enabled = None
        self._ipfix_exporters = None
        self._lldp_enabled = None
        self._local_route_tag = None
        self._local_web_server_password = None
        self._location = None
        self._maintenance_mode = None
        self._name = None
        self._nat_policy = None
        self._ospfv2_enabled = None
        self._ospfv3_enabled = None
        self._prefix_sets = None
        self._region = None
        self._region_name = None
        self._route_policies = None
        self._segments = None
        self._site = None
        self._site_to_site_vpn = None
        self._snmp = None
        self._snmp_global_object = None
        self._static_routes_enabled = None
        self._traffic_policy = None
        self._vrrp_enabled = None
        self.discriminator = None
        if bgp_enabled is not None:
            self.bgp_enabled = bgp_enabled
        if bgp_instance is not None:
            self.bgp_instance = bgp_instance
        if circuits is not None:
            self.circuits = circuits
        if dhcp_server_enabled is not None:
            self.dhcp_server_enabled = dhcp_server_enabled
        if dns is not None:
            self.dns = dns
        if interfaces is not None:
            self.interfaces = interfaces
        if ipfix_enabled is not None:
            self.ipfix_enabled = ipfix_enabled
        if ipfix_exporters is not None:
            self.ipfix_exporters = ipfix_exporters
        if lldp_enabled is not None:
            self.lldp_enabled = lldp_enabled
        if local_route_tag is not None:
            self.local_route_tag = local_route_tag
        if local_web_server_password is not None:
            self.local_web_server_password = local_web_server_password
        if location is not None:
            self.location = location
        if maintenance_mode is not None:
            self.maintenance_mode = maintenance_mode
        if name is not None:
            self.name = name
        if nat_policy is not None:
            self.nat_policy = nat_policy
        if ospfv2_enabled is not None:
            self.ospfv2_enabled = ospfv2_enabled
        if ospfv3_enabled is not None:
            self.ospfv3_enabled = ospfv3_enabled
        if prefix_sets is not None:
            self.prefix_sets = prefix_sets
        if region is not None:
            self.region = region
        if region_name is not None:
            self.region_name = region_name
        if route_policies is not None:
            self.route_policies = route_policies
        if segments is not None:
            self.segments = segments
        if site is not None:
            self.site = site
        if site_to_site_vpn is not None:
            self.site_to_site_vpn = site_to_site_vpn
        if snmp is not None:
            self.snmp = snmp
        if snmp_global_object is not None:
            self.snmp_global_object = snmp_global_object
        if static_routes_enabled is not None:
            self.static_routes_enabled = static_routes_enabled
        if traffic_policy is not None:
            self.traffic_policy = traffic_policy
        if vrrp_enabled is not None:
            self.vrrp_enabled = vrrp_enabled

    @property
    def bgp_enabled(self):
        """Gets the bgp_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The bgp_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: str
        """
        return self._bgp_enabled

    @bgp_enabled.setter
    def bgp_enabled(self, bgp_enabled):
        """Sets the bgp_enabled of this V1devicesdeviceIdconfigEdge.


        :param bgp_enabled: The bgp_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: str
        """

        self._bgp_enabled = bgp_enabled

    @property
    def bgp_instance(self):
        """Gets the bgp_instance of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The bgp_instance of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: V1devicesdeviceIdconfigCoreBgpInstance
        """
        return self._bgp_instance

    @bgp_instance.setter
    def bgp_instance(self, bgp_instance):
        """Sets the bgp_instance of this V1devicesdeviceIdconfigEdge.


        :param bgp_instance: The bgp_instance of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: V1devicesdeviceIdconfigCoreBgpInstance
        """

        self._bgp_instance = bgp_instance

    @property
    def circuits(self):
        """Gets the circuits of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The circuits of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigEdgeCircuits]
        """
        return self._circuits

    @circuits.setter
    def circuits(self, circuits):
        """Sets the circuits of this V1devicesdeviceIdconfigEdge.


        :param circuits: The circuits of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigEdgeCircuits]
        """

        self._circuits = circuits

    @property
    def dhcp_server_enabled(self):
        """Gets the dhcp_server_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The dhcp_server_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: str
        """
        return self._dhcp_server_enabled

    @dhcp_server_enabled.setter
    def dhcp_server_enabled(self, dhcp_server_enabled):
        """Sets the dhcp_server_enabled of this V1devicesdeviceIdconfigEdge.


        :param dhcp_server_enabled: The dhcp_server_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: str
        """

        self._dhcp_server_enabled = dhcp_server_enabled

    @property
    def dns(self):
        """Gets the dns of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The dns of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: V1devicesdeviceIdconfigEdgeDns
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this V1devicesdeviceIdconfigEdge.


        :param dns: The dns of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: V1devicesdeviceIdconfigEdgeDns
        """

        self._dns = dns

    @property
    def interfaces(self):
        """Gets the interfaces of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The interfaces of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCoreInterfaces]
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """Sets the interfaces of this V1devicesdeviceIdconfigEdge.


        :param interfaces: The interfaces of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCoreInterfaces]
        """

        self._interfaces = interfaces

    @property
    def ipfix_enabled(self):
        """Gets the ipfix_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The ipfix_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: str
        """
        return self._ipfix_enabled

    @ipfix_enabled.setter
    def ipfix_enabled(self, ipfix_enabled):
        """Sets the ipfix_enabled of this V1devicesdeviceIdconfigEdge.


        :param ipfix_enabled: The ipfix_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: str
        """

        self._ipfix_enabled = ipfix_enabled

    @property
    def ipfix_exporters(self):
        """Gets the ipfix_exporters of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The ipfix_exporters of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCoreIpfixExporters]
        """
        return self._ipfix_exporters

    @ipfix_exporters.setter
    def ipfix_exporters(self, ipfix_exporters):
        """Sets the ipfix_exporters of this V1devicesdeviceIdconfigEdge.


        :param ipfix_exporters: The ipfix_exporters of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCoreIpfixExporters]
        """

        self._ipfix_exporters = ipfix_exporters

    @property
    def lldp_enabled(self):
        """Gets the lldp_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The lldp_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: str
        """
        return self._lldp_enabled

    @lldp_enabled.setter
    def lldp_enabled(self, lldp_enabled):
        """Sets the lldp_enabled of this V1devicesdeviceIdconfigEdge.


        :param lldp_enabled: The lldp_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: str
        """

        self._lldp_enabled = lldp_enabled

    @property
    def local_route_tag(self):
        """Gets the local_route_tag of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The local_route_tag of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: V1devicesdeviceIdconfigEdgeLocalRouteTag
        """
        return self._local_route_tag

    @local_route_tag.setter
    def local_route_tag(self, local_route_tag):
        """Sets the local_route_tag of this V1devicesdeviceIdconfigEdge.


        :param local_route_tag: The local_route_tag of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: V1devicesdeviceIdconfigEdgeLocalRouteTag
        """

        self._local_route_tag = local_route_tag

    @property
    def local_web_server_password(self):
        """Gets the local_web_server_password of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The local_web_server_password of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: str
        """
        return self._local_web_server_password

    @local_web_server_password.setter
    def local_web_server_password(self, local_web_server_password):
        """Sets the local_web_server_password of this V1devicesdeviceIdconfigEdge.


        :param local_web_server_password: The local_web_server_password of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: str
        """

        self._local_web_server_password = local_web_server_password

    @property
    def location(self):
        """Gets the location of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The location of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: V1sitesSiteLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this V1devicesdeviceIdconfigEdge.


        :param location: The location of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: V1sitesSiteLocation
        """

        self._location = location

    @property
    def maintenance_mode(self):
        """Gets the maintenance_mode of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The maintenance_mode of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """Sets the maintenance_mode of this V1devicesdeviceIdconfigEdge.


        :param maintenance_mode: The maintenance_mode of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: str
        """

        self._maintenance_mode = maintenance_mode

    @property
    def name(self):
        """Gets the name of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The name of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1devicesdeviceIdconfigEdge.


        :param name: The name of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nat_policy(self):
        """Gets the nat_policy of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The nat_policy of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: V1devicesdeviceIdconfigEdgeNatPolicy
        """
        return self._nat_policy

    @nat_policy.setter
    def nat_policy(self, nat_policy):
        """Sets the nat_policy of this V1devicesdeviceIdconfigEdge.


        :param nat_policy: The nat_policy of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: V1devicesdeviceIdconfigEdgeNatPolicy
        """

        self._nat_policy = nat_policy

    @property
    def ospfv2_enabled(self):
        """Gets the ospfv2_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The ospfv2_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: str
        """
        return self._ospfv2_enabled

    @ospfv2_enabled.setter
    def ospfv2_enabled(self, ospfv2_enabled):
        """Sets the ospfv2_enabled of this V1devicesdeviceIdconfigEdge.


        :param ospfv2_enabled: The ospfv2_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: str
        """

        self._ospfv2_enabled = ospfv2_enabled

    @property
    def ospfv3_enabled(self):
        """Gets the ospfv3_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The ospfv3_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: str
        """
        return self._ospfv3_enabled

    @ospfv3_enabled.setter
    def ospfv3_enabled(self, ospfv3_enabled):
        """Sets the ospfv3_enabled of this V1devicesdeviceIdconfigEdge.


        :param ospfv3_enabled: The ospfv3_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: str
        """

        self._ospfv3_enabled = ospfv3_enabled

    @property
    def prefix_sets(self):
        """Gets the prefix_sets of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The prefix_sets of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCorePrefixSets]
        """
        return self._prefix_sets

    @prefix_sets.setter
    def prefix_sets(self, prefix_sets):
        """Sets the prefix_sets of this V1devicesdeviceIdconfigEdge.


        :param prefix_sets: The prefix_sets of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCorePrefixSets]
        """

        self._prefix_sets = prefix_sets

    @property
    def region(self):
        """Gets the region of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The region of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this V1devicesdeviceIdconfigEdge.


        :param region: The region of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def region_name(self):
        """Gets the region_name of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The region_name of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this V1devicesdeviceIdconfigEdge.


        :param region_name: The region_name of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: str
        """

        self._region_name = region_name

    @property
    def route_policies(self):
        """Gets the route_policies of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The route_policies of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCoreRoutePolicies]
        """
        return self._route_policies

    @route_policies.setter
    def route_policies(self, route_policies):
        """Sets the route_policies of this V1devicesdeviceIdconfigEdge.


        :param route_policies: The route_policies of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCoreRoutePolicies]
        """

        self._route_policies = route_policies

    @property
    def segments(self):
        """Gets the segments of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The segments of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCoreIspVrfs]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this V1devicesdeviceIdconfigEdge.


        :param segments: The segments of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCoreIspVrfs]
        """

        self._segments = segments

    @property
    def site(self):
        """Gets the site of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The site of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: V1devicesdeviceIdconfigCoreSite
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this V1devicesdeviceIdconfigEdge.


        :param site: The site of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: V1devicesdeviceIdconfigCoreSite
        """

        self._site = site

    @property
    def site_to_site_vpn(self):
        """Gets the site_to_site_vpn of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The site_to_site_vpn of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigEdgeSiteToSiteVpn]
        """
        return self._site_to_site_vpn

    @site_to_site_vpn.setter
    def site_to_site_vpn(self, site_to_site_vpn):
        """Sets the site_to_site_vpn of this V1devicesdeviceIdconfigEdge.


        :param site_to_site_vpn: The site_to_site_vpn of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigEdgeSiteToSiteVpn]
        """

        self._site_to_site_vpn = site_to_site_vpn

    @property
    def snmp(self):
        """Gets the snmp of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The snmp of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: V1globalconfigValue4
        """
        return self._snmp

    @snmp.setter
    def snmp(self, snmp):
        """Sets the snmp of this V1devicesdeviceIdconfigEdge.


        :param snmp: The snmp of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: V1globalconfigValue4
        """

        self._snmp = snmp

    @property
    def snmp_global_object(self):
        """Gets the snmp_global_object of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The snmp_global_object of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigEdgeSnmpGlobalObject]
        """
        return self._snmp_global_object

    @snmp_global_object.setter
    def snmp_global_object(self, snmp_global_object):
        """Sets the snmp_global_object of this V1devicesdeviceIdconfigEdge.


        :param snmp_global_object: The snmp_global_object of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigEdgeSnmpGlobalObject]
        """

        self._snmp_global_object = snmp_global_object

    @property
    def static_routes_enabled(self):
        """Gets the static_routes_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The static_routes_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: str
        """
        return self._static_routes_enabled

    @static_routes_enabled.setter
    def static_routes_enabled(self, static_routes_enabled):
        """Sets the static_routes_enabled of this V1devicesdeviceIdconfigEdge.


        :param static_routes_enabled: The static_routes_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: str
        """

        self._static_routes_enabled = static_routes_enabled

    @property
    def traffic_policy(self):
        """Gets the traffic_policy of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The traffic_policy of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: V1devicesdeviceIdconfigCoreTrafficPolicy
        """
        return self._traffic_policy

    @traffic_policy.setter
    def traffic_policy(self, traffic_policy):
        """Sets the traffic_policy of this V1devicesdeviceIdconfigEdge.


        :param traffic_policy: The traffic_policy of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: V1devicesdeviceIdconfigCoreTrafficPolicy
        """

        self._traffic_policy = traffic_policy

    @property
    def vrrp_enabled(self):
        """Gets the vrrp_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501


        :return: The vrrp_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :rtype: str
        """
        return self._vrrp_enabled

    @vrrp_enabled.setter
    def vrrp_enabled(self, vrrp_enabled):
        """Sets the vrrp_enabled of this V1devicesdeviceIdconfigEdge.


        :param vrrp_enabled: The vrrp_enabled of this V1devicesdeviceIdconfigEdge.  # noqa: E501
        :type: str
        """

        self._vrrp_enabled = vrrp_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1devicesdeviceIdconfigEdge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1devicesdeviceIdconfigEdge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
