# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1dataassuranceassurancesglobalConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apps': 'list[V1dataassuranceassurancesglobalConfigApps]',
        'flex_algo': 'str',
        'lan_names': 'list[str]',
        'name': 'str',
        'site_list_id': 'str',
        'use_all_sites': 'str'
    }

    attribute_map = {
        'apps': 'apps',
        'flex_algo': 'flexAlgo',
        'lan_names': 'lanNames',
        'name': 'name',
        'site_list_id': 'siteListId',
        'use_all_sites': 'useAllSites'
    }

    def __init__(self, apps=None, flex_algo=None, lan_names=None, name=None, site_list_id=None, use_all_sites=None):  # noqa: E501
        """V1dataassuranceassurancesglobalConfig - a model defined in Swagger"""  # noqa: E501
        self._apps = None
        self._flex_algo = None
        self._lan_names = None
        self._name = None
        self._site_list_id = None
        self._use_all_sites = None
        self.discriminator = None
        if apps is not None:
            self.apps = apps
        if flex_algo is not None:
            self.flex_algo = flex_algo
        if lan_names is not None:
            self.lan_names = lan_names
        if name is not None:
            self.name = name
        if site_list_id is not None:
            self.site_list_id = site_list_id
        if use_all_sites is not None:
            self.use_all_sites = use_all_sites

    @property
    def apps(self):
        """Gets the apps of this V1dataassuranceassurancesglobalConfig.  # noqa: E501


        :return: The apps of this V1dataassuranceassurancesglobalConfig.  # noqa: E501
        :rtype: list[V1dataassuranceassurancesglobalConfigApps]
        """
        return self._apps

    @apps.setter
    def apps(self, apps):
        """Sets the apps of this V1dataassuranceassurancesglobalConfig.


        :param apps: The apps of this V1dataassuranceassurancesglobalConfig.  # noqa: E501
        :type: list[V1dataassuranceassurancesglobalConfigApps]
        """

        self._apps = apps

    @property
    def flex_algo(self):
        """Gets the flex_algo of this V1dataassuranceassurancesglobalConfig.  # noqa: E501


        :return: The flex_algo of this V1dataassuranceassurancesglobalConfig.  # noqa: E501
        :rtype: str
        """
        return self._flex_algo

    @flex_algo.setter
    def flex_algo(self, flex_algo):
        """Sets the flex_algo of this V1dataassuranceassurancesglobalConfig.


        :param flex_algo: The flex_algo of this V1dataassuranceassurancesglobalConfig.  # noqa: E501
        :type: str
        """

        self._flex_algo = flex_algo

    @property
    def lan_names(self):
        """Gets the lan_names of this V1dataassuranceassurancesglobalConfig.  # noqa: E501


        :return: The lan_names of this V1dataassuranceassurancesglobalConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._lan_names

    @lan_names.setter
    def lan_names(self, lan_names):
        """Sets the lan_names of this V1dataassuranceassurancesglobalConfig.


        :param lan_names: The lan_names of this V1dataassuranceassurancesglobalConfig.  # noqa: E501
        :type: list[str]
        """

        self._lan_names = lan_names

    @property
    def name(self):
        """Gets the name of this V1dataassuranceassurancesglobalConfig.  # noqa: E501


        :return: The name of this V1dataassuranceassurancesglobalConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1dataassuranceassurancesglobalConfig.


        :param name: The name of this V1dataassuranceassurancesglobalConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def site_list_id(self):
        """Gets the site_list_id of this V1dataassuranceassurancesglobalConfig.  # noqa: E501


        :return: The site_list_id of this V1dataassuranceassurancesglobalConfig.  # noqa: E501
        :rtype: str
        """
        return self._site_list_id

    @site_list_id.setter
    def site_list_id(self, site_list_id):
        """Sets the site_list_id of this V1dataassuranceassurancesglobalConfig.


        :param site_list_id: The site_list_id of this V1dataassuranceassurancesglobalConfig.  # noqa: E501
        :type: str
        """

        self._site_list_id = site_list_id

    @property
    def use_all_sites(self):
        """Gets the use_all_sites of this V1dataassuranceassurancesglobalConfig.  # noqa: E501


        :return: The use_all_sites of this V1dataassuranceassurancesglobalConfig.  # noqa: E501
        :rtype: str
        """
        return self._use_all_sites

    @use_all_sites.setter
    def use_all_sites(self, use_all_sites):
        """Sets the use_all_sites of this V1dataassuranceassurancesglobalConfig.


        :param use_all_sites: The use_all_sites of this V1dataassuranceassurancesglobalConfig.  # noqa: E501
        :type: str
        """

        self._use_all_sites = use_all_sites

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1dataassuranceassurancesglobalConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1dataassuranceassurancesglobalConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
