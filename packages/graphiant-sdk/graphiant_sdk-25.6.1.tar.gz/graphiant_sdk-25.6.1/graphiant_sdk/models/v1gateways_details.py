# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1gatewaysDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aws': 'V1gatewaysDetailsAws',
        'azure': 'V1gatewaysDetailsAzure',
        'description': 'str',
        'gcp': 'V1gatewaysDetailsGcp',
        'ipsec_gateway': 'V1gatewaysDetailsIpsecGateway',
        'oci': 'V1gatewaysDetailsOci',
        'region_id': 'str',
        'speed': 'str',
        'vrf_id': 'str'
    }

    attribute_map = {
        'aws': 'aws',
        'azure': 'azure',
        'description': 'description',
        'gcp': 'gcp',
        'ipsec_gateway': 'ipsecGateway',
        'oci': 'oci',
        'region_id': 'regionId',
        'speed': 'speed',
        'vrf_id': 'vrfId'
    }

    def __init__(self, aws=None, azure=None, description=None, gcp=None, ipsec_gateway=None, oci=None, region_id=None, speed=None, vrf_id=None):  # noqa: E501
        """V1gatewaysDetails - a model defined in Swagger"""  # noqa: E501
        self._aws = None
        self._azure = None
        self._description = None
        self._gcp = None
        self._ipsec_gateway = None
        self._oci = None
        self._region_id = None
        self._speed = None
        self._vrf_id = None
        self.discriminator = None
        if aws is not None:
            self.aws = aws
        if azure is not None:
            self.azure = azure
        if description is not None:
            self.description = description
        if gcp is not None:
            self.gcp = gcp
        if ipsec_gateway is not None:
            self.ipsec_gateway = ipsec_gateway
        if oci is not None:
            self.oci = oci
        if region_id is not None:
            self.region_id = region_id
        if speed is not None:
            self.speed = speed
        if vrf_id is not None:
            self.vrf_id = vrf_id

    @property
    def aws(self):
        """Gets the aws of this V1gatewaysDetails.  # noqa: E501


        :return: The aws of this V1gatewaysDetails.  # noqa: E501
        :rtype: V1gatewaysDetailsAws
        """
        return self._aws

    @aws.setter
    def aws(self, aws):
        """Sets the aws of this V1gatewaysDetails.


        :param aws: The aws of this V1gatewaysDetails.  # noqa: E501
        :type: V1gatewaysDetailsAws
        """

        self._aws = aws

    @property
    def azure(self):
        """Gets the azure of this V1gatewaysDetails.  # noqa: E501


        :return: The azure of this V1gatewaysDetails.  # noqa: E501
        :rtype: V1gatewaysDetailsAzure
        """
        return self._azure

    @azure.setter
    def azure(self, azure):
        """Sets the azure of this V1gatewaysDetails.


        :param azure: The azure of this V1gatewaysDetails.  # noqa: E501
        :type: V1gatewaysDetailsAzure
        """

        self._azure = azure

    @property
    def description(self):
        """Gets the description of this V1gatewaysDetails.  # noqa: E501


        :return: The description of this V1gatewaysDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V1gatewaysDetails.


        :param description: The description of this V1gatewaysDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def gcp(self):
        """Gets the gcp of this V1gatewaysDetails.  # noqa: E501


        :return: The gcp of this V1gatewaysDetails.  # noqa: E501
        :rtype: V1gatewaysDetailsGcp
        """
        return self._gcp

    @gcp.setter
    def gcp(self, gcp):
        """Sets the gcp of this V1gatewaysDetails.


        :param gcp: The gcp of this V1gatewaysDetails.  # noqa: E501
        :type: V1gatewaysDetailsGcp
        """

        self._gcp = gcp

    @property
    def ipsec_gateway(self):
        """Gets the ipsec_gateway of this V1gatewaysDetails.  # noqa: E501


        :return: The ipsec_gateway of this V1gatewaysDetails.  # noqa: E501
        :rtype: V1gatewaysDetailsIpsecGateway
        """
        return self._ipsec_gateway

    @ipsec_gateway.setter
    def ipsec_gateway(self, ipsec_gateway):
        """Sets the ipsec_gateway of this V1gatewaysDetails.


        :param ipsec_gateway: The ipsec_gateway of this V1gatewaysDetails.  # noqa: E501
        :type: V1gatewaysDetailsIpsecGateway
        """

        self._ipsec_gateway = ipsec_gateway

    @property
    def oci(self):
        """Gets the oci of this V1gatewaysDetails.  # noqa: E501


        :return: The oci of this V1gatewaysDetails.  # noqa: E501
        :rtype: V1gatewaysDetailsOci
        """
        return self._oci

    @oci.setter
    def oci(self, oci):
        """Sets the oci of this V1gatewaysDetails.


        :param oci: The oci of this V1gatewaysDetails.  # noqa: E501
        :type: V1gatewaysDetailsOci
        """

        self._oci = oci

    @property
    def region_id(self):
        """Gets the region_id of this V1gatewaysDetails.  # noqa: E501


        :return: The region_id of this V1gatewaysDetails.  # noqa: E501
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this V1gatewaysDetails.


        :param region_id: The region_id of this V1gatewaysDetails.  # noqa: E501
        :type: str
        """

        self._region_id = region_id

    @property
    def speed(self):
        """Gets the speed of this V1gatewaysDetails.  # noqa: E501


        :return: The speed of this V1gatewaysDetails.  # noqa: E501
        :rtype: str
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this V1gatewaysDetails.


        :param speed: The speed of this V1gatewaysDetails.  # noqa: E501
        :type: str
        """

        self._speed = speed

    @property
    def vrf_id(self):
        """Gets the vrf_id of this V1gatewaysDetails.  # noqa: E501


        :return: The vrf_id of this V1gatewaysDetails.  # noqa: E501
        :rtype: str
        """
        return self._vrf_id

    @vrf_id.setter
    def vrf_id(self, vrf_id):
        """Sets the vrf_id of this V1gatewaysDetails.


        :param vrf_id: The vrf_id of this V1gatewaysDetails.  # noqa: E501
        :type: str
        """

        self._vrf_id = vrf_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1gatewaysDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1gatewaysDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
