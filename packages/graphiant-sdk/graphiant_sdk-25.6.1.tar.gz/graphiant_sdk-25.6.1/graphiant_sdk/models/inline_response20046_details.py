# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20046Details(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'attributes': 'list[V1activitylogsSelectorJobEntity]',
        'category': 'str',
        'disable_auto_timeout': 'str',
        'end_ts': 'V1devicesbringuptokenValidTillTs',
        'enterprise_id': 'str',
        'id': 'str',
        'initiator_type': 'str',
        'job_entities': 'list[V1activitylogsSelectorJobEntity]',
        'job_type': 'str',
        'original_enterprise_id': 'str',
        'start_ts': 'V1devicesbringuptokenValidTillTs',
        'status': 'str',
        'targets': 'list[InlineResponse20046Targets]',
        'trace_session_id': 'str',
        'usage': 'str',
        'user': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'action': 'action',
        'attributes': 'attributes',
        'category': 'category',
        'disable_auto_timeout': 'disableAutoTimeout',
        'end_ts': 'endTs',
        'enterprise_id': 'enterpriseId',
        'id': 'id',
        'initiator_type': 'initiatorType',
        'job_entities': 'jobEntities',
        'job_type': 'jobType',
        'original_enterprise_id': 'originalEnterpriseId',
        'start_ts': 'startTs',
        'status': 'status',
        'targets': 'targets',
        'trace_session_id': 'traceSessionId',
        'usage': 'usage',
        'user': 'user',
        'user_id': 'userId'
    }

    def __init__(self, action=None, attributes=None, category=None, disable_auto_timeout=None, end_ts=None, enterprise_id=None, id=None, initiator_type=None, job_entities=None, job_type=None, original_enterprise_id=None, start_ts=None, status=None, targets=None, trace_session_id=None, usage=None, user=None, user_id=None):  # noqa: E501
        """InlineResponse20046Details - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._attributes = None
        self._category = None
        self._disable_auto_timeout = None
        self._end_ts = None
        self._enterprise_id = None
        self._id = None
        self._initiator_type = None
        self._job_entities = None
        self._job_type = None
        self._original_enterprise_id = None
        self._start_ts = None
        self._status = None
        self._targets = None
        self._trace_session_id = None
        self._usage = None
        self._user = None
        self._user_id = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if attributes is not None:
            self.attributes = attributes
        if category is not None:
            self.category = category
        if disable_auto_timeout is not None:
            self.disable_auto_timeout = disable_auto_timeout
        if end_ts is not None:
            self.end_ts = end_ts
        if enterprise_id is not None:
            self.enterprise_id = enterprise_id
        if id is not None:
            self.id = id
        if initiator_type is not None:
            self.initiator_type = initiator_type
        if job_entities is not None:
            self.job_entities = job_entities
        if job_type is not None:
            self.job_type = job_type
        if original_enterprise_id is not None:
            self.original_enterprise_id = original_enterprise_id
        if start_ts is not None:
            self.start_ts = start_ts
        if status is not None:
            self.status = status
        if targets is not None:
            self.targets = targets
        if trace_session_id is not None:
            self.trace_session_id = trace_session_id
        if usage is not None:
            self.usage = usage
        if user is not None:
            self.user = user
        if user_id is not None:
            self.user_id = user_id

    @property
    def action(self):
        """Gets the action of this InlineResponse20046Details.  # noqa: E501


        :return: The action of this InlineResponse20046Details.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this InlineResponse20046Details.


        :param action: The action of this InlineResponse20046Details.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def attributes(self):
        """Gets the attributes of this InlineResponse20046Details.  # noqa: E501


        :return: The attributes of this InlineResponse20046Details.  # noqa: E501
        :rtype: list[V1activitylogsSelectorJobEntity]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this InlineResponse20046Details.


        :param attributes: The attributes of this InlineResponse20046Details.  # noqa: E501
        :type: list[V1activitylogsSelectorJobEntity]
        """

        self._attributes = attributes

    @property
    def category(self):
        """Gets the category of this InlineResponse20046Details.  # noqa: E501


        :return: The category of this InlineResponse20046Details.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this InlineResponse20046Details.


        :param category: The category of this InlineResponse20046Details.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def disable_auto_timeout(self):
        """Gets the disable_auto_timeout of this InlineResponse20046Details.  # noqa: E501


        :return: The disable_auto_timeout of this InlineResponse20046Details.  # noqa: E501
        :rtype: str
        """
        return self._disable_auto_timeout

    @disable_auto_timeout.setter
    def disable_auto_timeout(self, disable_auto_timeout):
        """Sets the disable_auto_timeout of this InlineResponse20046Details.


        :param disable_auto_timeout: The disable_auto_timeout of this InlineResponse20046Details.  # noqa: E501
        :type: str
        """

        self._disable_auto_timeout = disable_auto_timeout

    @property
    def end_ts(self):
        """Gets the end_ts of this InlineResponse20046Details.  # noqa: E501


        :return: The end_ts of this InlineResponse20046Details.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._end_ts

    @end_ts.setter
    def end_ts(self, end_ts):
        """Sets the end_ts of this InlineResponse20046Details.


        :param end_ts: The end_ts of this InlineResponse20046Details.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._end_ts = end_ts

    @property
    def enterprise_id(self):
        """Gets the enterprise_id of this InlineResponse20046Details.  # noqa: E501


        :return: The enterprise_id of this InlineResponse20046Details.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_id

    @enterprise_id.setter
    def enterprise_id(self, enterprise_id):
        """Sets the enterprise_id of this InlineResponse20046Details.


        :param enterprise_id: The enterprise_id of this InlineResponse20046Details.  # noqa: E501
        :type: str
        """

        self._enterprise_id = enterprise_id

    @property
    def id(self):
        """Gets the id of this InlineResponse20046Details.  # noqa: E501


        :return: The id of this InlineResponse20046Details.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20046Details.


        :param id: The id of this InlineResponse20046Details.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def initiator_type(self):
        """Gets the initiator_type of this InlineResponse20046Details.  # noqa: E501


        :return: The initiator_type of this InlineResponse20046Details.  # noqa: E501
        :rtype: str
        """
        return self._initiator_type

    @initiator_type.setter
    def initiator_type(self, initiator_type):
        """Sets the initiator_type of this InlineResponse20046Details.


        :param initiator_type: The initiator_type of this InlineResponse20046Details.  # noqa: E501
        :type: str
        """

        self._initiator_type = initiator_type

    @property
    def job_entities(self):
        """Gets the job_entities of this InlineResponse20046Details.  # noqa: E501


        :return: The job_entities of this InlineResponse20046Details.  # noqa: E501
        :rtype: list[V1activitylogsSelectorJobEntity]
        """
        return self._job_entities

    @job_entities.setter
    def job_entities(self, job_entities):
        """Sets the job_entities of this InlineResponse20046Details.


        :param job_entities: The job_entities of this InlineResponse20046Details.  # noqa: E501
        :type: list[V1activitylogsSelectorJobEntity]
        """

        self._job_entities = job_entities

    @property
    def job_type(self):
        """Gets the job_type of this InlineResponse20046Details.  # noqa: E501


        :return: The job_type of this InlineResponse20046Details.  # noqa: E501
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this InlineResponse20046Details.


        :param job_type: The job_type of this InlineResponse20046Details.  # noqa: E501
        :type: str
        """

        self._job_type = job_type

    @property
    def original_enterprise_id(self):
        """Gets the original_enterprise_id of this InlineResponse20046Details.  # noqa: E501


        :return: The original_enterprise_id of this InlineResponse20046Details.  # noqa: E501
        :rtype: str
        """
        return self._original_enterprise_id

    @original_enterprise_id.setter
    def original_enterprise_id(self, original_enterprise_id):
        """Sets the original_enterprise_id of this InlineResponse20046Details.


        :param original_enterprise_id: The original_enterprise_id of this InlineResponse20046Details.  # noqa: E501
        :type: str
        """

        self._original_enterprise_id = original_enterprise_id

    @property
    def start_ts(self):
        """Gets the start_ts of this InlineResponse20046Details.  # noqa: E501


        :return: The start_ts of this InlineResponse20046Details.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._start_ts

    @start_ts.setter
    def start_ts(self, start_ts):
        """Sets the start_ts of this InlineResponse20046Details.


        :param start_ts: The start_ts of this InlineResponse20046Details.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._start_ts = start_ts

    @property
    def status(self):
        """Gets the status of this InlineResponse20046Details.  # noqa: E501


        :return: The status of this InlineResponse20046Details.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20046Details.


        :param status: The status of this InlineResponse20046Details.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def targets(self):
        """Gets the targets of this InlineResponse20046Details.  # noqa: E501


        :return: The targets of this InlineResponse20046Details.  # noqa: E501
        :rtype: list[InlineResponse20046Targets]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this InlineResponse20046Details.


        :param targets: The targets of this InlineResponse20046Details.  # noqa: E501
        :type: list[InlineResponse20046Targets]
        """

        self._targets = targets

    @property
    def trace_session_id(self):
        """Gets the trace_session_id of this InlineResponse20046Details.  # noqa: E501


        :return: The trace_session_id of this InlineResponse20046Details.  # noqa: E501
        :rtype: str
        """
        return self._trace_session_id

    @trace_session_id.setter
    def trace_session_id(self, trace_session_id):
        """Sets the trace_session_id of this InlineResponse20046Details.


        :param trace_session_id: The trace_session_id of this InlineResponse20046Details.  # noqa: E501
        :type: str
        """

        self._trace_session_id = trace_session_id

    @property
    def usage(self):
        """Gets the usage of this InlineResponse20046Details.  # noqa: E501


        :return: The usage of this InlineResponse20046Details.  # noqa: E501
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this InlineResponse20046Details.


        :param usage: The usage of this InlineResponse20046Details.  # noqa: E501
        :type: str
        """

        self._usage = usage

    @property
    def user(self):
        """Gets the user of this InlineResponse20046Details.  # noqa: E501


        :return: The user of this InlineResponse20046Details.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this InlineResponse20046Details.


        :param user: The user of this InlineResponse20046Details.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this InlineResponse20046Details.  # noqa: E501


        :return: The user_id of this InlineResponse20046Details.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InlineResponse20046Details.


        :param user_id: The user_id of this InlineResponse20046Details.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20046Details, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20046Details):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
