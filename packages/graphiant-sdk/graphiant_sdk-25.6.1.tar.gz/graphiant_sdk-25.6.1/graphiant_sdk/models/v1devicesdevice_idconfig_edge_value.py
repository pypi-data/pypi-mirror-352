# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1devicesdeviceIdconfigEdgeValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bgp_aggregations': 'list[object]',
        'bgp_multipath': 'object',
        'bgp_neighbors': 'list[object]',
        'bgp_redistribution': 'list[object]',
        'carrier': 'str',
        'circuit_type': 'str',
        'connection_type': 'str',
        'description': 'str',
        'dia_enabled': 'str',
        'drop_mechanism': 'str',
        'label': 'str',
        'last_resort': 'str',
        'link_down_speed_mbps': 'str',
        'link_up_speed_mbps': 'str',
        'loopback': 'str',
        'name': 'str',
        'pat_addresses': 'object',
        'qos_profile': 'str',
        'qos_profile_type': 'str',
        'static_routes': 'list[object]'
    }

    attribute_map = {
        'bgp_aggregations': 'bgpAggregations',
        'bgp_multipath': 'bgpMultipath',
        'bgp_neighbors': 'bgpNeighbors',
        'bgp_redistribution': 'bgpRedistribution',
        'carrier': 'carrier',
        'circuit_type': 'circuitType',
        'connection_type': 'connectionType',
        'description': 'description',
        'dia_enabled': 'diaEnabled',
        'drop_mechanism': 'dropMechanism',
        'label': 'label',
        'last_resort': 'lastResort',
        'link_down_speed_mbps': 'linkDownSpeedMbps',
        'link_up_speed_mbps': 'linkUpSpeedMbps',
        'loopback': 'loopback',
        'name': 'name',
        'pat_addresses': 'patAddresses',
        'qos_profile': 'qosProfile',
        'qos_profile_type': 'qosProfileType',
        'static_routes': 'staticRoutes'
    }

    def __init__(self, bgp_aggregations=None, bgp_multipath=None, bgp_neighbors=None, bgp_redistribution=None, carrier=None, circuit_type=None, connection_type=None, description=None, dia_enabled=None, drop_mechanism=None, label=None, last_resort=None, link_down_speed_mbps=None, link_up_speed_mbps=None, loopback=None, name=None, pat_addresses=None, qos_profile=None, qos_profile_type=None, static_routes=None):  # noqa: E501
        """V1devicesdeviceIdconfigEdgeValue - a model defined in Swagger"""  # noqa: E501
        self._bgp_aggregations = None
        self._bgp_multipath = None
        self._bgp_neighbors = None
        self._bgp_redistribution = None
        self._carrier = None
        self._circuit_type = None
        self._connection_type = None
        self._description = None
        self._dia_enabled = None
        self._drop_mechanism = None
        self._label = None
        self._last_resort = None
        self._link_down_speed_mbps = None
        self._link_up_speed_mbps = None
        self._loopback = None
        self._name = None
        self._pat_addresses = None
        self._qos_profile = None
        self._qos_profile_type = None
        self._static_routes = None
        self.discriminator = None
        if bgp_aggregations is not None:
            self.bgp_aggregations = bgp_aggregations
        if bgp_multipath is not None:
            self.bgp_multipath = bgp_multipath
        if bgp_neighbors is not None:
            self.bgp_neighbors = bgp_neighbors
        if bgp_redistribution is not None:
            self.bgp_redistribution = bgp_redistribution
        if carrier is not None:
            self.carrier = carrier
        if circuit_type is not None:
            self.circuit_type = circuit_type
        if connection_type is not None:
            self.connection_type = connection_type
        if description is not None:
            self.description = description
        if dia_enabled is not None:
            self.dia_enabled = dia_enabled
        if drop_mechanism is not None:
            self.drop_mechanism = drop_mechanism
        if label is not None:
            self.label = label
        if last_resort is not None:
            self.last_resort = last_resort
        if link_down_speed_mbps is not None:
            self.link_down_speed_mbps = link_down_speed_mbps
        if link_up_speed_mbps is not None:
            self.link_up_speed_mbps = link_up_speed_mbps
        if loopback is not None:
            self.loopback = loopback
        if name is not None:
            self.name = name
        if pat_addresses is not None:
            self.pat_addresses = pat_addresses
        if qos_profile is not None:
            self.qos_profile = qos_profile
        if qos_profile_type is not None:
            self.qos_profile_type = qos_profile_type
        if static_routes is not None:
            self.static_routes = static_routes

    @property
    def bgp_aggregations(self):
        """Gets the bgp_aggregations of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The bgp_aggregations of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: list[object]
        """
        return self._bgp_aggregations

    @bgp_aggregations.setter
    def bgp_aggregations(self, bgp_aggregations):
        """Sets the bgp_aggregations of this V1devicesdeviceIdconfigEdgeValue.


        :param bgp_aggregations: The bgp_aggregations of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: list[object]
        """

        self._bgp_aggregations = bgp_aggregations

    @property
    def bgp_multipath(self):
        """Gets the bgp_multipath of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The bgp_multipath of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: object
        """
        return self._bgp_multipath

    @bgp_multipath.setter
    def bgp_multipath(self, bgp_multipath):
        """Sets the bgp_multipath of this V1devicesdeviceIdconfigEdgeValue.


        :param bgp_multipath: The bgp_multipath of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: object
        """

        self._bgp_multipath = bgp_multipath

    @property
    def bgp_neighbors(self):
        """Gets the bgp_neighbors of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The bgp_neighbors of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: list[object]
        """
        return self._bgp_neighbors

    @bgp_neighbors.setter
    def bgp_neighbors(self, bgp_neighbors):
        """Sets the bgp_neighbors of this V1devicesdeviceIdconfigEdgeValue.


        :param bgp_neighbors: The bgp_neighbors of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: list[object]
        """

        self._bgp_neighbors = bgp_neighbors

    @property
    def bgp_redistribution(self):
        """Gets the bgp_redistribution of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The bgp_redistribution of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: list[object]
        """
        return self._bgp_redistribution

    @bgp_redistribution.setter
    def bgp_redistribution(self, bgp_redistribution):
        """Sets the bgp_redistribution of this V1devicesdeviceIdconfigEdgeValue.


        :param bgp_redistribution: The bgp_redistribution of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: list[object]
        """

        self._bgp_redistribution = bgp_redistribution

    @property
    def carrier(self):
        """Gets the carrier of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The carrier of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: str
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this V1devicesdeviceIdconfigEdgeValue.


        :param carrier: The carrier of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: str
        """

        self._carrier = carrier

    @property
    def circuit_type(self):
        """Gets the circuit_type of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The circuit_type of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: str
        """
        return self._circuit_type

    @circuit_type.setter
    def circuit_type(self, circuit_type):
        """Sets the circuit_type of this V1devicesdeviceIdconfigEdgeValue.


        :param circuit_type: The circuit_type of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: str
        """

        self._circuit_type = circuit_type

    @property
    def connection_type(self):
        """Gets the connection_type of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The connection_type of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this V1devicesdeviceIdconfigEdgeValue.


        :param connection_type: The connection_type of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: str
        """

        self._connection_type = connection_type

    @property
    def description(self):
        """Gets the description of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The description of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V1devicesdeviceIdconfigEdgeValue.


        :param description: The description of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dia_enabled(self):
        """Gets the dia_enabled of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The dia_enabled of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: str
        """
        return self._dia_enabled

    @dia_enabled.setter
    def dia_enabled(self, dia_enabled):
        """Sets the dia_enabled of this V1devicesdeviceIdconfigEdgeValue.


        :param dia_enabled: The dia_enabled of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: str
        """

        self._dia_enabled = dia_enabled

    @property
    def drop_mechanism(self):
        """Gets the drop_mechanism of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The drop_mechanism of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: str
        """
        return self._drop_mechanism

    @drop_mechanism.setter
    def drop_mechanism(self, drop_mechanism):
        """Sets the drop_mechanism of this V1devicesdeviceIdconfigEdgeValue.


        :param drop_mechanism: The drop_mechanism of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: str
        """

        self._drop_mechanism = drop_mechanism

    @property
    def label(self):
        """Gets the label of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The label of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this V1devicesdeviceIdconfigEdgeValue.


        :param label: The label of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def last_resort(self):
        """Gets the last_resort of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The last_resort of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: str
        """
        return self._last_resort

    @last_resort.setter
    def last_resort(self, last_resort):
        """Sets the last_resort of this V1devicesdeviceIdconfigEdgeValue.


        :param last_resort: The last_resort of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: str
        """

        self._last_resort = last_resort

    @property
    def link_down_speed_mbps(self):
        """Gets the link_down_speed_mbps of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The link_down_speed_mbps of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: str
        """
        return self._link_down_speed_mbps

    @link_down_speed_mbps.setter
    def link_down_speed_mbps(self, link_down_speed_mbps):
        """Sets the link_down_speed_mbps of this V1devicesdeviceIdconfigEdgeValue.


        :param link_down_speed_mbps: The link_down_speed_mbps of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: str
        """

        self._link_down_speed_mbps = link_down_speed_mbps

    @property
    def link_up_speed_mbps(self):
        """Gets the link_up_speed_mbps of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The link_up_speed_mbps of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: str
        """
        return self._link_up_speed_mbps

    @link_up_speed_mbps.setter
    def link_up_speed_mbps(self, link_up_speed_mbps):
        """Sets the link_up_speed_mbps of this V1devicesdeviceIdconfigEdgeValue.


        :param link_up_speed_mbps: The link_up_speed_mbps of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: str
        """

        self._link_up_speed_mbps = link_up_speed_mbps

    @property
    def loopback(self):
        """Gets the loopback of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The loopback of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: str
        """
        return self._loopback

    @loopback.setter
    def loopback(self, loopback):
        """Sets the loopback of this V1devicesdeviceIdconfigEdgeValue.


        :param loopback: The loopback of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: str
        """

        self._loopback = loopback

    @property
    def name(self):
        """Gets the name of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The name of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1devicesdeviceIdconfigEdgeValue.


        :param name: The name of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pat_addresses(self):
        """Gets the pat_addresses of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The pat_addresses of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: object
        """
        return self._pat_addresses

    @pat_addresses.setter
    def pat_addresses(self, pat_addresses):
        """Sets the pat_addresses of this V1devicesdeviceIdconfigEdgeValue.


        :param pat_addresses: The pat_addresses of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: object
        """

        self._pat_addresses = pat_addresses

    @property
    def qos_profile(self):
        """Gets the qos_profile of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The qos_profile of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: str
        """
        return self._qos_profile

    @qos_profile.setter
    def qos_profile(self, qos_profile):
        """Sets the qos_profile of this V1devicesdeviceIdconfigEdgeValue.


        :param qos_profile: The qos_profile of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: str
        """

        self._qos_profile = qos_profile

    @property
    def qos_profile_type(self):
        """Gets the qos_profile_type of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The qos_profile_type of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: str
        """
        return self._qos_profile_type

    @qos_profile_type.setter
    def qos_profile_type(self, qos_profile_type):
        """Sets the qos_profile_type of this V1devicesdeviceIdconfigEdgeValue.


        :param qos_profile_type: The qos_profile_type of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: str
        """

        self._qos_profile_type = qos_profile_type

    @property
    def static_routes(self):
        """Gets the static_routes of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501


        :return: The static_routes of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :rtype: list[object]
        """
        return self._static_routes

    @static_routes.setter
    def static_routes(self, static_routes):
        """Sets the static_routes of this V1devicesdeviceIdconfigEdgeValue.


        :param static_routes: The static_routes of this V1devicesdeviceIdconfigEdgeValue.  # noqa: E501
        :type: list[object]
        """

        self._static_routes = static_routes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1devicesdeviceIdconfigEdgeValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1devicesdeviceIdconfigEdgeValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
