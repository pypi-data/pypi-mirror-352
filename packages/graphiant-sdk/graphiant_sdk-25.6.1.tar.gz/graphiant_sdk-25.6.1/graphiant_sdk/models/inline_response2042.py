# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2042(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affected_users': 'list[str]',
        'all_groups': 'str'
    }

    attribute_map = {
        'affected_users': 'affectedUsers',
        'all_groups': 'allGroups'
    }

    def __init__(self, affected_users=None, all_groups=None):  # noqa: E501
        """InlineResponse2042 - a model defined in Swagger"""  # noqa: E501
        self._affected_users = None
        self._all_groups = None
        self.discriminator = None
        if affected_users is not None:
            self.affected_users = affected_users
        if all_groups is not None:
            self.all_groups = all_groups

    @property
    def affected_users(self):
        """Gets the affected_users of this InlineResponse2042.  # noqa: E501


        :return: The affected_users of this InlineResponse2042.  # noqa: E501
        :rtype: list[str]
        """
        return self._affected_users

    @affected_users.setter
    def affected_users(self, affected_users):
        """Sets the affected_users of this InlineResponse2042.


        :param affected_users: The affected_users of this InlineResponse2042.  # noqa: E501
        :type: list[str]
        """

        self._affected_users = affected_users

    @property
    def all_groups(self):
        """Gets the all_groups of this InlineResponse2042.  # noqa: E501


        :return: The all_groups of this InlineResponse2042.  # noqa: E501
        :rtype: str
        """
        return self._all_groups

    @all_groups.setter
    def all_groups(self, all_groups):
        """Sets the all_groups of this InlineResponse2042.


        :param all_groups: The all_groups of this InlineResponse2042.  # noqa: E501
        :type: str
        """

        self._all_groups = all_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2042, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2042):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
