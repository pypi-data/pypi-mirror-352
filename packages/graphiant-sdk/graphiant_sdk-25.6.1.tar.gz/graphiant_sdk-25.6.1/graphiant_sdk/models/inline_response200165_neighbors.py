# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200165Neighbors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'interface': 'str',
        'ip_address': 'str',
        'mac_address': 'str',
        'port': 'str',
        'system_name': 'str',
        'vendor': 'str'
    }

    attribute_map = {
        'id': 'id',
        'interface': 'interface',
        'ip_address': 'ipAddress',
        'mac_address': 'macAddress',
        'port': 'port',
        'system_name': 'systemName',
        'vendor': 'vendor'
    }

    def __init__(self, id=None, interface=None, ip_address=None, mac_address=None, port=None, system_name=None, vendor=None):  # noqa: E501
        """InlineResponse200165Neighbors - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._interface = None
        self._ip_address = None
        self._mac_address = None
        self._port = None
        self._system_name = None
        self._vendor = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if interface is not None:
            self.interface = interface
        if ip_address is not None:
            self.ip_address = ip_address
        if mac_address is not None:
            self.mac_address = mac_address
        if port is not None:
            self.port = port
        if system_name is not None:
            self.system_name = system_name
        if vendor is not None:
            self.vendor = vendor

    @property
    def id(self):
        """Gets the id of this InlineResponse200165Neighbors.  # noqa: E501


        :return: The id of this InlineResponse200165Neighbors.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200165Neighbors.


        :param id: The id of this InlineResponse200165Neighbors.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def interface(self):
        """Gets the interface of this InlineResponse200165Neighbors.  # noqa: E501


        :return: The interface of this InlineResponse200165Neighbors.  # noqa: E501
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this InlineResponse200165Neighbors.


        :param interface: The interface of this InlineResponse200165Neighbors.  # noqa: E501
        :type: str
        """

        self._interface = interface

    @property
    def ip_address(self):
        """Gets the ip_address of this InlineResponse200165Neighbors.  # noqa: E501


        :return: The ip_address of this InlineResponse200165Neighbors.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this InlineResponse200165Neighbors.


        :param ip_address: The ip_address of this InlineResponse200165Neighbors.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def mac_address(self):
        """Gets the mac_address of this InlineResponse200165Neighbors.  # noqa: E501


        :return: The mac_address of this InlineResponse200165Neighbors.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this InlineResponse200165Neighbors.


        :param mac_address: The mac_address of this InlineResponse200165Neighbors.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def port(self):
        """Gets the port of this InlineResponse200165Neighbors.  # noqa: E501


        :return: The port of this InlineResponse200165Neighbors.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this InlineResponse200165Neighbors.


        :param port: The port of this InlineResponse200165Neighbors.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def system_name(self):
        """Gets the system_name of this InlineResponse200165Neighbors.  # noqa: E501


        :return: The system_name of this InlineResponse200165Neighbors.  # noqa: E501
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this InlineResponse200165Neighbors.


        :param system_name: The system_name of this InlineResponse200165Neighbors.  # noqa: E501
        :type: str
        """

        self._system_name = system_name

    @property
    def vendor(self):
        """Gets the vendor of this InlineResponse200165Neighbors.  # noqa: E501


        :return: The vendor of this InlineResponse200165Neighbors.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this InlineResponse200165Neighbors.


        :param vendor: The vendor of this InlineResponse200165Neighbors.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200165Neighbors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200165Neighbors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
