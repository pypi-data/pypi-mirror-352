# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200108InboundSecurityRules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'implicit': 'str',
        'match': 'InlineResponse200108Match',
        'policy_rule_index': 'str',
        'seq': 'str'
    }

    attribute_map = {
        'action': 'action',
        'implicit': 'implicit',
        'match': 'match',
        'policy_rule_index': 'policyRuleIndex',
        'seq': 'seq'
    }

    def __init__(self, action=None, implicit=None, match=None, policy_rule_index=None, seq=None):  # noqa: E501
        """InlineResponse200108InboundSecurityRules - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._implicit = None
        self._match = None
        self._policy_rule_index = None
        self._seq = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if implicit is not None:
            self.implicit = implicit
        if match is not None:
            self.match = match
        if policy_rule_index is not None:
            self.policy_rule_index = policy_rule_index
        if seq is not None:
            self.seq = seq

    @property
    def action(self):
        """Gets the action of this InlineResponse200108InboundSecurityRules.  # noqa: E501


        :return: The action of this InlineResponse200108InboundSecurityRules.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this InlineResponse200108InboundSecurityRules.


        :param action: The action of this InlineResponse200108InboundSecurityRules.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def implicit(self):
        """Gets the implicit of this InlineResponse200108InboundSecurityRules.  # noqa: E501


        :return: The implicit of this InlineResponse200108InboundSecurityRules.  # noqa: E501
        :rtype: str
        """
        return self._implicit

    @implicit.setter
    def implicit(self, implicit):
        """Sets the implicit of this InlineResponse200108InboundSecurityRules.


        :param implicit: The implicit of this InlineResponse200108InboundSecurityRules.  # noqa: E501
        :type: str
        """

        self._implicit = implicit

    @property
    def match(self):
        """Gets the match of this InlineResponse200108InboundSecurityRules.  # noqa: E501


        :return: The match of this InlineResponse200108InboundSecurityRules.  # noqa: E501
        :rtype: InlineResponse200108Match
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this InlineResponse200108InboundSecurityRules.


        :param match: The match of this InlineResponse200108InboundSecurityRules.  # noqa: E501
        :type: InlineResponse200108Match
        """

        self._match = match

    @property
    def policy_rule_index(self):
        """Gets the policy_rule_index of this InlineResponse200108InboundSecurityRules.  # noqa: E501


        :return: The policy_rule_index of this InlineResponse200108InboundSecurityRules.  # noqa: E501
        :rtype: str
        """
        return self._policy_rule_index

    @policy_rule_index.setter
    def policy_rule_index(self, policy_rule_index):
        """Sets the policy_rule_index of this InlineResponse200108InboundSecurityRules.


        :param policy_rule_index: The policy_rule_index of this InlineResponse200108InboundSecurityRules.  # noqa: E501
        :type: str
        """

        self._policy_rule_index = policy_rule_index

    @property
    def seq(self):
        """Gets the seq of this InlineResponse200108InboundSecurityRules.  # noqa: E501


        :return: The seq of this InlineResponse200108InboundSecurityRules.  # noqa: E501
        :rtype: str
        """
        return self._seq

    @seq.setter
    def seq(self, seq):
        """Sets the seq of this InlineResponse200108InboundSecurityRules.


        :param seq: The seq of this InlineResponse200108InboundSecurityRules.  # noqa: E501
        :type: str
        """

        self._seq = seq

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200108InboundSecurityRules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200108InboundSecurityRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
