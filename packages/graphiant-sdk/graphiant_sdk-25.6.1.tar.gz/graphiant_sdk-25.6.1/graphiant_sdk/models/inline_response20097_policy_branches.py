# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20097PolicyBranches(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'excluded_devices': 'list[InlineResponse20097PolicyBranchesExcludedDevices]',
        'prefix_set': 'InlineResponse20097PolicyBranchesPrefixSet',
        'sites': 'list[InlineResponse200109DraftManaDeviceSite]'
    }

    attribute_map = {
        'excluded_devices': 'excludedDevices',
        'prefix_set': 'prefixSet',
        'sites': 'sites'
    }

    def __init__(self, excluded_devices=None, prefix_set=None, sites=None):  # noqa: E501
        """InlineResponse20097PolicyBranches - a model defined in Swagger"""  # noqa: E501
        self._excluded_devices = None
        self._prefix_set = None
        self._sites = None
        self.discriminator = None
        if excluded_devices is not None:
            self.excluded_devices = excluded_devices
        if prefix_set is not None:
            self.prefix_set = prefix_set
        if sites is not None:
            self.sites = sites

    @property
    def excluded_devices(self):
        """Gets the excluded_devices of this InlineResponse20097PolicyBranches.  # noqa: E501


        :return: The excluded_devices of this InlineResponse20097PolicyBranches.  # noqa: E501
        :rtype: list[InlineResponse20097PolicyBranchesExcludedDevices]
        """
        return self._excluded_devices

    @excluded_devices.setter
    def excluded_devices(self, excluded_devices):
        """Sets the excluded_devices of this InlineResponse20097PolicyBranches.


        :param excluded_devices: The excluded_devices of this InlineResponse20097PolicyBranches.  # noqa: E501
        :type: list[InlineResponse20097PolicyBranchesExcludedDevices]
        """

        self._excluded_devices = excluded_devices

    @property
    def prefix_set(self):
        """Gets the prefix_set of this InlineResponse20097PolicyBranches.  # noqa: E501


        :return: The prefix_set of this InlineResponse20097PolicyBranches.  # noqa: E501
        :rtype: InlineResponse20097PolicyBranchesPrefixSet
        """
        return self._prefix_set

    @prefix_set.setter
    def prefix_set(self, prefix_set):
        """Sets the prefix_set of this InlineResponse20097PolicyBranches.


        :param prefix_set: The prefix_set of this InlineResponse20097PolicyBranches.  # noqa: E501
        :type: InlineResponse20097PolicyBranchesPrefixSet
        """

        self._prefix_set = prefix_set

    @property
    def sites(self):
        """Gets the sites of this InlineResponse20097PolicyBranches.  # noqa: E501


        :return: The sites of this InlineResponse20097PolicyBranches.  # noqa: E501
        :rtype: list[InlineResponse200109DraftManaDeviceSite]
        """
        return self._sites

    @sites.setter
    def sites(self, sites):
        """Sets the sites of this InlineResponse20097PolicyBranches.


        :param sites: The sites of this InlineResponse20097PolicyBranches.  # noqa: E501
        :type: list[InlineResponse200109DraftManaDeviceSite]
        """

        self._sites = sites

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20097PolicyBranches, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20097PolicyBranches):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
