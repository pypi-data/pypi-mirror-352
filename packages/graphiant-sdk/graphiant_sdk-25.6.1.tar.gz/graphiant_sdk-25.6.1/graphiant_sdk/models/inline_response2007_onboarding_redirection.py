# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2007OnboardingRedirection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'private_onboarding_gw_addr': 'str',
        'private_portal_url': 'str',
        'public_key': 'str',
        'root_ca': 'str',
        'signature': 'str'
    }

    attribute_map = {
        'private_onboarding_gw_addr': 'privateOnboardingGwAddr',
        'private_portal_url': 'privatePortalUrl',
        'public_key': 'publicKey',
        'root_ca': 'rootCa',
        'signature': 'signature'
    }

    def __init__(self, private_onboarding_gw_addr=None, private_portal_url=None, public_key=None, root_ca=None, signature=None):  # noqa: E501
        """InlineResponse2007OnboardingRedirection - a model defined in Swagger"""  # noqa: E501
        self._private_onboarding_gw_addr = None
        self._private_portal_url = None
        self._public_key = None
        self._root_ca = None
        self._signature = None
        self.discriminator = None
        if private_onboarding_gw_addr is not None:
            self.private_onboarding_gw_addr = private_onboarding_gw_addr
        if private_portal_url is not None:
            self.private_portal_url = private_portal_url
        if public_key is not None:
            self.public_key = public_key
        if root_ca is not None:
            self.root_ca = root_ca
        if signature is not None:
            self.signature = signature

    @property
    def private_onboarding_gw_addr(self):
        """Gets the private_onboarding_gw_addr of this InlineResponse2007OnboardingRedirection.  # noqa: E501


        :return: The private_onboarding_gw_addr of this InlineResponse2007OnboardingRedirection.  # noqa: E501
        :rtype: str
        """
        return self._private_onboarding_gw_addr

    @private_onboarding_gw_addr.setter
    def private_onboarding_gw_addr(self, private_onboarding_gw_addr):
        """Sets the private_onboarding_gw_addr of this InlineResponse2007OnboardingRedirection.


        :param private_onboarding_gw_addr: The private_onboarding_gw_addr of this InlineResponse2007OnboardingRedirection.  # noqa: E501
        :type: str
        """

        self._private_onboarding_gw_addr = private_onboarding_gw_addr

    @property
    def private_portal_url(self):
        """Gets the private_portal_url of this InlineResponse2007OnboardingRedirection.  # noqa: E501


        :return: The private_portal_url of this InlineResponse2007OnboardingRedirection.  # noqa: E501
        :rtype: str
        """
        return self._private_portal_url

    @private_portal_url.setter
    def private_portal_url(self, private_portal_url):
        """Sets the private_portal_url of this InlineResponse2007OnboardingRedirection.


        :param private_portal_url: The private_portal_url of this InlineResponse2007OnboardingRedirection.  # noqa: E501
        :type: str
        """

        self._private_portal_url = private_portal_url

    @property
    def public_key(self):
        """Gets the public_key of this InlineResponse2007OnboardingRedirection.  # noqa: E501


        :return: The public_key of this InlineResponse2007OnboardingRedirection.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this InlineResponse2007OnboardingRedirection.


        :param public_key: The public_key of this InlineResponse2007OnboardingRedirection.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def root_ca(self):
        """Gets the root_ca of this InlineResponse2007OnboardingRedirection.  # noqa: E501


        :return: The root_ca of this InlineResponse2007OnboardingRedirection.  # noqa: E501
        :rtype: str
        """
        return self._root_ca

    @root_ca.setter
    def root_ca(self, root_ca):
        """Sets the root_ca of this InlineResponse2007OnboardingRedirection.


        :param root_ca: The root_ca of this InlineResponse2007OnboardingRedirection.  # noqa: E501
        :type: str
        """

        self._root_ca = root_ca

    @property
    def signature(self):
        """Gets the signature of this InlineResponse2007OnboardingRedirection.  # noqa: E501


        :return: The signature of this InlineResponse2007OnboardingRedirection.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this InlineResponse2007OnboardingRedirection.


        :param signature: The signature of this InlineResponse2007OnboardingRedirection.  # noqa: E501
        :type: str
        """

        self._signature = signature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2007OnboardingRedirection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2007OnboardingRedirection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
