# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1devicesdeviceIddraftDraftIpSec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'anti_replay_window_size': 'str',
        'dh_group': 'str',
        'dpd_interval': 'str',
        'encryption_alg': 'str',
        'esn': 'str',
        'established_time': 'object',
        'ike_integrity': 'str',
        'ipsec_encryption_alg': 'str',
        'ipsec_integrity': 'str',
        'label': 'str',
        'local_address': 'str',
        'local_circuit': 'str',
        'local_ike_peer_identity': 'str',
        'local_ikesa_spi': 'str',
        'local_port': 'str',
        'negotiated_algo': 'str',
        'oper_state': 'str',
        'perfect_forward_secrecy': 'str',
        'preshared_key': 'str',
        'protocol': 'str',
        'reauth_interval': 'str',
        'rekey_interval': 'str',
        'remote_address': 'str',
        'remote_ike_peer_identity': 'str',
        'remote_ikesa_spi': 'str',
        'remote_port': 'str'
    }

    attribute_map = {
        'anti_replay_window_size': 'antiReplayWindowSize',
        'dh_group': 'dhGroup',
        'dpd_interval': 'dpdInterval',
        'encryption_alg': 'encryptionAlg',
        'esn': 'esn',
        'established_time': 'establishedTime',
        'ike_integrity': 'ikeIntegrity',
        'ipsec_encryption_alg': 'ipsecEncryptionAlg',
        'ipsec_integrity': 'ipsecIntegrity',
        'label': 'label',
        'local_address': 'localAddress',
        'local_circuit': 'localCircuit',
        'local_ike_peer_identity': 'localIkePeerIdentity',
        'local_ikesa_spi': 'localIkesaSpi',
        'local_port': 'localPort',
        'negotiated_algo': 'negotiatedAlgo',
        'oper_state': 'operState',
        'perfect_forward_secrecy': 'perfectForwardSecrecy',
        'preshared_key': 'presharedKey',
        'protocol': 'protocol',
        'reauth_interval': 'reauthInterval',
        'rekey_interval': 'rekeyInterval',
        'remote_address': 'remoteAddress',
        'remote_ike_peer_identity': 'remoteIkePeerIdentity',
        'remote_ikesa_spi': 'remoteIkesaSpi',
        'remote_port': 'remotePort'
    }

    def __init__(self, anti_replay_window_size=None, dh_group=None, dpd_interval=None, encryption_alg=None, esn=None, established_time=None, ike_integrity=None, ipsec_encryption_alg=None, ipsec_integrity=None, label=None, local_address=None, local_circuit=None, local_ike_peer_identity=None, local_ikesa_spi=None, local_port=None, negotiated_algo=None, oper_state=None, perfect_forward_secrecy=None, preshared_key=None, protocol=None, reauth_interval=None, rekey_interval=None, remote_address=None, remote_ike_peer_identity=None, remote_ikesa_spi=None, remote_port=None):  # noqa: E501
        """V1devicesdeviceIddraftDraftIpSec - a model defined in Swagger"""  # noqa: E501
        self._anti_replay_window_size = None
        self._dh_group = None
        self._dpd_interval = None
        self._encryption_alg = None
        self._esn = None
        self._established_time = None
        self._ike_integrity = None
        self._ipsec_encryption_alg = None
        self._ipsec_integrity = None
        self._label = None
        self._local_address = None
        self._local_circuit = None
        self._local_ike_peer_identity = None
        self._local_ikesa_spi = None
        self._local_port = None
        self._negotiated_algo = None
        self._oper_state = None
        self._perfect_forward_secrecy = None
        self._preshared_key = None
        self._protocol = None
        self._reauth_interval = None
        self._rekey_interval = None
        self._remote_address = None
        self._remote_ike_peer_identity = None
        self._remote_ikesa_spi = None
        self._remote_port = None
        self.discriminator = None
        if anti_replay_window_size is not None:
            self.anti_replay_window_size = anti_replay_window_size
        if dh_group is not None:
            self.dh_group = dh_group
        if dpd_interval is not None:
            self.dpd_interval = dpd_interval
        if encryption_alg is not None:
            self.encryption_alg = encryption_alg
        if esn is not None:
            self.esn = esn
        if established_time is not None:
            self.established_time = established_time
        if ike_integrity is not None:
            self.ike_integrity = ike_integrity
        if ipsec_encryption_alg is not None:
            self.ipsec_encryption_alg = ipsec_encryption_alg
        if ipsec_integrity is not None:
            self.ipsec_integrity = ipsec_integrity
        if label is not None:
            self.label = label
        if local_address is not None:
            self.local_address = local_address
        if local_circuit is not None:
            self.local_circuit = local_circuit
        if local_ike_peer_identity is not None:
            self.local_ike_peer_identity = local_ike_peer_identity
        if local_ikesa_spi is not None:
            self.local_ikesa_spi = local_ikesa_spi
        if local_port is not None:
            self.local_port = local_port
        if negotiated_algo is not None:
            self.negotiated_algo = negotiated_algo
        if oper_state is not None:
            self.oper_state = oper_state
        if perfect_forward_secrecy is not None:
            self.perfect_forward_secrecy = perfect_forward_secrecy
        if preshared_key is not None:
            self.preshared_key = preshared_key
        if protocol is not None:
            self.protocol = protocol
        if reauth_interval is not None:
            self.reauth_interval = reauth_interval
        if rekey_interval is not None:
            self.rekey_interval = rekey_interval
        if remote_address is not None:
            self.remote_address = remote_address
        if remote_ike_peer_identity is not None:
            self.remote_ike_peer_identity = remote_ike_peer_identity
        if remote_ikesa_spi is not None:
            self.remote_ikesa_spi = remote_ikesa_spi
        if remote_port is not None:
            self.remote_port = remote_port

    @property
    def anti_replay_window_size(self):
        """Gets the anti_replay_window_size of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The anti_replay_window_size of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._anti_replay_window_size

    @anti_replay_window_size.setter
    def anti_replay_window_size(self, anti_replay_window_size):
        """Sets the anti_replay_window_size of this V1devicesdeviceIddraftDraftIpSec.


        :param anti_replay_window_size: The anti_replay_window_size of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._anti_replay_window_size = anti_replay_window_size

    @property
    def dh_group(self):
        """Gets the dh_group of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The dh_group of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._dh_group

    @dh_group.setter
    def dh_group(self, dh_group):
        """Sets the dh_group of this V1devicesdeviceIddraftDraftIpSec.


        :param dh_group: The dh_group of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._dh_group = dh_group

    @property
    def dpd_interval(self):
        """Gets the dpd_interval of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The dpd_interval of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._dpd_interval

    @dpd_interval.setter
    def dpd_interval(self, dpd_interval):
        """Sets the dpd_interval of this V1devicesdeviceIddraftDraftIpSec.


        :param dpd_interval: The dpd_interval of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._dpd_interval = dpd_interval

    @property
    def encryption_alg(self):
        """Gets the encryption_alg of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The encryption_alg of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._encryption_alg

    @encryption_alg.setter
    def encryption_alg(self, encryption_alg):
        """Sets the encryption_alg of this V1devicesdeviceIddraftDraftIpSec.


        :param encryption_alg: The encryption_alg of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._encryption_alg = encryption_alg

    @property
    def esn(self):
        """Gets the esn of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The esn of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._esn

    @esn.setter
    def esn(self, esn):
        """Sets the esn of this V1devicesdeviceIddraftDraftIpSec.


        :param esn: The esn of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._esn = esn

    @property
    def established_time(self):
        """Gets the established_time of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The established_time of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: object
        """
        return self._established_time

    @established_time.setter
    def established_time(self, established_time):
        """Sets the established_time of this V1devicesdeviceIddraftDraftIpSec.


        :param established_time: The established_time of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: object
        """

        self._established_time = established_time

    @property
    def ike_integrity(self):
        """Gets the ike_integrity of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The ike_integrity of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._ike_integrity

    @ike_integrity.setter
    def ike_integrity(self, ike_integrity):
        """Sets the ike_integrity of this V1devicesdeviceIddraftDraftIpSec.


        :param ike_integrity: The ike_integrity of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._ike_integrity = ike_integrity

    @property
    def ipsec_encryption_alg(self):
        """Gets the ipsec_encryption_alg of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The ipsec_encryption_alg of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_encryption_alg

    @ipsec_encryption_alg.setter
    def ipsec_encryption_alg(self, ipsec_encryption_alg):
        """Sets the ipsec_encryption_alg of this V1devicesdeviceIddraftDraftIpSec.


        :param ipsec_encryption_alg: The ipsec_encryption_alg of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._ipsec_encryption_alg = ipsec_encryption_alg

    @property
    def ipsec_integrity(self):
        """Gets the ipsec_integrity of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The ipsec_integrity of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_integrity

    @ipsec_integrity.setter
    def ipsec_integrity(self, ipsec_integrity):
        """Sets the ipsec_integrity of this V1devicesdeviceIddraftDraftIpSec.


        :param ipsec_integrity: The ipsec_integrity of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._ipsec_integrity = ipsec_integrity

    @property
    def label(self):
        """Gets the label of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The label of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this V1devicesdeviceIddraftDraftIpSec.


        :param label: The label of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def local_address(self):
        """Gets the local_address of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The local_address of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._local_address

    @local_address.setter
    def local_address(self, local_address):
        """Sets the local_address of this V1devicesdeviceIddraftDraftIpSec.


        :param local_address: The local_address of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._local_address = local_address

    @property
    def local_circuit(self):
        """Gets the local_circuit of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The local_circuit of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._local_circuit

    @local_circuit.setter
    def local_circuit(self, local_circuit):
        """Sets the local_circuit of this V1devicesdeviceIddraftDraftIpSec.


        :param local_circuit: The local_circuit of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._local_circuit = local_circuit

    @property
    def local_ike_peer_identity(self):
        """Gets the local_ike_peer_identity of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The local_ike_peer_identity of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._local_ike_peer_identity

    @local_ike_peer_identity.setter
    def local_ike_peer_identity(self, local_ike_peer_identity):
        """Sets the local_ike_peer_identity of this V1devicesdeviceIddraftDraftIpSec.


        :param local_ike_peer_identity: The local_ike_peer_identity of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._local_ike_peer_identity = local_ike_peer_identity

    @property
    def local_ikesa_spi(self):
        """Gets the local_ikesa_spi of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The local_ikesa_spi of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._local_ikesa_spi

    @local_ikesa_spi.setter
    def local_ikesa_spi(self, local_ikesa_spi):
        """Sets the local_ikesa_spi of this V1devicesdeviceIddraftDraftIpSec.


        :param local_ikesa_spi: The local_ikesa_spi of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._local_ikesa_spi = local_ikesa_spi

    @property
    def local_port(self):
        """Gets the local_port of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The local_port of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._local_port

    @local_port.setter
    def local_port(self, local_port):
        """Sets the local_port of this V1devicesdeviceIddraftDraftIpSec.


        :param local_port: The local_port of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._local_port = local_port

    @property
    def negotiated_algo(self):
        """Gets the negotiated_algo of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The negotiated_algo of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._negotiated_algo

    @negotiated_algo.setter
    def negotiated_algo(self, negotiated_algo):
        """Sets the negotiated_algo of this V1devicesdeviceIddraftDraftIpSec.


        :param negotiated_algo: The negotiated_algo of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._negotiated_algo = negotiated_algo

    @property
    def oper_state(self):
        """Gets the oper_state of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The oper_state of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._oper_state

    @oper_state.setter
    def oper_state(self, oper_state):
        """Sets the oper_state of this V1devicesdeviceIddraftDraftIpSec.


        :param oper_state: The oper_state of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._oper_state = oper_state

    @property
    def perfect_forward_secrecy(self):
        """Gets the perfect_forward_secrecy of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The perfect_forward_secrecy of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._perfect_forward_secrecy

    @perfect_forward_secrecy.setter
    def perfect_forward_secrecy(self, perfect_forward_secrecy):
        """Sets the perfect_forward_secrecy of this V1devicesdeviceIddraftDraftIpSec.


        :param perfect_forward_secrecy: The perfect_forward_secrecy of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._perfect_forward_secrecy = perfect_forward_secrecy

    @property
    def preshared_key(self):
        """Gets the preshared_key of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The preshared_key of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._preshared_key

    @preshared_key.setter
    def preshared_key(self, preshared_key):
        """Sets the preshared_key of this V1devicesdeviceIddraftDraftIpSec.


        :param preshared_key: The preshared_key of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._preshared_key = preshared_key

    @property
    def protocol(self):
        """Gets the protocol of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The protocol of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this V1devicesdeviceIddraftDraftIpSec.


        :param protocol: The protocol of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def reauth_interval(self):
        """Gets the reauth_interval of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The reauth_interval of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._reauth_interval

    @reauth_interval.setter
    def reauth_interval(self, reauth_interval):
        """Sets the reauth_interval of this V1devicesdeviceIddraftDraftIpSec.


        :param reauth_interval: The reauth_interval of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._reauth_interval = reauth_interval

    @property
    def rekey_interval(self):
        """Gets the rekey_interval of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The rekey_interval of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._rekey_interval

    @rekey_interval.setter
    def rekey_interval(self, rekey_interval):
        """Sets the rekey_interval of this V1devicesdeviceIddraftDraftIpSec.


        :param rekey_interval: The rekey_interval of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._rekey_interval = rekey_interval

    @property
    def remote_address(self):
        """Gets the remote_address of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The remote_address of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._remote_address

    @remote_address.setter
    def remote_address(self, remote_address):
        """Sets the remote_address of this V1devicesdeviceIddraftDraftIpSec.


        :param remote_address: The remote_address of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._remote_address = remote_address

    @property
    def remote_ike_peer_identity(self):
        """Gets the remote_ike_peer_identity of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The remote_ike_peer_identity of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._remote_ike_peer_identity

    @remote_ike_peer_identity.setter
    def remote_ike_peer_identity(self, remote_ike_peer_identity):
        """Sets the remote_ike_peer_identity of this V1devicesdeviceIddraftDraftIpSec.


        :param remote_ike_peer_identity: The remote_ike_peer_identity of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._remote_ike_peer_identity = remote_ike_peer_identity

    @property
    def remote_ikesa_spi(self):
        """Gets the remote_ikesa_spi of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The remote_ikesa_spi of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._remote_ikesa_spi

    @remote_ikesa_spi.setter
    def remote_ikesa_spi(self, remote_ikesa_spi):
        """Sets the remote_ikesa_spi of this V1devicesdeviceIddraftDraftIpSec.


        :param remote_ikesa_spi: The remote_ikesa_spi of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._remote_ikesa_spi = remote_ikesa_spi

    @property
    def remote_port(self):
        """Gets the remote_port of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501


        :return: The remote_port of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :rtype: str
        """
        return self._remote_port

    @remote_port.setter
    def remote_port(self, remote_port):
        """Sets the remote_port of this V1devicesdeviceIddraftDraftIpSec.


        :param remote_port: The remote_port of this V1devicesdeviceIddraftDraftIpSec.  # noqa: E501
        :type: str
        """

        self._remote_port = remote_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1devicesdeviceIddraftDraftIpSec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1devicesdeviceIddraftDraftIpSec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
