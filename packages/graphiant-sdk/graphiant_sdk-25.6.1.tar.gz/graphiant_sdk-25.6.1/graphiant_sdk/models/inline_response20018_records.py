# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20018Records(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_time': 'str',
        'device_interface': 'str',
        'device_name': 'str',
        'enterprise_name': 'str',
        'entity_id': 'str',
        'is_wan_circuit': 'str',
        'note_text': 'str',
        'peer_device_interface': 'str',
        'peer_device_name': 'str',
        'rule_id': 'str',
        'rule_name': 'str',
        'site_name': 'str',
        'vrf_id': 'str'
    }

    attribute_map = {
        'create_time': 'createTime',
        'device_interface': 'deviceInterface',
        'device_name': 'deviceName',
        'enterprise_name': 'enterpriseName',
        'entity_id': 'entityId',
        'is_wan_circuit': 'isWanCircuit',
        'note_text': 'noteText',
        'peer_device_interface': 'peerDeviceInterface',
        'peer_device_name': 'peerDeviceName',
        'rule_id': 'ruleId',
        'rule_name': 'ruleName',
        'site_name': 'siteName',
        'vrf_id': 'vrfId'
    }

    def __init__(self, create_time=None, device_interface=None, device_name=None, enterprise_name=None, entity_id=None, is_wan_circuit=None, note_text=None, peer_device_interface=None, peer_device_name=None, rule_id=None, rule_name=None, site_name=None, vrf_id=None):  # noqa: E501
        """InlineResponse20018Records - a model defined in Swagger"""  # noqa: E501
        self._create_time = None
        self._device_interface = None
        self._device_name = None
        self._enterprise_name = None
        self._entity_id = None
        self._is_wan_circuit = None
        self._note_text = None
        self._peer_device_interface = None
        self._peer_device_name = None
        self._rule_id = None
        self._rule_name = None
        self._site_name = None
        self._vrf_id = None
        self.discriminator = None
        if create_time is not None:
            self.create_time = create_time
        if device_interface is not None:
            self.device_interface = device_interface
        if device_name is not None:
            self.device_name = device_name
        if enterprise_name is not None:
            self.enterprise_name = enterprise_name
        if entity_id is not None:
            self.entity_id = entity_id
        if is_wan_circuit is not None:
            self.is_wan_circuit = is_wan_circuit
        if note_text is not None:
            self.note_text = note_text
        if peer_device_interface is not None:
            self.peer_device_interface = peer_device_interface
        if peer_device_name is not None:
            self.peer_device_name = peer_device_name
        if rule_id is not None:
            self.rule_id = rule_id
        if rule_name is not None:
            self.rule_name = rule_name
        if site_name is not None:
            self.site_name = site_name
        if vrf_id is not None:
            self.vrf_id = vrf_id

    @property
    def create_time(self):
        """Gets the create_time of this InlineResponse20018Records.  # noqa: E501


        :return: The create_time of this InlineResponse20018Records.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this InlineResponse20018Records.


        :param create_time: The create_time of this InlineResponse20018Records.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def device_interface(self):
        """Gets the device_interface of this InlineResponse20018Records.  # noqa: E501


        :return: The device_interface of this InlineResponse20018Records.  # noqa: E501
        :rtype: str
        """
        return self._device_interface

    @device_interface.setter
    def device_interface(self, device_interface):
        """Sets the device_interface of this InlineResponse20018Records.


        :param device_interface: The device_interface of this InlineResponse20018Records.  # noqa: E501
        :type: str
        """

        self._device_interface = device_interface

    @property
    def device_name(self):
        """Gets the device_name of this InlineResponse20018Records.  # noqa: E501


        :return: The device_name of this InlineResponse20018Records.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this InlineResponse20018Records.


        :param device_name: The device_name of this InlineResponse20018Records.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def enterprise_name(self):
        """Gets the enterprise_name of this InlineResponse20018Records.  # noqa: E501


        :return: The enterprise_name of this InlineResponse20018Records.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_name

    @enterprise_name.setter
    def enterprise_name(self, enterprise_name):
        """Sets the enterprise_name of this InlineResponse20018Records.


        :param enterprise_name: The enterprise_name of this InlineResponse20018Records.  # noqa: E501
        :type: str
        """

        self._enterprise_name = enterprise_name

    @property
    def entity_id(self):
        """Gets the entity_id of this InlineResponse20018Records.  # noqa: E501


        :return: The entity_id of this InlineResponse20018Records.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this InlineResponse20018Records.


        :param entity_id: The entity_id of this InlineResponse20018Records.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def is_wan_circuit(self):
        """Gets the is_wan_circuit of this InlineResponse20018Records.  # noqa: E501


        :return: The is_wan_circuit of this InlineResponse20018Records.  # noqa: E501
        :rtype: str
        """
        return self._is_wan_circuit

    @is_wan_circuit.setter
    def is_wan_circuit(self, is_wan_circuit):
        """Sets the is_wan_circuit of this InlineResponse20018Records.


        :param is_wan_circuit: The is_wan_circuit of this InlineResponse20018Records.  # noqa: E501
        :type: str
        """

        self._is_wan_circuit = is_wan_circuit

    @property
    def note_text(self):
        """Gets the note_text of this InlineResponse20018Records.  # noqa: E501


        :return: The note_text of this InlineResponse20018Records.  # noqa: E501
        :rtype: str
        """
        return self._note_text

    @note_text.setter
    def note_text(self, note_text):
        """Sets the note_text of this InlineResponse20018Records.


        :param note_text: The note_text of this InlineResponse20018Records.  # noqa: E501
        :type: str
        """

        self._note_text = note_text

    @property
    def peer_device_interface(self):
        """Gets the peer_device_interface of this InlineResponse20018Records.  # noqa: E501


        :return: The peer_device_interface of this InlineResponse20018Records.  # noqa: E501
        :rtype: str
        """
        return self._peer_device_interface

    @peer_device_interface.setter
    def peer_device_interface(self, peer_device_interface):
        """Sets the peer_device_interface of this InlineResponse20018Records.


        :param peer_device_interface: The peer_device_interface of this InlineResponse20018Records.  # noqa: E501
        :type: str
        """

        self._peer_device_interface = peer_device_interface

    @property
    def peer_device_name(self):
        """Gets the peer_device_name of this InlineResponse20018Records.  # noqa: E501


        :return: The peer_device_name of this InlineResponse20018Records.  # noqa: E501
        :rtype: str
        """
        return self._peer_device_name

    @peer_device_name.setter
    def peer_device_name(self, peer_device_name):
        """Sets the peer_device_name of this InlineResponse20018Records.


        :param peer_device_name: The peer_device_name of this InlineResponse20018Records.  # noqa: E501
        :type: str
        """

        self._peer_device_name = peer_device_name

    @property
    def rule_id(self):
        """Gets the rule_id of this InlineResponse20018Records.  # noqa: E501


        :return: The rule_id of this InlineResponse20018Records.  # noqa: E501
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this InlineResponse20018Records.


        :param rule_id: The rule_id of this InlineResponse20018Records.  # noqa: E501
        :type: str
        """

        self._rule_id = rule_id

    @property
    def rule_name(self):
        """Gets the rule_name of this InlineResponse20018Records.  # noqa: E501


        :return: The rule_name of this InlineResponse20018Records.  # noqa: E501
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this InlineResponse20018Records.


        :param rule_name: The rule_name of this InlineResponse20018Records.  # noqa: E501
        :type: str
        """

        self._rule_name = rule_name

    @property
    def site_name(self):
        """Gets the site_name of this InlineResponse20018Records.  # noqa: E501


        :return: The site_name of this InlineResponse20018Records.  # noqa: E501
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this InlineResponse20018Records.


        :param site_name: The site_name of this InlineResponse20018Records.  # noqa: E501
        :type: str
        """

        self._site_name = site_name

    @property
    def vrf_id(self):
        """Gets the vrf_id of this InlineResponse20018Records.  # noqa: E501


        :return: The vrf_id of this InlineResponse20018Records.  # noqa: E501
        :rtype: str
        """
        return self._vrf_id

    @vrf_id.setter
    def vrf_id(self, vrf_id):
        """Sets the vrf_id of this InlineResponse20018Records.


        :param vrf_id: The vrf_id of this InlineResponse20018Records.  # noqa: E501
        :type: str
        """

        self._vrf_id = vrf_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20018Records, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20018Records):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
