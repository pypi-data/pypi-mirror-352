# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1LogsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cursor_ref': 'str',
        'customer_view': 'str',
        'device_ids': 'list[str]',
        'histogram_bucket_size_sec': 'str',
        'num_logs': 'str',
        'old_ts': 'V1devicesbringuptokenValidTillTs',
        'recent_ts': 'V1devicesbringuptokenValidTillTs',
        'selectors': 'list[V1logsSelectors]'
    }

    attribute_map = {
        'cursor_ref': 'cursorRef',
        'customer_view': 'customerView',
        'device_ids': 'deviceIds',
        'histogram_bucket_size_sec': 'histogramBucketSizeSec',
        'num_logs': 'numLogs',
        'old_ts': 'oldTs',
        'recent_ts': 'recentTs',
        'selectors': 'selectors'
    }

    def __init__(self, cursor_ref=None, customer_view=None, device_ids=None, histogram_bucket_size_sec=None, num_logs=None, old_ts=None, recent_ts=None, selectors=None):  # noqa: E501
        """V1LogsBody - a model defined in Swagger"""  # noqa: E501
        self._cursor_ref = None
        self._customer_view = None
        self._device_ids = None
        self._histogram_bucket_size_sec = None
        self._num_logs = None
        self._old_ts = None
        self._recent_ts = None
        self._selectors = None
        self.discriminator = None
        if cursor_ref is not None:
            self.cursor_ref = cursor_ref
        if customer_view is not None:
            self.customer_view = customer_view
        if device_ids is not None:
            self.device_ids = device_ids
        if histogram_bucket_size_sec is not None:
            self.histogram_bucket_size_sec = histogram_bucket_size_sec
        if num_logs is not None:
            self.num_logs = num_logs
        if old_ts is not None:
            self.old_ts = old_ts
        if recent_ts is not None:
            self.recent_ts = recent_ts
        if selectors is not None:
            self.selectors = selectors

    @property
    def cursor_ref(self):
        """Gets the cursor_ref of this V1LogsBody.  # noqa: E501


        :return: The cursor_ref of this V1LogsBody.  # noqa: E501
        :rtype: str
        """
        return self._cursor_ref

    @cursor_ref.setter
    def cursor_ref(self, cursor_ref):
        """Sets the cursor_ref of this V1LogsBody.


        :param cursor_ref: The cursor_ref of this V1LogsBody.  # noqa: E501
        :type: str
        """

        self._cursor_ref = cursor_ref

    @property
    def customer_view(self):
        """Gets the customer_view of this V1LogsBody.  # noqa: E501


        :return: The customer_view of this V1LogsBody.  # noqa: E501
        :rtype: str
        """
        return self._customer_view

    @customer_view.setter
    def customer_view(self, customer_view):
        """Sets the customer_view of this V1LogsBody.


        :param customer_view: The customer_view of this V1LogsBody.  # noqa: E501
        :type: str
        """

        self._customer_view = customer_view

    @property
    def device_ids(self):
        """Gets the device_ids of this V1LogsBody.  # noqa: E501


        :return: The device_ids of this V1LogsBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._device_ids

    @device_ids.setter
    def device_ids(self, device_ids):
        """Sets the device_ids of this V1LogsBody.


        :param device_ids: The device_ids of this V1LogsBody.  # noqa: E501
        :type: list[str]
        """

        self._device_ids = device_ids

    @property
    def histogram_bucket_size_sec(self):
        """Gets the histogram_bucket_size_sec of this V1LogsBody.  # noqa: E501


        :return: The histogram_bucket_size_sec of this V1LogsBody.  # noqa: E501
        :rtype: str
        """
        return self._histogram_bucket_size_sec

    @histogram_bucket_size_sec.setter
    def histogram_bucket_size_sec(self, histogram_bucket_size_sec):
        """Sets the histogram_bucket_size_sec of this V1LogsBody.


        :param histogram_bucket_size_sec: The histogram_bucket_size_sec of this V1LogsBody.  # noqa: E501
        :type: str
        """

        self._histogram_bucket_size_sec = histogram_bucket_size_sec

    @property
    def num_logs(self):
        """Gets the num_logs of this V1LogsBody.  # noqa: E501


        :return: The num_logs of this V1LogsBody.  # noqa: E501
        :rtype: str
        """
        return self._num_logs

    @num_logs.setter
    def num_logs(self, num_logs):
        """Sets the num_logs of this V1LogsBody.


        :param num_logs: The num_logs of this V1LogsBody.  # noqa: E501
        :type: str
        """

        self._num_logs = num_logs

    @property
    def old_ts(self):
        """Gets the old_ts of this V1LogsBody.  # noqa: E501


        :return: The old_ts of this V1LogsBody.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._old_ts

    @old_ts.setter
    def old_ts(self, old_ts):
        """Sets the old_ts of this V1LogsBody.


        :param old_ts: The old_ts of this V1LogsBody.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._old_ts = old_ts

    @property
    def recent_ts(self):
        """Gets the recent_ts of this V1LogsBody.  # noqa: E501


        :return: The recent_ts of this V1LogsBody.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._recent_ts

    @recent_ts.setter
    def recent_ts(self, recent_ts):
        """Sets the recent_ts of this V1LogsBody.


        :param recent_ts: The recent_ts of this V1LogsBody.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._recent_ts = recent_ts

    @property
    def selectors(self):
        """Gets the selectors of this V1LogsBody.  # noqa: E501


        :return: The selectors of this V1LogsBody.  # noqa: E501
        :rtype: list[V1logsSelectors]
        """
        return self._selectors

    @selectors.setter
    def selectors(self, selectors):
        """Sets the selectors of this V1LogsBody.


        :param selectors: The selectors of this V1LogsBody.  # noqa: E501
        :type: list[V1logsSelectors]
        """

        self._selectors = selectors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1LogsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1LogsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
