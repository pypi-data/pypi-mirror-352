# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200112Ospfv2ProcessAreas(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'area_id': 'str',
        'bfd': 'object',
        'bfd_neighbors': 'list[object]',
        'id': 'str',
        'interfaces': 'list[object]',
        'name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'area_id': 'areaId',
        'bfd': 'bfd',
        'bfd_neighbors': 'bfdNeighbors',
        'id': 'id',
        'interfaces': 'interfaces',
        'name': 'name',
        'type': 'type'
    }

    def __init__(self, area_id=None, bfd=None, bfd_neighbors=None, id=None, interfaces=None, name=None, type=None):  # noqa: E501
        """InlineResponse200112Ospfv2ProcessAreas - a model defined in Swagger"""  # noqa: E501
        self._area_id = None
        self._bfd = None
        self._bfd_neighbors = None
        self._id = None
        self._interfaces = None
        self._name = None
        self._type = None
        self.discriminator = None
        if area_id is not None:
            self.area_id = area_id
        if bfd is not None:
            self.bfd = bfd
        if bfd_neighbors is not None:
            self.bfd_neighbors = bfd_neighbors
        if id is not None:
            self.id = id
        if interfaces is not None:
            self.interfaces = interfaces
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type

    @property
    def area_id(self):
        """Gets the area_id of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501


        :return: The area_id of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501
        :rtype: str
        """
        return self._area_id

    @area_id.setter
    def area_id(self, area_id):
        """Sets the area_id of this InlineResponse200112Ospfv2ProcessAreas.


        :param area_id: The area_id of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501
        :type: str
        """

        self._area_id = area_id

    @property
    def bfd(self):
        """Gets the bfd of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501


        :return: The bfd of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501
        :rtype: object
        """
        return self._bfd

    @bfd.setter
    def bfd(self, bfd):
        """Sets the bfd of this InlineResponse200112Ospfv2ProcessAreas.


        :param bfd: The bfd of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501
        :type: object
        """

        self._bfd = bfd

    @property
    def bfd_neighbors(self):
        """Gets the bfd_neighbors of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501


        :return: The bfd_neighbors of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501
        :rtype: list[object]
        """
        return self._bfd_neighbors

    @bfd_neighbors.setter
    def bfd_neighbors(self, bfd_neighbors):
        """Sets the bfd_neighbors of this InlineResponse200112Ospfv2ProcessAreas.


        :param bfd_neighbors: The bfd_neighbors of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501
        :type: list[object]
        """

        self._bfd_neighbors = bfd_neighbors

    @property
    def id(self):
        """Gets the id of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501


        :return: The id of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200112Ospfv2ProcessAreas.


        :param id: The id of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def interfaces(self):
        """Gets the interfaces of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501


        :return: The interfaces of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501
        :rtype: list[object]
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """Sets the interfaces of this InlineResponse200112Ospfv2ProcessAreas.


        :param interfaces: The interfaces of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501
        :type: list[object]
        """

        self._interfaces = interfaces

    @property
    def name(self):
        """Gets the name of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501


        :return: The name of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200112Ospfv2ProcessAreas.


        :param name: The name of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501


        :return: The type of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse200112Ospfv2ProcessAreas.


        :param type: The type of this InlineResponse200112Ospfv2ProcessAreas.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200112Ospfv2ProcessAreas, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200112Ospfv2ProcessAreas):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
