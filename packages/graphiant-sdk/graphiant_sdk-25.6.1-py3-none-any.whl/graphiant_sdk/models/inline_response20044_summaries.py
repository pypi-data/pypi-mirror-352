# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20044Summaries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_name': 'str',
        'lan_segments': 'list[str]',
        'session_count': 'str',
        'site': 'InlineResponse20035ClientEndpointSite'
    }

    attribute_map = {
        'app_name': 'appName',
        'lan_segments': 'lanSegments',
        'session_count': 'sessionCount',
        'site': 'site'
    }

    def __init__(self, app_name=None, lan_segments=None, session_count=None, site=None):  # noqa: E501
        """InlineResponse20044Summaries - a model defined in Swagger"""  # noqa: E501
        self._app_name = None
        self._lan_segments = None
        self._session_count = None
        self._site = None
        self.discriminator = None
        if app_name is not None:
            self.app_name = app_name
        if lan_segments is not None:
            self.lan_segments = lan_segments
        if session_count is not None:
            self.session_count = session_count
        if site is not None:
            self.site = site

    @property
    def app_name(self):
        """Gets the app_name of this InlineResponse20044Summaries.  # noqa: E501


        :return: The app_name of this InlineResponse20044Summaries.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this InlineResponse20044Summaries.


        :param app_name: The app_name of this InlineResponse20044Summaries.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def lan_segments(self):
        """Gets the lan_segments of this InlineResponse20044Summaries.  # noqa: E501


        :return: The lan_segments of this InlineResponse20044Summaries.  # noqa: E501
        :rtype: list[str]
        """
        return self._lan_segments

    @lan_segments.setter
    def lan_segments(self, lan_segments):
        """Sets the lan_segments of this InlineResponse20044Summaries.


        :param lan_segments: The lan_segments of this InlineResponse20044Summaries.  # noqa: E501
        :type: list[str]
        """

        self._lan_segments = lan_segments

    @property
    def session_count(self):
        """Gets the session_count of this InlineResponse20044Summaries.  # noqa: E501


        :return: The session_count of this InlineResponse20044Summaries.  # noqa: E501
        :rtype: str
        """
        return self._session_count

    @session_count.setter
    def session_count(self, session_count):
        """Sets the session_count of this InlineResponse20044Summaries.


        :param session_count: The session_count of this InlineResponse20044Summaries.  # noqa: E501
        :type: str
        """

        self._session_count = session_count

    @property
    def site(self):
        """Gets the site of this InlineResponse20044Summaries.  # noqa: E501


        :return: The site of this InlineResponse20044Summaries.  # noqa: E501
        :rtype: InlineResponse20035ClientEndpointSite
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this InlineResponse20044Summaries.


        :param site: The site of this InlineResponse20044Summaries.  # noqa: E501
        :type: InlineResponse20035ClientEndpointSite
        """

        self._site = site

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20044Summaries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20044Summaries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
