# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200256(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'maintenance_mode': 'str',
        'colr_active': 'str',
        'control_plane': 'InlineResponse200256ControlPlane',
        'data_plane': 'InlineResponse200222DataPlane',
        'issues': 'list[InlineResponse200222Issues]',
        'lifecycle_status': 'str',
        'status': 'str',
        'sw_version': 'str',
        'sw_version_v2': 'V1devicesupgradescheduleVersion',
        'system_plane': 'InlineResponse200256SystemPlane',
        'up_since_ts': 'V1devicesbringuptokenValidTillTs'
    }

    attribute_map = {
        'maintenance_mode': 'MaintenanceMode',
        'colr_active': 'colrActive',
        'control_plane': 'controlPlane',
        'data_plane': 'dataPlane',
        'issues': 'issues',
        'lifecycle_status': 'lifecycleStatus',
        'status': 'status',
        'sw_version': 'swVersion',
        'sw_version_v2': 'swVersionV2',
        'system_plane': 'systemPlane',
        'up_since_ts': 'upSinceTs'
    }

    def __init__(self, maintenance_mode=None, colr_active=None, control_plane=None, data_plane=None, issues=None, lifecycle_status=None, status=None, sw_version=None, sw_version_v2=None, system_plane=None, up_since_ts=None):  # noqa: E501
        """InlineResponse200256 - a model defined in Swagger"""  # noqa: E501
        self._maintenance_mode = None
        self._colr_active = None
        self._control_plane = None
        self._data_plane = None
        self._issues = None
        self._lifecycle_status = None
        self._status = None
        self._sw_version = None
        self._sw_version_v2 = None
        self._system_plane = None
        self._up_since_ts = None
        self.discriminator = None
        if maintenance_mode is not None:
            self.maintenance_mode = maintenance_mode
        if colr_active is not None:
            self.colr_active = colr_active
        if control_plane is not None:
            self.control_plane = control_plane
        if data_plane is not None:
            self.data_plane = data_plane
        if issues is not None:
            self.issues = issues
        if lifecycle_status is not None:
            self.lifecycle_status = lifecycle_status
        if status is not None:
            self.status = status
        if sw_version is not None:
            self.sw_version = sw_version
        if sw_version_v2 is not None:
            self.sw_version_v2 = sw_version_v2
        if system_plane is not None:
            self.system_plane = system_plane
        if up_since_ts is not None:
            self.up_since_ts = up_since_ts

    @property
    def maintenance_mode(self):
        """Gets the maintenance_mode of this InlineResponse200256.  # noqa: E501


        :return: The maintenance_mode of this InlineResponse200256.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """Sets the maintenance_mode of this InlineResponse200256.


        :param maintenance_mode: The maintenance_mode of this InlineResponse200256.  # noqa: E501
        :type: str
        """

        self._maintenance_mode = maintenance_mode

    @property
    def colr_active(self):
        """Gets the colr_active of this InlineResponse200256.  # noqa: E501


        :return: The colr_active of this InlineResponse200256.  # noqa: E501
        :rtype: str
        """
        return self._colr_active

    @colr_active.setter
    def colr_active(self, colr_active):
        """Sets the colr_active of this InlineResponse200256.


        :param colr_active: The colr_active of this InlineResponse200256.  # noqa: E501
        :type: str
        """

        self._colr_active = colr_active

    @property
    def control_plane(self):
        """Gets the control_plane of this InlineResponse200256.  # noqa: E501


        :return: The control_plane of this InlineResponse200256.  # noqa: E501
        :rtype: InlineResponse200256ControlPlane
        """
        return self._control_plane

    @control_plane.setter
    def control_plane(self, control_plane):
        """Sets the control_plane of this InlineResponse200256.


        :param control_plane: The control_plane of this InlineResponse200256.  # noqa: E501
        :type: InlineResponse200256ControlPlane
        """

        self._control_plane = control_plane

    @property
    def data_plane(self):
        """Gets the data_plane of this InlineResponse200256.  # noqa: E501


        :return: The data_plane of this InlineResponse200256.  # noqa: E501
        :rtype: InlineResponse200222DataPlane
        """
        return self._data_plane

    @data_plane.setter
    def data_plane(self, data_plane):
        """Sets the data_plane of this InlineResponse200256.


        :param data_plane: The data_plane of this InlineResponse200256.  # noqa: E501
        :type: InlineResponse200222DataPlane
        """

        self._data_plane = data_plane

    @property
    def issues(self):
        """Gets the issues of this InlineResponse200256.  # noqa: E501


        :return: The issues of this InlineResponse200256.  # noqa: E501
        :rtype: list[InlineResponse200222Issues]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this InlineResponse200256.


        :param issues: The issues of this InlineResponse200256.  # noqa: E501
        :type: list[InlineResponse200222Issues]
        """

        self._issues = issues

    @property
    def lifecycle_status(self):
        """Gets the lifecycle_status of this InlineResponse200256.  # noqa: E501


        :return: The lifecycle_status of this InlineResponse200256.  # noqa: E501
        :rtype: str
        """
        return self._lifecycle_status

    @lifecycle_status.setter
    def lifecycle_status(self, lifecycle_status):
        """Sets the lifecycle_status of this InlineResponse200256.


        :param lifecycle_status: The lifecycle_status of this InlineResponse200256.  # noqa: E501
        :type: str
        """

        self._lifecycle_status = lifecycle_status

    @property
    def status(self):
        """Gets the status of this InlineResponse200256.  # noqa: E501


        :return: The status of this InlineResponse200256.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200256.


        :param status: The status of this InlineResponse200256.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def sw_version(self):
        """Gets the sw_version of this InlineResponse200256.  # noqa: E501


        :return: The sw_version of this InlineResponse200256.  # noqa: E501
        :rtype: str
        """
        return self._sw_version

    @sw_version.setter
    def sw_version(self, sw_version):
        """Sets the sw_version of this InlineResponse200256.


        :param sw_version: The sw_version of this InlineResponse200256.  # noqa: E501
        :type: str
        """

        self._sw_version = sw_version

    @property
    def sw_version_v2(self):
        """Gets the sw_version_v2 of this InlineResponse200256.  # noqa: E501


        :return: The sw_version_v2 of this InlineResponse200256.  # noqa: E501
        :rtype: V1devicesupgradescheduleVersion
        """
        return self._sw_version_v2

    @sw_version_v2.setter
    def sw_version_v2(self, sw_version_v2):
        """Sets the sw_version_v2 of this InlineResponse200256.


        :param sw_version_v2: The sw_version_v2 of this InlineResponse200256.  # noqa: E501
        :type: V1devicesupgradescheduleVersion
        """

        self._sw_version_v2 = sw_version_v2

    @property
    def system_plane(self):
        """Gets the system_plane of this InlineResponse200256.  # noqa: E501


        :return: The system_plane of this InlineResponse200256.  # noqa: E501
        :rtype: InlineResponse200256SystemPlane
        """
        return self._system_plane

    @system_plane.setter
    def system_plane(self, system_plane):
        """Sets the system_plane of this InlineResponse200256.


        :param system_plane: The system_plane of this InlineResponse200256.  # noqa: E501
        :type: InlineResponse200256SystemPlane
        """

        self._system_plane = system_plane

    @property
    def up_since_ts(self):
        """Gets the up_since_ts of this InlineResponse200256.  # noqa: E501


        :return: The up_since_ts of this InlineResponse200256.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._up_since_ts

    @up_since_ts.setter
    def up_since_ts(self, up_since_ts):
        """Sets the up_since_ts of this InlineResponse200256.


        :param up_since_ts: The up_since_ts of this InlineResponse200256.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._up_since_ts = up_since_ts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200256, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200256):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
