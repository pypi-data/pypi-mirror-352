# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20042(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_applications': 'str',
        'num_flows': 'str',
        'topology': 'InlineResponse20042Topology',
        'topology_change_ts': 'list[V1devicesbringuptokenValidTillTs]',
        'traffic_regions': 'list[InlineResponse20042TrafficRegions]'
    }

    attribute_map = {
        'num_applications': 'numApplications',
        'num_flows': 'numFlows',
        'topology': 'topology',
        'topology_change_ts': 'topologyChangeTs',
        'traffic_regions': 'trafficRegions'
    }

    def __init__(self, num_applications=None, num_flows=None, topology=None, topology_change_ts=None, traffic_regions=None):  # noqa: E501
        """InlineResponse20042 - a model defined in Swagger"""  # noqa: E501
        self._num_applications = None
        self._num_flows = None
        self._topology = None
        self._topology_change_ts = None
        self._traffic_regions = None
        self.discriminator = None
        if num_applications is not None:
            self.num_applications = num_applications
        if num_flows is not None:
            self.num_flows = num_flows
        if topology is not None:
            self.topology = topology
        if topology_change_ts is not None:
            self.topology_change_ts = topology_change_ts
        if traffic_regions is not None:
            self.traffic_regions = traffic_regions

    @property
    def num_applications(self):
        """Gets the num_applications of this InlineResponse20042.  # noqa: E501


        :return: The num_applications of this InlineResponse20042.  # noqa: E501
        :rtype: str
        """
        return self._num_applications

    @num_applications.setter
    def num_applications(self, num_applications):
        """Sets the num_applications of this InlineResponse20042.


        :param num_applications: The num_applications of this InlineResponse20042.  # noqa: E501
        :type: str
        """

        self._num_applications = num_applications

    @property
    def num_flows(self):
        """Gets the num_flows of this InlineResponse20042.  # noqa: E501


        :return: The num_flows of this InlineResponse20042.  # noqa: E501
        :rtype: str
        """
        return self._num_flows

    @num_flows.setter
    def num_flows(self, num_flows):
        """Sets the num_flows of this InlineResponse20042.


        :param num_flows: The num_flows of this InlineResponse20042.  # noqa: E501
        :type: str
        """

        self._num_flows = num_flows

    @property
    def topology(self):
        """Gets the topology of this InlineResponse20042.  # noqa: E501


        :return: The topology of this InlineResponse20042.  # noqa: E501
        :rtype: InlineResponse20042Topology
        """
        return self._topology

    @topology.setter
    def topology(self, topology):
        """Sets the topology of this InlineResponse20042.


        :param topology: The topology of this InlineResponse20042.  # noqa: E501
        :type: InlineResponse20042Topology
        """

        self._topology = topology

    @property
    def topology_change_ts(self):
        """Gets the topology_change_ts of this InlineResponse20042.  # noqa: E501


        :return: The topology_change_ts of this InlineResponse20042.  # noqa: E501
        :rtype: list[V1devicesbringuptokenValidTillTs]
        """
        return self._topology_change_ts

    @topology_change_ts.setter
    def topology_change_ts(self, topology_change_ts):
        """Sets the topology_change_ts of this InlineResponse20042.


        :param topology_change_ts: The topology_change_ts of this InlineResponse20042.  # noqa: E501
        :type: list[V1devicesbringuptokenValidTillTs]
        """

        self._topology_change_ts = topology_change_ts

    @property
    def traffic_regions(self):
        """Gets the traffic_regions of this InlineResponse20042.  # noqa: E501


        :return: The traffic_regions of this InlineResponse20042.  # noqa: E501
        :rtype: list[InlineResponse20042TrafficRegions]
        """
        return self._traffic_regions

    @traffic_regions.setter
    def traffic_regions(self, traffic_regions):
        """Sets the traffic_regions of this InlineResponse20042.


        :param traffic_regions: The traffic_regions of this InlineResponse20042.  # noqa: E501
        :type: list[InlineResponse20042TrafficRegions]
        """

        self._traffic_regions = traffic_regions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20042, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20042):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
