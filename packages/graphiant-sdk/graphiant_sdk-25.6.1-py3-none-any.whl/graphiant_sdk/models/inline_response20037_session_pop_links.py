# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20037SessionPopLinks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_pop_name': 'str',
        'jitter': 'str',
        'latency': 'str',
        'loss': 'str',
        'second_pop_name': 'str'
    }

    attribute_map = {
        'first_pop_name': 'firstPopName',
        'jitter': 'jitter',
        'latency': 'latency',
        'loss': 'loss',
        'second_pop_name': 'secondPopName'
    }

    def __init__(self, first_pop_name=None, jitter=None, latency=None, loss=None, second_pop_name=None):  # noqa: E501
        """InlineResponse20037SessionPopLinks - a model defined in Swagger"""  # noqa: E501
        self._first_pop_name = None
        self._jitter = None
        self._latency = None
        self._loss = None
        self._second_pop_name = None
        self.discriminator = None
        if first_pop_name is not None:
            self.first_pop_name = first_pop_name
        if jitter is not None:
            self.jitter = jitter
        if latency is not None:
            self.latency = latency
        if loss is not None:
            self.loss = loss
        if second_pop_name is not None:
            self.second_pop_name = second_pop_name

    @property
    def first_pop_name(self):
        """Gets the first_pop_name of this InlineResponse20037SessionPopLinks.  # noqa: E501


        :return: The first_pop_name of this InlineResponse20037SessionPopLinks.  # noqa: E501
        :rtype: str
        """
        return self._first_pop_name

    @first_pop_name.setter
    def first_pop_name(self, first_pop_name):
        """Sets the first_pop_name of this InlineResponse20037SessionPopLinks.


        :param first_pop_name: The first_pop_name of this InlineResponse20037SessionPopLinks.  # noqa: E501
        :type: str
        """

        self._first_pop_name = first_pop_name

    @property
    def jitter(self):
        """Gets the jitter of this InlineResponse20037SessionPopLinks.  # noqa: E501


        :return: The jitter of this InlineResponse20037SessionPopLinks.  # noqa: E501
        :rtype: str
        """
        return self._jitter

    @jitter.setter
    def jitter(self, jitter):
        """Sets the jitter of this InlineResponse20037SessionPopLinks.


        :param jitter: The jitter of this InlineResponse20037SessionPopLinks.  # noqa: E501
        :type: str
        """

        self._jitter = jitter

    @property
    def latency(self):
        """Gets the latency of this InlineResponse20037SessionPopLinks.  # noqa: E501


        :return: The latency of this InlineResponse20037SessionPopLinks.  # noqa: E501
        :rtype: str
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this InlineResponse20037SessionPopLinks.


        :param latency: The latency of this InlineResponse20037SessionPopLinks.  # noqa: E501
        :type: str
        """

        self._latency = latency

    @property
    def loss(self):
        """Gets the loss of this InlineResponse20037SessionPopLinks.  # noqa: E501


        :return: The loss of this InlineResponse20037SessionPopLinks.  # noqa: E501
        :rtype: str
        """
        return self._loss

    @loss.setter
    def loss(self, loss):
        """Sets the loss of this InlineResponse20037SessionPopLinks.


        :param loss: The loss of this InlineResponse20037SessionPopLinks.  # noqa: E501
        :type: str
        """

        self._loss = loss

    @property
    def second_pop_name(self):
        """Gets the second_pop_name of this InlineResponse20037SessionPopLinks.  # noqa: E501


        :return: The second_pop_name of this InlineResponse20037SessionPopLinks.  # noqa: E501
        :rtype: str
        """
        return self._second_pop_name

    @second_pop_name.setter
    def second_pop_name(self, second_pop_name):
        """Sets the second_pop_name of this InlineResponse20037SessionPopLinks.


        :param second_pop_name: The second_pop_name of this InlineResponse20037SessionPopLinks.  # noqa: E501
        :type: str
        """

        self._second_pop_name = second_pop_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20037SessionPopLinks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20037SessionPopLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
