# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200155Actions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'administrative_distance': 'str',
        'aspath_prepend': 'str',
        'bgp_set_next_hop': 'str',
        'call_policy': 'str',
        'community': 'object',
        'id': 'str',
        'local_pref': 'str',
        'metric_absolute': 'str',
        'metric_modifier': 'str',
        'result': 'str',
        'seq': 'str',
        'weight': 'str'
    }

    attribute_map = {
        'administrative_distance': 'administrativeDistance',
        'aspath_prepend': 'aspathPrepend',
        'bgp_set_next_hop': 'bgpSetNextHop',
        'call_policy': 'callPolicy',
        'community': 'community',
        'id': 'id',
        'local_pref': 'localPref',
        'metric_absolute': 'metricAbsolute',
        'metric_modifier': 'metricModifier',
        'result': 'result',
        'seq': 'seq',
        'weight': 'weight'
    }

    def __init__(self, administrative_distance=None, aspath_prepend=None, bgp_set_next_hop=None, call_policy=None, community=None, id=None, local_pref=None, metric_absolute=None, metric_modifier=None, result=None, seq=None, weight=None):  # noqa: E501
        """InlineResponse200155Actions - a model defined in Swagger"""  # noqa: E501
        self._administrative_distance = None
        self._aspath_prepend = None
        self._bgp_set_next_hop = None
        self._call_policy = None
        self._community = None
        self._id = None
        self._local_pref = None
        self._metric_absolute = None
        self._metric_modifier = None
        self._result = None
        self._seq = None
        self._weight = None
        self.discriminator = None
        if administrative_distance is not None:
            self.administrative_distance = administrative_distance
        if aspath_prepend is not None:
            self.aspath_prepend = aspath_prepend
        if bgp_set_next_hop is not None:
            self.bgp_set_next_hop = bgp_set_next_hop
        if call_policy is not None:
            self.call_policy = call_policy
        if community is not None:
            self.community = community
        if id is not None:
            self.id = id
        if local_pref is not None:
            self.local_pref = local_pref
        if metric_absolute is not None:
            self.metric_absolute = metric_absolute
        if metric_modifier is not None:
            self.metric_modifier = metric_modifier
        if result is not None:
            self.result = result
        if seq is not None:
            self.seq = seq
        if weight is not None:
            self.weight = weight

    @property
    def administrative_distance(self):
        """Gets the administrative_distance of this InlineResponse200155Actions.  # noqa: E501


        :return: The administrative_distance of this InlineResponse200155Actions.  # noqa: E501
        :rtype: str
        """
        return self._administrative_distance

    @administrative_distance.setter
    def administrative_distance(self, administrative_distance):
        """Sets the administrative_distance of this InlineResponse200155Actions.


        :param administrative_distance: The administrative_distance of this InlineResponse200155Actions.  # noqa: E501
        :type: str
        """

        self._administrative_distance = administrative_distance

    @property
    def aspath_prepend(self):
        """Gets the aspath_prepend of this InlineResponse200155Actions.  # noqa: E501


        :return: The aspath_prepend of this InlineResponse200155Actions.  # noqa: E501
        :rtype: str
        """
        return self._aspath_prepend

    @aspath_prepend.setter
    def aspath_prepend(self, aspath_prepend):
        """Sets the aspath_prepend of this InlineResponse200155Actions.


        :param aspath_prepend: The aspath_prepend of this InlineResponse200155Actions.  # noqa: E501
        :type: str
        """

        self._aspath_prepend = aspath_prepend

    @property
    def bgp_set_next_hop(self):
        """Gets the bgp_set_next_hop of this InlineResponse200155Actions.  # noqa: E501


        :return: The bgp_set_next_hop of this InlineResponse200155Actions.  # noqa: E501
        :rtype: str
        """
        return self._bgp_set_next_hop

    @bgp_set_next_hop.setter
    def bgp_set_next_hop(self, bgp_set_next_hop):
        """Sets the bgp_set_next_hop of this InlineResponse200155Actions.


        :param bgp_set_next_hop: The bgp_set_next_hop of this InlineResponse200155Actions.  # noqa: E501
        :type: str
        """

        self._bgp_set_next_hop = bgp_set_next_hop

    @property
    def call_policy(self):
        """Gets the call_policy of this InlineResponse200155Actions.  # noqa: E501


        :return: The call_policy of this InlineResponse200155Actions.  # noqa: E501
        :rtype: str
        """
        return self._call_policy

    @call_policy.setter
    def call_policy(self, call_policy):
        """Sets the call_policy of this InlineResponse200155Actions.


        :param call_policy: The call_policy of this InlineResponse200155Actions.  # noqa: E501
        :type: str
        """

        self._call_policy = call_policy

    @property
    def community(self):
        """Gets the community of this InlineResponse200155Actions.  # noqa: E501


        :return: The community of this InlineResponse200155Actions.  # noqa: E501
        :rtype: object
        """
        return self._community

    @community.setter
    def community(self, community):
        """Sets the community of this InlineResponse200155Actions.


        :param community: The community of this InlineResponse200155Actions.  # noqa: E501
        :type: object
        """

        self._community = community

    @property
    def id(self):
        """Gets the id of this InlineResponse200155Actions.  # noqa: E501


        :return: The id of this InlineResponse200155Actions.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200155Actions.


        :param id: The id of this InlineResponse200155Actions.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def local_pref(self):
        """Gets the local_pref of this InlineResponse200155Actions.  # noqa: E501


        :return: The local_pref of this InlineResponse200155Actions.  # noqa: E501
        :rtype: str
        """
        return self._local_pref

    @local_pref.setter
    def local_pref(self, local_pref):
        """Sets the local_pref of this InlineResponse200155Actions.


        :param local_pref: The local_pref of this InlineResponse200155Actions.  # noqa: E501
        :type: str
        """

        self._local_pref = local_pref

    @property
    def metric_absolute(self):
        """Gets the metric_absolute of this InlineResponse200155Actions.  # noqa: E501


        :return: The metric_absolute of this InlineResponse200155Actions.  # noqa: E501
        :rtype: str
        """
        return self._metric_absolute

    @metric_absolute.setter
    def metric_absolute(self, metric_absolute):
        """Sets the metric_absolute of this InlineResponse200155Actions.


        :param metric_absolute: The metric_absolute of this InlineResponse200155Actions.  # noqa: E501
        :type: str
        """

        self._metric_absolute = metric_absolute

    @property
    def metric_modifier(self):
        """Gets the metric_modifier of this InlineResponse200155Actions.  # noqa: E501


        :return: The metric_modifier of this InlineResponse200155Actions.  # noqa: E501
        :rtype: str
        """
        return self._metric_modifier

    @metric_modifier.setter
    def metric_modifier(self, metric_modifier):
        """Sets the metric_modifier of this InlineResponse200155Actions.


        :param metric_modifier: The metric_modifier of this InlineResponse200155Actions.  # noqa: E501
        :type: str
        """

        self._metric_modifier = metric_modifier

    @property
    def result(self):
        """Gets the result of this InlineResponse200155Actions.  # noqa: E501


        :return: The result of this InlineResponse200155Actions.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this InlineResponse200155Actions.


        :param result: The result of this InlineResponse200155Actions.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def seq(self):
        """Gets the seq of this InlineResponse200155Actions.  # noqa: E501


        :return: The seq of this InlineResponse200155Actions.  # noqa: E501
        :rtype: str
        """
        return self._seq

    @seq.setter
    def seq(self, seq):
        """Sets the seq of this InlineResponse200155Actions.


        :param seq: The seq of this InlineResponse200155Actions.  # noqa: E501
        :type: str
        """

        self._seq = seq

    @property
    def weight(self):
        """Gets the weight of this InlineResponse200155Actions.  # noqa: E501


        :return: The weight of this InlineResponse200155Actions.  # noqa: E501
        :rtype: str
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this InlineResponse200155Actions.


        :param weight: The weight of this InlineResponse200155Actions.  # noqa: E501
        :type: str
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200155Actions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200155Actions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
