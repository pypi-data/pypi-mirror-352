# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20019DataframeDictionary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataframe_dictionary_map': 'list[V1globalconfigsiteGlobalPrefixSetOps]',
        'x_axis': 'str',
        'y_axis': 'str'
    }

    attribute_map = {
        'dataframe_dictionary_map': 'dataframeDictionaryMap',
        'x_axis': 'xAxis',
        'y_axis': 'yAxis'
    }

    def __init__(self, dataframe_dictionary_map=None, x_axis=None, y_axis=None):  # noqa: E501
        """InlineResponse20019DataframeDictionary - a model defined in Swagger"""  # noqa: E501
        self._dataframe_dictionary_map = None
        self._x_axis = None
        self._y_axis = None
        self.discriminator = None
        if dataframe_dictionary_map is not None:
            self.dataframe_dictionary_map = dataframe_dictionary_map
        if x_axis is not None:
            self.x_axis = x_axis
        if y_axis is not None:
            self.y_axis = y_axis

    @property
    def dataframe_dictionary_map(self):
        """Gets the dataframe_dictionary_map of this InlineResponse20019DataframeDictionary.  # noqa: E501


        :return: The dataframe_dictionary_map of this InlineResponse20019DataframeDictionary.  # noqa: E501
        :rtype: list[V1globalconfigsiteGlobalPrefixSetOps]
        """
        return self._dataframe_dictionary_map

    @dataframe_dictionary_map.setter
    def dataframe_dictionary_map(self, dataframe_dictionary_map):
        """Sets the dataframe_dictionary_map of this InlineResponse20019DataframeDictionary.


        :param dataframe_dictionary_map: The dataframe_dictionary_map of this InlineResponse20019DataframeDictionary.  # noqa: E501
        :type: list[V1globalconfigsiteGlobalPrefixSetOps]
        """

        self._dataframe_dictionary_map = dataframe_dictionary_map

    @property
    def x_axis(self):
        """Gets the x_axis of this InlineResponse20019DataframeDictionary.  # noqa: E501


        :return: The x_axis of this InlineResponse20019DataframeDictionary.  # noqa: E501
        :rtype: str
        """
        return self._x_axis

    @x_axis.setter
    def x_axis(self, x_axis):
        """Sets the x_axis of this InlineResponse20019DataframeDictionary.


        :param x_axis: The x_axis of this InlineResponse20019DataframeDictionary.  # noqa: E501
        :type: str
        """

        self._x_axis = x_axis

    @property
    def y_axis(self):
        """Gets the y_axis of this InlineResponse20019DataframeDictionary.  # noqa: E501


        :return: The y_axis of this InlineResponse20019DataframeDictionary.  # noqa: E501
        :rtype: str
        """
        return self._y_axis

    @y_axis.setter
    def y_axis(self, y_axis):
        """Sets the y_axis of this InlineResponse20019DataframeDictionary.


        :param y_axis: The y_axis of this InlineResponse20019DataframeDictionary.  # noqa: E501
        :type: str
        """

        self._y_axis = y_axis

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20019DataframeDictionary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20019DataframeDictionary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
