# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20012Integration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'str',
        'created_on': 'str',
        'details': 'V2integrationIntegrationBodyDetails',
        'enterprise_id': 'str',
        'id': 'str',
        'is_active': 'str',
        'nick_name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'details': 'details',
        'enterprise_id': 'enterpriseId',
        'id': 'id',
        'is_active': 'isActive',
        'nick_name': 'nickName',
        'type': 'type'
    }

    def __init__(self, created_by=None, created_on=None, details=None, enterprise_id=None, id=None, is_active=None, nick_name=None, type=None):  # noqa: E501
        """InlineResponse20012Integration - a model defined in Swagger"""  # noqa: E501
        self._created_by = None
        self._created_on = None
        self._details = None
        self._enterprise_id = None
        self._id = None
        self._is_active = None
        self._nick_name = None
        self._type = None
        self.discriminator = None
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if details is not None:
            self.details = details
        if enterprise_id is not None:
            self.enterprise_id = enterprise_id
        if id is not None:
            self.id = id
        if is_active is not None:
            self.is_active = is_active
        if nick_name is not None:
            self.nick_name = nick_name
        if type is not None:
            self.type = type

    @property
    def created_by(self):
        """Gets the created_by of this InlineResponse20012Integration.  # noqa: E501


        :return: The created_by of this InlineResponse20012Integration.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this InlineResponse20012Integration.


        :param created_by: The created_by of this InlineResponse20012Integration.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this InlineResponse20012Integration.  # noqa: E501


        :return: The created_on of this InlineResponse20012Integration.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this InlineResponse20012Integration.


        :param created_on: The created_on of this InlineResponse20012Integration.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def details(self):
        """Gets the details of this InlineResponse20012Integration.  # noqa: E501


        :return: The details of this InlineResponse20012Integration.  # noqa: E501
        :rtype: V2integrationIntegrationBodyDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this InlineResponse20012Integration.


        :param details: The details of this InlineResponse20012Integration.  # noqa: E501
        :type: V2integrationIntegrationBodyDetails
        """

        self._details = details

    @property
    def enterprise_id(self):
        """Gets the enterprise_id of this InlineResponse20012Integration.  # noqa: E501


        :return: The enterprise_id of this InlineResponse20012Integration.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_id

    @enterprise_id.setter
    def enterprise_id(self, enterprise_id):
        """Sets the enterprise_id of this InlineResponse20012Integration.


        :param enterprise_id: The enterprise_id of this InlineResponse20012Integration.  # noqa: E501
        :type: str
        """

        self._enterprise_id = enterprise_id

    @property
    def id(self):
        """Gets the id of this InlineResponse20012Integration.  # noqa: E501


        :return: The id of this InlineResponse20012Integration.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20012Integration.


        :param id: The id of this InlineResponse20012Integration.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this InlineResponse20012Integration.  # noqa: E501


        :return: The is_active of this InlineResponse20012Integration.  # noqa: E501
        :rtype: str
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this InlineResponse20012Integration.


        :param is_active: The is_active of this InlineResponse20012Integration.  # noqa: E501
        :type: str
        """

        self._is_active = is_active

    @property
    def nick_name(self):
        """Gets the nick_name of this InlineResponse20012Integration.  # noqa: E501


        :return: The nick_name of this InlineResponse20012Integration.  # noqa: E501
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """Sets the nick_name of this InlineResponse20012Integration.


        :param nick_name: The nick_name of this InlineResponse20012Integration.  # noqa: E501
        :type: str
        """

        self._nick_name = nick_name

    @property
    def type(self):
        """Gets the type of this InlineResponse20012Integration.  # noqa: E501


        :return: The type of this InlineResponse20012Integration.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20012Integration.


        :param type: The type of this InlineResponse20012Integration.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20012Integration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20012Integration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
