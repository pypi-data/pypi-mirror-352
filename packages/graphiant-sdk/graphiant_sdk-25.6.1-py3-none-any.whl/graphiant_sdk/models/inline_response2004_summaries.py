# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2004Summaries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'str',
        'discovered_location': 'str',
        'first_appeared_on': 'V1devicesbringuptokenValidTillTs',
        'ip_detected': 'str',
        'is_new': 'str',
        'state': 'str',
        'status': 'str'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'discovered_location': 'discoveredLocation',
        'first_appeared_on': 'firstAppearedOn',
        'ip_detected': 'ipDetected',
        'is_new': 'isNew',
        'state': 'state',
        'status': 'status'
    }

    def __init__(self, device_id=None, discovered_location=None, first_appeared_on=None, ip_detected=None, is_new=None, state=None, status=None):  # noqa: E501
        """InlineResponse2004Summaries - a model defined in Swagger"""  # noqa: E501
        self._device_id = None
        self._discovered_location = None
        self._first_appeared_on = None
        self._ip_detected = None
        self._is_new = None
        self._state = None
        self._status = None
        self.discriminator = None
        if device_id is not None:
            self.device_id = device_id
        if discovered_location is not None:
            self.discovered_location = discovered_location
        if first_appeared_on is not None:
            self.first_appeared_on = first_appeared_on
        if ip_detected is not None:
            self.ip_detected = ip_detected
        if is_new is not None:
            self.is_new = is_new
        if state is not None:
            self.state = state
        if status is not None:
            self.status = status

    @property
    def device_id(self):
        """Gets the device_id of this InlineResponse2004Summaries.  # noqa: E501


        :return: The device_id of this InlineResponse2004Summaries.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this InlineResponse2004Summaries.


        :param device_id: The device_id of this InlineResponse2004Summaries.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def discovered_location(self):
        """Gets the discovered_location of this InlineResponse2004Summaries.  # noqa: E501


        :return: The discovered_location of this InlineResponse2004Summaries.  # noqa: E501
        :rtype: str
        """
        return self._discovered_location

    @discovered_location.setter
    def discovered_location(self, discovered_location):
        """Sets the discovered_location of this InlineResponse2004Summaries.


        :param discovered_location: The discovered_location of this InlineResponse2004Summaries.  # noqa: E501
        :type: str
        """

        self._discovered_location = discovered_location

    @property
    def first_appeared_on(self):
        """Gets the first_appeared_on of this InlineResponse2004Summaries.  # noqa: E501


        :return: The first_appeared_on of this InlineResponse2004Summaries.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._first_appeared_on

    @first_appeared_on.setter
    def first_appeared_on(self, first_appeared_on):
        """Sets the first_appeared_on of this InlineResponse2004Summaries.


        :param first_appeared_on: The first_appeared_on of this InlineResponse2004Summaries.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._first_appeared_on = first_appeared_on

    @property
    def ip_detected(self):
        """Gets the ip_detected of this InlineResponse2004Summaries.  # noqa: E501


        :return: The ip_detected of this InlineResponse2004Summaries.  # noqa: E501
        :rtype: str
        """
        return self._ip_detected

    @ip_detected.setter
    def ip_detected(self, ip_detected):
        """Sets the ip_detected of this InlineResponse2004Summaries.


        :param ip_detected: The ip_detected of this InlineResponse2004Summaries.  # noqa: E501
        :type: str
        """

        self._ip_detected = ip_detected

    @property
    def is_new(self):
        """Gets the is_new of this InlineResponse2004Summaries.  # noqa: E501


        :return: The is_new of this InlineResponse2004Summaries.  # noqa: E501
        :rtype: str
        """
        return self._is_new

    @is_new.setter
    def is_new(self, is_new):
        """Sets the is_new of this InlineResponse2004Summaries.


        :param is_new: The is_new of this InlineResponse2004Summaries.  # noqa: E501
        :type: str
        """

        self._is_new = is_new

    @property
    def state(self):
        """Gets the state of this InlineResponse2004Summaries.  # noqa: E501


        :return: The state of this InlineResponse2004Summaries.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse2004Summaries.


        :param state: The state of this InlineResponse2004Summaries.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this InlineResponse2004Summaries.  # noqa: E501


        :return: The status of this InlineResponse2004Summaries.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse2004Summaries.


        :param status: The status of this InlineResponse2004Summaries.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2004Summaries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2004Summaries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
