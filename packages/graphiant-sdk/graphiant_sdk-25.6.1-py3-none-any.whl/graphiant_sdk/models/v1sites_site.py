# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1sitesSite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'global_prefix_set_ops': 'list[V1globalconfigsiteGlobalPrefixSetOps]',
        'ipfix_exporter_ops': 'list[V1globalconfigsiteGlobalPrefixSetOps]',
        'ipfix_exporter_ops_v2': 'list[V1sitesSiteIpfixExporterOpsV2]',
        'location': 'V1sitesSiteLocation',
        'name': 'str',
        'notes': 'str',
        'prefix_set_ops': 'list[V1globalconfigsiteGlobalPrefixSetOps]',
        'route_tag': 'V1policyroutetagsetsTag',
        'routing_policy_ops': 'list[V1globalconfigsiteGlobalPrefixSetOps]',
        'snmp_ops': 'list[V1globalconfigsiteGlobalPrefixSetOps]',
        'syslog_server_ops': 'list[V1globalconfigsiteGlobalPrefixSetOps]',
        'syslog_server_ops_v2': 'list[V1sitesSiteIpfixExporterOpsV2]',
        'traffic_policy_ops': 'list[V1globalconfigsiteGlobalPrefixSetOps]'
    }

    attribute_map = {
        'global_prefix_set_ops': 'globalPrefixSetOps',
        'ipfix_exporter_ops': 'ipfixExporterOps',
        'ipfix_exporter_ops_v2': 'ipfixExporterOpsV2',
        'location': 'location',
        'name': 'name',
        'notes': 'notes',
        'prefix_set_ops': 'prefixSetOps',
        'route_tag': 'routeTag',
        'routing_policy_ops': 'routingPolicyOps',
        'snmp_ops': 'snmpOps',
        'syslog_server_ops': 'syslogServerOps',
        'syslog_server_ops_v2': 'syslogServerOpsV2',
        'traffic_policy_ops': 'trafficPolicyOps'
    }

    def __init__(self, global_prefix_set_ops=None, ipfix_exporter_ops=None, ipfix_exporter_ops_v2=None, location=None, name=None, notes=None, prefix_set_ops=None, route_tag=None, routing_policy_ops=None, snmp_ops=None, syslog_server_ops=None, syslog_server_ops_v2=None, traffic_policy_ops=None):  # noqa: E501
        """V1sitesSite - a model defined in Swagger"""  # noqa: E501
        self._global_prefix_set_ops = None
        self._ipfix_exporter_ops = None
        self._ipfix_exporter_ops_v2 = None
        self._location = None
        self._name = None
        self._notes = None
        self._prefix_set_ops = None
        self._route_tag = None
        self._routing_policy_ops = None
        self._snmp_ops = None
        self._syslog_server_ops = None
        self._syslog_server_ops_v2 = None
        self._traffic_policy_ops = None
        self.discriminator = None
        if global_prefix_set_ops is not None:
            self.global_prefix_set_ops = global_prefix_set_ops
        if ipfix_exporter_ops is not None:
            self.ipfix_exporter_ops = ipfix_exporter_ops
        if ipfix_exporter_ops_v2 is not None:
            self.ipfix_exporter_ops_v2 = ipfix_exporter_ops_v2
        if location is not None:
            self.location = location
        if name is not None:
            self.name = name
        if notes is not None:
            self.notes = notes
        if prefix_set_ops is not None:
            self.prefix_set_ops = prefix_set_ops
        if route_tag is not None:
            self.route_tag = route_tag
        if routing_policy_ops is not None:
            self.routing_policy_ops = routing_policy_ops
        if snmp_ops is not None:
            self.snmp_ops = snmp_ops
        if syslog_server_ops is not None:
            self.syslog_server_ops = syslog_server_ops
        if syslog_server_ops_v2 is not None:
            self.syslog_server_ops_v2 = syslog_server_ops_v2
        if traffic_policy_ops is not None:
            self.traffic_policy_ops = traffic_policy_ops

    @property
    def global_prefix_set_ops(self):
        """Gets the global_prefix_set_ops of this V1sitesSite.  # noqa: E501


        :return: The global_prefix_set_ops of this V1sitesSite.  # noqa: E501
        :rtype: list[V1globalconfigsiteGlobalPrefixSetOps]
        """
        return self._global_prefix_set_ops

    @global_prefix_set_ops.setter
    def global_prefix_set_ops(self, global_prefix_set_ops):
        """Sets the global_prefix_set_ops of this V1sitesSite.


        :param global_prefix_set_ops: The global_prefix_set_ops of this V1sitesSite.  # noqa: E501
        :type: list[V1globalconfigsiteGlobalPrefixSetOps]
        """

        self._global_prefix_set_ops = global_prefix_set_ops

    @property
    def ipfix_exporter_ops(self):
        """Gets the ipfix_exporter_ops of this V1sitesSite.  # noqa: E501


        :return: The ipfix_exporter_ops of this V1sitesSite.  # noqa: E501
        :rtype: list[V1globalconfigsiteGlobalPrefixSetOps]
        """
        return self._ipfix_exporter_ops

    @ipfix_exporter_ops.setter
    def ipfix_exporter_ops(self, ipfix_exporter_ops):
        """Sets the ipfix_exporter_ops of this V1sitesSite.


        :param ipfix_exporter_ops: The ipfix_exporter_ops of this V1sitesSite.  # noqa: E501
        :type: list[V1globalconfigsiteGlobalPrefixSetOps]
        """

        self._ipfix_exporter_ops = ipfix_exporter_ops

    @property
    def ipfix_exporter_ops_v2(self):
        """Gets the ipfix_exporter_ops_v2 of this V1sitesSite.  # noqa: E501


        :return: The ipfix_exporter_ops_v2 of this V1sitesSite.  # noqa: E501
        :rtype: list[V1sitesSiteIpfixExporterOpsV2]
        """
        return self._ipfix_exporter_ops_v2

    @ipfix_exporter_ops_v2.setter
    def ipfix_exporter_ops_v2(self, ipfix_exporter_ops_v2):
        """Sets the ipfix_exporter_ops_v2 of this V1sitesSite.


        :param ipfix_exporter_ops_v2: The ipfix_exporter_ops_v2 of this V1sitesSite.  # noqa: E501
        :type: list[V1sitesSiteIpfixExporterOpsV2]
        """

        self._ipfix_exporter_ops_v2 = ipfix_exporter_ops_v2

    @property
    def location(self):
        """Gets the location of this V1sitesSite.  # noqa: E501


        :return: The location of this V1sitesSite.  # noqa: E501
        :rtype: V1sitesSiteLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this V1sitesSite.


        :param location: The location of this V1sitesSite.  # noqa: E501
        :type: V1sitesSiteLocation
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this V1sitesSite.  # noqa: E501


        :return: The name of this V1sitesSite.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1sitesSite.


        :param name: The name of this V1sitesSite.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this V1sitesSite.  # noqa: E501


        :return: The notes of this V1sitesSite.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this V1sitesSite.


        :param notes: The notes of this V1sitesSite.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def prefix_set_ops(self):
        """Gets the prefix_set_ops of this V1sitesSite.  # noqa: E501


        :return: The prefix_set_ops of this V1sitesSite.  # noqa: E501
        :rtype: list[V1globalconfigsiteGlobalPrefixSetOps]
        """
        return self._prefix_set_ops

    @prefix_set_ops.setter
    def prefix_set_ops(self, prefix_set_ops):
        """Sets the prefix_set_ops of this V1sitesSite.


        :param prefix_set_ops: The prefix_set_ops of this V1sitesSite.  # noqa: E501
        :type: list[V1globalconfigsiteGlobalPrefixSetOps]
        """

        self._prefix_set_ops = prefix_set_ops

    @property
    def route_tag(self):
        """Gets the route_tag of this V1sitesSite.  # noqa: E501


        :return: The route_tag of this V1sitesSite.  # noqa: E501
        :rtype: V1policyroutetagsetsTag
        """
        return self._route_tag

    @route_tag.setter
    def route_tag(self, route_tag):
        """Sets the route_tag of this V1sitesSite.


        :param route_tag: The route_tag of this V1sitesSite.  # noqa: E501
        :type: V1policyroutetagsetsTag
        """

        self._route_tag = route_tag

    @property
    def routing_policy_ops(self):
        """Gets the routing_policy_ops of this V1sitesSite.  # noqa: E501


        :return: The routing_policy_ops of this V1sitesSite.  # noqa: E501
        :rtype: list[V1globalconfigsiteGlobalPrefixSetOps]
        """
        return self._routing_policy_ops

    @routing_policy_ops.setter
    def routing_policy_ops(self, routing_policy_ops):
        """Sets the routing_policy_ops of this V1sitesSite.


        :param routing_policy_ops: The routing_policy_ops of this V1sitesSite.  # noqa: E501
        :type: list[V1globalconfigsiteGlobalPrefixSetOps]
        """

        self._routing_policy_ops = routing_policy_ops

    @property
    def snmp_ops(self):
        """Gets the snmp_ops of this V1sitesSite.  # noqa: E501


        :return: The snmp_ops of this V1sitesSite.  # noqa: E501
        :rtype: list[V1globalconfigsiteGlobalPrefixSetOps]
        """
        return self._snmp_ops

    @snmp_ops.setter
    def snmp_ops(self, snmp_ops):
        """Sets the snmp_ops of this V1sitesSite.


        :param snmp_ops: The snmp_ops of this V1sitesSite.  # noqa: E501
        :type: list[V1globalconfigsiteGlobalPrefixSetOps]
        """

        self._snmp_ops = snmp_ops

    @property
    def syslog_server_ops(self):
        """Gets the syslog_server_ops of this V1sitesSite.  # noqa: E501


        :return: The syslog_server_ops of this V1sitesSite.  # noqa: E501
        :rtype: list[V1globalconfigsiteGlobalPrefixSetOps]
        """
        return self._syslog_server_ops

    @syslog_server_ops.setter
    def syslog_server_ops(self, syslog_server_ops):
        """Sets the syslog_server_ops of this V1sitesSite.


        :param syslog_server_ops: The syslog_server_ops of this V1sitesSite.  # noqa: E501
        :type: list[V1globalconfigsiteGlobalPrefixSetOps]
        """

        self._syslog_server_ops = syslog_server_ops

    @property
    def syslog_server_ops_v2(self):
        """Gets the syslog_server_ops_v2 of this V1sitesSite.  # noqa: E501


        :return: The syslog_server_ops_v2 of this V1sitesSite.  # noqa: E501
        :rtype: list[V1sitesSiteIpfixExporterOpsV2]
        """
        return self._syslog_server_ops_v2

    @syslog_server_ops_v2.setter
    def syslog_server_ops_v2(self, syslog_server_ops_v2):
        """Sets the syslog_server_ops_v2 of this V1sitesSite.


        :param syslog_server_ops_v2: The syslog_server_ops_v2 of this V1sitesSite.  # noqa: E501
        :type: list[V1sitesSiteIpfixExporterOpsV2]
        """

        self._syslog_server_ops_v2 = syslog_server_ops_v2

    @property
    def traffic_policy_ops(self):
        """Gets the traffic_policy_ops of this V1sitesSite.  # noqa: E501


        :return: The traffic_policy_ops of this V1sitesSite.  # noqa: E501
        :rtype: list[V1globalconfigsiteGlobalPrefixSetOps]
        """
        return self._traffic_policy_ops

    @traffic_policy_ops.setter
    def traffic_policy_ops(self, traffic_policy_ops):
        """Sets the traffic_policy_ops of this V1sitesSite.


        :param traffic_policy_ops: The traffic_policy_ops of this V1sitesSite.  # noqa: E501
        :type: list[V1globalconfigsiteGlobalPrefixSetOps]
        """

        self._traffic_policy_ops = traffic_policy_ops

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1sitesSite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1sitesSite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
