# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityLogsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cursor_ref': 'str',
        'num_logs': 'str',
        'old_ts': 'V1devicesbringuptokenValidTillTs',
        'recent_ts': 'V1devicesbringuptokenValidTillTs',
        'selector': 'V1activitylogsSelector',
        'selector_v2': 'V1activitylogsSelectorV2'
    }

    attribute_map = {
        'cursor_ref': 'cursorRef',
        'num_logs': 'numLogs',
        'old_ts': 'oldTs',
        'recent_ts': 'recentTs',
        'selector': 'selector',
        'selector_v2': 'selectorV2'
    }

    def __init__(self, cursor_ref=None, num_logs=None, old_ts=None, recent_ts=None, selector=None, selector_v2=None):  # noqa: E501
        """ActivityLogsBody - a model defined in Swagger"""  # noqa: E501
        self._cursor_ref = None
        self._num_logs = None
        self._old_ts = None
        self._recent_ts = None
        self._selector = None
        self._selector_v2 = None
        self.discriminator = None
        if cursor_ref is not None:
            self.cursor_ref = cursor_ref
        if num_logs is not None:
            self.num_logs = num_logs
        if old_ts is not None:
            self.old_ts = old_ts
        if recent_ts is not None:
            self.recent_ts = recent_ts
        if selector is not None:
            self.selector = selector
        if selector_v2 is not None:
            self.selector_v2 = selector_v2

    @property
    def cursor_ref(self):
        """Gets the cursor_ref of this ActivityLogsBody.  # noqa: E501


        :return: The cursor_ref of this ActivityLogsBody.  # noqa: E501
        :rtype: str
        """
        return self._cursor_ref

    @cursor_ref.setter
    def cursor_ref(self, cursor_ref):
        """Sets the cursor_ref of this ActivityLogsBody.


        :param cursor_ref: The cursor_ref of this ActivityLogsBody.  # noqa: E501
        :type: str
        """

        self._cursor_ref = cursor_ref

    @property
    def num_logs(self):
        """Gets the num_logs of this ActivityLogsBody.  # noqa: E501


        :return: The num_logs of this ActivityLogsBody.  # noqa: E501
        :rtype: str
        """
        return self._num_logs

    @num_logs.setter
    def num_logs(self, num_logs):
        """Sets the num_logs of this ActivityLogsBody.


        :param num_logs: The num_logs of this ActivityLogsBody.  # noqa: E501
        :type: str
        """

        self._num_logs = num_logs

    @property
    def old_ts(self):
        """Gets the old_ts of this ActivityLogsBody.  # noqa: E501


        :return: The old_ts of this ActivityLogsBody.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._old_ts

    @old_ts.setter
    def old_ts(self, old_ts):
        """Sets the old_ts of this ActivityLogsBody.


        :param old_ts: The old_ts of this ActivityLogsBody.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._old_ts = old_ts

    @property
    def recent_ts(self):
        """Gets the recent_ts of this ActivityLogsBody.  # noqa: E501


        :return: The recent_ts of this ActivityLogsBody.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._recent_ts

    @recent_ts.setter
    def recent_ts(self, recent_ts):
        """Sets the recent_ts of this ActivityLogsBody.


        :param recent_ts: The recent_ts of this ActivityLogsBody.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._recent_ts = recent_ts

    @property
    def selector(self):
        """Gets the selector of this ActivityLogsBody.  # noqa: E501


        :return: The selector of this ActivityLogsBody.  # noqa: E501
        :rtype: V1activitylogsSelector
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this ActivityLogsBody.


        :param selector: The selector of this ActivityLogsBody.  # noqa: E501
        :type: V1activitylogsSelector
        """

        self._selector = selector

    @property
    def selector_v2(self):
        """Gets the selector_v2 of this ActivityLogsBody.  # noqa: E501


        :return: The selector_v2 of this ActivityLogsBody.  # noqa: E501
        :rtype: V1activitylogsSelectorV2
        """
        return self._selector_v2

    @selector_v2.setter
    def selector_v2(self, selector_v2):
        """Sets the selector_v2 of this ActivityLogsBody.


        :param selector_v2: The selector_v2 of this ActivityLogsBody.  # noqa: E501
        :type: V1activitylogsSelectorV2
        """

        self._selector_v2 = selector_v2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityLogsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityLogsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
