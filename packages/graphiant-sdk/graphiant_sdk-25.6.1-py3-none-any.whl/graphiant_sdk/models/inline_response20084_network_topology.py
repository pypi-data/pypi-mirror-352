# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20084NetworkTopology(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'circuit_status': 'list[InlineResponse20073AppSummaryAppHealth]',
        'delta': 'InlineResponse20084Delta',
        'edges': 'list[InlineResponse20084Edges]',
        'flows': 'str',
        'nodes': 'list[InlineResponse20084Nodes]',
        'time_window': 'V2assistantgetconversationdetailsTimeWindow'
    }

    attribute_map = {
        'circuit_status': 'circuitStatus',
        'delta': 'delta',
        'edges': 'edges',
        'flows': 'flows',
        'nodes': 'nodes',
        'time_window': 'timeWindow'
    }

    def __init__(self, circuit_status=None, delta=None, edges=None, flows=None, nodes=None, time_window=None):  # noqa: E501
        """InlineResponse20084NetworkTopology - a model defined in Swagger"""  # noqa: E501
        self._circuit_status = None
        self._delta = None
        self._edges = None
        self._flows = None
        self._nodes = None
        self._time_window = None
        self.discriminator = None
        if circuit_status is not None:
            self.circuit_status = circuit_status
        if delta is not None:
            self.delta = delta
        if edges is not None:
            self.edges = edges
        if flows is not None:
            self.flows = flows
        if nodes is not None:
            self.nodes = nodes
        if time_window is not None:
            self.time_window = time_window

    @property
    def circuit_status(self):
        """Gets the circuit_status of this InlineResponse20084NetworkTopology.  # noqa: E501


        :return: The circuit_status of this InlineResponse20084NetworkTopology.  # noqa: E501
        :rtype: list[InlineResponse20073AppSummaryAppHealth]
        """
        return self._circuit_status

    @circuit_status.setter
    def circuit_status(self, circuit_status):
        """Sets the circuit_status of this InlineResponse20084NetworkTopology.


        :param circuit_status: The circuit_status of this InlineResponse20084NetworkTopology.  # noqa: E501
        :type: list[InlineResponse20073AppSummaryAppHealth]
        """

        self._circuit_status = circuit_status

    @property
    def delta(self):
        """Gets the delta of this InlineResponse20084NetworkTopology.  # noqa: E501


        :return: The delta of this InlineResponse20084NetworkTopology.  # noqa: E501
        :rtype: InlineResponse20084Delta
        """
        return self._delta

    @delta.setter
    def delta(self, delta):
        """Sets the delta of this InlineResponse20084NetworkTopology.


        :param delta: The delta of this InlineResponse20084NetworkTopology.  # noqa: E501
        :type: InlineResponse20084Delta
        """

        self._delta = delta

    @property
    def edges(self):
        """Gets the edges of this InlineResponse20084NetworkTopology.  # noqa: E501


        :return: The edges of this InlineResponse20084NetworkTopology.  # noqa: E501
        :rtype: list[InlineResponse20084Edges]
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this InlineResponse20084NetworkTopology.


        :param edges: The edges of this InlineResponse20084NetworkTopology.  # noqa: E501
        :type: list[InlineResponse20084Edges]
        """

        self._edges = edges

    @property
    def flows(self):
        """Gets the flows of this InlineResponse20084NetworkTopology.  # noqa: E501


        :return: The flows of this InlineResponse20084NetworkTopology.  # noqa: E501
        :rtype: str
        """
        return self._flows

    @flows.setter
    def flows(self, flows):
        """Sets the flows of this InlineResponse20084NetworkTopology.


        :param flows: The flows of this InlineResponse20084NetworkTopology.  # noqa: E501
        :type: str
        """

        self._flows = flows

    @property
    def nodes(self):
        """Gets the nodes of this InlineResponse20084NetworkTopology.  # noqa: E501


        :return: The nodes of this InlineResponse20084NetworkTopology.  # noqa: E501
        :rtype: list[InlineResponse20084Nodes]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this InlineResponse20084NetworkTopology.


        :param nodes: The nodes of this InlineResponse20084NetworkTopology.  # noqa: E501
        :type: list[InlineResponse20084Nodes]
        """

        self._nodes = nodes

    @property
    def time_window(self):
        """Gets the time_window of this InlineResponse20084NetworkTopology.  # noqa: E501


        :return: The time_window of this InlineResponse20084NetworkTopology.  # noqa: E501
        :rtype: V2assistantgetconversationdetailsTimeWindow
        """
        return self._time_window

    @time_window.setter
    def time_window(self, time_window):
        """Sets the time_window of this InlineResponse20084NetworkTopology.


        :param time_window: The time_window of this InlineResponse20084NetworkTopology.  # noqa: E501
        :type: V2assistantgetconversationdetailsTimeWindow
        """

        self._time_window = time_window

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20084NetworkTopology, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20084NetworkTopology):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
