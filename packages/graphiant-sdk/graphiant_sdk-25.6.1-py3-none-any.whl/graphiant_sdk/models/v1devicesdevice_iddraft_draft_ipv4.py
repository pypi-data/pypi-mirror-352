# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1devicesdeviceIddraftDraftIpv4(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'dhcp_client': 'str',
        'dhcp_relay': 'object',
        'dhcp_server': 'str',
        'origin': 'str',
        'vrrp_group': 'object'
    }

    attribute_map = {
        'address': 'address',
        'dhcp_client': 'dhcpClient',
        'dhcp_relay': 'dhcpRelay',
        'dhcp_server': 'dhcpServer',
        'origin': 'origin',
        'vrrp_group': 'vrrpGroup'
    }

    def __init__(self, address=None, dhcp_client=None, dhcp_relay=None, dhcp_server=None, origin=None, vrrp_group=None):  # noqa: E501
        """V1devicesdeviceIddraftDraftIpv4 - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._dhcp_client = None
        self._dhcp_relay = None
        self._dhcp_server = None
        self._origin = None
        self._vrrp_group = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if dhcp_client is not None:
            self.dhcp_client = dhcp_client
        if dhcp_relay is not None:
            self.dhcp_relay = dhcp_relay
        if dhcp_server is not None:
            self.dhcp_server = dhcp_server
        if origin is not None:
            self.origin = origin
        if vrrp_group is not None:
            self.vrrp_group = vrrp_group

    @property
    def address(self):
        """Gets the address of this V1devicesdeviceIddraftDraftIpv4.  # noqa: E501


        :return: The address of this V1devicesdeviceIddraftDraftIpv4.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this V1devicesdeviceIddraftDraftIpv4.


        :param address: The address of this V1devicesdeviceIddraftDraftIpv4.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def dhcp_client(self):
        """Gets the dhcp_client of this V1devicesdeviceIddraftDraftIpv4.  # noqa: E501


        :return: The dhcp_client of this V1devicesdeviceIddraftDraftIpv4.  # noqa: E501
        :rtype: str
        """
        return self._dhcp_client

    @dhcp_client.setter
    def dhcp_client(self, dhcp_client):
        """Sets the dhcp_client of this V1devicesdeviceIddraftDraftIpv4.


        :param dhcp_client: The dhcp_client of this V1devicesdeviceIddraftDraftIpv4.  # noqa: E501
        :type: str
        """

        self._dhcp_client = dhcp_client

    @property
    def dhcp_relay(self):
        """Gets the dhcp_relay of this V1devicesdeviceIddraftDraftIpv4.  # noqa: E501


        :return: The dhcp_relay of this V1devicesdeviceIddraftDraftIpv4.  # noqa: E501
        :rtype: object
        """
        return self._dhcp_relay

    @dhcp_relay.setter
    def dhcp_relay(self, dhcp_relay):
        """Sets the dhcp_relay of this V1devicesdeviceIddraftDraftIpv4.


        :param dhcp_relay: The dhcp_relay of this V1devicesdeviceIddraftDraftIpv4.  # noqa: E501
        :type: object
        """

        self._dhcp_relay = dhcp_relay

    @property
    def dhcp_server(self):
        """Gets the dhcp_server of this V1devicesdeviceIddraftDraftIpv4.  # noqa: E501


        :return: The dhcp_server of this V1devicesdeviceIddraftDraftIpv4.  # noqa: E501
        :rtype: str
        """
        return self._dhcp_server

    @dhcp_server.setter
    def dhcp_server(self, dhcp_server):
        """Sets the dhcp_server of this V1devicesdeviceIddraftDraftIpv4.


        :param dhcp_server: The dhcp_server of this V1devicesdeviceIddraftDraftIpv4.  # noqa: E501
        :type: str
        """

        self._dhcp_server = dhcp_server

    @property
    def origin(self):
        """Gets the origin of this V1devicesdeviceIddraftDraftIpv4.  # noqa: E501


        :return: The origin of this V1devicesdeviceIddraftDraftIpv4.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this V1devicesdeviceIddraftDraftIpv4.


        :param origin: The origin of this V1devicesdeviceIddraftDraftIpv4.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def vrrp_group(self):
        """Gets the vrrp_group of this V1devicesdeviceIddraftDraftIpv4.  # noqa: E501


        :return: The vrrp_group of this V1devicesdeviceIddraftDraftIpv4.  # noqa: E501
        :rtype: object
        """
        return self._vrrp_group

    @vrrp_group.setter
    def vrrp_group(self, vrrp_group):
        """Sets the vrrp_group of this V1devicesdeviceIddraftDraftIpv4.


        :param vrrp_group: The vrrp_group of this V1devicesdeviceIddraftDraftIpv4.  # noqa: E501
        :type: object
        """

        self._vrrp_group = vrrp_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1devicesdeviceIddraftDraftIpv4, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1devicesdeviceIddraftDraftIpv4):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
