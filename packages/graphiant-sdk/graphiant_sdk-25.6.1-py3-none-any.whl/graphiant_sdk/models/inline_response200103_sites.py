# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200103Sites(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'created_at': 'V1devicesbringuptokenValidTillTs',
        'devices': 'list[V1devicesdeviceIddraftDraftSiteDevices]',
        'edge_count': 'str',
        'id': 'str',
        'location': 'V1sitesSiteLocation',
        'name': 'str',
        'notes': 'str',
        'policy_reference_count': 'str',
        'policy_tag': 'InlineResponse200103PolicyTag',
        'segment_count': 'str',
        'site_list_reference_count': 'str',
        'tags': 'list[str]',
        'updated_at': 'V1devicesbringuptokenValidTillTs'
    }

    attribute_map = {
        'address': 'address',
        'created_at': 'createdAt',
        'devices': 'devices',
        'edge_count': 'edgeCount',
        'id': 'id',
        'location': 'location',
        'name': 'name',
        'notes': 'notes',
        'policy_reference_count': 'policyReferenceCount',
        'policy_tag': 'policyTag',
        'segment_count': 'segmentCount',
        'site_list_reference_count': 'siteListReferenceCount',
        'tags': 'tags',
        'updated_at': 'updatedAt'
    }

    def __init__(self, address=None, created_at=None, devices=None, edge_count=None, id=None, location=None, name=None, notes=None, policy_reference_count=None, policy_tag=None, segment_count=None, site_list_reference_count=None, tags=None, updated_at=None):  # noqa: E501
        """InlineResponse200103Sites - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._created_at = None
        self._devices = None
        self._edge_count = None
        self._id = None
        self._location = None
        self._name = None
        self._notes = None
        self._policy_reference_count = None
        self._policy_tag = None
        self._segment_count = None
        self._site_list_reference_count = None
        self._tags = None
        self._updated_at = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if created_at is not None:
            self.created_at = created_at
        if devices is not None:
            self.devices = devices
        if edge_count is not None:
            self.edge_count = edge_count
        if id is not None:
            self.id = id
        if location is not None:
            self.location = location
        if name is not None:
            self.name = name
        if notes is not None:
            self.notes = notes
        if policy_reference_count is not None:
            self.policy_reference_count = policy_reference_count
        if policy_tag is not None:
            self.policy_tag = policy_tag
        if segment_count is not None:
            self.segment_count = segment_count
        if site_list_reference_count is not None:
            self.site_list_reference_count = site_list_reference_count
        if tags is not None:
            self.tags = tags
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def address(self):
        """Gets the address of this InlineResponse200103Sites.  # noqa: E501


        :return: The address of this InlineResponse200103Sites.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InlineResponse200103Sites.


        :param address: The address of this InlineResponse200103Sites.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse200103Sites.  # noqa: E501


        :return: The created_at of this InlineResponse200103Sites.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse200103Sites.


        :param created_at: The created_at of this InlineResponse200103Sites.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._created_at = created_at

    @property
    def devices(self):
        """Gets the devices of this InlineResponse200103Sites.  # noqa: E501


        :return: The devices of this InlineResponse200103Sites.  # noqa: E501
        :rtype: list[V1devicesdeviceIddraftDraftSiteDevices]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this InlineResponse200103Sites.


        :param devices: The devices of this InlineResponse200103Sites.  # noqa: E501
        :type: list[V1devicesdeviceIddraftDraftSiteDevices]
        """

        self._devices = devices

    @property
    def edge_count(self):
        """Gets the edge_count of this InlineResponse200103Sites.  # noqa: E501


        :return: The edge_count of this InlineResponse200103Sites.  # noqa: E501
        :rtype: str
        """
        return self._edge_count

    @edge_count.setter
    def edge_count(self, edge_count):
        """Sets the edge_count of this InlineResponse200103Sites.


        :param edge_count: The edge_count of this InlineResponse200103Sites.  # noqa: E501
        :type: str
        """

        self._edge_count = edge_count

    @property
    def id(self):
        """Gets the id of this InlineResponse200103Sites.  # noqa: E501


        :return: The id of this InlineResponse200103Sites.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200103Sites.


        :param id: The id of this InlineResponse200103Sites.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this InlineResponse200103Sites.  # noqa: E501


        :return: The location of this InlineResponse200103Sites.  # noqa: E501
        :rtype: V1sitesSiteLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InlineResponse200103Sites.


        :param location: The location of this InlineResponse200103Sites.  # noqa: E501
        :type: V1sitesSiteLocation
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this InlineResponse200103Sites.  # noqa: E501


        :return: The name of this InlineResponse200103Sites.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200103Sites.


        :param name: The name of this InlineResponse200103Sites.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this InlineResponse200103Sites.  # noqa: E501


        :return: The notes of this InlineResponse200103Sites.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this InlineResponse200103Sites.


        :param notes: The notes of this InlineResponse200103Sites.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def policy_reference_count(self):
        """Gets the policy_reference_count of this InlineResponse200103Sites.  # noqa: E501


        :return: The policy_reference_count of this InlineResponse200103Sites.  # noqa: E501
        :rtype: str
        """
        return self._policy_reference_count

    @policy_reference_count.setter
    def policy_reference_count(self, policy_reference_count):
        """Sets the policy_reference_count of this InlineResponse200103Sites.


        :param policy_reference_count: The policy_reference_count of this InlineResponse200103Sites.  # noqa: E501
        :type: str
        """

        self._policy_reference_count = policy_reference_count

    @property
    def policy_tag(self):
        """Gets the policy_tag of this InlineResponse200103Sites.  # noqa: E501


        :return: The policy_tag of this InlineResponse200103Sites.  # noqa: E501
        :rtype: InlineResponse200103PolicyTag
        """
        return self._policy_tag

    @policy_tag.setter
    def policy_tag(self, policy_tag):
        """Sets the policy_tag of this InlineResponse200103Sites.


        :param policy_tag: The policy_tag of this InlineResponse200103Sites.  # noqa: E501
        :type: InlineResponse200103PolicyTag
        """

        self._policy_tag = policy_tag

    @property
    def segment_count(self):
        """Gets the segment_count of this InlineResponse200103Sites.  # noqa: E501


        :return: The segment_count of this InlineResponse200103Sites.  # noqa: E501
        :rtype: str
        """
        return self._segment_count

    @segment_count.setter
    def segment_count(self, segment_count):
        """Sets the segment_count of this InlineResponse200103Sites.


        :param segment_count: The segment_count of this InlineResponse200103Sites.  # noqa: E501
        :type: str
        """

        self._segment_count = segment_count

    @property
    def site_list_reference_count(self):
        """Gets the site_list_reference_count of this InlineResponse200103Sites.  # noqa: E501


        :return: The site_list_reference_count of this InlineResponse200103Sites.  # noqa: E501
        :rtype: str
        """
        return self._site_list_reference_count

    @site_list_reference_count.setter
    def site_list_reference_count(self, site_list_reference_count):
        """Sets the site_list_reference_count of this InlineResponse200103Sites.


        :param site_list_reference_count: The site_list_reference_count of this InlineResponse200103Sites.  # noqa: E501
        :type: str
        """

        self._site_list_reference_count = site_list_reference_count

    @property
    def tags(self):
        """Gets the tags of this InlineResponse200103Sites.  # noqa: E501


        :return: The tags of this InlineResponse200103Sites.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this InlineResponse200103Sites.


        :param tags: The tags of this InlineResponse200103Sites.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def updated_at(self):
        """Gets the updated_at of this InlineResponse200103Sites.  # noqa: E501


        :return: The updated_at of this InlineResponse200103Sites.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InlineResponse200103Sites.


        :param updated_at: The updated_at of this InlineResponse200103Sites.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200103Sites, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200103Sites):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
