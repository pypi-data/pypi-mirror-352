# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200148SecurityRulesets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'error_message': 'str',
        'global_id': 'str',
        'id': 'str',
        'index': 'str',
        'name': 'str',
        'rules': 'list[InlineResponse200148Rules]',
        'status': 'str'
    }

    attribute_map = {
        'description': 'description',
        'error_message': 'errorMessage',
        'global_id': 'globalId',
        'id': 'id',
        'index': 'index',
        'name': 'name',
        'rules': 'rules',
        'status': 'status'
    }

    def __init__(self, description=None, error_message=None, global_id=None, id=None, index=None, name=None, rules=None, status=None):  # noqa: E501
        """InlineResponse200148SecurityRulesets - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._error_message = None
        self._global_id = None
        self._id = None
        self._index = None
        self._name = None
        self._rules = None
        self._status = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if error_message is not None:
            self.error_message = error_message
        if global_id is not None:
            self.global_id = global_id
        if id is not None:
            self.id = id
        if index is not None:
            self.index = index
        if name is not None:
            self.name = name
        if rules is not None:
            self.rules = rules
        if status is not None:
            self.status = status

    @property
    def description(self):
        """Gets the description of this InlineResponse200148SecurityRulesets.  # noqa: E501


        :return: The description of this InlineResponse200148SecurityRulesets.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse200148SecurityRulesets.


        :param description: The description of this InlineResponse200148SecurityRulesets.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def error_message(self):
        """Gets the error_message of this InlineResponse200148SecurityRulesets.  # noqa: E501


        :return: The error_message of this InlineResponse200148SecurityRulesets.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this InlineResponse200148SecurityRulesets.


        :param error_message: The error_message of this InlineResponse200148SecurityRulesets.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def global_id(self):
        """Gets the global_id of this InlineResponse200148SecurityRulesets.  # noqa: E501


        :return: The global_id of this InlineResponse200148SecurityRulesets.  # noqa: E501
        :rtype: str
        """
        return self._global_id

    @global_id.setter
    def global_id(self, global_id):
        """Sets the global_id of this InlineResponse200148SecurityRulesets.


        :param global_id: The global_id of this InlineResponse200148SecurityRulesets.  # noqa: E501
        :type: str
        """

        self._global_id = global_id

    @property
    def id(self):
        """Gets the id of this InlineResponse200148SecurityRulesets.  # noqa: E501


        :return: The id of this InlineResponse200148SecurityRulesets.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200148SecurityRulesets.


        :param id: The id of this InlineResponse200148SecurityRulesets.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def index(self):
        """Gets the index of this InlineResponse200148SecurityRulesets.  # noqa: E501


        :return: The index of this InlineResponse200148SecurityRulesets.  # noqa: E501
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this InlineResponse200148SecurityRulesets.


        :param index: The index of this InlineResponse200148SecurityRulesets.  # noqa: E501
        :type: str
        """

        self._index = index

    @property
    def name(self):
        """Gets the name of this InlineResponse200148SecurityRulesets.  # noqa: E501


        :return: The name of this InlineResponse200148SecurityRulesets.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200148SecurityRulesets.


        :param name: The name of this InlineResponse200148SecurityRulesets.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rules(self):
        """Gets the rules of this InlineResponse200148SecurityRulesets.  # noqa: E501


        :return: The rules of this InlineResponse200148SecurityRulesets.  # noqa: E501
        :rtype: list[InlineResponse200148Rules]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this InlineResponse200148SecurityRulesets.


        :param rules: The rules of this InlineResponse200148SecurityRulesets.  # noqa: E501
        :type: list[InlineResponse200148Rules]
        """

        self._rules = rules

    @property
    def status(self):
        """Gets the status of this InlineResponse200148SecurityRulesets.  # noqa: E501


        :return: The status of this InlineResponse200148SecurityRulesets.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200148SecurityRulesets.


        :param status: The status of this InlineResponse200148SecurityRulesets.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200148SecurityRulesets, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200148SecurityRulesets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
