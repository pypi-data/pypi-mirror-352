# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20011Alarms(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acknowledged_by': 'str',
        'alarm_id': 'str',
        'alarm_type_id': 'str',
        'alarm_type_qualifier': 'str',
        'alt_component': 'str',
        'boot_id': 'str',
        'component': 'str',
        'created': 'V1devicesbringuptokenValidTillTs',
        'description': 'str',
        'is_cleared': 'str',
        'is_resolved': 'str',
        'last_changed': 'V1devicesbringuptokenValidTillTs',
        'last_raised': 'V1devicesbringuptokenValidTillTs',
        'perceived_severity': 'str',
        'resolved_by': 'str',
        'sequence_number': 'str',
        'where': 'str'
    }

    attribute_map = {
        'acknowledged_by': 'acknowledgedBy',
        'alarm_id': 'alarmId',
        'alarm_type_id': 'alarmTypeId',
        'alarm_type_qualifier': 'alarmTypeQualifier',
        'alt_component': 'altComponent',
        'boot_id': 'bootId',
        'component': 'component',
        'created': 'created',
        'description': 'description',
        'is_cleared': 'isCleared',
        'is_resolved': 'isResolved',
        'last_changed': 'lastChanged',
        'last_raised': 'lastRaised',
        'perceived_severity': 'perceivedSeverity',
        'resolved_by': 'resolvedBy',
        'sequence_number': 'sequenceNumber',
        'where': 'where'
    }

    def __init__(self, acknowledged_by=None, alarm_id=None, alarm_type_id=None, alarm_type_qualifier=None, alt_component=None, boot_id=None, component=None, created=None, description=None, is_cleared=None, is_resolved=None, last_changed=None, last_raised=None, perceived_severity=None, resolved_by=None, sequence_number=None, where=None):  # noqa: E501
        """InlineResponse20011Alarms - a model defined in Swagger"""  # noqa: E501
        self._acknowledged_by = None
        self._alarm_id = None
        self._alarm_type_id = None
        self._alarm_type_qualifier = None
        self._alt_component = None
        self._boot_id = None
        self._component = None
        self._created = None
        self._description = None
        self._is_cleared = None
        self._is_resolved = None
        self._last_changed = None
        self._last_raised = None
        self._perceived_severity = None
        self._resolved_by = None
        self._sequence_number = None
        self._where = None
        self.discriminator = None
        if acknowledged_by is not None:
            self.acknowledged_by = acknowledged_by
        if alarm_id is not None:
            self.alarm_id = alarm_id
        if alarm_type_id is not None:
            self.alarm_type_id = alarm_type_id
        if alarm_type_qualifier is not None:
            self.alarm_type_qualifier = alarm_type_qualifier
        if alt_component is not None:
            self.alt_component = alt_component
        if boot_id is not None:
            self.boot_id = boot_id
        if component is not None:
            self.component = component
        if created is not None:
            self.created = created
        if description is not None:
            self.description = description
        if is_cleared is not None:
            self.is_cleared = is_cleared
        if is_resolved is not None:
            self.is_resolved = is_resolved
        if last_changed is not None:
            self.last_changed = last_changed
        if last_raised is not None:
            self.last_raised = last_raised
        if perceived_severity is not None:
            self.perceived_severity = perceived_severity
        if resolved_by is not None:
            self.resolved_by = resolved_by
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if where is not None:
            self.where = where

    @property
    def acknowledged_by(self):
        """Gets the acknowledged_by of this InlineResponse20011Alarms.  # noqa: E501


        :return: The acknowledged_by of this InlineResponse20011Alarms.  # noqa: E501
        :rtype: str
        """
        return self._acknowledged_by

    @acknowledged_by.setter
    def acknowledged_by(self, acknowledged_by):
        """Sets the acknowledged_by of this InlineResponse20011Alarms.


        :param acknowledged_by: The acknowledged_by of this InlineResponse20011Alarms.  # noqa: E501
        :type: str
        """

        self._acknowledged_by = acknowledged_by

    @property
    def alarm_id(self):
        """Gets the alarm_id of this InlineResponse20011Alarms.  # noqa: E501


        :return: The alarm_id of this InlineResponse20011Alarms.  # noqa: E501
        :rtype: str
        """
        return self._alarm_id

    @alarm_id.setter
    def alarm_id(self, alarm_id):
        """Sets the alarm_id of this InlineResponse20011Alarms.


        :param alarm_id: The alarm_id of this InlineResponse20011Alarms.  # noqa: E501
        :type: str
        """

        self._alarm_id = alarm_id

    @property
    def alarm_type_id(self):
        """Gets the alarm_type_id of this InlineResponse20011Alarms.  # noqa: E501


        :return: The alarm_type_id of this InlineResponse20011Alarms.  # noqa: E501
        :rtype: str
        """
        return self._alarm_type_id

    @alarm_type_id.setter
    def alarm_type_id(self, alarm_type_id):
        """Sets the alarm_type_id of this InlineResponse20011Alarms.


        :param alarm_type_id: The alarm_type_id of this InlineResponse20011Alarms.  # noqa: E501
        :type: str
        """

        self._alarm_type_id = alarm_type_id

    @property
    def alarm_type_qualifier(self):
        """Gets the alarm_type_qualifier of this InlineResponse20011Alarms.  # noqa: E501


        :return: The alarm_type_qualifier of this InlineResponse20011Alarms.  # noqa: E501
        :rtype: str
        """
        return self._alarm_type_qualifier

    @alarm_type_qualifier.setter
    def alarm_type_qualifier(self, alarm_type_qualifier):
        """Sets the alarm_type_qualifier of this InlineResponse20011Alarms.


        :param alarm_type_qualifier: The alarm_type_qualifier of this InlineResponse20011Alarms.  # noqa: E501
        :type: str
        """

        self._alarm_type_qualifier = alarm_type_qualifier

    @property
    def alt_component(self):
        """Gets the alt_component of this InlineResponse20011Alarms.  # noqa: E501


        :return: The alt_component of this InlineResponse20011Alarms.  # noqa: E501
        :rtype: str
        """
        return self._alt_component

    @alt_component.setter
    def alt_component(self, alt_component):
        """Sets the alt_component of this InlineResponse20011Alarms.


        :param alt_component: The alt_component of this InlineResponse20011Alarms.  # noqa: E501
        :type: str
        """

        self._alt_component = alt_component

    @property
    def boot_id(self):
        """Gets the boot_id of this InlineResponse20011Alarms.  # noqa: E501


        :return: The boot_id of this InlineResponse20011Alarms.  # noqa: E501
        :rtype: str
        """
        return self._boot_id

    @boot_id.setter
    def boot_id(self, boot_id):
        """Sets the boot_id of this InlineResponse20011Alarms.


        :param boot_id: The boot_id of this InlineResponse20011Alarms.  # noqa: E501
        :type: str
        """

        self._boot_id = boot_id

    @property
    def component(self):
        """Gets the component of this InlineResponse20011Alarms.  # noqa: E501


        :return: The component of this InlineResponse20011Alarms.  # noqa: E501
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this InlineResponse20011Alarms.


        :param component: The component of this InlineResponse20011Alarms.  # noqa: E501
        :type: str
        """

        self._component = component

    @property
    def created(self):
        """Gets the created of this InlineResponse20011Alarms.  # noqa: E501


        :return: The created of this InlineResponse20011Alarms.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this InlineResponse20011Alarms.


        :param created: The created of this InlineResponse20011Alarms.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this InlineResponse20011Alarms.  # noqa: E501


        :return: The description of this InlineResponse20011Alarms.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse20011Alarms.


        :param description: The description of this InlineResponse20011Alarms.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_cleared(self):
        """Gets the is_cleared of this InlineResponse20011Alarms.  # noqa: E501


        :return: The is_cleared of this InlineResponse20011Alarms.  # noqa: E501
        :rtype: str
        """
        return self._is_cleared

    @is_cleared.setter
    def is_cleared(self, is_cleared):
        """Sets the is_cleared of this InlineResponse20011Alarms.


        :param is_cleared: The is_cleared of this InlineResponse20011Alarms.  # noqa: E501
        :type: str
        """

        self._is_cleared = is_cleared

    @property
    def is_resolved(self):
        """Gets the is_resolved of this InlineResponse20011Alarms.  # noqa: E501


        :return: The is_resolved of this InlineResponse20011Alarms.  # noqa: E501
        :rtype: str
        """
        return self._is_resolved

    @is_resolved.setter
    def is_resolved(self, is_resolved):
        """Sets the is_resolved of this InlineResponse20011Alarms.


        :param is_resolved: The is_resolved of this InlineResponse20011Alarms.  # noqa: E501
        :type: str
        """

        self._is_resolved = is_resolved

    @property
    def last_changed(self):
        """Gets the last_changed of this InlineResponse20011Alarms.  # noqa: E501


        :return: The last_changed of this InlineResponse20011Alarms.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._last_changed

    @last_changed.setter
    def last_changed(self, last_changed):
        """Sets the last_changed of this InlineResponse20011Alarms.


        :param last_changed: The last_changed of this InlineResponse20011Alarms.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._last_changed = last_changed

    @property
    def last_raised(self):
        """Gets the last_raised of this InlineResponse20011Alarms.  # noqa: E501


        :return: The last_raised of this InlineResponse20011Alarms.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._last_raised

    @last_raised.setter
    def last_raised(self, last_raised):
        """Sets the last_raised of this InlineResponse20011Alarms.


        :param last_raised: The last_raised of this InlineResponse20011Alarms.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._last_raised = last_raised

    @property
    def perceived_severity(self):
        """Gets the perceived_severity of this InlineResponse20011Alarms.  # noqa: E501


        :return: The perceived_severity of this InlineResponse20011Alarms.  # noqa: E501
        :rtype: str
        """
        return self._perceived_severity

    @perceived_severity.setter
    def perceived_severity(self, perceived_severity):
        """Sets the perceived_severity of this InlineResponse20011Alarms.


        :param perceived_severity: The perceived_severity of this InlineResponse20011Alarms.  # noqa: E501
        :type: str
        """

        self._perceived_severity = perceived_severity

    @property
    def resolved_by(self):
        """Gets the resolved_by of this InlineResponse20011Alarms.  # noqa: E501


        :return: The resolved_by of this InlineResponse20011Alarms.  # noqa: E501
        :rtype: str
        """
        return self._resolved_by

    @resolved_by.setter
    def resolved_by(self, resolved_by):
        """Sets the resolved_by of this InlineResponse20011Alarms.


        :param resolved_by: The resolved_by of this InlineResponse20011Alarms.  # noqa: E501
        :type: str
        """

        self._resolved_by = resolved_by

    @property
    def sequence_number(self):
        """Gets the sequence_number of this InlineResponse20011Alarms.  # noqa: E501


        :return: The sequence_number of this InlineResponse20011Alarms.  # noqa: E501
        :rtype: str
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this InlineResponse20011Alarms.


        :param sequence_number: The sequence_number of this InlineResponse20011Alarms.  # noqa: E501
        :type: str
        """

        self._sequence_number = sequence_number

    @property
    def where(self):
        """Gets the where of this InlineResponse20011Alarms.  # noqa: E501


        :return: The where of this InlineResponse20011Alarms.  # noqa: E501
        :rtype: str
        """
        return self._where

    @where.setter
    def where(self, where):
        """Sets the where of this InlineResponse20011Alarms.


        :param where: The where of this InlineResponse20011Alarms.  # noqa: E501
        :type: str
        """

        self._where = where

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20011Alarms, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20011Alarms):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
