# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200208UpgradeSummarySchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'device_id': 'str',
        'download_progress': 'str',
        'failure_reason': 'str',
        'state': 'str',
        'ts': 'object',
        'version': 'object'
    }

    attribute_map = {
        'action': 'action',
        'device_id': 'deviceId',
        'download_progress': 'downloadProgress',
        'failure_reason': 'failureReason',
        'state': 'state',
        'ts': 'ts',
        'version': 'version'
    }

    def __init__(self, action=None, device_id=None, download_progress=None, failure_reason=None, state=None, ts=None, version=None):  # noqa: E501
        """InlineResponse200208UpgradeSummarySchedule - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._device_id = None
        self._download_progress = None
        self._failure_reason = None
        self._state = None
        self._ts = None
        self._version = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if device_id is not None:
            self.device_id = device_id
        if download_progress is not None:
            self.download_progress = download_progress
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if state is not None:
            self.state = state
        if ts is not None:
            self.ts = ts
        if version is not None:
            self.version = version

    @property
    def action(self):
        """Gets the action of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501


        :return: The action of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this InlineResponse200208UpgradeSummarySchedule.


        :param action: The action of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def device_id(self):
        """Gets the device_id of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501


        :return: The device_id of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this InlineResponse200208UpgradeSummarySchedule.


        :param device_id: The device_id of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def download_progress(self):
        """Gets the download_progress of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501


        :return: The download_progress of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501
        :rtype: str
        """
        return self._download_progress

    @download_progress.setter
    def download_progress(self, download_progress):
        """Sets the download_progress of this InlineResponse200208UpgradeSummarySchedule.


        :param download_progress: The download_progress of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501
        :type: str
        """

        self._download_progress = download_progress

    @property
    def failure_reason(self):
        """Gets the failure_reason of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501


        :return: The failure_reason of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this InlineResponse200208UpgradeSummarySchedule.


        :param failure_reason: The failure_reason of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def state(self):
        """Gets the state of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501


        :return: The state of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse200208UpgradeSummarySchedule.


        :param state: The state of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def ts(self):
        """Gets the ts of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501


        :return: The ts of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501
        :rtype: object
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this InlineResponse200208UpgradeSummarySchedule.


        :param ts: The ts of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501
        :type: object
        """

        self._ts = ts

    @property
    def version(self):
        """Gets the version of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501


        :return: The version of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501
        :rtype: object
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InlineResponse200208UpgradeSummarySchedule.


        :param version: The version of this InlineResponse200208UpgradeSummarySchedule.  # noqa: E501
        :type: object
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200208UpgradeSummarySchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200208UpgradeSummarySchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
