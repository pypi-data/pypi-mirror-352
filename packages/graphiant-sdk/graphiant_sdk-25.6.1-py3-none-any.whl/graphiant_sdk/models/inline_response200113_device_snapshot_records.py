# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200113DeviceSnapshotRecords(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'str',
        'hostname': 'str',
        'region': 'str',
        'site': 'str',
        'snapshot_count': 'str',
        'snapshots': 'list[InlineResponse200113Snapshots]',
        'uptime': 'V1devicesbringuptokenValidTillTs'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'hostname': 'hostname',
        'region': 'region',
        'site': 'site',
        'snapshot_count': 'snapshotCount',
        'snapshots': 'snapshots',
        'uptime': 'uptime'
    }

    def __init__(self, device_id=None, hostname=None, region=None, site=None, snapshot_count=None, snapshots=None, uptime=None):  # noqa: E501
        """InlineResponse200113DeviceSnapshotRecords - a model defined in Swagger"""  # noqa: E501
        self._device_id = None
        self._hostname = None
        self._region = None
        self._site = None
        self._snapshot_count = None
        self._snapshots = None
        self._uptime = None
        self.discriminator = None
        if device_id is not None:
            self.device_id = device_id
        if hostname is not None:
            self.hostname = hostname
        if region is not None:
            self.region = region
        if site is not None:
            self.site = site
        if snapshot_count is not None:
            self.snapshot_count = snapshot_count
        if snapshots is not None:
            self.snapshots = snapshots
        if uptime is not None:
            self.uptime = uptime

    @property
    def device_id(self):
        """Gets the device_id of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501


        :return: The device_id of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this InlineResponse200113DeviceSnapshotRecords.


        :param device_id: The device_id of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def hostname(self):
        """Gets the hostname of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501


        :return: The hostname of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this InlineResponse200113DeviceSnapshotRecords.


        :param hostname: The hostname of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def region(self):
        """Gets the region of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501


        :return: The region of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this InlineResponse200113DeviceSnapshotRecords.


        :param region: The region of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def site(self):
        """Gets the site of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501


        :return: The site of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this InlineResponse200113DeviceSnapshotRecords.


        :param site: The site of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501
        :type: str
        """

        self._site = site

    @property
    def snapshot_count(self):
        """Gets the snapshot_count of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501


        :return: The snapshot_count of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_count

    @snapshot_count.setter
    def snapshot_count(self, snapshot_count):
        """Sets the snapshot_count of this InlineResponse200113DeviceSnapshotRecords.


        :param snapshot_count: The snapshot_count of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501
        :type: str
        """

        self._snapshot_count = snapshot_count

    @property
    def snapshots(self):
        """Gets the snapshots of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501


        :return: The snapshots of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501
        :rtype: list[InlineResponse200113Snapshots]
        """
        return self._snapshots

    @snapshots.setter
    def snapshots(self, snapshots):
        """Sets the snapshots of this InlineResponse200113DeviceSnapshotRecords.


        :param snapshots: The snapshots of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501
        :type: list[InlineResponse200113Snapshots]
        """

        self._snapshots = snapshots

    @property
    def uptime(self):
        """Gets the uptime of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501


        :return: The uptime of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this InlineResponse200113DeviceSnapshotRecords.


        :param uptime: The uptime of this InlineResponse200113DeviceSnapshotRecords.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._uptime = uptime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200113DeviceSnapshotRecords, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200113DeviceSnapshotRecords):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
