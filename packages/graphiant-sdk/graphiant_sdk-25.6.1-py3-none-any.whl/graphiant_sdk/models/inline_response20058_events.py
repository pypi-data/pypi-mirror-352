# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20058Events(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actions': 'list[str]',
        'device_id': 'str',
        'enterprise_id': 'str',
        'event_data': 'str',
        'event_id': 'str',
        'event_time': 'V1devicesbringuptokenValidTillTs',
        'hostname': 'str',
        'severity': 'str',
        'type': 'str'
    }

    attribute_map = {
        'actions': 'actions',
        'device_id': 'deviceId',
        'enterprise_id': 'enterpriseId',
        'event_data': 'eventData',
        'event_id': 'eventId',
        'event_time': 'eventTime',
        'hostname': 'hostname',
        'severity': 'severity',
        'type': 'type'
    }

    def __init__(self, actions=None, device_id=None, enterprise_id=None, event_data=None, event_id=None, event_time=None, hostname=None, severity=None, type=None):  # noqa: E501
        """InlineResponse20058Events - a model defined in Swagger"""  # noqa: E501
        self._actions = None
        self._device_id = None
        self._enterprise_id = None
        self._event_data = None
        self._event_id = None
        self._event_time = None
        self._hostname = None
        self._severity = None
        self._type = None
        self.discriminator = None
        if actions is not None:
            self.actions = actions
        if device_id is not None:
            self.device_id = device_id
        if enterprise_id is not None:
            self.enterprise_id = enterprise_id
        if event_data is not None:
            self.event_data = event_data
        if event_id is not None:
            self.event_id = event_id
        if event_time is not None:
            self.event_time = event_time
        if hostname is not None:
            self.hostname = hostname
        if severity is not None:
            self.severity = severity
        if type is not None:
            self.type = type

    @property
    def actions(self):
        """Gets the actions of this InlineResponse20058Events.  # noqa: E501


        :return: The actions of this InlineResponse20058Events.  # noqa: E501
        :rtype: list[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this InlineResponse20058Events.


        :param actions: The actions of this InlineResponse20058Events.  # noqa: E501
        :type: list[str]
        """

        self._actions = actions

    @property
    def device_id(self):
        """Gets the device_id of this InlineResponse20058Events.  # noqa: E501


        :return: The device_id of this InlineResponse20058Events.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this InlineResponse20058Events.


        :param device_id: The device_id of this InlineResponse20058Events.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def enterprise_id(self):
        """Gets the enterprise_id of this InlineResponse20058Events.  # noqa: E501


        :return: The enterprise_id of this InlineResponse20058Events.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_id

    @enterprise_id.setter
    def enterprise_id(self, enterprise_id):
        """Sets the enterprise_id of this InlineResponse20058Events.


        :param enterprise_id: The enterprise_id of this InlineResponse20058Events.  # noqa: E501
        :type: str
        """

        self._enterprise_id = enterprise_id

    @property
    def event_data(self):
        """Gets the event_data of this InlineResponse20058Events.  # noqa: E501


        :return: The event_data of this InlineResponse20058Events.  # noqa: E501
        :rtype: str
        """
        return self._event_data

    @event_data.setter
    def event_data(self, event_data):
        """Sets the event_data of this InlineResponse20058Events.


        :param event_data: The event_data of this InlineResponse20058Events.  # noqa: E501
        :type: str
        """

        self._event_data = event_data

    @property
    def event_id(self):
        """Gets the event_id of this InlineResponse20058Events.  # noqa: E501


        :return: The event_id of this InlineResponse20058Events.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this InlineResponse20058Events.


        :param event_id: The event_id of this InlineResponse20058Events.  # noqa: E501
        :type: str
        """

        self._event_id = event_id

    @property
    def event_time(self):
        """Gets the event_time of this InlineResponse20058Events.  # noqa: E501


        :return: The event_time of this InlineResponse20058Events.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this InlineResponse20058Events.


        :param event_time: The event_time of this InlineResponse20058Events.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._event_time = event_time

    @property
    def hostname(self):
        """Gets the hostname of this InlineResponse20058Events.  # noqa: E501


        :return: The hostname of this InlineResponse20058Events.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this InlineResponse20058Events.


        :param hostname: The hostname of this InlineResponse20058Events.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def severity(self):
        """Gets the severity of this InlineResponse20058Events.  # noqa: E501


        :return: The severity of this InlineResponse20058Events.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this InlineResponse20058Events.


        :param severity: The severity of this InlineResponse20058Events.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def type(self):
        """Gets the type of this InlineResponse20058Events.  # noqa: E501


        :return: The type of this InlineResponse20058Events.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20058Events.


        :param type: The type of this InlineResponse20058Events.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20058Events, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20058Events):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
