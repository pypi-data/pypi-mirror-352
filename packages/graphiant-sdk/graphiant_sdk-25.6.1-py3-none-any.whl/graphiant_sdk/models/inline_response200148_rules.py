# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200148Rules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'description': 'str',
        'downlink_burst_rate': 'str',
        'downlink_policer_rate': 'str',
        'id': 'str',
        'index': 'str',
        'logging': 'str',
        'match': 'object',
        'name': 'str',
        'seq': 'str',
        'uplink_burst_rate': 'str',
        'uplink_policer_rate': 'str'
    }

    attribute_map = {
        'action': 'action',
        'description': 'description',
        'downlink_burst_rate': 'downlinkBurstRate',
        'downlink_policer_rate': 'downlinkPolicerRate',
        'id': 'id',
        'index': 'index',
        'logging': 'logging',
        'match': 'match',
        'name': 'name',
        'seq': 'seq',
        'uplink_burst_rate': 'uplinkBurstRate',
        'uplink_policer_rate': 'uplinkPolicerRate'
    }

    def __init__(self, action=None, description=None, downlink_burst_rate=None, downlink_policer_rate=None, id=None, index=None, logging=None, match=None, name=None, seq=None, uplink_burst_rate=None, uplink_policer_rate=None):  # noqa: E501
        """InlineResponse200148Rules - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._description = None
        self._downlink_burst_rate = None
        self._downlink_policer_rate = None
        self._id = None
        self._index = None
        self._logging = None
        self._match = None
        self._name = None
        self._seq = None
        self._uplink_burst_rate = None
        self._uplink_policer_rate = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if description is not None:
            self.description = description
        if downlink_burst_rate is not None:
            self.downlink_burst_rate = downlink_burst_rate
        if downlink_policer_rate is not None:
            self.downlink_policer_rate = downlink_policer_rate
        if id is not None:
            self.id = id
        if index is not None:
            self.index = index
        if logging is not None:
            self.logging = logging
        if match is not None:
            self.match = match
        if name is not None:
            self.name = name
        if seq is not None:
            self.seq = seq
        if uplink_burst_rate is not None:
            self.uplink_burst_rate = uplink_burst_rate
        if uplink_policer_rate is not None:
            self.uplink_policer_rate = uplink_policer_rate

    @property
    def action(self):
        """Gets the action of this InlineResponse200148Rules.  # noqa: E501


        :return: The action of this InlineResponse200148Rules.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this InlineResponse200148Rules.


        :param action: The action of this InlineResponse200148Rules.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def description(self):
        """Gets the description of this InlineResponse200148Rules.  # noqa: E501


        :return: The description of this InlineResponse200148Rules.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse200148Rules.


        :param description: The description of this InlineResponse200148Rules.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def downlink_burst_rate(self):
        """Gets the downlink_burst_rate of this InlineResponse200148Rules.  # noqa: E501


        :return: The downlink_burst_rate of this InlineResponse200148Rules.  # noqa: E501
        :rtype: str
        """
        return self._downlink_burst_rate

    @downlink_burst_rate.setter
    def downlink_burst_rate(self, downlink_burst_rate):
        """Sets the downlink_burst_rate of this InlineResponse200148Rules.


        :param downlink_burst_rate: The downlink_burst_rate of this InlineResponse200148Rules.  # noqa: E501
        :type: str
        """

        self._downlink_burst_rate = downlink_burst_rate

    @property
    def downlink_policer_rate(self):
        """Gets the downlink_policer_rate of this InlineResponse200148Rules.  # noqa: E501


        :return: The downlink_policer_rate of this InlineResponse200148Rules.  # noqa: E501
        :rtype: str
        """
        return self._downlink_policer_rate

    @downlink_policer_rate.setter
    def downlink_policer_rate(self, downlink_policer_rate):
        """Sets the downlink_policer_rate of this InlineResponse200148Rules.


        :param downlink_policer_rate: The downlink_policer_rate of this InlineResponse200148Rules.  # noqa: E501
        :type: str
        """

        self._downlink_policer_rate = downlink_policer_rate

    @property
    def id(self):
        """Gets the id of this InlineResponse200148Rules.  # noqa: E501


        :return: The id of this InlineResponse200148Rules.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200148Rules.


        :param id: The id of this InlineResponse200148Rules.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def index(self):
        """Gets the index of this InlineResponse200148Rules.  # noqa: E501


        :return: The index of this InlineResponse200148Rules.  # noqa: E501
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this InlineResponse200148Rules.


        :param index: The index of this InlineResponse200148Rules.  # noqa: E501
        :type: str
        """

        self._index = index

    @property
    def logging(self):
        """Gets the logging of this InlineResponse200148Rules.  # noqa: E501


        :return: The logging of this InlineResponse200148Rules.  # noqa: E501
        :rtype: str
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this InlineResponse200148Rules.


        :param logging: The logging of this InlineResponse200148Rules.  # noqa: E501
        :type: str
        """

        self._logging = logging

    @property
    def match(self):
        """Gets the match of this InlineResponse200148Rules.  # noqa: E501


        :return: The match of this InlineResponse200148Rules.  # noqa: E501
        :rtype: object
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this InlineResponse200148Rules.


        :param match: The match of this InlineResponse200148Rules.  # noqa: E501
        :type: object
        """

        self._match = match

    @property
    def name(self):
        """Gets the name of this InlineResponse200148Rules.  # noqa: E501


        :return: The name of this InlineResponse200148Rules.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200148Rules.


        :param name: The name of this InlineResponse200148Rules.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def seq(self):
        """Gets the seq of this InlineResponse200148Rules.  # noqa: E501


        :return: The seq of this InlineResponse200148Rules.  # noqa: E501
        :rtype: str
        """
        return self._seq

    @seq.setter
    def seq(self, seq):
        """Sets the seq of this InlineResponse200148Rules.


        :param seq: The seq of this InlineResponse200148Rules.  # noqa: E501
        :type: str
        """

        self._seq = seq

    @property
    def uplink_burst_rate(self):
        """Gets the uplink_burst_rate of this InlineResponse200148Rules.  # noqa: E501


        :return: The uplink_burst_rate of this InlineResponse200148Rules.  # noqa: E501
        :rtype: str
        """
        return self._uplink_burst_rate

    @uplink_burst_rate.setter
    def uplink_burst_rate(self, uplink_burst_rate):
        """Sets the uplink_burst_rate of this InlineResponse200148Rules.


        :param uplink_burst_rate: The uplink_burst_rate of this InlineResponse200148Rules.  # noqa: E501
        :type: str
        """

        self._uplink_burst_rate = uplink_burst_rate

    @property
    def uplink_policer_rate(self):
        """Gets the uplink_policer_rate of this InlineResponse200148Rules.  # noqa: E501


        :return: The uplink_policer_rate of this InlineResponse200148Rules.  # noqa: E501
        :rtype: str
        """
        return self._uplink_policer_rate

    @uplink_policer_rate.setter
    def uplink_policer_rate(self, uplink_policer_rate):
        """Sets the uplink_policer_rate of this InlineResponse200148Rules.


        :param uplink_policer_rate: The uplink_policer_rate of this InlineResponse200148Rules.  # noqa: E501
        :type: str
        """

        self._uplink_policer_rate = uplink_policer_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200148Rules, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200148Rules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
