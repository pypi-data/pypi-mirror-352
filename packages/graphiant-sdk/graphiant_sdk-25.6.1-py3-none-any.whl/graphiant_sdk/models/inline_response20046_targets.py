# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20046Targets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'detailed_failure_reason': 'str',
        'end_ts': 'V1devicesbringuptokenValidTillTs',
        'events': 'list[InlineResponse20046Events]',
        'failure_reason': 'str',
        'ids': 'list[V1activitylogsSelectorJobEntity]',
        'start_ts': 'V1devicesbringuptokenValidTillTs',
        'status': 'str'
    }

    attribute_map = {
        'detailed_failure_reason': 'detailedFailureReason',
        'end_ts': 'endTs',
        'events': 'events',
        'failure_reason': 'failureReason',
        'ids': 'ids',
        'start_ts': 'startTs',
        'status': 'status'
    }

    def __init__(self, detailed_failure_reason=None, end_ts=None, events=None, failure_reason=None, ids=None, start_ts=None, status=None):  # noqa: E501
        """InlineResponse20046Targets - a model defined in Swagger"""  # noqa: E501
        self._detailed_failure_reason = None
        self._end_ts = None
        self._events = None
        self._failure_reason = None
        self._ids = None
        self._start_ts = None
        self._status = None
        self.discriminator = None
        if detailed_failure_reason is not None:
            self.detailed_failure_reason = detailed_failure_reason
        if end_ts is not None:
            self.end_ts = end_ts
        if events is not None:
            self.events = events
        if failure_reason is not None:
            self.failure_reason = failure_reason
        if ids is not None:
            self.ids = ids
        if start_ts is not None:
            self.start_ts = start_ts
        if status is not None:
            self.status = status

    @property
    def detailed_failure_reason(self):
        """Gets the detailed_failure_reason of this InlineResponse20046Targets.  # noqa: E501


        :return: The detailed_failure_reason of this InlineResponse20046Targets.  # noqa: E501
        :rtype: str
        """
        return self._detailed_failure_reason

    @detailed_failure_reason.setter
    def detailed_failure_reason(self, detailed_failure_reason):
        """Sets the detailed_failure_reason of this InlineResponse20046Targets.


        :param detailed_failure_reason: The detailed_failure_reason of this InlineResponse20046Targets.  # noqa: E501
        :type: str
        """

        self._detailed_failure_reason = detailed_failure_reason

    @property
    def end_ts(self):
        """Gets the end_ts of this InlineResponse20046Targets.  # noqa: E501


        :return: The end_ts of this InlineResponse20046Targets.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._end_ts

    @end_ts.setter
    def end_ts(self, end_ts):
        """Sets the end_ts of this InlineResponse20046Targets.


        :param end_ts: The end_ts of this InlineResponse20046Targets.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._end_ts = end_ts

    @property
    def events(self):
        """Gets the events of this InlineResponse20046Targets.  # noqa: E501


        :return: The events of this InlineResponse20046Targets.  # noqa: E501
        :rtype: list[InlineResponse20046Events]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this InlineResponse20046Targets.


        :param events: The events of this InlineResponse20046Targets.  # noqa: E501
        :type: list[InlineResponse20046Events]
        """

        self._events = events

    @property
    def failure_reason(self):
        """Gets the failure_reason of this InlineResponse20046Targets.  # noqa: E501


        :return: The failure_reason of this InlineResponse20046Targets.  # noqa: E501
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this InlineResponse20046Targets.


        :param failure_reason: The failure_reason of this InlineResponse20046Targets.  # noqa: E501
        :type: str
        """

        self._failure_reason = failure_reason

    @property
    def ids(self):
        """Gets the ids of this InlineResponse20046Targets.  # noqa: E501


        :return: The ids of this InlineResponse20046Targets.  # noqa: E501
        :rtype: list[V1activitylogsSelectorJobEntity]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this InlineResponse20046Targets.


        :param ids: The ids of this InlineResponse20046Targets.  # noqa: E501
        :type: list[V1activitylogsSelectorJobEntity]
        """

        self._ids = ids

    @property
    def start_ts(self):
        """Gets the start_ts of this InlineResponse20046Targets.  # noqa: E501


        :return: The start_ts of this InlineResponse20046Targets.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._start_ts

    @start_ts.setter
    def start_ts(self, start_ts):
        """Sets the start_ts of this InlineResponse20046Targets.


        :param start_ts: The start_ts of this InlineResponse20046Targets.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._start_ts = start_ts

    @property
    def status(self):
        """Gets the status of this InlineResponse20046Targets.  # noqa: E501


        :return: The status of this InlineResponse20046Targets.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20046Targets.


        :param status: The status of this InlineResponse20046Targets.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20046Targets, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20046Targets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
