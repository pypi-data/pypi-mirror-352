# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200142Devices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'is_virtual': 'str',
        'name': 'str',
        'override_region': 'V1devicesdeviceIddraftDraftRegion',
        'platform_name': 'str',
        'region': 'V1devicesdeviceIddraftDraftRegion',
        'role': 'str',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'is_virtual': 'isVirtual',
        'name': 'name',
        'override_region': 'overrideRegion',
        'platform_name': 'platformName',
        'region': 'region',
        'role': 'role',
        'status': 'status'
    }

    def __init__(self, id=None, is_virtual=None, name=None, override_region=None, platform_name=None, region=None, role=None, status=None):  # noqa: E501
        """InlineResponse200142Devices - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._is_virtual = None
        self._name = None
        self._override_region = None
        self._platform_name = None
        self._region = None
        self._role = None
        self._status = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if is_virtual is not None:
            self.is_virtual = is_virtual
        if name is not None:
            self.name = name
        if override_region is not None:
            self.override_region = override_region
        if platform_name is not None:
            self.platform_name = platform_name
        if region is not None:
            self.region = region
        if role is not None:
            self.role = role
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this InlineResponse200142Devices.  # noqa: E501


        :return: The id of this InlineResponse200142Devices.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200142Devices.


        :param id: The id of this InlineResponse200142Devices.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_virtual(self):
        """Gets the is_virtual of this InlineResponse200142Devices.  # noqa: E501


        :return: The is_virtual of this InlineResponse200142Devices.  # noqa: E501
        :rtype: str
        """
        return self._is_virtual

    @is_virtual.setter
    def is_virtual(self, is_virtual):
        """Sets the is_virtual of this InlineResponse200142Devices.


        :param is_virtual: The is_virtual of this InlineResponse200142Devices.  # noqa: E501
        :type: str
        """

        self._is_virtual = is_virtual

    @property
    def name(self):
        """Gets the name of this InlineResponse200142Devices.  # noqa: E501


        :return: The name of this InlineResponse200142Devices.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200142Devices.


        :param name: The name of this InlineResponse200142Devices.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def override_region(self):
        """Gets the override_region of this InlineResponse200142Devices.  # noqa: E501


        :return: The override_region of this InlineResponse200142Devices.  # noqa: E501
        :rtype: V1devicesdeviceIddraftDraftRegion
        """
        return self._override_region

    @override_region.setter
    def override_region(self, override_region):
        """Sets the override_region of this InlineResponse200142Devices.


        :param override_region: The override_region of this InlineResponse200142Devices.  # noqa: E501
        :type: V1devicesdeviceIddraftDraftRegion
        """

        self._override_region = override_region

    @property
    def platform_name(self):
        """Gets the platform_name of this InlineResponse200142Devices.  # noqa: E501


        :return: The platform_name of this InlineResponse200142Devices.  # noqa: E501
        :rtype: str
        """
        return self._platform_name

    @platform_name.setter
    def platform_name(self, platform_name):
        """Sets the platform_name of this InlineResponse200142Devices.


        :param platform_name: The platform_name of this InlineResponse200142Devices.  # noqa: E501
        :type: str
        """

        self._platform_name = platform_name

    @property
    def region(self):
        """Gets the region of this InlineResponse200142Devices.  # noqa: E501


        :return: The region of this InlineResponse200142Devices.  # noqa: E501
        :rtype: V1devicesdeviceIddraftDraftRegion
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this InlineResponse200142Devices.


        :param region: The region of this InlineResponse200142Devices.  # noqa: E501
        :type: V1devicesdeviceIddraftDraftRegion
        """

        self._region = region

    @property
    def role(self):
        """Gets the role of this InlineResponse200142Devices.  # noqa: E501


        :return: The role of this InlineResponse200142Devices.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this InlineResponse200142Devices.


        :param role: The role of this InlineResponse200142Devices.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def status(self):
        """Gets the status of this InlineResponse200142Devices.  # noqa: E501


        :return: The status of this InlineResponse200142Devices.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200142Devices.


        :param status: The status of this InlineResponse200142Devices.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200142Devices, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200142Devices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
