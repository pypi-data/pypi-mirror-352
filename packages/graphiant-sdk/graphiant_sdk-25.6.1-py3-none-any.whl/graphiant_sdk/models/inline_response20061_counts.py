# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20061Counts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_down_count': 'str',
        'active_up_count': 'str',
        'deactivated_down_count': 'str',
        'down_sites_count': 'str',
        'empty_sites_count': 'str',
        'impaired_sites_count': 'str',
        'staging_down_count': 'str',
        'staging_up_count': 'str',
        'total_customers': 'str',
        'total_edges': 'str',
        'total_msps': 'str',
        'total_sites': 'str',
        'up_sites_count': 'str'
    }

    attribute_map = {
        'active_down_count': 'activeDownCount',
        'active_up_count': 'activeUpCount',
        'deactivated_down_count': 'deactivatedDownCount',
        'down_sites_count': 'downSitesCount',
        'empty_sites_count': 'emptySitesCount',
        'impaired_sites_count': 'impairedSitesCount',
        'staging_down_count': 'stagingDownCount',
        'staging_up_count': 'stagingUpCount',
        'total_customers': 'totalCustomers',
        'total_edges': 'totalEdges',
        'total_msps': 'totalMsps',
        'total_sites': 'totalSites',
        'up_sites_count': 'upSitesCount'
    }

    def __init__(self, active_down_count=None, active_up_count=None, deactivated_down_count=None, down_sites_count=None, empty_sites_count=None, impaired_sites_count=None, staging_down_count=None, staging_up_count=None, total_customers=None, total_edges=None, total_msps=None, total_sites=None, up_sites_count=None):  # noqa: E501
        """InlineResponse20061Counts - a model defined in Swagger"""  # noqa: E501
        self._active_down_count = None
        self._active_up_count = None
        self._deactivated_down_count = None
        self._down_sites_count = None
        self._empty_sites_count = None
        self._impaired_sites_count = None
        self._staging_down_count = None
        self._staging_up_count = None
        self._total_customers = None
        self._total_edges = None
        self._total_msps = None
        self._total_sites = None
        self._up_sites_count = None
        self.discriminator = None
        if active_down_count is not None:
            self.active_down_count = active_down_count
        if active_up_count is not None:
            self.active_up_count = active_up_count
        if deactivated_down_count is not None:
            self.deactivated_down_count = deactivated_down_count
        if down_sites_count is not None:
            self.down_sites_count = down_sites_count
        if empty_sites_count is not None:
            self.empty_sites_count = empty_sites_count
        if impaired_sites_count is not None:
            self.impaired_sites_count = impaired_sites_count
        if staging_down_count is not None:
            self.staging_down_count = staging_down_count
        if staging_up_count is not None:
            self.staging_up_count = staging_up_count
        if total_customers is not None:
            self.total_customers = total_customers
        if total_edges is not None:
            self.total_edges = total_edges
        if total_msps is not None:
            self.total_msps = total_msps
        if total_sites is not None:
            self.total_sites = total_sites
        if up_sites_count is not None:
            self.up_sites_count = up_sites_count

    @property
    def active_down_count(self):
        """Gets the active_down_count of this InlineResponse20061Counts.  # noqa: E501


        :return: The active_down_count of this InlineResponse20061Counts.  # noqa: E501
        :rtype: str
        """
        return self._active_down_count

    @active_down_count.setter
    def active_down_count(self, active_down_count):
        """Sets the active_down_count of this InlineResponse20061Counts.


        :param active_down_count: The active_down_count of this InlineResponse20061Counts.  # noqa: E501
        :type: str
        """

        self._active_down_count = active_down_count

    @property
    def active_up_count(self):
        """Gets the active_up_count of this InlineResponse20061Counts.  # noqa: E501


        :return: The active_up_count of this InlineResponse20061Counts.  # noqa: E501
        :rtype: str
        """
        return self._active_up_count

    @active_up_count.setter
    def active_up_count(self, active_up_count):
        """Sets the active_up_count of this InlineResponse20061Counts.


        :param active_up_count: The active_up_count of this InlineResponse20061Counts.  # noqa: E501
        :type: str
        """

        self._active_up_count = active_up_count

    @property
    def deactivated_down_count(self):
        """Gets the deactivated_down_count of this InlineResponse20061Counts.  # noqa: E501


        :return: The deactivated_down_count of this InlineResponse20061Counts.  # noqa: E501
        :rtype: str
        """
        return self._deactivated_down_count

    @deactivated_down_count.setter
    def deactivated_down_count(self, deactivated_down_count):
        """Sets the deactivated_down_count of this InlineResponse20061Counts.


        :param deactivated_down_count: The deactivated_down_count of this InlineResponse20061Counts.  # noqa: E501
        :type: str
        """

        self._deactivated_down_count = deactivated_down_count

    @property
    def down_sites_count(self):
        """Gets the down_sites_count of this InlineResponse20061Counts.  # noqa: E501


        :return: The down_sites_count of this InlineResponse20061Counts.  # noqa: E501
        :rtype: str
        """
        return self._down_sites_count

    @down_sites_count.setter
    def down_sites_count(self, down_sites_count):
        """Sets the down_sites_count of this InlineResponse20061Counts.


        :param down_sites_count: The down_sites_count of this InlineResponse20061Counts.  # noqa: E501
        :type: str
        """

        self._down_sites_count = down_sites_count

    @property
    def empty_sites_count(self):
        """Gets the empty_sites_count of this InlineResponse20061Counts.  # noqa: E501


        :return: The empty_sites_count of this InlineResponse20061Counts.  # noqa: E501
        :rtype: str
        """
        return self._empty_sites_count

    @empty_sites_count.setter
    def empty_sites_count(self, empty_sites_count):
        """Sets the empty_sites_count of this InlineResponse20061Counts.


        :param empty_sites_count: The empty_sites_count of this InlineResponse20061Counts.  # noqa: E501
        :type: str
        """

        self._empty_sites_count = empty_sites_count

    @property
    def impaired_sites_count(self):
        """Gets the impaired_sites_count of this InlineResponse20061Counts.  # noqa: E501


        :return: The impaired_sites_count of this InlineResponse20061Counts.  # noqa: E501
        :rtype: str
        """
        return self._impaired_sites_count

    @impaired_sites_count.setter
    def impaired_sites_count(self, impaired_sites_count):
        """Sets the impaired_sites_count of this InlineResponse20061Counts.


        :param impaired_sites_count: The impaired_sites_count of this InlineResponse20061Counts.  # noqa: E501
        :type: str
        """

        self._impaired_sites_count = impaired_sites_count

    @property
    def staging_down_count(self):
        """Gets the staging_down_count of this InlineResponse20061Counts.  # noqa: E501


        :return: The staging_down_count of this InlineResponse20061Counts.  # noqa: E501
        :rtype: str
        """
        return self._staging_down_count

    @staging_down_count.setter
    def staging_down_count(self, staging_down_count):
        """Sets the staging_down_count of this InlineResponse20061Counts.


        :param staging_down_count: The staging_down_count of this InlineResponse20061Counts.  # noqa: E501
        :type: str
        """

        self._staging_down_count = staging_down_count

    @property
    def staging_up_count(self):
        """Gets the staging_up_count of this InlineResponse20061Counts.  # noqa: E501


        :return: The staging_up_count of this InlineResponse20061Counts.  # noqa: E501
        :rtype: str
        """
        return self._staging_up_count

    @staging_up_count.setter
    def staging_up_count(self, staging_up_count):
        """Sets the staging_up_count of this InlineResponse20061Counts.


        :param staging_up_count: The staging_up_count of this InlineResponse20061Counts.  # noqa: E501
        :type: str
        """

        self._staging_up_count = staging_up_count

    @property
    def total_customers(self):
        """Gets the total_customers of this InlineResponse20061Counts.  # noqa: E501


        :return: The total_customers of this InlineResponse20061Counts.  # noqa: E501
        :rtype: str
        """
        return self._total_customers

    @total_customers.setter
    def total_customers(self, total_customers):
        """Sets the total_customers of this InlineResponse20061Counts.


        :param total_customers: The total_customers of this InlineResponse20061Counts.  # noqa: E501
        :type: str
        """

        self._total_customers = total_customers

    @property
    def total_edges(self):
        """Gets the total_edges of this InlineResponse20061Counts.  # noqa: E501


        :return: The total_edges of this InlineResponse20061Counts.  # noqa: E501
        :rtype: str
        """
        return self._total_edges

    @total_edges.setter
    def total_edges(self, total_edges):
        """Sets the total_edges of this InlineResponse20061Counts.


        :param total_edges: The total_edges of this InlineResponse20061Counts.  # noqa: E501
        :type: str
        """

        self._total_edges = total_edges

    @property
    def total_msps(self):
        """Gets the total_msps of this InlineResponse20061Counts.  # noqa: E501


        :return: The total_msps of this InlineResponse20061Counts.  # noqa: E501
        :rtype: str
        """
        return self._total_msps

    @total_msps.setter
    def total_msps(self, total_msps):
        """Sets the total_msps of this InlineResponse20061Counts.


        :param total_msps: The total_msps of this InlineResponse20061Counts.  # noqa: E501
        :type: str
        """

        self._total_msps = total_msps

    @property
    def total_sites(self):
        """Gets the total_sites of this InlineResponse20061Counts.  # noqa: E501


        :return: The total_sites of this InlineResponse20061Counts.  # noqa: E501
        :rtype: str
        """
        return self._total_sites

    @total_sites.setter
    def total_sites(self, total_sites):
        """Sets the total_sites of this InlineResponse20061Counts.


        :param total_sites: The total_sites of this InlineResponse20061Counts.  # noqa: E501
        :type: str
        """

        self._total_sites = total_sites

    @property
    def up_sites_count(self):
        """Gets the up_sites_count of this InlineResponse20061Counts.  # noqa: E501


        :return: The up_sites_count of this InlineResponse20061Counts.  # noqa: E501
        :rtype: str
        """
        return self._up_sites_count

    @up_sites_count.setter
    def up_sites_count(self, up_sites_count):
        """Sets the up_sites_count of this InlineResponse20061Counts.


        :param up_sites_count: The up_sites_count of this InlineResponse20061Counts.  # noqa: E501
        :type: str
        """

        self._up_sites_count = up_sites_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20061Counts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20061Counts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
