# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200217BwusageSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bwusage_top_providers': 'list[InlineResponse200217BwusageSummaryBwusageTopProviders]',
        'cloudusage_kbps': 'str',
        'percent_changed': 'str',
        'provider_count': 'str',
        'providerusage_kbps': 'str',
        'totusage_kbps': 'str'
    }

    attribute_map = {
        'bwusage_top_providers': 'bwusageTopProviders',
        'cloudusage_kbps': 'cloudusageKbps',
        'percent_changed': 'percentChanged',
        'provider_count': 'providerCount',
        'providerusage_kbps': 'providerusageKbps',
        'totusage_kbps': 'totusageKbps'
    }

    def __init__(self, bwusage_top_providers=None, cloudusage_kbps=None, percent_changed=None, provider_count=None, providerusage_kbps=None, totusage_kbps=None):  # noqa: E501
        """InlineResponse200217BwusageSummary - a model defined in Swagger"""  # noqa: E501
        self._bwusage_top_providers = None
        self._cloudusage_kbps = None
        self._percent_changed = None
        self._provider_count = None
        self._providerusage_kbps = None
        self._totusage_kbps = None
        self.discriminator = None
        if bwusage_top_providers is not None:
            self.bwusage_top_providers = bwusage_top_providers
        if cloudusage_kbps is not None:
            self.cloudusage_kbps = cloudusage_kbps
        if percent_changed is not None:
            self.percent_changed = percent_changed
        if provider_count is not None:
            self.provider_count = provider_count
        if providerusage_kbps is not None:
            self.providerusage_kbps = providerusage_kbps
        if totusage_kbps is not None:
            self.totusage_kbps = totusage_kbps

    @property
    def bwusage_top_providers(self):
        """Gets the bwusage_top_providers of this InlineResponse200217BwusageSummary.  # noqa: E501


        :return: The bwusage_top_providers of this InlineResponse200217BwusageSummary.  # noqa: E501
        :rtype: list[InlineResponse200217BwusageSummaryBwusageTopProviders]
        """
        return self._bwusage_top_providers

    @bwusage_top_providers.setter
    def bwusage_top_providers(self, bwusage_top_providers):
        """Sets the bwusage_top_providers of this InlineResponse200217BwusageSummary.


        :param bwusage_top_providers: The bwusage_top_providers of this InlineResponse200217BwusageSummary.  # noqa: E501
        :type: list[InlineResponse200217BwusageSummaryBwusageTopProviders]
        """

        self._bwusage_top_providers = bwusage_top_providers

    @property
    def cloudusage_kbps(self):
        """Gets the cloudusage_kbps of this InlineResponse200217BwusageSummary.  # noqa: E501


        :return: The cloudusage_kbps of this InlineResponse200217BwusageSummary.  # noqa: E501
        :rtype: str
        """
        return self._cloudusage_kbps

    @cloudusage_kbps.setter
    def cloudusage_kbps(self, cloudusage_kbps):
        """Sets the cloudusage_kbps of this InlineResponse200217BwusageSummary.


        :param cloudusage_kbps: The cloudusage_kbps of this InlineResponse200217BwusageSummary.  # noqa: E501
        :type: str
        """

        self._cloudusage_kbps = cloudusage_kbps

    @property
    def percent_changed(self):
        """Gets the percent_changed of this InlineResponse200217BwusageSummary.  # noqa: E501


        :return: The percent_changed of this InlineResponse200217BwusageSummary.  # noqa: E501
        :rtype: str
        """
        return self._percent_changed

    @percent_changed.setter
    def percent_changed(self, percent_changed):
        """Sets the percent_changed of this InlineResponse200217BwusageSummary.


        :param percent_changed: The percent_changed of this InlineResponse200217BwusageSummary.  # noqa: E501
        :type: str
        """

        self._percent_changed = percent_changed

    @property
    def provider_count(self):
        """Gets the provider_count of this InlineResponse200217BwusageSummary.  # noqa: E501


        :return: The provider_count of this InlineResponse200217BwusageSummary.  # noqa: E501
        :rtype: str
        """
        return self._provider_count

    @provider_count.setter
    def provider_count(self, provider_count):
        """Sets the provider_count of this InlineResponse200217BwusageSummary.


        :param provider_count: The provider_count of this InlineResponse200217BwusageSummary.  # noqa: E501
        :type: str
        """

        self._provider_count = provider_count

    @property
    def providerusage_kbps(self):
        """Gets the providerusage_kbps of this InlineResponse200217BwusageSummary.  # noqa: E501


        :return: The providerusage_kbps of this InlineResponse200217BwusageSummary.  # noqa: E501
        :rtype: str
        """
        return self._providerusage_kbps

    @providerusage_kbps.setter
    def providerusage_kbps(self, providerusage_kbps):
        """Sets the providerusage_kbps of this InlineResponse200217BwusageSummary.


        :param providerusage_kbps: The providerusage_kbps of this InlineResponse200217BwusageSummary.  # noqa: E501
        :type: str
        """

        self._providerusage_kbps = providerusage_kbps

    @property
    def totusage_kbps(self):
        """Gets the totusage_kbps of this InlineResponse200217BwusageSummary.  # noqa: E501


        :return: The totusage_kbps of this InlineResponse200217BwusageSummary.  # noqa: E501
        :rtype: str
        """
        return self._totusage_kbps

    @totusage_kbps.setter
    def totusage_kbps(self, totusage_kbps):
        """Sets the totusage_kbps of this InlineResponse200217BwusageSummary.


        :param totusage_kbps: The totusage_kbps of this InlineResponse200217BwusageSummary.  # noqa: E501
        :type: str
        """

        self._totusage_kbps = totusage_kbps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200217BwusageSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200217BwusageSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
