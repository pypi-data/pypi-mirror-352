# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20030BucketDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_count_threat_high': 'str',
        'app_count_threat_low': 'str',
        'app_count_threat_medium': 'str',
        'app_id_records': 'list[InlineResponse20030BucketDetailsAppIdRecords]',
        'app_name_records': 'list[InlineResponse20030BucketDetailsAppNameRecords]',
        'bucket_name_to_display': 'str',
        'description': 'str',
        'display_ip_port': 'str',
        'flow_count': 'str',
        'new_ip_hint': 'str',
        'recommendation': 'str',
        'trend_value_list': 'list[InlineResponse20030BucketDetailsTrendValueList]',
        'unique_app_count': 'str'
    }

    attribute_map = {
        'app_count_threat_high': 'appCountThreatHigh',
        'app_count_threat_low': 'appCountThreatLow',
        'app_count_threat_medium': 'appCountThreatMedium',
        'app_id_records': 'appIdRecords',
        'app_name_records': 'appNameRecords',
        'bucket_name_to_display': 'bucketNameToDisplay',
        'description': 'description',
        'display_ip_port': 'displayIpPort',
        'flow_count': 'flowCount',
        'new_ip_hint': 'newIpHint',
        'recommendation': 'recommendation',
        'trend_value_list': 'trendValueList',
        'unique_app_count': 'uniqueAppCount'
    }

    def __init__(self, app_count_threat_high=None, app_count_threat_low=None, app_count_threat_medium=None, app_id_records=None, app_name_records=None, bucket_name_to_display=None, description=None, display_ip_port=None, flow_count=None, new_ip_hint=None, recommendation=None, trend_value_list=None, unique_app_count=None):  # noqa: E501
        """InlineResponse20030BucketDetails - a model defined in Swagger"""  # noqa: E501
        self._app_count_threat_high = None
        self._app_count_threat_low = None
        self._app_count_threat_medium = None
        self._app_id_records = None
        self._app_name_records = None
        self._bucket_name_to_display = None
        self._description = None
        self._display_ip_port = None
        self._flow_count = None
        self._new_ip_hint = None
        self._recommendation = None
        self._trend_value_list = None
        self._unique_app_count = None
        self.discriminator = None
        if app_count_threat_high is not None:
            self.app_count_threat_high = app_count_threat_high
        if app_count_threat_low is not None:
            self.app_count_threat_low = app_count_threat_low
        if app_count_threat_medium is not None:
            self.app_count_threat_medium = app_count_threat_medium
        if app_id_records is not None:
            self.app_id_records = app_id_records
        if app_name_records is not None:
            self.app_name_records = app_name_records
        if bucket_name_to_display is not None:
            self.bucket_name_to_display = bucket_name_to_display
        if description is not None:
            self.description = description
        if display_ip_port is not None:
            self.display_ip_port = display_ip_port
        if flow_count is not None:
            self.flow_count = flow_count
        if new_ip_hint is not None:
            self.new_ip_hint = new_ip_hint
        if recommendation is not None:
            self.recommendation = recommendation
        if trend_value_list is not None:
            self.trend_value_list = trend_value_list
        if unique_app_count is not None:
            self.unique_app_count = unique_app_count

    @property
    def app_count_threat_high(self):
        """Gets the app_count_threat_high of this InlineResponse20030BucketDetails.  # noqa: E501


        :return: The app_count_threat_high of this InlineResponse20030BucketDetails.  # noqa: E501
        :rtype: str
        """
        return self._app_count_threat_high

    @app_count_threat_high.setter
    def app_count_threat_high(self, app_count_threat_high):
        """Sets the app_count_threat_high of this InlineResponse20030BucketDetails.


        :param app_count_threat_high: The app_count_threat_high of this InlineResponse20030BucketDetails.  # noqa: E501
        :type: str
        """

        self._app_count_threat_high = app_count_threat_high

    @property
    def app_count_threat_low(self):
        """Gets the app_count_threat_low of this InlineResponse20030BucketDetails.  # noqa: E501


        :return: The app_count_threat_low of this InlineResponse20030BucketDetails.  # noqa: E501
        :rtype: str
        """
        return self._app_count_threat_low

    @app_count_threat_low.setter
    def app_count_threat_low(self, app_count_threat_low):
        """Sets the app_count_threat_low of this InlineResponse20030BucketDetails.


        :param app_count_threat_low: The app_count_threat_low of this InlineResponse20030BucketDetails.  # noqa: E501
        :type: str
        """

        self._app_count_threat_low = app_count_threat_low

    @property
    def app_count_threat_medium(self):
        """Gets the app_count_threat_medium of this InlineResponse20030BucketDetails.  # noqa: E501


        :return: The app_count_threat_medium of this InlineResponse20030BucketDetails.  # noqa: E501
        :rtype: str
        """
        return self._app_count_threat_medium

    @app_count_threat_medium.setter
    def app_count_threat_medium(self, app_count_threat_medium):
        """Sets the app_count_threat_medium of this InlineResponse20030BucketDetails.


        :param app_count_threat_medium: The app_count_threat_medium of this InlineResponse20030BucketDetails.  # noqa: E501
        :type: str
        """

        self._app_count_threat_medium = app_count_threat_medium

    @property
    def app_id_records(self):
        """Gets the app_id_records of this InlineResponse20030BucketDetails.  # noqa: E501


        :return: The app_id_records of this InlineResponse20030BucketDetails.  # noqa: E501
        :rtype: list[InlineResponse20030BucketDetailsAppIdRecords]
        """
        return self._app_id_records

    @app_id_records.setter
    def app_id_records(self, app_id_records):
        """Sets the app_id_records of this InlineResponse20030BucketDetails.


        :param app_id_records: The app_id_records of this InlineResponse20030BucketDetails.  # noqa: E501
        :type: list[InlineResponse20030BucketDetailsAppIdRecords]
        """

        self._app_id_records = app_id_records

    @property
    def app_name_records(self):
        """Gets the app_name_records of this InlineResponse20030BucketDetails.  # noqa: E501


        :return: The app_name_records of this InlineResponse20030BucketDetails.  # noqa: E501
        :rtype: list[InlineResponse20030BucketDetailsAppNameRecords]
        """
        return self._app_name_records

    @app_name_records.setter
    def app_name_records(self, app_name_records):
        """Sets the app_name_records of this InlineResponse20030BucketDetails.


        :param app_name_records: The app_name_records of this InlineResponse20030BucketDetails.  # noqa: E501
        :type: list[InlineResponse20030BucketDetailsAppNameRecords]
        """

        self._app_name_records = app_name_records

    @property
    def bucket_name_to_display(self):
        """Gets the bucket_name_to_display of this InlineResponse20030BucketDetails.  # noqa: E501


        :return: The bucket_name_to_display of this InlineResponse20030BucketDetails.  # noqa: E501
        :rtype: str
        """
        return self._bucket_name_to_display

    @bucket_name_to_display.setter
    def bucket_name_to_display(self, bucket_name_to_display):
        """Sets the bucket_name_to_display of this InlineResponse20030BucketDetails.


        :param bucket_name_to_display: The bucket_name_to_display of this InlineResponse20030BucketDetails.  # noqa: E501
        :type: str
        """

        self._bucket_name_to_display = bucket_name_to_display

    @property
    def description(self):
        """Gets the description of this InlineResponse20030BucketDetails.  # noqa: E501


        :return: The description of this InlineResponse20030BucketDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse20030BucketDetails.


        :param description: The description of this InlineResponse20030BucketDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_ip_port(self):
        """Gets the display_ip_port of this InlineResponse20030BucketDetails.  # noqa: E501


        :return: The display_ip_port of this InlineResponse20030BucketDetails.  # noqa: E501
        :rtype: str
        """
        return self._display_ip_port

    @display_ip_port.setter
    def display_ip_port(self, display_ip_port):
        """Sets the display_ip_port of this InlineResponse20030BucketDetails.


        :param display_ip_port: The display_ip_port of this InlineResponse20030BucketDetails.  # noqa: E501
        :type: str
        """

        self._display_ip_port = display_ip_port

    @property
    def flow_count(self):
        """Gets the flow_count of this InlineResponse20030BucketDetails.  # noqa: E501


        :return: The flow_count of this InlineResponse20030BucketDetails.  # noqa: E501
        :rtype: str
        """
        return self._flow_count

    @flow_count.setter
    def flow_count(self, flow_count):
        """Sets the flow_count of this InlineResponse20030BucketDetails.


        :param flow_count: The flow_count of this InlineResponse20030BucketDetails.  # noqa: E501
        :type: str
        """

        self._flow_count = flow_count

    @property
    def new_ip_hint(self):
        """Gets the new_ip_hint of this InlineResponse20030BucketDetails.  # noqa: E501


        :return: The new_ip_hint of this InlineResponse20030BucketDetails.  # noqa: E501
        :rtype: str
        """
        return self._new_ip_hint

    @new_ip_hint.setter
    def new_ip_hint(self, new_ip_hint):
        """Sets the new_ip_hint of this InlineResponse20030BucketDetails.


        :param new_ip_hint: The new_ip_hint of this InlineResponse20030BucketDetails.  # noqa: E501
        :type: str
        """

        self._new_ip_hint = new_ip_hint

    @property
    def recommendation(self):
        """Gets the recommendation of this InlineResponse20030BucketDetails.  # noqa: E501


        :return: The recommendation of this InlineResponse20030BucketDetails.  # noqa: E501
        :rtype: str
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this InlineResponse20030BucketDetails.


        :param recommendation: The recommendation of this InlineResponse20030BucketDetails.  # noqa: E501
        :type: str
        """

        self._recommendation = recommendation

    @property
    def trend_value_list(self):
        """Gets the trend_value_list of this InlineResponse20030BucketDetails.  # noqa: E501


        :return: The trend_value_list of this InlineResponse20030BucketDetails.  # noqa: E501
        :rtype: list[InlineResponse20030BucketDetailsTrendValueList]
        """
        return self._trend_value_list

    @trend_value_list.setter
    def trend_value_list(self, trend_value_list):
        """Sets the trend_value_list of this InlineResponse20030BucketDetails.


        :param trend_value_list: The trend_value_list of this InlineResponse20030BucketDetails.  # noqa: E501
        :type: list[InlineResponse20030BucketDetailsTrendValueList]
        """

        self._trend_value_list = trend_value_list

    @property
    def unique_app_count(self):
        """Gets the unique_app_count of this InlineResponse20030BucketDetails.  # noqa: E501


        :return: The unique_app_count of this InlineResponse20030BucketDetails.  # noqa: E501
        :rtype: str
        """
        return self._unique_app_count

    @unique_app_count.setter
    def unique_app_count(self, unique_app_count):
        """Sets the unique_app_count of this InlineResponse20030BucketDetails.


        :param unique_app_count: The unique_app_count of this InlineResponse20030BucketDetails.  # noqa: E501
        :type: str
        """

        self._unique_app_count = unique_app_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20030BucketDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20030BucketDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
