# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GroupsIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'display_name': 'str',
        'group_type': 'str',
        'permissions': 'V1groupsPermissions',
        'time_window_end': 'str',
        'time_window_start': 'str'
    }

    attribute_map = {
        'description': 'description',
        'display_name': 'displayName',
        'group_type': 'groupType',
        'permissions': 'permissions',
        'time_window_end': 'timeWindowEnd',
        'time_window_start': 'timeWindowStart'
    }

    def __init__(self, description=None, display_name=None, group_type=None, permissions=None, time_window_end=None, time_window_start=None):  # noqa: E501
        """GroupsIdBody - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._display_name = None
        self._group_type = None
        self._permissions = None
        self._time_window_end = None
        self._time_window_start = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if group_type is not None:
            self.group_type = group_type
        if permissions is not None:
            self.permissions = permissions
        if time_window_end is not None:
            self.time_window_end = time_window_end
        if time_window_start is not None:
            self.time_window_start = time_window_start

    @property
    def description(self):
        """Gets the description of this GroupsIdBody.  # noqa: E501


        :return: The description of this GroupsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GroupsIdBody.


        :param description: The description of this GroupsIdBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GroupsIdBody.  # noqa: E501


        :return: The display_name of this GroupsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GroupsIdBody.


        :param display_name: The display_name of this GroupsIdBody.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def group_type(self):
        """Gets the group_type of this GroupsIdBody.  # noqa: E501


        :return: The group_type of this GroupsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """Sets the group_type of this GroupsIdBody.


        :param group_type: The group_type of this GroupsIdBody.  # noqa: E501
        :type: str
        """

        self._group_type = group_type

    @property
    def permissions(self):
        """Gets the permissions of this GroupsIdBody.  # noqa: E501


        :return: The permissions of this GroupsIdBody.  # noqa: E501
        :rtype: V1groupsPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this GroupsIdBody.


        :param permissions: The permissions of this GroupsIdBody.  # noqa: E501
        :type: V1groupsPermissions
        """

        self._permissions = permissions

    @property
    def time_window_end(self):
        """Gets the time_window_end of this GroupsIdBody.  # noqa: E501


        :return: The time_window_end of this GroupsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._time_window_end

    @time_window_end.setter
    def time_window_end(self, time_window_end):
        """Sets the time_window_end of this GroupsIdBody.


        :param time_window_end: The time_window_end of this GroupsIdBody.  # noqa: E501
        :type: str
        """

        self._time_window_end = time_window_end

    @property
    def time_window_start(self):
        """Gets the time_window_start of this GroupsIdBody.  # noqa: E501


        :return: The time_window_start of this GroupsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._time_window_start

    @time_window_start.setter
    def time_window_start(self, time_window_start):
        """Sets the time_window_start of this GroupsIdBody.


        :param time_window_start: The time_window_start of this GroupsIdBody.  # noqa: E501
        :type: str
        """

        self._time_window_start = time_window_start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupsIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupsIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
