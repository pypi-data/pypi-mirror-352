# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResetipsecsessionDeviceIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all3_rd_party': 'str',
        'all_controllers': 'str',
        'all_e2_e': 'str',
        'vrf': 'list[str]'
    }

    attribute_map = {
        'all3_rd_party': 'all3RdParty',
        'all_controllers': 'allControllers',
        'all_e2_e': 'allE2E',
        'vrf': 'vrf'
    }

    def __init__(self, all3_rd_party=None, all_controllers=None, all_e2_e=None, vrf=None):  # noqa: E501
        """ResetipsecsessionDeviceIdBody - a model defined in Swagger"""  # noqa: E501
        self._all3_rd_party = None
        self._all_controllers = None
        self._all_e2_e = None
        self._vrf = None
        self.discriminator = None
        if all3_rd_party is not None:
            self.all3_rd_party = all3_rd_party
        if all_controllers is not None:
            self.all_controllers = all_controllers
        if all_e2_e is not None:
            self.all_e2_e = all_e2_e
        if vrf is not None:
            self.vrf = vrf

    @property
    def all3_rd_party(self):
        """Gets the all3_rd_party of this ResetipsecsessionDeviceIdBody.  # noqa: E501


        :return: The all3_rd_party of this ResetipsecsessionDeviceIdBody.  # noqa: E501
        :rtype: str
        """
        return self._all3_rd_party

    @all3_rd_party.setter
    def all3_rd_party(self, all3_rd_party):
        """Sets the all3_rd_party of this ResetipsecsessionDeviceIdBody.


        :param all3_rd_party: The all3_rd_party of this ResetipsecsessionDeviceIdBody.  # noqa: E501
        :type: str
        """

        self._all3_rd_party = all3_rd_party

    @property
    def all_controllers(self):
        """Gets the all_controllers of this ResetipsecsessionDeviceIdBody.  # noqa: E501


        :return: The all_controllers of this ResetipsecsessionDeviceIdBody.  # noqa: E501
        :rtype: str
        """
        return self._all_controllers

    @all_controllers.setter
    def all_controllers(self, all_controllers):
        """Sets the all_controllers of this ResetipsecsessionDeviceIdBody.


        :param all_controllers: The all_controllers of this ResetipsecsessionDeviceIdBody.  # noqa: E501
        :type: str
        """

        self._all_controllers = all_controllers

    @property
    def all_e2_e(self):
        """Gets the all_e2_e of this ResetipsecsessionDeviceIdBody.  # noqa: E501


        :return: The all_e2_e of this ResetipsecsessionDeviceIdBody.  # noqa: E501
        :rtype: str
        """
        return self._all_e2_e

    @all_e2_e.setter
    def all_e2_e(self, all_e2_e):
        """Sets the all_e2_e of this ResetipsecsessionDeviceIdBody.


        :param all_e2_e: The all_e2_e of this ResetipsecsessionDeviceIdBody.  # noqa: E501
        :type: str
        """

        self._all_e2_e = all_e2_e

    @property
    def vrf(self):
        """Gets the vrf of this ResetipsecsessionDeviceIdBody.  # noqa: E501


        :return: The vrf of this ResetipsecsessionDeviceIdBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._vrf

    @vrf.setter
    def vrf(self, vrf):
        """Sets the vrf of this ResetipsecsessionDeviceIdBody.


        :param vrf: The vrf of this ResetipsecsessionDeviceIdBody.  # noqa: E501
        :type: list[str]
        """

        self._vrf = vrf

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResetipsecsessionDeviceIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResetipsecsessionDeviceIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
