# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200222Issues(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert_id': 'str',
        'allow_listed': 'str',
        'component': 'str',
        'end_time': 'V1devicesbringuptokenValidTillTs',
        'entity': 'str',
        'issue': 'str',
        'mute_listed': 'str',
        'notification_created': 'str',
        'plane': 'str',
        'reason': 'str',
        'severity': 'str',
        'start_time': 'V1devicesbringuptokenValidTillTs',
        'status': 'str'
    }

    attribute_map = {
        'alert_id': 'alertId',
        'allow_listed': 'allowListed',
        'component': 'component',
        'end_time': 'endTime',
        'entity': 'entity',
        'issue': 'issue',
        'mute_listed': 'muteListed',
        'notification_created': 'notificationCreated',
        'plane': 'plane',
        'reason': 'reason',
        'severity': 'severity',
        'start_time': 'startTime',
        'status': 'status'
    }

    def __init__(self, alert_id=None, allow_listed=None, component=None, end_time=None, entity=None, issue=None, mute_listed=None, notification_created=None, plane=None, reason=None, severity=None, start_time=None, status=None):  # noqa: E501
        """InlineResponse200222Issues - a model defined in Swagger"""  # noqa: E501
        self._alert_id = None
        self._allow_listed = None
        self._component = None
        self._end_time = None
        self._entity = None
        self._issue = None
        self._mute_listed = None
        self._notification_created = None
        self._plane = None
        self._reason = None
        self._severity = None
        self._start_time = None
        self._status = None
        self.discriminator = None
        if alert_id is not None:
            self.alert_id = alert_id
        if allow_listed is not None:
            self.allow_listed = allow_listed
        if component is not None:
            self.component = component
        if end_time is not None:
            self.end_time = end_time
        if entity is not None:
            self.entity = entity
        if issue is not None:
            self.issue = issue
        if mute_listed is not None:
            self.mute_listed = mute_listed
        if notification_created is not None:
            self.notification_created = notification_created
        if plane is not None:
            self.plane = plane
        if reason is not None:
            self.reason = reason
        if severity is not None:
            self.severity = severity
        if start_time is not None:
            self.start_time = start_time
        if status is not None:
            self.status = status

    @property
    def alert_id(self):
        """Gets the alert_id of this InlineResponse200222Issues.  # noqa: E501


        :return: The alert_id of this InlineResponse200222Issues.  # noqa: E501
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this InlineResponse200222Issues.


        :param alert_id: The alert_id of this InlineResponse200222Issues.  # noqa: E501
        :type: str
        """

        self._alert_id = alert_id

    @property
    def allow_listed(self):
        """Gets the allow_listed of this InlineResponse200222Issues.  # noqa: E501


        :return: The allow_listed of this InlineResponse200222Issues.  # noqa: E501
        :rtype: str
        """
        return self._allow_listed

    @allow_listed.setter
    def allow_listed(self, allow_listed):
        """Sets the allow_listed of this InlineResponse200222Issues.


        :param allow_listed: The allow_listed of this InlineResponse200222Issues.  # noqa: E501
        :type: str
        """

        self._allow_listed = allow_listed

    @property
    def component(self):
        """Gets the component of this InlineResponse200222Issues.  # noqa: E501


        :return: The component of this InlineResponse200222Issues.  # noqa: E501
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this InlineResponse200222Issues.


        :param component: The component of this InlineResponse200222Issues.  # noqa: E501
        :type: str
        """

        self._component = component

    @property
    def end_time(self):
        """Gets the end_time of this InlineResponse200222Issues.  # noqa: E501


        :return: The end_time of this InlineResponse200222Issues.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this InlineResponse200222Issues.


        :param end_time: The end_time of this InlineResponse200222Issues.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._end_time = end_time

    @property
    def entity(self):
        """Gets the entity of this InlineResponse200222Issues.  # noqa: E501


        :return: The entity of this InlineResponse200222Issues.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this InlineResponse200222Issues.


        :param entity: The entity of this InlineResponse200222Issues.  # noqa: E501
        :type: str
        """

        self._entity = entity

    @property
    def issue(self):
        """Gets the issue of this InlineResponse200222Issues.  # noqa: E501


        :return: The issue of this InlineResponse200222Issues.  # noqa: E501
        :rtype: str
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this InlineResponse200222Issues.


        :param issue: The issue of this InlineResponse200222Issues.  # noqa: E501
        :type: str
        """

        self._issue = issue

    @property
    def mute_listed(self):
        """Gets the mute_listed of this InlineResponse200222Issues.  # noqa: E501


        :return: The mute_listed of this InlineResponse200222Issues.  # noqa: E501
        :rtype: str
        """
        return self._mute_listed

    @mute_listed.setter
    def mute_listed(self, mute_listed):
        """Sets the mute_listed of this InlineResponse200222Issues.


        :param mute_listed: The mute_listed of this InlineResponse200222Issues.  # noqa: E501
        :type: str
        """

        self._mute_listed = mute_listed

    @property
    def notification_created(self):
        """Gets the notification_created of this InlineResponse200222Issues.  # noqa: E501


        :return: The notification_created of this InlineResponse200222Issues.  # noqa: E501
        :rtype: str
        """
        return self._notification_created

    @notification_created.setter
    def notification_created(self, notification_created):
        """Sets the notification_created of this InlineResponse200222Issues.


        :param notification_created: The notification_created of this InlineResponse200222Issues.  # noqa: E501
        :type: str
        """

        self._notification_created = notification_created

    @property
    def plane(self):
        """Gets the plane of this InlineResponse200222Issues.  # noqa: E501


        :return: The plane of this InlineResponse200222Issues.  # noqa: E501
        :rtype: str
        """
        return self._plane

    @plane.setter
    def plane(self, plane):
        """Sets the plane of this InlineResponse200222Issues.


        :param plane: The plane of this InlineResponse200222Issues.  # noqa: E501
        :type: str
        """

        self._plane = plane

    @property
    def reason(self):
        """Gets the reason of this InlineResponse200222Issues.  # noqa: E501


        :return: The reason of this InlineResponse200222Issues.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this InlineResponse200222Issues.


        :param reason: The reason of this InlineResponse200222Issues.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def severity(self):
        """Gets the severity of this InlineResponse200222Issues.  # noqa: E501


        :return: The severity of this InlineResponse200222Issues.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this InlineResponse200222Issues.


        :param severity: The severity of this InlineResponse200222Issues.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def start_time(self):
        """Gets the start_time of this InlineResponse200222Issues.  # noqa: E501


        :return: The start_time of this InlineResponse200222Issues.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InlineResponse200222Issues.


        :param start_time: The start_time of this InlineResponse200222Issues.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this InlineResponse200222Issues.  # noqa: E501


        :return: The status of this InlineResponse200222Issues.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200222Issues.


        :param status: The status of this InlineResponse200222Issues.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200222Issues, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200222Issues):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
