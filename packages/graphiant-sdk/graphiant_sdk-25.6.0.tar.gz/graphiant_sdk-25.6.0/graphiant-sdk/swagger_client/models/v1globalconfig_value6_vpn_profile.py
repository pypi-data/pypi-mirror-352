# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1globalconfigValue6VpnProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'anti_replay_window_size': 'str',
        'dpd_interval': 'str',
        'esn': 'str',
        'id': 'str',
        'ike_dh_group': 'str',
        'ike_encryption_alg': 'str',
        'ike_integrity': 'str',
        'ipsec_encryption_alg': 'str',
        'ipsec_integrity': 'str',
        'name': 'str',
        'perfect_forward_secrecy': 'str',
        'reauth_interval': 'str',
        'rekey_interval': 'str'
    }

    attribute_map = {
        'anti_replay_window_size': 'antiReplayWindowSize',
        'dpd_interval': 'dpdInterval',
        'esn': 'esn',
        'id': 'id',
        'ike_dh_group': 'ikeDhGroup',
        'ike_encryption_alg': 'ikeEncryptionAlg',
        'ike_integrity': 'ikeIntegrity',
        'ipsec_encryption_alg': 'ipsecEncryptionAlg',
        'ipsec_integrity': 'ipsecIntegrity',
        'name': 'name',
        'perfect_forward_secrecy': 'perfectForwardSecrecy',
        'reauth_interval': 'reauthInterval',
        'rekey_interval': 'rekeyInterval'
    }

    def __init__(self, anti_replay_window_size=None, dpd_interval=None, esn=None, id=None, ike_dh_group=None, ike_encryption_alg=None, ike_integrity=None, ipsec_encryption_alg=None, ipsec_integrity=None, name=None, perfect_forward_secrecy=None, reauth_interval=None, rekey_interval=None):  # noqa: E501
        """V1globalconfigValue6VpnProfile - a model defined in Swagger"""  # noqa: E501
        self._anti_replay_window_size = None
        self._dpd_interval = None
        self._esn = None
        self._id = None
        self._ike_dh_group = None
        self._ike_encryption_alg = None
        self._ike_integrity = None
        self._ipsec_encryption_alg = None
        self._ipsec_integrity = None
        self._name = None
        self._perfect_forward_secrecy = None
        self._reauth_interval = None
        self._rekey_interval = None
        self.discriminator = None
        if anti_replay_window_size is not None:
            self.anti_replay_window_size = anti_replay_window_size
        if dpd_interval is not None:
            self.dpd_interval = dpd_interval
        if esn is not None:
            self.esn = esn
        if id is not None:
            self.id = id
        if ike_dh_group is not None:
            self.ike_dh_group = ike_dh_group
        if ike_encryption_alg is not None:
            self.ike_encryption_alg = ike_encryption_alg
        if ike_integrity is not None:
            self.ike_integrity = ike_integrity
        if ipsec_encryption_alg is not None:
            self.ipsec_encryption_alg = ipsec_encryption_alg
        if ipsec_integrity is not None:
            self.ipsec_integrity = ipsec_integrity
        if name is not None:
            self.name = name
        if perfect_forward_secrecy is not None:
            self.perfect_forward_secrecy = perfect_forward_secrecy
        if reauth_interval is not None:
            self.reauth_interval = reauth_interval
        if rekey_interval is not None:
            self.rekey_interval = rekey_interval

    @property
    def anti_replay_window_size(self):
        """Gets the anti_replay_window_size of this V1globalconfigValue6VpnProfile.  # noqa: E501


        :return: The anti_replay_window_size of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :rtype: str
        """
        return self._anti_replay_window_size

    @anti_replay_window_size.setter
    def anti_replay_window_size(self, anti_replay_window_size):
        """Sets the anti_replay_window_size of this V1globalconfigValue6VpnProfile.


        :param anti_replay_window_size: The anti_replay_window_size of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :type: str
        """

        self._anti_replay_window_size = anti_replay_window_size

    @property
    def dpd_interval(self):
        """Gets the dpd_interval of this V1globalconfigValue6VpnProfile.  # noqa: E501


        :return: The dpd_interval of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :rtype: str
        """
        return self._dpd_interval

    @dpd_interval.setter
    def dpd_interval(self, dpd_interval):
        """Sets the dpd_interval of this V1globalconfigValue6VpnProfile.


        :param dpd_interval: The dpd_interval of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :type: str
        """

        self._dpd_interval = dpd_interval

    @property
    def esn(self):
        """Gets the esn of this V1globalconfigValue6VpnProfile.  # noqa: E501


        :return: The esn of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :rtype: str
        """
        return self._esn

    @esn.setter
    def esn(self, esn):
        """Sets the esn of this V1globalconfigValue6VpnProfile.


        :param esn: The esn of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :type: str
        """

        self._esn = esn

    @property
    def id(self):
        """Gets the id of this V1globalconfigValue6VpnProfile.  # noqa: E501


        :return: The id of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1globalconfigValue6VpnProfile.


        :param id: The id of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ike_dh_group(self):
        """Gets the ike_dh_group of this V1globalconfigValue6VpnProfile.  # noqa: E501


        :return: The ike_dh_group of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :rtype: str
        """
        return self._ike_dh_group

    @ike_dh_group.setter
    def ike_dh_group(self, ike_dh_group):
        """Sets the ike_dh_group of this V1globalconfigValue6VpnProfile.


        :param ike_dh_group: The ike_dh_group of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :type: str
        """

        self._ike_dh_group = ike_dh_group

    @property
    def ike_encryption_alg(self):
        """Gets the ike_encryption_alg of this V1globalconfigValue6VpnProfile.  # noqa: E501


        :return: The ike_encryption_alg of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :rtype: str
        """
        return self._ike_encryption_alg

    @ike_encryption_alg.setter
    def ike_encryption_alg(self, ike_encryption_alg):
        """Sets the ike_encryption_alg of this V1globalconfigValue6VpnProfile.


        :param ike_encryption_alg: The ike_encryption_alg of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :type: str
        """

        self._ike_encryption_alg = ike_encryption_alg

    @property
    def ike_integrity(self):
        """Gets the ike_integrity of this V1globalconfigValue6VpnProfile.  # noqa: E501


        :return: The ike_integrity of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :rtype: str
        """
        return self._ike_integrity

    @ike_integrity.setter
    def ike_integrity(self, ike_integrity):
        """Sets the ike_integrity of this V1globalconfigValue6VpnProfile.


        :param ike_integrity: The ike_integrity of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :type: str
        """

        self._ike_integrity = ike_integrity

    @property
    def ipsec_encryption_alg(self):
        """Gets the ipsec_encryption_alg of this V1globalconfigValue6VpnProfile.  # noqa: E501


        :return: The ipsec_encryption_alg of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_encryption_alg

    @ipsec_encryption_alg.setter
    def ipsec_encryption_alg(self, ipsec_encryption_alg):
        """Sets the ipsec_encryption_alg of this V1globalconfigValue6VpnProfile.


        :param ipsec_encryption_alg: The ipsec_encryption_alg of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :type: str
        """

        self._ipsec_encryption_alg = ipsec_encryption_alg

    @property
    def ipsec_integrity(self):
        """Gets the ipsec_integrity of this V1globalconfigValue6VpnProfile.  # noqa: E501


        :return: The ipsec_integrity of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_integrity

    @ipsec_integrity.setter
    def ipsec_integrity(self, ipsec_integrity):
        """Sets the ipsec_integrity of this V1globalconfigValue6VpnProfile.


        :param ipsec_integrity: The ipsec_integrity of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :type: str
        """

        self._ipsec_integrity = ipsec_integrity

    @property
    def name(self):
        """Gets the name of this V1globalconfigValue6VpnProfile.  # noqa: E501


        :return: The name of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1globalconfigValue6VpnProfile.


        :param name: The name of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def perfect_forward_secrecy(self):
        """Gets the perfect_forward_secrecy of this V1globalconfigValue6VpnProfile.  # noqa: E501


        :return: The perfect_forward_secrecy of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :rtype: str
        """
        return self._perfect_forward_secrecy

    @perfect_forward_secrecy.setter
    def perfect_forward_secrecy(self, perfect_forward_secrecy):
        """Sets the perfect_forward_secrecy of this V1globalconfigValue6VpnProfile.


        :param perfect_forward_secrecy: The perfect_forward_secrecy of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :type: str
        """

        self._perfect_forward_secrecy = perfect_forward_secrecy

    @property
    def reauth_interval(self):
        """Gets the reauth_interval of this V1globalconfigValue6VpnProfile.  # noqa: E501


        :return: The reauth_interval of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :rtype: str
        """
        return self._reauth_interval

    @reauth_interval.setter
    def reauth_interval(self, reauth_interval):
        """Sets the reauth_interval of this V1globalconfigValue6VpnProfile.


        :param reauth_interval: The reauth_interval of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :type: str
        """

        self._reauth_interval = reauth_interval

    @property
    def rekey_interval(self):
        """Gets the rekey_interval of this V1globalconfigValue6VpnProfile.  # noqa: E501


        :return: The rekey_interval of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :rtype: str
        """
        return self._rekey_interval

    @rekey_interval.setter
    def rekey_interval(self, rekey_interval):
        """Sets the rekey_interval of this V1globalconfigValue6VpnProfile.


        :param rekey_interval: The rekey_interval of this V1globalconfigValue6VpnProfile.  # noqa: E501
        :type: str
        """

        self._rekey_interval = rekey_interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1globalconfigValue6VpnProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1globalconfigValue6VpnProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
