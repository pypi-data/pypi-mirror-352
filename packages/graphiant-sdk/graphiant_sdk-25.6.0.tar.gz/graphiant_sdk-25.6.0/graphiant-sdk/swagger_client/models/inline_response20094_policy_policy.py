# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20094PolicyPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nat_pools': 'list[str]',
        'profiles': 'list[V1extranetsb2bPolicyProfiles]',
        'service_lan_segment': 'str',
        'service_prefixes': 'list[str]',
        'sites': 'list[InlineResponse20094PolicyPolicySites]',
        'sla': 'V1extranetsb2bPolicySla',
        'type': 'str'
    }

    attribute_map = {
        'nat_pools': 'natPools',
        'profiles': 'profiles',
        'service_lan_segment': 'serviceLanSegment',
        'service_prefixes': 'servicePrefixes',
        'sites': 'sites',
        'sla': 'sla',
        'type': 'type'
    }

    def __init__(self, nat_pools=None, profiles=None, service_lan_segment=None, service_prefixes=None, sites=None, sla=None, type=None):  # noqa: E501
        """InlineResponse20094PolicyPolicy - a model defined in Swagger"""  # noqa: E501
        self._nat_pools = None
        self._profiles = None
        self._service_lan_segment = None
        self._service_prefixes = None
        self._sites = None
        self._sla = None
        self._type = None
        self.discriminator = None
        if nat_pools is not None:
            self.nat_pools = nat_pools
        if profiles is not None:
            self.profiles = profiles
        if service_lan_segment is not None:
            self.service_lan_segment = service_lan_segment
        if service_prefixes is not None:
            self.service_prefixes = service_prefixes
        if sites is not None:
            self.sites = sites
        if sla is not None:
            self.sla = sla
        if type is not None:
            self.type = type

    @property
    def nat_pools(self):
        """Gets the nat_pools of this InlineResponse20094PolicyPolicy.  # noqa: E501


        :return: The nat_pools of this InlineResponse20094PolicyPolicy.  # noqa: E501
        :rtype: list[str]
        """
        return self._nat_pools

    @nat_pools.setter
    def nat_pools(self, nat_pools):
        """Sets the nat_pools of this InlineResponse20094PolicyPolicy.


        :param nat_pools: The nat_pools of this InlineResponse20094PolicyPolicy.  # noqa: E501
        :type: list[str]
        """

        self._nat_pools = nat_pools

    @property
    def profiles(self):
        """Gets the profiles of this InlineResponse20094PolicyPolicy.  # noqa: E501


        :return: The profiles of this InlineResponse20094PolicyPolicy.  # noqa: E501
        :rtype: list[V1extranetsb2bPolicyProfiles]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this InlineResponse20094PolicyPolicy.


        :param profiles: The profiles of this InlineResponse20094PolicyPolicy.  # noqa: E501
        :type: list[V1extranetsb2bPolicyProfiles]
        """

        self._profiles = profiles

    @property
    def service_lan_segment(self):
        """Gets the service_lan_segment of this InlineResponse20094PolicyPolicy.  # noqa: E501


        :return: The service_lan_segment of this InlineResponse20094PolicyPolicy.  # noqa: E501
        :rtype: str
        """
        return self._service_lan_segment

    @service_lan_segment.setter
    def service_lan_segment(self, service_lan_segment):
        """Sets the service_lan_segment of this InlineResponse20094PolicyPolicy.


        :param service_lan_segment: The service_lan_segment of this InlineResponse20094PolicyPolicy.  # noqa: E501
        :type: str
        """

        self._service_lan_segment = service_lan_segment

    @property
    def service_prefixes(self):
        """Gets the service_prefixes of this InlineResponse20094PolicyPolicy.  # noqa: E501


        :return: The service_prefixes of this InlineResponse20094PolicyPolicy.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_prefixes

    @service_prefixes.setter
    def service_prefixes(self, service_prefixes):
        """Sets the service_prefixes of this InlineResponse20094PolicyPolicy.


        :param service_prefixes: The service_prefixes of this InlineResponse20094PolicyPolicy.  # noqa: E501
        :type: list[str]
        """

        self._service_prefixes = service_prefixes

    @property
    def sites(self):
        """Gets the sites of this InlineResponse20094PolicyPolicy.  # noqa: E501


        :return: The sites of this InlineResponse20094PolicyPolicy.  # noqa: E501
        :rtype: list[InlineResponse20094PolicyPolicySites]
        """
        return self._sites

    @sites.setter
    def sites(self, sites):
        """Sets the sites of this InlineResponse20094PolicyPolicy.


        :param sites: The sites of this InlineResponse20094PolicyPolicy.  # noqa: E501
        :type: list[InlineResponse20094PolicyPolicySites]
        """

        self._sites = sites

    @property
    def sla(self):
        """Gets the sla of this InlineResponse20094PolicyPolicy.  # noqa: E501


        :return: The sla of this InlineResponse20094PolicyPolicy.  # noqa: E501
        :rtype: V1extranetsb2bPolicySla
        """
        return self._sla

    @sla.setter
    def sla(self, sla):
        """Sets the sla of this InlineResponse20094PolicyPolicy.


        :param sla: The sla of this InlineResponse20094PolicyPolicy.  # noqa: E501
        :type: V1extranetsb2bPolicySla
        """

        self._sla = sla

    @property
    def type(self):
        """Gets the type of this InlineResponse20094PolicyPolicy.  # noqa: E501


        :return: The type of this InlineResponse20094PolicyPolicy.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20094PolicyPolicy.


        :param type: The type of this InlineResponse20094PolicyPolicy.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20094PolicyPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20094PolicyPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
