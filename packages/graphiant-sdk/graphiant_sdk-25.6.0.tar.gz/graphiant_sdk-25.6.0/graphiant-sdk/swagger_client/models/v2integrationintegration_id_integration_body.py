# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2integrationintegrationIdIntegrationBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'details': 'V2integrationIntegrationBodyDetails',
        'enterprise': 'str',
        'integration_type': 'str',
        'is_active': 'str',
        'nick_name': 'str',
        'updated_by': 'str'
    }

    attribute_map = {
        'details': 'details',
        'enterprise': 'enterprise',
        'integration_type': 'integrationType',
        'is_active': 'isActive',
        'nick_name': 'nickName',
        'updated_by': 'updatedBy'
    }

    def __init__(self, details=None, enterprise=None, integration_type=None, is_active=None, nick_name=None, updated_by=None):  # noqa: E501
        """V2integrationintegrationIdIntegrationBody - a model defined in Swagger"""  # noqa: E501
        self._details = None
        self._enterprise = None
        self._integration_type = None
        self._is_active = None
        self._nick_name = None
        self._updated_by = None
        self.discriminator = None
        if details is not None:
            self.details = details
        if enterprise is not None:
            self.enterprise = enterprise
        if integration_type is not None:
            self.integration_type = integration_type
        if is_active is not None:
            self.is_active = is_active
        if nick_name is not None:
            self.nick_name = nick_name
        if updated_by is not None:
            self.updated_by = updated_by

    @property
    def details(self):
        """Gets the details of this V2integrationintegrationIdIntegrationBody.  # noqa: E501


        :return: The details of this V2integrationintegrationIdIntegrationBody.  # noqa: E501
        :rtype: V2integrationIntegrationBodyDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this V2integrationintegrationIdIntegrationBody.


        :param details: The details of this V2integrationintegrationIdIntegrationBody.  # noqa: E501
        :type: V2integrationIntegrationBodyDetails
        """

        self._details = details

    @property
    def enterprise(self):
        """Gets the enterprise of this V2integrationintegrationIdIntegrationBody.  # noqa: E501


        :return: The enterprise of this V2integrationintegrationIdIntegrationBody.  # noqa: E501
        :rtype: str
        """
        return self._enterprise

    @enterprise.setter
    def enterprise(self, enterprise):
        """Sets the enterprise of this V2integrationintegrationIdIntegrationBody.


        :param enterprise: The enterprise of this V2integrationintegrationIdIntegrationBody.  # noqa: E501
        :type: str
        """

        self._enterprise = enterprise

    @property
    def integration_type(self):
        """Gets the integration_type of this V2integrationintegrationIdIntegrationBody.  # noqa: E501


        :return: The integration_type of this V2integrationintegrationIdIntegrationBody.  # noqa: E501
        :rtype: str
        """
        return self._integration_type

    @integration_type.setter
    def integration_type(self, integration_type):
        """Sets the integration_type of this V2integrationintegrationIdIntegrationBody.


        :param integration_type: The integration_type of this V2integrationintegrationIdIntegrationBody.  # noqa: E501
        :type: str
        """

        self._integration_type = integration_type

    @property
    def is_active(self):
        """Gets the is_active of this V2integrationintegrationIdIntegrationBody.  # noqa: E501


        :return: The is_active of this V2integrationintegrationIdIntegrationBody.  # noqa: E501
        :rtype: str
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this V2integrationintegrationIdIntegrationBody.


        :param is_active: The is_active of this V2integrationintegrationIdIntegrationBody.  # noqa: E501
        :type: str
        """

        self._is_active = is_active

    @property
    def nick_name(self):
        """Gets the nick_name of this V2integrationintegrationIdIntegrationBody.  # noqa: E501


        :return: The nick_name of this V2integrationintegrationIdIntegrationBody.  # noqa: E501
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """Sets the nick_name of this V2integrationintegrationIdIntegrationBody.


        :param nick_name: The nick_name of this V2integrationintegrationIdIntegrationBody.  # noqa: E501
        :type: str
        """

        self._nick_name = nick_name

    @property
    def updated_by(self):
        """Gets the updated_by of this V2integrationintegrationIdIntegrationBody.  # noqa: E501


        :return: The updated_by of this V2integrationintegrationIdIntegrationBody.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this V2integrationintegrationIdIntegrationBody.


        :param updated_by: The updated_by of this V2integrationintegrationIdIntegrationBody.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2integrationintegrationIdIntegrationBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2integrationintegrationIdIntegrationBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
