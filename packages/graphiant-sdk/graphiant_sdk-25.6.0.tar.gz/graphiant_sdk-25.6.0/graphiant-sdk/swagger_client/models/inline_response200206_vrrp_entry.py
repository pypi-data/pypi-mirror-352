# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200206VrrpEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_family': 'str',
        'advertisement_rcvd': 'str',
        'advertisement_sent': 'str',
        'effective_priority': 'str',
        'group_id': 'str',
        'is_owner': 'str',
        'master_transition': 'str',
        'new_master_reason': 'str',
        'priority_zero_pkts_rcvd': 'str',
        'priority_zero_pkts_sent': 'str',
        'state': 'str'
    }

    attribute_map = {
        'address_family': 'addressFamily',
        'advertisement_rcvd': 'advertisementRcvd',
        'advertisement_sent': 'advertisementSent',
        'effective_priority': 'effectivePriority',
        'group_id': 'groupId',
        'is_owner': 'isOwner',
        'master_transition': 'masterTransition',
        'new_master_reason': 'newMasterReason',
        'priority_zero_pkts_rcvd': 'priorityZeroPktsRcvd',
        'priority_zero_pkts_sent': 'priorityZeroPktsSent',
        'state': 'state'
    }

    def __init__(self, address_family=None, advertisement_rcvd=None, advertisement_sent=None, effective_priority=None, group_id=None, is_owner=None, master_transition=None, new_master_reason=None, priority_zero_pkts_rcvd=None, priority_zero_pkts_sent=None, state=None):  # noqa: E501
        """InlineResponse200206VrrpEntry - a model defined in Swagger"""  # noqa: E501
        self._address_family = None
        self._advertisement_rcvd = None
        self._advertisement_sent = None
        self._effective_priority = None
        self._group_id = None
        self._is_owner = None
        self._master_transition = None
        self._new_master_reason = None
        self._priority_zero_pkts_rcvd = None
        self._priority_zero_pkts_sent = None
        self._state = None
        self.discriminator = None
        if address_family is not None:
            self.address_family = address_family
        if advertisement_rcvd is not None:
            self.advertisement_rcvd = advertisement_rcvd
        if advertisement_sent is not None:
            self.advertisement_sent = advertisement_sent
        if effective_priority is not None:
            self.effective_priority = effective_priority
        if group_id is not None:
            self.group_id = group_id
        if is_owner is not None:
            self.is_owner = is_owner
        if master_transition is not None:
            self.master_transition = master_transition
        if new_master_reason is not None:
            self.new_master_reason = new_master_reason
        if priority_zero_pkts_rcvd is not None:
            self.priority_zero_pkts_rcvd = priority_zero_pkts_rcvd
        if priority_zero_pkts_sent is not None:
            self.priority_zero_pkts_sent = priority_zero_pkts_sent
        if state is not None:
            self.state = state

    @property
    def address_family(self):
        """Gets the address_family of this InlineResponse200206VrrpEntry.  # noqa: E501


        :return: The address_family of this InlineResponse200206VrrpEntry.  # noqa: E501
        :rtype: str
        """
        return self._address_family

    @address_family.setter
    def address_family(self, address_family):
        """Sets the address_family of this InlineResponse200206VrrpEntry.


        :param address_family: The address_family of this InlineResponse200206VrrpEntry.  # noqa: E501
        :type: str
        """

        self._address_family = address_family

    @property
    def advertisement_rcvd(self):
        """Gets the advertisement_rcvd of this InlineResponse200206VrrpEntry.  # noqa: E501


        :return: The advertisement_rcvd of this InlineResponse200206VrrpEntry.  # noqa: E501
        :rtype: str
        """
        return self._advertisement_rcvd

    @advertisement_rcvd.setter
    def advertisement_rcvd(self, advertisement_rcvd):
        """Sets the advertisement_rcvd of this InlineResponse200206VrrpEntry.


        :param advertisement_rcvd: The advertisement_rcvd of this InlineResponse200206VrrpEntry.  # noqa: E501
        :type: str
        """

        self._advertisement_rcvd = advertisement_rcvd

    @property
    def advertisement_sent(self):
        """Gets the advertisement_sent of this InlineResponse200206VrrpEntry.  # noqa: E501


        :return: The advertisement_sent of this InlineResponse200206VrrpEntry.  # noqa: E501
        :rtype: str
        """
        return self._advertisement_sent

    @advertisement_sent.setter
    def advertisement_sent(self, advertisement_sent):
        """Sets the advertisement_sent of this InlineResponse200206VrrpEntry.


        :param advertisement_sent: The advertisement_sent of this InlineResponse200206VrrpEntry.  # noqa: E501
        :type: str
        """

        self._advertisement_sent = advertisement_sent

    @property
    def effective_priority(self):
        """Gets the effective_priority of this InlineResponse200206VrrpEntry.  # noqa: E501


        :return: The effective_priority of this InlineResponse200206VrrpEntry.  # noqa: E501
        :rtype: str
        """
        return self._effective_priority

    @effective_priority.setter
    def effective_priority(self, effective_priority):
        """Sets the effective_priority of this InlineResponse200206VrrpEntry.


        :param effective_priority: The effective_priority of this InlineResponse200206VrrpEntry.  # noqa: E501
        :type: str
        """

        self._effective_priority = effective_priority

    @property
    def group_id(self):
        """Gets the group_id of this InlineResponse200206VrrpEntry.  # noqa: E501


        :return: The group_id of this InlineResponse200206VrrpEntry.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this InlineResponse200206VrrpEntry.


        :param group_id: The group_id of this InlineResponse200206VrrpEntry.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def is_owner(self):
        """Gets the is_owner of this InlineResponse200206VrrpEntry.  # noqa: E501


        :return: The is_owner of this InlineResponse200206VrrpEntry.  # noqa: E501
        :rtype: str
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this InlineResponse200206VrrpEntry.


        :param is_owner: The is_owner of this InlineResponse200206VrrpEntry.  # noqa: E501
        :type: str
        """

        self._is_owner = is_owner

    @property
    def master_transition(self):
        """Gets the master_transition of this InlineResponse200206VrrpEntry.  # noqa: E501


        :return: The master_transition of this InlineResponse200206VrrpEntry.  # noqa: E501
        :rtype: str
        """
        return self._master_transition

    @master_transition.setter
    def master_transition(self, master_transition):
        """Sets the master_transition of this InlineResponse200206VrrpEntry.


        :param master_transition: The master_transition of this InlineResponse200206VrrpEntry.  # noqa: E501
        :type: str
        """

        self._master_transition = master_transition

    @property
    def new_master_reason(self):
        """Gets the new_master_reason of this InlineResponse200206VrrpEntry.  # noqa: E501


        :return: The new_master_reason of this InlineResponse200206VrrpEntry.  # noqa: E501
        :rtype: str
        """
        return self._new_master_reason

    @new_master_reason.setter
    def new_master_reason(self, new_master_reason):
        """Sets the new_master_reason of this InlineResponse200206VrrpEntry.


        :param new_master_reason: The new_master_reason of this InlineResponse200206VrrpEntry.  # noqa: E501
        :type: str
        """

        self._new_master_reason = new_master_reason

    @property
    def priority_zero_pkts_rcvd(self):
        """Gets the priority_zero_pkts_rcvd of this InlineResponse200206VrrpEntry.  # noqa: E501


        :return: The priority_zero_pkts_rcvd of this InlineResponse200206VrrpEntry.  # noqa: E501
        :rtype: str
        """
        return self._priority_zero_pkts_rcvd

    @priority_zero_pkts_rcvd.setter
    def priority_zero_pkts_rcvd(self, priority_zero_pkts_rcvd):
        """Sets the priority_zero_pkts_rcvd of this InlineResponse200206VrrpEntry.


        :param priority_zero_pkts_rcvd: The priority_zero_pkts_rcvd of this InlineResponse200206VrrpEntry.  # noqa: E501
        :type: str
        """

        self._priority_zero_pkts_rcvd = priority_zero_pkts_rcvd

    @property
    def priority_zero_pkts_sent(self):
        """Gets the priority_zero_pkts_sent of this InlineResponse200206VrrpEntry.  # noqa: E501


        :return: The priority_zero_pkts_sent of this InlineResponse200206VrrpEntry.  # noqa: E501
        :rtype: str
        """
        return self._priority_zero_pkts_sent

    @priority_zero_pkts_sent.setter
    def priority_zero_pkts_sent(self, priority_zero_pkts_sent):
        """Sets the priority_zero_pkts_sent of this InlineResponse200206VrrpEntry.


        :param priority_zero_pkts_sent: The priority_zero_pkts_sent of this InlineResponse200206VrrpEntry.  # noqa: E501
        :type: str
        """

        self._priority_zero_pkts_sent = priority_zero_pkts_sent

    @property
    def state(self):
        """Gets the state of this InlineResponse200206VrrpEntry.  # noqa: E501


        :return: The state of this InlineResponse200206VrrpEntry.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse200206VrrpEntry.


        :param state: The state of this InlineResponse200206VrrpEntry.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200206VrrpEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200206VrrpEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
