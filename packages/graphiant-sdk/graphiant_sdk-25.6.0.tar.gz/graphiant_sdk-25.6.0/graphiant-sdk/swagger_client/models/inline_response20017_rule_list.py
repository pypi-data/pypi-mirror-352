# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20017RuleList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alarm_clear': 'str',
        'alarm_set': 'str',
        'allow_count': 'str',
        'category': 'str',
        'enabled': 'str',
        'plane': 'str',
        'priority': 'str',
        'rule_id': 'str',
        'rule_name': 'str'
    }

    attribute_map = {
        'alarm_clear': 'alarmClear',
        'alarm_set': 'alarmSet',
        'allow_count': 'allowCount',
        'category': 'category',
        'enabled': 'enabled',
        'plane': 'plane',
        'priority': 'priority',
        'rule_id': 'ruleId',
        'rule_name': 'ruleName'
    }

    def __init__(self, alarm_clear=None, alarm_set=None, allow_count=None, category=None, enabled=None, plane=None, priority=None, rule_id=None, rule_name=None):  # noqa: E501
        """InlineResponse20017RuleList - a model defined in Swagger"""  # noqa: E501
        self._alarm_clear = None
        self._alarm_set = None
        self._allow_count = None
        self._category = None
        self._enabled = None
        self._plane = None
        self._priority = None
        self._rule_id = None
        self._rule_name = None
        self.discriminator = None
        if alarm_clear is not None:
            self.alarm_clear = alarm_clear
        if alarm_set is not None:
            self.alarm_set = alarm_set
        if allow_count is not None:
            self.allow_count = allow_count
        if category is not None:
            self.category = category
        if enabled is not None:
            self.enabled = enabled
        if plane is not None:
            self.plane = plane
        if priority is not None:
            self.priority = priority
        if rule_id is not None:
            self.rule_id = rule_id
        if rule_name is not None:
            self.rule_name = rule_name

    @property
    def alarm_clear(self):
        """Gets the alarm_clear of this InlineResponse20017RuleList.  # noqa: E501


        :return: The alarm_clear of this InlineResponse20017RuleList.  # noqa: E501
        :rtype: str
        """
        return self._alarm_clear

    @alarm_clear.setter
    def alarm_clear(self, alarm_clear):
        """Sets the alarm_clear of this InlineResponse20017RuleList.


        :param alarm_clear: The alarm_clear of this InlineResponse20017RuleList.  # noqa: E501
        :type: str
        """

        self._alarm_clear = alarm_clear

    @property
    def alarm_set(self):
        """Gets the alarm_set of this InlineResponse20017RuleList.  # noqa: E501


        :return: The alarm_set of this InlineResponse20017RuleList.  # noqa: E501
        :rtype: str
        """
        return self._alarm_set

    @alarm_set.setter
    def alarm_set(self, alarm_set):
        """Sets the alarm_set of this InlineResponse20017RuleList.


        :param alarm_set: The alarm_set of this InlineResponse20017RuleList.  # noqa: E501
        :type: str
        """

        self._alarm_set = alarm_set

    @property
    def allow_count(self):
        """Gets the allow_count of this InlineResponse20017RuleList.  # noqa: E501


        :return: The allow_count of this InlineResponse20017RuleList.  # noqa: E501
        :rtype: str
        """
        return self._allow_count

    @allow_count.setter
    def allow_count(self, allow_count):
        """Sets the allow_count of this InlineResponse20017RuleList.


        :param allow_count: The allow_count of this InlineResponse20017RuleList.  # noqa: E501
        :type: str
        """

        self._allow_count = allow_count

    @property
    def category(self):
        """Gets the category of this InlineResponse20017RuleList.  # noqa: E501


        :return: The category of this InlineResponse20017RuleList.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this InlineResponse20017RuleList.


        :param category: The category of this InlineResponse20017RuleList.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def enabled(self):
        """Gets the enabled of this InlineResponse20017RuleList.  # noqa: E501


        :return: The enabled of this InlineResponse20017RuleList.  # noqa: E501
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this InlineResponse20017RuleList.


        :param enabled: The enabled of this InlineResponse20017RuleList.  # noqa: E501
        :type: str
        """

        self._enabled = enabled

    @property
    def plane(self):
        """Gets the plane of this InlineResponse20017RuleList.  # noqa: E501


        :return: The plane of this InlineResponse20017RuleList.  # noqa: E501
        :rtype: str
        """
        return self._plane

    @plane.setter
    def plane(self, plane):
        """Sets the plane of this InlineResponse20017RuleList.


        :param plane: The plane of this InlineResponse20017RuleList.  # noqa: E501
        :type: str
        """

        self._plane = plane

    @property
    def priority(self):
        """Gets the priority of this InlineResponse20017RuleList.  # noqa: E501


        :return: The priority of this InlineResponse20017RuleList.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this InlineResponse20017RuleList.


        :param priority: The priority of this InlineResponse20017RuleList.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def rule_id(self):
        """Gets the rule_id of this InlineResponse20017RuleList.  # noqa: E501


        :return: The rule_id of this InlineResponse20017RuleList.  # noqa: E501
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this InlineResponse20017RuleList.


        :param rule_id: The rule_id of this InlineResponse20017RuleList.  # noqa: E501
        :type: str
        """

        self._rule_id = rule_id

    @property
    def rule_name(self):
        """Gets the rule_name of this InlineResponse20017RuleList.  # noqa: E501


        :return: The rule_name of this InlineResponse20017RuleList.  # noqa: E501
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this InlineResponse20017RuleList.


        :param rule_name: The rule_name of this InlineResponse20017RuleList.  # noqa: E501
        :type: str
        """

        self._rule_name = rule_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20017RuleList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20017RuleList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
