# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200234CircuitsInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'circuit_carrier': 'str',
        'circuit_name': 'str',
        'device_hostname': 'str',
        'interface_name': 'str',
        'label': 'str',
        'last_resort_circuit': 'str',
        'quality': 'str',
        'source_ip': 'str',
        'source_public_ip': 'str',
        'uptime': 'V1devicesbringuptokenValidTillTs'
    }

    attribute_map = {
        'circuit_carrier': 'circuitCarrier',
        'circuit_name': 'circuitName',
        'device_hostname': 'deviceHostname',
        'interface_name': 'interfaceName',
        'label': 'label',
        'last_resort_circuit': 'lastResortCircuit',
        'quality': 'quality',
        'source_ip': 'sourceIp',
        'source_public_ip': 'sourcePublicIp',
        'uptime': 'uptime'
    }

    def __init__(self, circuit_carrier=None, circuit_name=None, device_hostname=None, interface_name=None, label=None, last_resort_circuit=None, quality=None, source_ip=None, source_public_ip=None, uptime=None):  # noqa: E501
        """InlineResponse200234CircuitsInfo - a model defined in Swagger"""  # noqa: E501
        self._circuit_carrier = None
        self._circuit_name = None
        self._device_hostname = None
        self._interface_name = None
        self._label = None
        self._last_resort_circuit = None
        self._quality = None
        self._source_ip = None
        self._source_public_ip = None
        self._uptime = None
        self.discriminator = None
        if circuit_carrier is not None:
            self.circuit_carrier = circuit_carrier
        if circuit_name is not None:
            self.circuit_name = circuit_name
        if device_hostname is not None:
            self.device_hostname = device_hostname
        if interface_name is not None:
            self.interface_name = interface_name
        if label is not None:
            self.label = label
        if last_resort_circuit is not None:
            self.last_resort_circuit = last_resort_circuit
        if quality is not None:
            self.quality = quality
        if source_ip is not None:
            self.source_ip = source_ip
        if source_public_ip is not None:
            self.source_public_ip = source_public_ip
        if uptime is not None:
            self.uptime = uptime

    @property
    def circuit_carrier(self):
        """Gets the circuit_carrier of this InlineResponse200234CircuitsInfo.  # noqa: E501


        :return: The circuit_carrier of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :rtype: str
        """
        return self._circuit_carrier

    @circuit_carrier.setter
    def circuit_carrier(self, circuit_carrier):
        """Sets the circuit_carrier of this InlineResponse200234CircuitsInfo.


        :param circuit_carrier: The circuit_carrier of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :type: str
        """

        self._circuit_carrier = circuit_carrier

    @property
    def circuit_name(self):
        """Gets the circuit_name of this InlineResponse200234CircuitsInfo.  # noqa: E501


        :return: The circuit_name of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :rtype: str
        """
        return self._circuit_name

    @circuit_name.setter
    def circuit_name(self, circuit_name):
        """Sets the circuit_name of this InlineResponse200234CircuitsInfo.


        :param circuit_name: The circuit_name of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :type: str
        """

        self._circuit_name = circuit_name

    @property
    def device_hostname(self):
        """Gets the device_hostname of this InlineResponse200234CircuitsInfo.  # noqa: E501


        :return: The device_hostname of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :rtype: str
        """
        return self._device_hostname

    @device_hostname.setter
    def device_hostname(self, device_hostname):
        """Sets the device_hostname of this InlineResponse200234CircuitsInfo.


        :param device_hostname: The device_hostname of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :type: str
        """

        self._device_hostname = device_hostname

    @property
    def interface_name(self):
        """Gets the interface_name of this InlineResponse200234CircuitsInfo.  # noqa: E501


        :return: The interface_name of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :rtype: str
        """
        return self._interface_name

    @interface_name.setter
    def interface_name(self, interface_name):
        """Sets the interface_name of this InlineResponse200234CircuitsInfo.


        :param interface_name: The interface_name of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :type: str
        """

        self._interface_name = interface_name

    @property
    def label(self):
        """Gets the label of this InlineResponse200234CircuitsInfo.  # noqa: E501


        :return: The label of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this InlineResponse200234CircuitsInfo.


        :param label: The label of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def last_resort_circuit(self):
        """Gets the last_resort_circuit of this InlineResponse200234CircuitsInfo.  # noqa: E501


        :return: The last_resort_circuit of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :rtype: str
        """
        return self._last_resort_circuit

    @last_resort_circuit.setter
    def last_resort_circuit(self, last_resort_circuit):
        """Sets the last_resort_circuit of this InlineResponse200234CircuitsInfo.


        :param last_resort_circuit: The last_resort_circuit of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :type: str
        """

        self._last_resort_circuit = last_resort_circuit

    @property
    def quality(self):
        """Gets the quality of this InlineResponse200234CircuitsInfo.  # noqa: E501


        :return: The quality of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :rtype: str
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this InlineResponse200234CircuitsInfo.


        :param quality: The quality of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :type: str
        """

        self._quality = quality

    @property
    def source_ip(self):
        """Gets the source_ip of this InlineResponse200234CircuitsInfo.  # noqa: E501


        :return: The source_ip of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :rtype: str
        """
        return self._source_ip

    @source_ip.setter
    def source_ip(self, source_ip):
        """Sets the source_ip of this InlineResponse200234CircuitsInfo.


        :param source_ip: The source_ip of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :type: str
        """

        self._source_ip = source_ip

    @property
    def source_public_ip(self):
        """Gets the source_public_ip of this InlineResponse200234CircuitsInfo.  # noqa: E501


        :return: The source_public_ip of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :rtype: str
        """
        return self._source_public_ip

    @source_public_ip.setter
    def source_public_ip(self, source_public_ip):
        """Sets the source_public_ip of this InlineResponse200234CircuitsInfo.


        :param source_public_ip: The source_public_ip of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :type: str
        """

        self._source_public_ip = source_public_ip

    @property
    def uptime(self):
        """Gets the uptime of this InlineResponse200234CircuitsInfo.  # noqa: E501


        :return: The uptime of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this InlineResponse200234CircuitsInfo.


        :param uptime: The uptime of this InlineResponse200234CircuitsInfo.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._uptime = uptime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200234CircuitsInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200234CircuitsInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
