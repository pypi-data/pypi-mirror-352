# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20049JobStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'completed_at': 'V1devicesbringuptokenValidTillTs',
        'created_at': 'V1devicesbringuptokenValidTillTs',
        'error': 'str',
        'error_count': 'str',
        'job_id': 'str',
        'job_state': 'str'
    }

    attribute_map = {
        'completed_at': 'completedAt',
        'created_at': 'createdAt',
        'error': 'error',
        'error_count': 'errorCount',
        'job_id': 'jobId',
        'job_state': 'jobState'
    }

    def __init__(self, completed_at=None, created_at=None, error=None, error_count=None, job_id=None, job_state=None):  # noqa: E501
        """InlineResponse20049JobStatus - a model defined in Swagger"""  # noqa: E501
        self._completed_at = None
        self._created_at = None
        self._error = None
        self._error_count = None
        self._job_id = None
        self._job_state = None
        self.discriminator = None
        if completed_at is not None:
            self.completed_at = completed_at
        if created_at is not None:
            self.created_at = created_at
        if error is not None:
            self.error = error
        if error_count is not None:
            self.error_count = error_count
        if job_id is not None:
            self.job_id = job_id
        if job_state is not None:
            self.job_state = job_state

    @property
    def completed_at(self):
        """Gets the completed_at of this InlineResponse20049JobStatus.  # noqa: E501


        :return: The completed_at of this InlineResponse20049JobStatus.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this InlineResponse20049JobStatus.


        :param completed_at: The completed_at of this InlineResponse20049JobStatus.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._completed_at = completed_at

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse20049JobStatus.  # noqa: E501


        :return: The created_at of this InlineResponse20049JobStatus.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse20049JobStatus.


        :param created_at: The created_at of this InlineResponse20049JobStatus.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._created_at = created_at

    @property
    def error(self):
        """Gets the error of this InlineResponse20049JobStatus.  # noqa: E501


        :return: The error of this InlineResponse20049JobStatus.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this InlineResponse20049JobStatus.


        :param error: The error of this InlineResponse20049JobStatus.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def error_count(self):
        """Gets the error_count of this InlineResponse20049JobStatus.  # noqa: E501


        :return: The error_count of this InlineResponse20049JobStatus.  # noqa: E501
        :rtype: str
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this InlineResponse20049JobStatus.


        :param error_count: The error_count of this InlineResponse20049JobStatus.  # noqa: E501
        :type: str
        """

        self._error_count = error_count

    @property
    def job_id(self):
        """Gets the job_id of this InlineResponse20049JobStatus.  # noqa: E501


        :return: The job_id of this InlineResponse20049JobStatus.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this InlineResponse20049JobStatus.


        :param job_id: The job_id of this InlineResponse20049JobStatus.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def job_state(self):
        """Gets the job_state of this InlineResponse20049JobStatus.  # noqa: E501


        :return: The job_state of this InlineResponse20049JobStatus.  # noqa: E501
        :rtype: str
        """
        return self._job_state

    @job_state.setter
    def job_state(self, job_state):
        """Sets the job_state of this InlineResponse20049JobStatus.


        :param job_state: The job_state of this InlineResponse20049JobStatus.  # noqa: E501
        :type: str
        """

        self._job_state = job_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20049JobStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20049JobStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
