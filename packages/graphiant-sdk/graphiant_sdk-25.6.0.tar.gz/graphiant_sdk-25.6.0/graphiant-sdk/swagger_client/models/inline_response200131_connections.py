# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200131Connections(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'control_connection': 'list[InlineResponse200131ConnectionsControlConnection]',
        'core_connection': 'list[InlineResponse200131ConnectionsControlConnection]',
        'management_connection': 'list[InlineResponse200131ConnectionsControlConnection]'
    }

    attribute_map = {
        'control_connection': 'controlConnection',
        'core_connection': 'coreConnection',
        'management_connection': 'managementConnection'
    }

    def __init__(self, control_connection=None, core_connection=None, management_connection=None):  # noqa: E501
        """InlineResponse200131Connections - a model defined in Swagger"""  # noqa: E501
        self._control_connection = None
        self._core_connection = None
        self._management_connection = None
        self.discriminator = None
        if control_connection is not None:
            self.control_connection = control_connection
        if core_connection is not None:
            self.core_connection = core_connection
        if management_connection is not None:
            self.management_connection = management_connection

    @property
    def control_connection(self):
        """Gets the control_connection of this InlineResponse200131Connections.  # noqa: E501


        :return: The control_connection of this InlineResponse200131Connections.  # noqa: E501
        :rtype: list[InlineResponse200131ConnectionsControlConnection]
        """
        return self._control_connection

    @control_connection.setter
    def control_connection(self, control_connection):
        """Sets the control_connection of this InlineResponse200131Connections.


        :param control_connection: The control_connection of this InlineResponse200131Connections.  # noqa: E501
        :type: list[InlineResponse200131ConnectionsControlConnection]
        """

        self._control_connection = control_connection

    @property
    def core_connection(self):
        """Gets the core_connection of this InlineResponse200131Connections.  # noqa: E501


        :return: The core_connection of this InlineResponse200131Connections.  # noqa: E501
        :rtype: list[InlineResponse200131ConnectionsControlConnection]
        """
        return self._core_connection

    @core_connection.setter
    def core_connection(self, core_connection):
        """Sets the core_connection of this InlineResponse200131Connections.


        :param core_connection: The core_connection of this InlineResponse200131Connections.  # noqa: E501
        :type: list[InlineResponse200131ConnectionsControlConnection]
        """

        self._core_connection = core_connection

    @property
    def management_connection(self):
        """Gets the management_connection of this InlineResponse200131Connections.  # noqa: E501


        :return: The management_connection of this InlineResponse200131Connections.  # noqa: E501
        :rtype: list[InlineResponse200131ConnectionsControlConnection]
        """
        return self._management_connection

    @management_connection.setter
    def management_connection(self, management_connection):
        """Sets the management_connection of this InlineResponse200131Connections.


        :param management_connection: The management_connection of this InlineResponse200131Connections.  # noqa: E501
        :type: list[InlineResponse200131ConnectionsControlConnection]
        """

        self._management_connection = management_connection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200131Connections, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200131Connections):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
