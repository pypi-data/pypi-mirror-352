# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200108Match(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_port': 'str',
        'destination_prefix': 'str',
        'icmp_type': 'str',
        'protocol': 'str',
        'source_port': 'str',
        'source_prefix': 'str'
    }

    attribute_map = {
        'destination_port': 'destinationPort',
        'destination_prefix': 'destinationPrefix',
        'icmp_type': 'icmpType',
        'protocol': 'protocol',
        'source_port': 'sourcePort',
        'source_prefix': 'sourcePrefix'
    }

    def __init__(self, destination_port=None, destination_prefix=None, icmp_type=None, protocol=None, source_port=None, source_prefix=None):  # noqa: E501
        """InlineResponse200108Match - a model defined in Swagger"""  # noqa: E501
        self._destination_port = None
        self._destination_prefix = None
        self._icmp_type = None
        self._protocol = None
        self._source_port = None
        self._source_prefix = None
        self.discriminator = None
        if destination_port is not None:
            self.destination_port = destination_port
        if destination_prefix is not None:
            self.destination_prefix = destination_prefix
        if icmp_type is not None:
            self.icmp_type = icmp_type
        if protocol is not None:
            self.protocol = protocol
        if source_port is not None:
            self.source_port = source_port
        if source_prefix is not None:
            self.source_prefix = source_prefix

    @property
    def destination_port(self):
        """Gets the destination_port of this InlineResponse200108Match.  # noqa: E501


        :return: The destination_port of this InlineResponse200108Match.  # noqa: E501
        :rtype: str
        """
        return self._destination_port

    @destination_port.setter
    def destination_port(self, destination_port):
        """Sets the destination_port of this InlineResponse200108Match.


        :param destination_port: The destination_port of this InlineResponse200108Match.  # noqa: E501
        :type: str
        """

        self._destination_port = destination_port

    @property
    def destination_prefix(self):
        """Gets the destination_prefix of this InlineResponse200108Match.  # noqa: E501


        :return: The destination_prefix of this InlineResponse200108Match.  # noqa: E501
        :rtype: str
        """
        return self._destination_prefix

    @destination_prefix.setter
    def destination_prefix(self, destination_prefix):
        """Sets the destination_prefix of this InlineResponse200108Match.


        :param destination_prefix: The destination_prefix of this InlineResponse200108Match.  # noqa: E501
        :type: str
        """

        self._destination_prefix = destination_prefix

    @property
    def icmp_type(self):
        """Gets the icmp_type of this InlineResponse200108Match.  # noqa: E501


        :return: The icmp_type of this InlineResponse200108Match.  # noqa: E501
        :rtype: str
        """
        return self._icmp_type

    @icmp_type.setter
    def icmp_type(self, icmp_type):
        """Sets the icmp_type of this InlineResponse200108Match.


        :param icmp_type: The icmp_type of this InlineResponse200108Match.  # noqa: E501
        :type: str
        """

        self._icmp_type = icmp_type

    @property
    def protocol(self):
        """Gets the protocol of this InlineResponse200108Match.  # noqa: E501


        :return: The protocol of this InlineResponse200108Match.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this InlineResponse200108Match.


        :param protocol: The protocol of this InlineResponse200108Match.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def source_port(self):
        """Gets the source_port of this InlineResponse200108Match.  # noqa: E501


        :return: The source_port of this InlineResponse200108Match.  # noqa: E501
        :rtype: str
        """
        return self._source_port

    @source_port.setter
    def source_port(self, source_port):
        """Sets the source_port of this InlineResponse200108Match.


        :param source_port: The source_port of this InlineResponse200108Match.  # noqa: E501
        :type: str
        """

        self._source_port = source_port

    @property
    def source_prefix(self):
        """Gets the source_prefix of this InlineResponse200108Match.  # noqa: E501


        :return: The source_prefix of this InlineResponse200108Match.  # noqa: E501
        :rtype: str
        """
        return self._source_prefix

    @source_prefix.setter
    def source_prefix(self, source_prefix):
        """Sets the source_prefix of this InlineResponse200108Match.


        :param source_prefix: The source_prefix of this InlineResponse200108Match.  # noqa: E501
        :type: str
        """

        self._source_prefix = source_prefix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200108Match, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200108Match):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
