# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20015AlertList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acknowledged_list': 'list[str]',
        'acknowledgement_reason': 'str',
        'alert_body': 'str',
        'alert_id': 'str',
        'allow_listed': 'str',
        'children_alert_list': 'InlineResponse20015ChildrenAlertList',
        'descendant_present': 'str',
        'device_id': 'str',
        'end_time': 'str',
        'enterprise_id': 'str',
        'entity': 'str',
        'interface_name': 'str',
        'mute_listed': 'str',
        'notification_created': 'str',
        'occurrences': 'str',
        'peer_device_id': 'str',
        'peer_interface_name': 'str',
        'peer_name': 'str',
        'plane': 'str',
        'reason': 'str',
        'recommendation': 'str',
        'rule_id': 'str',
        'severity': 'str',
        'site_id': 'str',
        'start_time': 'str',
        'status': 'str',
        'troubleshooting_disabled_reason': 'str',
        'troubleshooting_enabled': 'str',
        'tunnel_interface_name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'acknowledged_list': 'acknowledgedList',
        'acknowledgement_reason': 'acknowledgementReason',
        'alert_body': 'alertBody',
        'alert_id': 'alertId',
        'allow_listed': 'allowListed',
        'children_alert_list': 'childrenAlertList',
        'descendant_present': 'descendantPresent',
        'device_id': 'deviceId',
        'end_time': 'endTime',
        'enterprise_id': 'enterpriseId',
        'entity': 'entity',
        'interface_name': 'interfaceName',
        'mute_listed': 'muteListed',
        'notification_created': 'notificationCreated',
        'occurrences': 'occurrences',
        'peer_device_id': 'peerDeviceId',
        'peer_interface_name': 'peerInterfaceName',
        'peer_name': 'peerName',
        'plane': 'plane',
        'reason': 'reason',
        'recommendation': 'recommendation',
        'rule_id': 'ruleId',
        'severity': 'severity',
        'site_id': 'siteId',
        'start_time': 'startTime',
        'status': 'status',
        'troubleshooting_disabled_reason': 'troubleshootingDisabledReason',
        'troubleshooting_enabled': 'troubleshootingEnabled',
        'tunnel_interface_name': 'tunnelInterfaceName',
        'type': 'type'
    }

    def __init__(self, acknowledged_list=None, acknowledgement_reason=None, alert_body=None, alert_id=None, allow_listed=None, children_alert_list=None, descendant_present=None, device_id=None, end_time=None, enterprise_id=None, entity=None, interface_name=None, mute_listed=None, notification_created=None, occurrences=None, peer_device_id=None, peer_interface_name=None, peer_name=None, plane=None, reason=None, recommendation=None, rule_id=None, severity=None, site_id=None, start_time=None, status=None, troubleshooting_disabled_reason=None, troubleshooting_enabled=None, tunnel_interface_name=None, type=None):  # noqa: E501
        """InlineResponse20015AlertList - a model defined in Swagger"""  # noqa: E501
        self._acknowledged_list = None
        self._acknowledgement_reason = None
        self._alert_body = None
        self._alert_id = None
        self._allow_listed = None
        self._children_alert_list = None
        self._descendant_present = None
        self._device_id = None
        self._end_time = None
        self._enterprise_id = None
        self._entity = None
        self._interface_name = None
        self._mute_listed = None
        self._notification_created = None
        self._occurrences = None
        self._peer_device_id = None
        self._peer_interface_name = None
        self._peer_name = None
        self._plane = None
        self._reason = None
        self._recommendation = None
        self._rule_id = None
        self._severity = None
        self._site_id = None
        self._start_time = None
        self._status = None
        self._troubleshooting_disabled_reason = None
        self._troubleshooting_enabled = None
        self._tunnel_interface_name = None
        self._type = None
        self.discriminator = None
        if acknowledged_list is not None:
            self.acknowledged_list = acknowledged_list
        if acknowledgement_reason is not None:
            self.acknowledgement_reason = acknowledgement_reason
        if alert_body is not None:
            self.alert_body = alert_body
        if alert_id is not None:
            self.alert_id = alert_id
        if allow_listed is not None:
            self.allow_listed = allow_listed
        if children_alert_list is not None:
            self.children_alert_list = children_alert_list
        if descendant_present is not None:
            self.descendant_present = descendant_present
        if device_id is not None:
            self.device_id = device_id
        if end_time is not None:
            self.end_time = end_time
        if enterprise_id is not None:
            self.enterprise_id = enterprise_id
        if entity is not None:
            self.entity = entity
        if interface_name is not None:
            self.interface_name = interface_name
        if mute_listed is not None:
            self.mute_listed = mute_listed
        if notification_created is not None:
            self.notification_created = notification_created
        if occurrences is not None:
            self.occurrences = occurrences
        if peer_device_id is not None:
            self.peer_device_id = peer_device_id
        if peer_interface_name is not None:
            self.peer_interface_name = peer_interface_name
        if peer_name is not None:
            self.peer_name = peer_name
        if plane is not None:
            self.plane = plane
        if reason is not None:
            self.reason = reason
        if recommendation is not None:
            self.recommendation = recommendation
        if rule_id is not None:
            self.rule_id = rule_id
        if severity is not None:
            self.severity = severity
        if site_id is not None:
            self.site_id = site_id
        if start_time is not None:
            self.start_time = start_time
        if status is not None:
            self.status = status
        if troubleshooting_disabled_reason is not None:
            self.troubleshooting_disabled_reason = troubleshooting_disabled_reason
        if troubleshooting_enabled is not None:
            self.troubleshooting_enabled = troubleshooting_enabled
        if tunnel_interface_name is not None:
            self.tunnel_interface_name = tunnel_interface_name
        if type is not None:
            self.type = type

    @property
    def acknowledged_list(self):
        """Gets the acknowledged_list of this InlineResponse20015AlertList.  # noqa: E501


        :return: The acknowledged_list of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: list[str]
        """
        return self._acknowledged_list

    @acknowledged_list.setter
    def acknowledged_list(self, acknowledged_list):
        """Sets the acknowledged_list of this InlineResponse20015AlertList.


        :param acknowledged_list: The acknowledged_list of this InlineResponse20015AlertList.  # noqa: E501
        :type: list[str]
        """

        self._acknowledged_list = acknowledged_list

    @property
    def acknowledgement_reason(self):
        """Gets the acknowledgement_reason of this InlineResponse20015AlertList.  # noqa: E501


        :return: The acknowledgement_reason of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._acknowledgement_reason

    @acknowledgement_reason.setter
    def acknowledgement_reason(self, acknowledgement_reason):
        """Sets the acknowledgement_reason of this InlineResponse20015AlertList.


        :param acknowledgement_reason: The acknowledgement_reason of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._acknowledgement_reason = acknowledgement_reason

    @property
    def alert_body(self):
        """Gets the alert_body of this InlineResponse20015AlertList.  # noqa: E501


        :return: The alert_body of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._alert_body

    @alert_body.setter
    def alert_body(self, alert_body):
        """Sets the alert_body of this InlineResponse20015AlertList.


        :param alert_body: The alert_body of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._alert_body = alert_body

    @property
    def alert_id(self):
        """Gets the alert_id of this InlineResponse20015AlertList.  # noqa: E501


        :return: The alert_id of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this InlineResponse20015AlertList.


        :param alert_id: The alert_id of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._alert_id = alert_id

    @property
    def allow_listed(self):
        """Gets the allow_listed of this InlineResponse20015AlertList.  # noqa: E501


        :return: The allow_listed of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._allow_listed

    @allow_listed.setter
    def allow_listed(self, allow_listed):
        """Sets the allow_listed of this InlineResponse20015AlertList.


        :param allow_listed: The allow_listed of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._allow_listed = allow_listed

    @property
    def children_alert_list(self):
        """Gets the children_alert_list of this InlineResponse20015AlertList.  # noqa: E501


        :return: The children_alert_list of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: InlineResponse20015ChildrenAlertList
        """
        return self._children_alert_list

    @children_alert_list.setter
    def children_alert_list(self, children_alert_list):
        """Sets the children_alert_list of this InlineResponse20015AlertList.


        :param children_alert_list: The children_alert_list of this InlineResponse20015AlertList.  # noqa: E501
        :type: InlineResponse20015ChildrenAlertList
        """

        self._children_alert_list = children_alert_list

    @property
    def descendant_present(self):
        """Gets the descendant_present of this InlineResponse20015AlertList.  # noqa: E501


        :return: The descendant_present of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._descendant_present

    @descendant_present.setter
    def descendant_present(self, descendant_present):
        """Sets the descendant_present of this InlineResponse20015AlertList.


        :param descendant_present: The descendant_present of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._descendant_present = descendant_present

    @property
    def device_id(self):
        """Gets the device_id of this InlineResponse20015AlertList.  # noqa: E501


        :return: The device_id of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this InlineResponse20015AlertList.


        :param device_id: The device_id of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def end_time(self):
        """Gets the end_time of this InlineResponse20015AlertList.  # noqa: E501


        :return: The end_time of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this InlineResponse20015AlertList.


        :param end_time: The end_time of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def enterprise_id(self):
        """Gets the enterprise_id of this InlineResponse20015AlertList.  # noqa: E501


        :return: The enterprise_id of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_id

    @enterprise_id.setter
    def enterprise_id(self, enterprise_id):
        """Sets the enterprise_id of this InlineResponse20015AlertList.


        :param enterprise_id: The enterprise_id of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._enterprise_id = enterprise_id

    @property
    def entity(self):
        """Gets the entity of this InlineResponse20015AlertList.  # noqa: E501


        :return: The entity of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this InlineResponse20015AlertList.


        :param entity: The entity of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._entity = entity

    @property
    def interface_name(self):
        """Gets the interface_name of this InlineResponse20015AlertList.  # noqa: E501


        :return: The interface_name of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._interface_name

    @interface_name.setter
    def interface_name(self, interface_name):
        """Sets the interface_name of this InlineResponse20015AlertList.


        :param interface_name: The interface_name of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._interface_name = interface_name

    @property
    def mute_listed(self):
        """Gets the mute_listed of this InlineResponse20015AlertList.  # noqa: E501


        :return: The mute_listed of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._mute_listed

    @mute_listed.setter
    def mute_listed(self, mute_listed):
        """Sets the mute_listed of this InlineResponse20015AlertList.


        :param mute_listed: The mute_listed of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._mute_listed = mute_listed

    @property
    def notification_created(self):
        """Gets the notification_created of this InlineResponse20015AlertList.  # noqa: E501


        :return: The notification_created of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._notification_created

    @notification_created.setter
    def notification_created(self, notification_created):
        """Sets the notification_created of this InlineResponse20015AlertList.


        :param notification_created: The notification_created of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._notification_created = notification_created

    @property
    def occurrences(self):
        """Gets the occurrences of this InlineResponse20015AlertList.  # noqa: E501


        :return: The occurrences of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._occurrences

    @occurrences.setter
    def occurrences(self, occurrences):
        """Sets the occurrences of this InlineResponse20015AlertList.


        :param occurrences: The occurrences of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._occurrences = occurrences

    @property
    def peer_device_id(self):
        """Gets the peer_device_id of this InlineResponse20015AlertList.  # noqa: E501


        :return: The peer_device_id of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._peer_device_id

    @peer_device_id.setter
    def peer_device_id(self, peer_device_id):
        """Sets the peer_device_id of this InlineResponse20015AlertList.


        :param peer_device_id: The peer_device_id of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._peer_device_id = peer_device_id

    @property
    def peer_interface_name(self):
        """Gets the peer_interface_name of this InlineResponse20015AlertList.  # noqa: E501


        :return: The peer_interface_name of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._peer_interface_name

    @peer_interface_name.setter
    def peer_interface_name(self, peer_interface_name):
        """Sets the peer_interface_name of this InlineResponse20015AlertList.


        :param peer_interface_name: The peer_interface_name of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._peer_interface_name = peer_interface_name

    @property
    def peer_name(self):
        """Gets the peer_name of this InlineResponse20015AlertList.  # noqa: E501


        :return: The peer_name of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._peer_name

    @peer_name.setter
    def peer_name(self, peer_name):
        """Sets the peer_name of this InlineResponse20015AlertList.


        :param peer_name: The peer_name of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._peer_name = peer_name

    @property
    def plane(self):
        """Gets the plane of this InlineResponse20015AlertList.  # noqa: E501


        :return: The plane of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._plane

    @plane.setter
    def plane(self, plane):
        """Sets the plane of this InlineResponse20015AlertList.


        :param plane: The plane of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._plane = plane

    @property
    def reason(self):
        """Gets the reason of this InlineResponse20015AlertList.  # noqa: E501


        :return: The reason of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this InlineResponse20015AlertList.


        :param reason: The reason of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def recommendation(self):
        """Gets the recommendation of this InlineResponse20015AlertList.  # noqa: E501


        :return: The recommendation of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this InlineResponse20015AlertList.


        :param recommendation: The recommendation of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._recommendation = recommendation

    @property
    def rule_id(self):
        """Gets the rule_id of this InlineResponse20015AlertList.  # noqa: E501


        :return: The rule_id of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this InlineResponse20015AlertList.


        :param rule_id: The rule_id of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._rule_id = rule_id

    @property
    def severity(self):
        """Gets the severity of this InlineResponse20015AlertList.  # noqa: E501


        :return: The severity of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this InlineResponse20015AlertList.


        :param severity: The severity of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def site_id(self):
        """Gets the site_id of this InlineResponse20015AlertList.  # noqa: E501


        :return: The site_id of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this InlineResponse20015AlertList.


        :param site_id: The site_id of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._site_id = site_id

    @property
    def start_time(self):
        """Gets the start_time of this InlineResponse20015AlertList.  # noqa: E501


        :return: The start_time of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InlineResponse20015AlertList.


        :param start_time: The start_time of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this InlineResponse20015AlertList.  # noqa: E501


        :return: The status of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20015AlertList.


        :param status: The status of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def troubleshooting_disabled_reason(self):
        """Gets the troubleshooting_disabled_reason of this InlineResponse20015AlertList.  # noqa: E501


        :return: The troubleshooting_disabled_reason of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._troubleshooting_disabled_reason

    @troubleshooting_disabled_reason.setter
    def troubleshooting_disabled_reason(self, troubleshooting_disabled_reason):
        """Sets the troubleshooting_disabled_reason of this InlineResponse20015AlertList.


        :param troubleshooting_disabled_reason: The troubleshooting_disabled_reason of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._troubleshooting_disabled_reason = troubleshooting_disabled_reason

    @property
    def troubleshooting_enabled(self):
        """Gets the troubleshooting_enabled of this InlineResponse20015AlertList.  # noqa: E501


        :return: The troubleshooting_enabled of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._troubleshooting_enabled

    @troubleshooting_enabled.setter
    def troubleshooting_enabled(self, troubleshooting_enabled):
        """Sets the troubleshooting_enabled of this InlineResponse20015AlertList.


        :param troubleshooting_enabled: The troubleshooting_enabled of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._troubleshooting_enabled = troubleshooting_enabled

    @property
    def tunnel_interface_name(self):
        """Gets the tunnel_interface_name of this InlineResponse20015AlertList.  # noqa: E501


        :return: The tunnel_interface_name of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._tunnel_interface_name

    @tunnel_interface_name.setter
    def tunnel_interface_name(self, tunnel_interface_name):
        """Sets the tunnel_interface_name of this InlineResponse20015AlertList.


        :param tunnel_interface_name: The tunnel_interface_name of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._tunnel_interface_name = tunnel_interface_name

    @property
    def type(self):
        """Gets the type of this InlineResponse20015AlertList.  # noqa: E501


        :return: The type of this InlineResponse20015AlertList.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20015AlertList.


        :param type: The type of this InlineResponse20015AlertList.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20015AlertList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20015AlertList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
