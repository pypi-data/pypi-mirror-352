# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1dataassuranceassurancesglobalConfigApps(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bucket_id': 'str',
        'builtin_app_id': 'str',
        'custom_app_id': 'str',
        'is_domain': 'str',
        'name': 'str',
        'servers': 'list[V1dataassuranceassurancesglobalConfigServers]',
        'use_all_servers': 'str'
    }

    attribute_map = {
        'bucket_id': 'bucketId',
        'builtin_app_id': 'builtinAppId',
        'custom_app_id': 'customAppId',
        'is_domain': 'isDomain',
        'name': 'name',
        'servers': 'servers',
        'use_all_servers': 'useAllServers'
    }

    def __init__(self, bucket_id=None, builtin_app_id=None, custom_app_id=None, is_domain=None, name=None, servers=None, use_all_servers=None):  # noqa: E501
        """V1dataassuranceassurancesglobalConfigApps - a model defined in Swagger"""  # noqa: E501
        self._bucket_id = None
        self._builtin_app_id = None
        self._custom_app_id = None
        self._is_domain = None
        self._name = None
        self._servers = None
        self._use_all_servers = None
        self.discriminator = None
        if bucket_id is not None:
            self.bucket_id = bucket_id
        if builtin_app_id is not None:
            self.builtin_app_id = builtin_app_id
        if custom_app_id is not None:
            self.custom_app_id = custom_app_id
        if is_domain is not None:
            self.is_domain = is_domain
        if name is not None:
            self.name = name
        if servers is not None:
            self.servers = servers
        if use_all_servers is not None:
            self.use_all_servers = use_all_servers

    @property
    def bucket_id(self):
        """Gets the bucket_id of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501


        :return: The bucket_id of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501
        :rtype: str
        """
        return self._bucket_id

    @bucket_id.setter
    def bucket_id(self, bucket_id):
        """Sets the bucket_id of this V1dataassuranceassurancesglobalConfigApps.


        :param bucket_id: The bucket_id of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501
        :type: str
        """

        self._bucket_id = bucket_id

    @property
    def builtin_app_id(self):
        """Gets the builtin_app_id of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501


        :return: The builtin_app_id of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501
        :rtype: str
        """
        return self._builtin_app_id

    @builtin_app_id.setter
    def builtin_app_id(self, builtin_app_id):
        """Sets the builtin_app_id of this V1dataassuranceassurancesglobalConfigApps.


        :param builtin_app_id: The builtin_app_id of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501
        :type: str
        """

        self._builtin_app_id = builtin_app_id

    @property
    def custom_app_id(self):
        """Gets the custom_app_id of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501


        :return: The custom_app_id of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501
        :rtype: str
        """
        return self._custom_app_id

    @custom_app_id.setter
    def custom_app_id(self, custom_app_id):
        """Sets the custom_app_id of this V1dataassuranceassurancesglobalConfigApps.


        :param custom_app_id: The custom_app_id of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501
        :type: str
        """

        self._custom_app_id = custom_app_id

    @property
    def is_domain(self):
        """Gets the is_domain of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501


        :return: The is_domain of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501
        :rtype: str
        """
        return self._is_domain

    @is_domain.setter
    def is_domain(self, is_domain):
        """Sets the is_domain of this V1dataassuranceassurancesglobalConfigApps.


        :param is_domain: The is_domain of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501
        :type: str
        """

        self._is_domain = is_domain

    @property
    def name(self):
        """Gets the name of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501


        :return: The name of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1dataassuranceassurancesglobalConfigApps.


        :param name: The name of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def servers(self):
        """Gets the servers of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501


        :return: The servers of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501
        :rtype: list[V1dataassuranceassurancesglobalConfigServers]
        """
        return self._servers

    @servers.setter
    def servers(self, servers):
        """Sets the servers of this V1dataassuranceassurancesglobalConfigApps.


        :param servers: The servers of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501
        :type: list[V1dataassuranceassurancesglobalConfigServers]
        """

        self._servers = servers

    @property
    def use_all_servers(self):
        """Gets the use_all_servers of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501


        :return: The use_all_servers of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501
        :rtype: str
        """
        return self._use_all_servers

    @use_all_servers.setter
    def use_all_servers(self, use_all_servers):
        """Sets the use_all_servers of this V1dataassuranceassurancesglobalConfigApps.


        :param use_all_servers: The use_all_servers of this V1dataassuranceassurancesglobalConfigApps.  # noqa: E501
        :type: str
        """

        self._use_all_servers = use_all_servers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1dataassuranceassurancesglobalConfigApps, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1dataassuranceassurancesglobalConfigApps):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
