# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FlowsFlowtableBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_id': 'str',
        'app_name': 'str',
        'cursor_ref': 'V1devicesbringuptokenValidTillTs',
        'device_id': 'str',
        'is_dia': 'str',
        'num_flow_records': 'str',
        'selector': 'V1flowsflowtableSelector',
        'time_window': 'V2assistantgetconversationdetailsTimeWindow'
    }

    attribute_map = {
        'app_id': 'appId',
        'app_name': 'appName',
        'cursor_ref': 'cursorRef',
        'device_id': 'deviceId',
        'is_dia': 'isDia',
        'num_flow_records': 'numFlowRecords',
        'selector': 'selector',
        'time_window': 'timeWindow'
    }

    def __init__(self, app_id=None, app_name=None, cursor_ref=None, device_id=None, is_dia=None, num_flow_records=None, selector=None, time_window=None):  # noqa: E501
        """FlowsFlowtableBody - a model defined in Swagger"""  # noqa: E501
        self._app_id = None
        self._app_name = None
        self._cursor_ref = None
        self._device_id = None
        self._is_dia = None
        self._num_flow_records = None
        self._selector = None
        self._time_window = None
        self.discriminator = None
        if app_id is not None:
            self.app_id = app_id
        if app_name is not None:
            self.app_name = app_name
        if cursor_ref is not None:
            self.cursor_ref = cursor_ref
        if device_id is not None:
            self.device_id = device_id
        if is_dia is not None:
            self.is_dia = is_dia
        if num_flow_records is not None:
            self.num_flow_records = num_flow_records
        if selector is not None:
            self.selector = selector
        if time_window is not None:
            self.time_window = time_window

    @property
    def app_id(self):
        """Gets the app_id of this FlowsFlowtableBody.  # noqa: E501


        :return: The app_id of this FlowsFlowtableBody.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this FlowsFlowtableBody.


        :param app_id: The app_id of this FlowsFlowtableBody.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def app_name(self):
        """Gets the app_name of this FlowsFlowtableBody.  # noqa: E501


        :return: The app_name of this FlowsFlowtableBody.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this FlowsFlowtableBody.


        :param app_name: The app_name of this FlowsFlowtableBody.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def cursor_ref(self):
        """Gets the cursor_ref of this FlowsFlowtableBody.  # noqa: E501


        :return: The cursor_ref of this FlowsFlowtableBody.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._cursor_ref

    @cursor_ref.setter
    def cursor_ref(self, cursor_ref):
        """Sets the cursor_ref of this FlowsFlowtableBody.


        :param cursor_ref: The cursor_ref of this FlowsFlowtableBody.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._cursor_ref = cursor_ref

    @property
    def device_id(self):
        """Gets the device_id of this FlowsFlowtableBody.  # noqa: E501


        :return: The device_id of this FlowsFlowtableBody.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this FlowsFlowtableBody.


        :param device_id: The device_id of this FlowsFlowtableBody.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def is_dia(self):
        """Gets the is_dia of this FlowsFlowtableBody.  # noqa: E501


        :return: The is_dia of this FlowsFlowtableBody.  # noqa: E501
        :rtype: str
        """
        return self._is_dia

    @is_dia.setter
    def is_dia(self, is_dia):
        """Sets the is_dia of this FlowsFlowtableBody.


        :param is_dia: The is_dia of this FlowsFlowtableBody.  # noqa: E501
        :type: str
        """

        self._is_dia = is_dia

    @property
    def num_flow_records(self):
        """Gets the num_flow_records of this FlowsFlowtableBody.  # noqa: E501


        :return: The num_flow_records of this FlowsFlowtableBody.  # noqa: E501
        :rtype: str
        """
        return self._num_flow_records

    @num_flow_records.setter
    def num_flow_records(self, num_flow_records):
        """Sets the num_flow_records of this FlowsFlowtableBody.


        :param num_flow_records: The num_flow_records of this FlowsFlowtableBody.  # noqa: E501
        :type: str
        """

        self._num_flow_records = num_flow_records

    @property
    def selector(self):
        """Gets the selector of this FlowsFlowtableBody.  # noqa: E501


        :return: The selector of this FlowsFlowtableBody.  # noqa: E501
        :rtype: V1flowsflowtableSelector
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this FlowsFlowtableBody.


        :param selector: The selector of this FlowsFlowtableBody.  # noqa: E501
        :type: V1flowsflowtableSelector
        """

        self._selector = selector

    @property
    def time_window(self):
        """Gets the time_window of this FlowsFlowtableBody.  # noqa: E501


        :return: The time_window of this FlowsFlowtableBody.  # noqa: E501
        :rtype: V2assistantgetconversationdetailsTimeWindow
        """
        return self._time_window

    @time_window.setter
    def time_window(self, time_window):
        """Sets the time_window of this FlowsFlowtableBody.


        :param time_window: The time_window of this FlowsFlowtableBody.  # noqa: E501
        :type: V2assistantgetconversationdetailsTimeWindow
        """

        self._time_window = time_window

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlowsFlowtableBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlowsFlowtableBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
