# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20097Policy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto': 'InlineResponse20097PolicyAuto',
        'branches': 'InlineResponse20097PolicyBranches',
        'created_at': 'V1devicesbringuptokenValidTillTs',
        'created_by': 'str',
        'description': 'str',
        'host_prefix_set': 'InlineResponse20097PolicyHostPrefixSet',
        'id': 'str',
        'manual': 'InlineResponse20097PolicyManual',
        'name': 'str',
        'shared_prefixes': 'list[str]',
        'shared_segment': 'V1devicesdeviceIddraftDraftSegments',
        'source': 'InlineResponse20097PolicyBranches',
        'target_segments': 'list[V1devicesdeviceIddraftDraftSegments]',
        'type': 'str',
        'updated_at': 'V1devicesbringuptokenValidTillTs'
    }

    attribute_map = {
        'auto': 'auto',
        'branches': 'branches',
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'description': 'description',
        'host_prefix_set': 'hostPrefixSet',
        'id': 'id',
        'manual': 'manual',
        'name': 'name',
        'shared_prefixes': 'sharedPrefixes',
        'shared_segment': 'sharedSegment',
        'source': 'source',
        'target_segments': 'targetSegments',
        'type': 'type',
        'updated_at': 'updatedAt'
    }

    def __init__(self, auto=None, branches=None, created_at=None, created_by=None, description=None, host_prefix_set=None, id=None, manual=None, name=None, shared_prefixes=None, shared_segment=None, source=None, target_segments=None, type=None, updated_at=None):  # noqa: E501
        """InlineResponse20097Policy - a model defined in Swagger"""  # noqa: E501
        self._auto = None
        self._branches = None
        self._created_at = None
        self._created_by = None
        self._description = None
        self._host_prefix_set = None
        self._id = None
        self._manual = None
        self._name = None
        self._shared_prefixes = None
        self._shared_segment = None
        self._source = None
        self._target_segments = None
        self._type = None
        self._updated_at = None
        self.discriminator = None
        if auto is not None:
            self.auto = auto
        if branches is not None:
            self.branches = branches
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if description is not None:
            self.description = description
        if host_prefix_set is not None:
            self.host_prefix_set = host_prefix_set
        if id is not None:
            self.id = id
        if manual is not None:
            self.manual = manual
        if name is not None:
            self.name = name
        if shared_prefixes is not None:
            self.shared_prefixes = shared_prefixes
        if shared_segment is not None:
            self.shared_segment = shared_segment
        if source is not None:
            self.source = source
        if target_segments is not None:
            self.target_segments = target_segments
        if type is not None:
            self.type = type
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def auto(self):
        """Gets the auto of this InlineResponse20097Policy.  # noqa: E501


        :return: The auto of this InlineResponse20097Policy.  # noqa: E501
        :rtype: InlineResponse20097PolicyAuto
        """
        return self._auto

    @auto.setter
    def auto(self, auto):
        """Sets the auto of this InlineResponse20097Policy.


        :param auto: The auto of this InlineResponse20097Policy.  # noqa: E501
        :type: InlineResponse20097PolicyAuto
        """

        self._auto = auto

    @property
    def branches(self):
        """Gets the branches of this InlineResponse20097Policy.  # noqa: E501


        :return: The branches of this InlineResponse20097Policy.  # noqa: E501
        :rtype: InlineResponse20097PolicyBranches
        """
        return self._branches

    @branches.setter
    def branches(self, branches):
        """Sets the branches of this InlineResponse20097Policy.


        :param branches: The branches of this InlineResponse20097Policy.  # noqa: E501
        :type: InlineResponse20097PolicyBranches
        """

        self._branches = branches

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse20097Policy.  # noqa: E501


        :return: The created_at of this InlineResponse20097Policy.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse20097Policy.


        :param created_at: The created_at of this InlineResponse20097Policy.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this InlineResponse20097Policy.  # noqa: E501


        :return: The created_by of this InlineResponse20097Policy.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this InlineResponse20097Policy.


        :param created_by: The created_by of this InlineResponse20097Policy.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def description(self):
        """Gets the description of this InlineResponse20097Policy.  # noqa: E501


        :return: The description of this InlineResponse20097Policy.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse20097Policy.


        :param description: The description of this InlineResponse20097Policy.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def host_prefix_set(self):
        """Gets the host_prefix_set of this InlineResponse20097Policy.  # noqa: E501


        :return: The host_prefix_set of this InlineResponse20097Policy.  # noqa: E501
        :rtype: InlineResponse20097PolicyHostPrefixSet
        """
        return self._host_prefix_set

    @host_prefix_set.setter
    def host_prefix_set(self, host_prefix_set):
        """Sets the host_prefix_set of this InlineResponse20097Policy.


        :param host_prefix_set: The host_prefix_set of this InlineResponse20097Policy.  # noqa: E501
        :type: InlineResponse20097PolicyHostPrefixSet
        """

        self._host_prefix_set = host_prefix_set

    @property
    def id(self):
        """Gets the id of this InlineResponse20097Policy.  # noqa: E501


        :return: The id of this InlineResponse20097Policy.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20097Policy.


        :param id: The id of this InlineResponse20097Policy.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def manual(self):
        """Gets the manual of this InlineResponse20097Policy.  # noqa: E501


        :return: The manual of this InlineResponse20097Policy.  # noqa: E501
        :rtype: InlineResponse20097PolicyManual
        """
        return self._manual

    @manual.setter
    def manual(self, manual):
        """Sets the manual of this InlineResponse20097Policy.


        :param manual: The manual of this InlineResponse20097Policy.  # noqa: E501
        :type: InlineResponse20097PolicyManual
        """

        self._manual = manual

    @property
    def name(self):
        """Gets the name of this InlineResponse20097Policy.  # noqa: E501


        :return: The name of this InlineResponse20097Policy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20097Policy.


        :param name: The name of this InlineResponse20097Policy.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def shared_prefixes(self):
        """Gets the shared_prefixes of this InlineResponse20097Policy.  # noqa: E501


        :return: The shared_prefixes of this InlineResponse20097Policy.  # noqa: E501
        :rtype: list[str]
        """
        return self._shared_prefixes

    @shared_prefixes.setter
    def shared_prefixes(self, shared_prefixes):
        """Sets the shared_prefixes of this InlineResponse20097Policy.


        :param shared_prefixes: The shared_prefixes of this InlineResponse20097Policy.  # noqa: E501
        :type: list[str]
        """

        self._shared_prefixes = shared_prefixes

    @property
    def shared_segment(self):
        """Gets the shared_segment of this InlineResponse20097Policy.  # noqa: E501


        :return: The shared_segment of this InlineResponse20097Policy.  # noqa: E501
        :rtype: V1devicesdeviceIddraftDraftSegments
        """
        return self._shared_segment

    @shared_segment.setter
    def shared_segment(self, shared_segment):
        """Sets the shared_segment of this InlineResponse20097Policy.


        :param shared_segment: The shared_segment of this InlineResponse20097Policy.  # noqa: E501
        :type: V1devicesdeviceIddraftDraftSegments
        """

        self._shared_segment = shared_segment

    @property
    def source(self):
        """Gets the source of this InlineResponse20097Policy.  # noqa: E501


        :return: The source of this InlineResponse20097Policy.  # noqa: E501
        :rtype: InlineResponse20097PolicyBranches
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this InlineResponse20097Policy.


        :param source: The source of this InlineResponse20097Policy.  # noqa: E501
        :type: InlineResponse20097PolicyBranches
        """

        self._source = source

    @property
    def target_segments(self):
        """Gets the target_segments of this InlineResponse20097Policy.  # noqa: E501


        :return: The target_segments of this InlineResponse20097Policy.  # noqa: E501
        :rtype: list[V1devicesdeviceIddraftDraftSegments]
        """
        return self._target_segments

    @target_segments.setter
    def target_segments(self, target_segments):
        """Sets the target_segments of this InlineResponse20097Policy.


        :param target_segments: The target_segments of this InlineResponse20097Policy.  # noqa: E501
        :type: list[V1devicesdeviceIddraftDraftSegments]
        """

        self._target_segments = target_segments

    @property
    def type(self):
        """Gets the type of this InlineResponse20097Policy.  # noqa: E501


        :return: The type of this InlineResponse20097Policy.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20097Policy.


        :param type: The type of this InlineResponse20097Policy.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this InlineResponse20097Policy.  # noqa: E501


        :return: The updated_at of this InlineResponse20097Policy.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InlineResponse20097Policy.


        :param updated_at: The updated_at of this InlineResponse20097Policy.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20097Policy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20097Policy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
