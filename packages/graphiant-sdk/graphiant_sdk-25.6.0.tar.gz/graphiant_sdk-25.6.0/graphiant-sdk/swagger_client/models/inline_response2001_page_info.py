# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001PageInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_page': 'str',
        'end_cursor': 'str',
        'has_next_page': 'str',
        'has_prev_page': 'str',
        'start_cursor': 'str',
        'total_pages': 'str',
        'total_records': 'str'
    }

    attribute_map = {
        'current_page': 'currentPage',
        'end_cursor': 'endCursor',
        'has_next_page': 'hasNextPage',
        'has_prev_page': 'hasPrevPage',
        'start_cursor': 'startCursor',
        'total_pages': 'totalPages',
        'total_records': 'totalRecords'
    }

    def __init__(self, current_page=None, end_cursor=None, has_next_page=None, has_prev_page=None, start_cursor=None, total_pages=None, total_records=None):  # noqa: E501
        """InlineResponse2001PageInfo - a model defined in Swagger"""  # noqa: E501
        self._current_page = None
        self._end_cursor = None
        self._has_next_page = None
        self._has_prev_page = None
        self._start_cursor = None
        self._total_pages = None
        self._total_records = None
        self.discriminator = None
        if current_page is not None:
            self.current_page = current_page
        if end_cursor is not None:
            self.end_cursor = end_cursor
        if has_next_page is not None:
            self.has_next_page = has_next_page
        if has_prev_page is not None:
            self.has_prev_page = has_prev_page
        if start_cursor is not None:
            self.start_cursor = start_cursor
        if total_pages is not None:
            self.total_pages = total_pages
        if total_records is not None:
            self.total_records = total_records

    @property
    def current_page(self):
        """Gets the current_page of this InlineResponse2001PageInfo.  # noqa: E501


        :return: The current_page of this InlineResponse2001PageInfo.  # noqa: E501
        :rtype: str
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this InlineResponse2001PageInfo.


        :param current_page: The current_page of this InlineResponse2001PageInfo.  # noqa: E501
        :type: str
        """

        self._current_page = current_page

    @property
    def end_cursor(self):
        """Gets the end_cursor of this InlineResponse2001PageInfo.  # noqa: E501


        :return: The end_cursor of this InlineResponse2001PageInfo.  # noqa: E501
        :rtype: str
        """
        return self._end_cursor

    @end_cursor.setter
    def end_cursor(self, end_cursor):
        """Sets the end_cursor of this InlineResponse2001PageInfo.


        :param end_cursor: The end_cursor of this InlineResponse2001PageInfo.  # noqa: E501
        :type: str
        """

        self._end_cursor = end_cursor

    @property
    def has_next_page(self):
        """Gets the has_next_page of this InlineResponse2001PageInfo.  # noqa: E501


        :return: The has_next_page of this InlineResponse2001PageInfo.  # noqa: E501
        :rtype: str
        """
        return self._has_next_page

    @has_next_page.setter
    def has_next_page(self, has_next_page):
        """Sets the has_next_page of this InlineResponse2001PageInfo.


        :param has_next_page: The has_next_page of this InlineResponse2001PageInfo.  # noqa: E501
        :type: str
        """

        self._has_next_page = has_next_page

    @property
    def has_prev_page(self):
        """Gets the has_prev_page of this InlineResponse2001PageInfo.  # noqa: E501


        :return: The has_prev_page of this InlineResponse2001PageInfo.  # noqa: E501
        :rtype: str
        """
        return self._has_prev_page

    @has_prev_page.setter
    def has_prev_page(self, has_prev_page):
        """Sets the has_prev_page of this InlineResponse2001PageInfo.


        :param has_prev_page: The has_prev_page of this InlineResponse2001PageInfo.  # noqa: E501
        :type: str
        """

        self._has_prev_page = has_prev_page

    @property
    def start_cursor(self):
        """Gets the start_cursor of this InlineResponse2001PageInfo.  # noqa: E501


        :return: The start_cursor of this InlineResponse2001PageInfo.  # noqa: E501
        :rtype: str
        """
        return self._start_cursor

    @start_cursor.setter
    def start_cursor(self, start_cursor):
        """Sets the start_cursor of this InlineResponse2001PageInfo.


        :param start_cursor: The start_cursor of this InlineResponse2001PageInfo.  # noqa: E501
        :type: str
        """

        self._start_cursor = start_cursor

    @property
    def total_pages(self):
        """Gets the total_pages of this InlineResponse2001PageInfo.  # noqa: E501


        :return: The total_pages of this InlineResponse2001PageInfo.  # noqa: E501
        :rtype: str
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this InlineResponse2001PageInfo.


        :param total_pages: The total_pages of this InlineResponse2001PageInfo.  # noqa: E501
        :type: str
        """

        self._total_pages = total_pages

    @property
    def total_records(self):
        """Gets the total_records of this InlineResponse2001PageInfo.  # noqa: E501


        :return: The total_records of this InlineResponse2001PageInfo.  # noqa: E501
        :rtype: str
        """
        return self._total_records

    @total_records.setter
    def total_records(self, total_records):
        """Sets the total_records of this InlineResponse2001PageInfo.


        :param total_records: The total_records of this InlineResponse2001PageInfo.  # noqa: E501
        :type: str
        """

        self._total_records = total_records

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001PageInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001PageInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
