# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2assurancetopologyclientsessionsFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_site_ids': 'list[str]',
        'region_ids': 'list[str]',
        'server_site_ids': 'list[str]'
    }

    attribute_map = {
        'client_site_ids': 'clientSiteIds',
        'region_ids': 'regionIds',
        'server_site_ids': 'serverSiteIds'
    }

    def __init__(self, client_site_ids=None, region_ids=None, server_site_ids=None):  # noqa: E501
        """V2assurancetopologyclientsessionsFilter - a model defined in Swagger"""  # noqa: E501
        self._client_site_ids = None
        self._region_ids = None
        self._server_site_ids = None
        self.discriminator = None
        if client_site_ids is not None:
            self.client_site_ids = client_site_ids
        if region_ids is not None:
            self.region_ids = region_ids
        if server_site_ids is not None:
            self.server_site_ids = server_site_ids

    @property
    def client_site_ids(self):
        """Gets the client_site_ids of this V2assurancetopologyclientsessionsFilter.  # noqa: E501


        :return: The client_site_ids of this V2assurancetopologyclientsessionsFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._client_site_ids

    @client_site_ids.setter
    def client_site_ids(self, client_site_ids):
        """Sets the client_site_ids of this V2assurancetopologyclientsessionsFilter.


        :param client_site_ids: The client_site_ids of this V2assurancetopologyclientsessionsFilter.  # noqa: E501
        :type: list[str]
        """

        self._client_site_ids = client_site_ids

    @property
    def region_ids(self):
        """Gets the region_ids of this V2assurancetopologyclientsessionsFilter.  # noqa: E501


        :return: The region_ids of this V2assurancetopologyclientsessionsFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._region_ids

    @region_ids.setter
    def region_ids(self, region_ids):
        """Sets the region_ids of this V2assurancetopologyclientsessionsFilter.


        :param region_ids: The region_ids of this V2assurancetopologyclientsessionsFilter.  # noqa: E501
        :type: list[str]
        """

        self._region_ids = region_ids

    @property
    def server_site_ids(self):
        """Gets the server_site_ids of this V2assurancetopologyclientsessionsFilter.  # noqa: E501


        :return: The server_site_ids of this V2assurancetopologyclientsessionsFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._server_site_ids

    @server_site_ids.setter
    def server_site_ids(self, server_site_ids):
        """Sets the server_site_ids of this V2assurancetopologyclientsessionsFilter.


        :param server_site_ids: The server_site_ids of this V2assurancetopologyclientsessionsFilter.  # noqa: E501
        :type: list[str]
        """

        self._server_site_ids = server_site_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2assurancetopologyclientsessionsFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2assurancetopologyclientsessionsFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
