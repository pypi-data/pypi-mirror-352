# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200221BwusageSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bwuage_region': 'list[InlineResponse200214BwusageDetailsBwusageRegion]',
        'edge_count': 'str',
        'provider_count': 'str',
        'usage_kbps': 'str'
    }

    attribute_map = {
        'bwuage_region': 'bwuageRegion',
        'edge_count': 'edgeCount',
        'provider_count': 'providerCount',
        'usage_kbps': 'usageKbps'
    }

    def __init__(self, bwuage_region=None, edge_count=None, provider_count=None, usage_kbps=None):  # noqa: E501
        """InlineResponse200221BwusageSummary - a model defined in Swagger"""  # noqa: E501
        self._bwuage_region = None
        self._edge_count = None
        self._provider_count = None
        self._usage_kbps = None
        self.discriminator = None
        if bwuage_region is not None:
            self.bwuage_region = bwuage_region
        if edge_count is not None:
            self.edge_count = edge_count
        if provider_count is not None:
            self.provider_count = provider_count
        if usage_kbps is not None:
            self.usage_kbps = usage_kbps

    @property
    def bwuage_region(self):
        """Gets the bwuage_region of this InlineResponse200221BwusageSummary.  # noqa: E501


        :return: The bwuage_region of this InlineResponse200221BwusageSummary.  # noqa: E501
        :rtype: list[InlineResponse200214BwusageDetailsBwusageRegion]
        """
        return self._bwuage_region

    @bwuage_region.setter
    def bwuage_region(self, bwuage_region):
        """Sets the bwuage_region of this InlineResponse200221BwusageSummary.


        :param bwuage_region: The bwuage_region of this InlineResponse200221BwusageSummary.  # noqa: E501
        :type: list[InlineResponse200214BwusageDetailsBwusageRegion]
        """

        self._bwuage_region = bwuage_region

    @property
    def edge_count(self):
        """Gets the edge_count of this InlineResponse200221BwusageSummary.  # noqa: E501


        :return: The edge_count of this InlineResponse200221BwusageSummary.  # noqa: E501
        :rtype: str
        """
        return self._edge_count

    @edge_count.setter
    def edge_count(self, edge_count):
        """Sets the edge_count of this InlineResponse200221BwusageSummary.


        :param edge_count: The edge_count of this InlineResponse200221BwusageSummary.  # noqa: E501
        :type: str
        """

        self._edge_count = edge_count

    @property
    def provider_count(self):
        """Gets the provider_count of this InlineResponse200221BwusageSummary.  # noqa: E501


        :return: The provider_count of this InlineResponse200221BwusageSummary.  # noqa: E501
        :rtype: str
        """
        return self._provider_count

    @provider_count.setter
    def provider_count(self, provider_count):
        """Sets the provider_count of this InlineResponse200221BwusageSummary.


        :param provider_count: The provider_count of this InlineResponse200221BwusageSummary.  # noqa: E501
        :type: str
        """

        self._provider_count = provider_count

    @property
    def usage_kbps(self):
        """Gets the usage_kbps of this InlineResponse200221BwusageSummary.  # noqa: E501


        :return: The usage_kbps of this InlineResponse200221BwusageSummary.  # noqa: E501
        :rtype: str
        """
        return self._usage_kbps

    @usage_kbps.setter
    def usage_kbps(self, usage_kbps):
        """Sets the usage_kbps of this InlineResponse200221BwusageSummary.


        :param usage_kbps: The usage_kbps of this InlineResponse200221BwusageSummary.  # noqa: E501
        :type: str
        """

        self._usage_kbps = usage_kbps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200221BwusageSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200221BwusageSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
