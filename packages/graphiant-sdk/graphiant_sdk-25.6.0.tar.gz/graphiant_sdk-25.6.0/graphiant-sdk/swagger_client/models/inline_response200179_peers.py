# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200179Peers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bgp_connection': 'InlineResponse200179BgpConnection',
        'connection_quality': 'str',
        'device_id': 'str',
        'gdi': 'str',
        'hostname': 'str',
        'ipsec_connection': 'InlineResponse200179IpsecConnection',
        'state': 'str',
        'wan_addresses': 'list[str]'
    }

    attribute_map = {
        'bgp_connection': 'bgpConnection',
        'connection_quality': 'connectionQuality',
        'device_id': 'deviceId',
        'gdi': 'gdi',
        'hostname': 'hostname',
        'ipsec_connection': 'ipsecConnection',
        'state': 'state',
        'wan_addresses': 'wanAddresses'
    }

    def __init__(self, bgp_connection=None, connection_quality=None, device_id=None, gdi=None, hostname=None, ipsec_connection=None, state=None, wan_addresses=None):  # noqa: E501
        """InlineResponse200179Peers - a model defined in Swagger"""  # noqa: E501
        self._bgp_connection = None
        self._connection_quality = None
        self._device_id = None
        self._gdi = None
        self._hostname = None
        self._ipsec_connection = None
        self._state = None
        self._wan_addresses = None
        self.discriminator = None
        if bgp_connection is not None:
            self.bgp_connection = bgp_connection
        if connection_quality is not None:
            self.connection_quality = connection_quality
        if device_id is not None:
            self.device_id = device_id
        if gdi is not None:
            self.gdi = gdi
        if hostname is not None:
            self.hostname = hostname
        if ipsec_connection is not None:
            self.ipsec_connection = ipsec_connection
        if state is not None:
            self.state = state
        if wan_addresses is not None:
            self.wan_addresses = wan_addresses

    @property
    def bgp_connection(self):
        """Gets the bgp_connection of this InlineResponse200179Peers.  # noqa: E501


        :return: The bgp_connection of this InlineResponse200179Peers.  # noqa: E501
        :rtype: InlineResponse200179BgpConnection
        """
        return self._bgp_connection

    @bgp_connection.setter
    def bgp_connection(self, bgp_connection):
        """Sets the bgp_connection of this InlineResponse200179Peers.


        :param bgp_connection: The bgp_connection of this InlineResponse200179Peers.  # noqa: E501
        :type: InlineResponse200179BgpConnection
        """

        self._bgp_connection = bgp_connection

    @property
    def connection_quality(self):
        """Gets the connection_quality of this InlineResponse200179Peers.  # noqa: E501


        :return: The connection_quality of this InlineResponse200179Peers.  # noqa: E501
        :rtype: str
        """
        return self._connection_quality

    @connection_quality.setter
    def connection_quality(self, connection_quality):
        """Sets the connection_quality of this InlineResponse200179Peers.


        :param connection_quality: The connection_quality of this InlineResponse200179Peers.  # noqa: E501
        :type: str
        """

        self._connection_quality = connection_quality

    @property
    def device_id(self):
        """Gets the device_id of this InlineResponse200179Peers.  # noqa: E501


        :return: The device_id of this InlineResponse200179Peers.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this InlineResponse200179Peers.


        :param device_id: The device_id of this InlineResponse200179Peers.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def gdi(self):
        """Gets the gdi of this InlineResponse200179Peers.  # noqa: E501


        :return: The gdi of this InlineResponse200179Peers.  # noqa: E501
        :rtype: str
        """
        return self._gdi

    @gdi.setter
    def gdi(self, gdi):
        """Sets the gdi of this InlineResponse200179Peers.


        :param gdi: The gdi of this InlineResponse200179Peers.  # noqa: E501
        :type: str
        """

        self._gdi = gdi

    @property
    def hostname(self):
        """Gets the hostname of this InlineResponse200179Peers.  # noqa: E501


        :return: The hostname of this InlineResponse200179Peers.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this InlineResponse200179Peers.


        :param hostname: The hostname of this InlineResponse200179Peers.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def ipsec_connection(self):
        """Gets the ipsec_connection of this InlineResponse200179Peers.  # noqa: E501


        :return: The ipsec_connection of this InlineResponse200179Peers.  # noqa: E501
        :rtype: InlineResponse200179IpsecConnection
        """
        return self._ipsec_connection

    @ipsec_connection.setter
    def ipsec_connection(self, ipsec_connection):
        """Sets the ipsec_connection of this InlineResponse200179Peers.


        :param ipsec_connection: The ipsec_connection of this InlineResponse200179Peers.  # noqa: E501
        :type: InlineResponse200179IpsecConnection
        """

        self._ipsec_connection = ipsec_connection

    @property
    def state(self):
        """Gets the state of this InlineResponse200179Peers.  # noqa: E501


        :return: The state of this InlineResponse200179Peers.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse200179Peers.


        :param state: The state of this InlineResponse200179Peers.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def wan_addresses(self):
        """Gets the wan_addresses of this InlineResponse200179Peers.  # noqa: E501


        :return: The wan_addresses of this InlineResponse200179Peers.  # noqa: E501
        :rtype: list[str]
        """
        return self._wan_addresses

    @wan_addresses.setter
    def wan_addresses(self, wan_addresses):
        """Sets the wan_addresses of this InlineResponse200179Peers.


        :param wan_addresses: The wan_addresses of this InlineResponse200179Peers.  # noqa: E501
        :type: list[str]
        """

        self._wan_addresses = wan_addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200179Peers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200179Peers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
