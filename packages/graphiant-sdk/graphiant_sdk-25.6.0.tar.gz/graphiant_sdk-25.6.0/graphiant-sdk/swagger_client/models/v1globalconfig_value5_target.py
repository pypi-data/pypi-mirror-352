# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1globalconfigValue5Target(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'str',
        'global_id': 'str',
        'host': 'str',
        'interface_name': 'str',
        'is_global_sync': 'str',
        'name': 'str',
        'port': 'str',
        'severity': 'str',
        'transport': 'str',
        'vrf_id': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        'global_id': 'globalId',
        'host': 'host',
        'interface_name': 'interfaceName',
        'is_global_sync': 'isGlobalSync',
        'name': 'name',
        'port': 'port',
        'severity': 'severity',
        'transport': 'transport',
        'vrf_id': 'vrfId'
    }

    def __init__(self, enabled=None, global_id=None, host=None, interface_name=None, is_global_sync=None, name=None, port=None, severity=None, transport=None, vrf_id=None):  # noqa: E501
        """V1globalconfigValue5Target - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._global_id = None
        self._host = None
        self._interface_name = None
        self._is_global_sync = None
        self._name = None
        self._port = None
        self._severity = None
        self._transport = None
        self._vrf_id = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if global_id is not None:
            self.global_id = global_id
        if host is not None:
            self.host = host
        if interface_name is not None:
            self.interface_name = interface_name
        if is_global_sync is not None:
            self.is_global_sync = is_global_sync
        if name is not None:
            self.name = name
        if port is not None:
            self.port = port
        if severity is not None:
            self.severity = severity
        if transport is not None:
            self.transport = transport
        if vrf_id is not None:
            self.vrf_id = vrf_id

    @property
    def enabled(self):
        """Gets the enabled of this V1globalconfigValue5Target.  # noqa: E501


        :return: The enabled of this V1globalconfigValue5Target.  # noqa: E501
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this V1globalconfigValue5Target.


        :param enabled: The enabled of this V1globalconfigValue5Target.  # noqa: E501
        :type: str
        """

        self._enabled = enabled

    @property
    def global_id(self):
        """Gets the global_id of this V1globalconfigValue5Target.  # noqa: E501


        :return: The global_id of this V1globalconfigValue5Target.  # noqa: E501
        :rtype: str
        """
        return self._global_id

    @global_id.setter
    def global_id(self, global_id):
        """Sets the global_id of this V1globalconfigValue5Target.


        :param global_id: The global_id of this V1globalconfigValue5Target.  # noqa: E501
        :type: str
        """

        self._global_id = global_id

    @property
    def host(self):
        """Gets the host of this V1globalconfigValue5Target.  # noqa: E501


        :return: The host of this V1globalconfigValue5Target.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this V1globalconfigValue5Target.


        :param host: The host of this V1globalconfigValue5Target.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def interface_name(self):
        """Gets the interface_name of this V1globalconfigValue5Target.  # noqa: E501


        :return: The interface_name of this V1globalconfigValue5Target.  # noqa: E501
        :rtype: str
        """
        return self._interface_name

    @interface_name.setter
    def interface_name(self, interface_name):
        """Sets the interface_name of this V1globalconfigValue5Target.


        :param interface_name: The interface_name of this V1globalconfigValue5Target.  # noqa: E501
        :type: str
        """

        self._interface_name = interface_name

    @property
    def is_global_sync(self):
        """Gets the is_global_sync of this V1globalconfigValue5Target.  # noqa: E501


        :return: The is_global_sync of this V1globalconfigValue5Target.  # noqa: E501
        :rtype: str
        """
        return self._is_global_sync

    @is_global_sync.setter
    def is_global_sync(self, is_global_sync):
        """Sets the is_global_sync of this V1globalconfigValue5Target.


        :param is_global_sync: The is_global_sync of this V1globalconfigValue5Target.  # noqa: E501
        :type: str
        """

        self._is_global_sync = is_global_sync

    @property
    def name(self):
        """Gets the name of this V1globalconfigValue5Target.  # noqa: E501


        :return: The name of this V1globalconfigValue5Target.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1globalconfigValue5Target.


        :param name: The name of this V1globalconfigValue5Target.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def port(self):
        """Gets the port of this V1globalconfigValue5Target.  # noqa: E501


        :return: The port of this V1globalconfigValue5Target.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this V1globalconfigValue5Target.


        :param port: The port of this V1globalconfigValue5Target.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def severity(self):
        """Gets the severity of this V1globalconfigValue5Target.  # noqa: E501


        :return: The severity of this V1globalconfigValue5Target.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this V1globalconfigValue5Target.


        :param severity: The severity of this V1globalconfigValue5Target.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def transport(self):
        """Gets the transport of this V1globalconfigValue5Target.  # noqa: E501


        :return: The transport of this V1globalconfigValue5Target.  # noqa: E501
        :rtype: str
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this V1globalconfigValue5Target.


        :param transport: The transport of this V1globalconfigValue5Target.  # noqa: E501
        :type: str
        """

        self._transport = transport

    @property
    def vrf_id(self):
        """Gets the vrf_id of this V1globalconfigValue5Target.  # noqa: E501


        :return: The vrf_id of this V1globalconfigValue5Target.  # noqa: E501
        :rtype: str
        """
        return self._vrf_id

    @vrf_id.setter
    def vrf_id(self, vrf_id):
        """Sets the vrf_id of this V1globalconfigValue5Target.


        :param vrf_id: The vrf_id of this V1globalconfigValue5Target.  # noqa: E501
        :type: str
        """

        self._vrf_id = vrf_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1globalconfigValue5Target, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1globalconfigValue5Target):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
