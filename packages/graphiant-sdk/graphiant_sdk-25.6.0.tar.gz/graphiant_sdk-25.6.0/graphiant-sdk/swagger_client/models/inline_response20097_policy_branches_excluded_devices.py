# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20097PolicyBranchesExcludedDevices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bgp': 'object',
        'bgp_enabled': 'str',
        'circuits': 'list[object]',
        'config_updated_at': 'object',
        'created_at': 'object',
        'dhcp_server_enabled': 'str',
        'dns': 'object',
        'gdi': 'str',
        'hostname': 'str',
        'id': 'str',
        'interfaces': 'list[object]',
        'internal_state': 'str',
        'ipfix_enabled': 'str',
        'ipfix_exporters': 'list[object]',
        'ipsec_tunnels': 'list[object]',
        'last_booted_at': 'object',
        'lldp_enabled': 'str',
        'local_route_tag': 'object',
        'local_web_server_password': 'str',
        'location': 'object',
        'maintenance_mode': 'str',
        'nat_policy': 'object',
        'notes': 'str',
        'oper_staled': 'str',
        'oper_staled_at': 'object',
        'oper_updated_at': 'object',
        'ospfv2_enabled': 'str',
        'ospfv3_enabled': 'str',
        'platform': 'str',
        'prefix_sets': 'list[object]',
        'reboot_reason': 'str',
        'region': 'object',
        'region_override': 'object',
        'role': 'str',
        'routing_policies': 'list[object]',
        'segments': 'list[object]',
        'serial_number': 'str',
        'site': 'object',
        'snmp': 'object',
        'software_version': 'str',
        'static_routes_enabled': 'str',
        'status': 'str',
        'traffic_policy': 'object',
        'uptime': 'object',
        'vrrp_enabled': 'str'
    }

    attribute_map = {
        'bgp': 'bgp',
        'bgp_enabled': 'bgpEnabled',
        'circuits': 'circuits',
        'config_updated_at': 'configUpdatedAt',
        'created_at': 'createdAt',
        'dhcp_server_enabled': 'dhcpServerEnabled',
        'dns': 'dns',
        'gdi': 'gdi',
        'hostname': 'hostname',
        'id': 'id',
        'interfaces': 'interfaces',
        'internal_state': 'internalState',
        'ipfix_enabled': 'ipfixEnabled',
        'ipfix_exporters': 'ipfixExporters',
        'ipsec_tunnels': 'ipsecTunnels',
        'last_booted_at': 'lastBootedAt',
        'lldp_enabled': 'lldpEnabled',
        'local_route_tag': 'localRouteTag',
        'local_web_server_password': 'localWebServerPassword',
        'location': 'location',
        'maintenance_mode': 'maintenanceMode',
        'nat_policy': 'natPolicy',
        'notes': 'notes',
        'oper_staled': 'operStaled',
        'oper_staled_at': 'operStaledAt',
        'oper_updated_at': 'operUpdatedAt',
        'ospfv2_enabled': 'ospfv2Enabled',
        'ospfv3_enabled': 'ospfv3Enabled',
        'platform': 'platform',
        'prefix_sets': 'prefixSets',
        'reboot_reason': 'rebootReason',
        'region': 'region',
        'region_override': 'regionOverride',
        'role': 'role',
        'routing_policies': 'routingPolicies',
        'segments': 'segments',
        'serial_number': 'serialNumber',
        'site': 'site',
        'snmp': 'snmp',
        'software_version': 'softwareVersion',
        'static_routes_enabled': 'staticRoutesEnabled',
        'status': 'status',
        'traffic_policy': 'trafficPolicy',
        'uptime': 'uptime',
        'vrrp_enabled': 'vrrpEnabled'
    }

    def __init__(self, bgp=None, bgp_enabled=None, circuits=None, config_updated_at=None, created_at=None, dhcp_server_enabled=None, dns=None, gdi=None, hostname=None, id=None, interfaces=None, internal_state=None, ipfix_enabled=None, ipfix_exporters=None, ipsec_tunnels=None, last_booted_at=None, lldp_enabled=None, local_route_tag=None, local_web_server_password=None, location=None, maintenance_mode=None, nat_policy=None, notes=None, oper_staled=None, oper_staled_at=None, oper_updated_at=None, ospfv2_enabled=None, ospfv3_enabled=None, platform=None, prefix_sets=None, reboot_reason=None, region=None, region_override=None, role=None, routing_policies=None, segments=None, serial_number=None, site=None, snmp=None, software_version=None, static_routes_enabled=None, status=None, traffic_policy=None, uptime=None, vrrp_enabled=None):  # noqa: E501
        """InlineResponse20097PolicyBranchesExcludedDevices - a model defined in Swagger"""  # noqa: E501
        self._bgp = None
        self._bgp_enabled = None
        self._circuits = None
        self._config_updated_at = None
        self._created_at = None
        self._dhcp_server_enabled = None
        self._dns = None
        self._gdi = None
        self._hostname = None
        self._id = None
        self._interfaces = None
        self._internal_state = None
        self._ipfix_enabled = None
        self._ipfix_exporters = None
        self._ipsec_tunnels = None
        self._last_booted_at = None
        self._lldp_enabled = None
        self._local_route_tag = None
        self._local_web_server_password = None
        self._location = None
        self._maintenance_mode = None
        self._nat_policy = None
        self._notes = None
        self._oper_staled = None
        self._oper_staled_at = None
        self._oper_updated_at = None
        self._ospfv2_enabled = None
        self._ospfv3_enabled = None
        self._platform = None
        self._prefix_sets = None
        self._reboot_reason = None
        self._region = None
        self._region_override = None
        self._role = None
        self._routing_policies = None
        self._segments = None
        self._serial_number = None
        self._site = None
        self._snmp = None
        self._software_version = None
        self._static_routes_enabled = None
        self._status = None
        self._traffic_policy = None
        self._uptime = None
        self._vrrp_enabled = None
        self.discriminator = None
        if bgp is not None:
            self.bgp = bgp
        if bgp_enabled is not None:
            self.bgp_enabled = bgp_enabled
        if circuits is not None:
            self.circuits = circuits
        if config_updated_at is not None:
            self.config_updated_at = config_updated_at
        if created_at is not None:
            self.created_at = created_at
        if dhcp_server_enabled is not None:
            self.dhcp_server_enabled = dhcp_server_enabled
        if dns is not None:
            self.dns = dns
        if gdi is not None:
            self.gdi = gdi
        if hostname is not None:
            self.hostname = hostname
        if id is not None:
            self.id = id
        if interfaces is not None:
            self.interfaces = interfaces
        if internal_state is not None:
            self.internal_state = internal_state
        if ipfix_enabled is not None:
            self.ipfix_enabled = ipfix_enabled
        if ipfix_exporters is not None:
            self.ipfix_exporters = ipfix_exporters
        if ipsec_tunnels is not None:
            self.ipsec_tunnels = ipsec_tunnels
        if last_booted_at is not None:
            self.last_booted_at = last_booted_at
        if lldp_enabled is not None:
            self.lldp_enabled = lldp_enabled
        if local_route_tag is not None:
            self.local_route_tag = local_route_tag
        if local_web_server_password is not None:
            self.local_web_server_password = local_web_server_password
        if location is not None:
            self.location = location
        if maintenance_mode is not None:
            self.maintenance_mode = maintenance_mode
        if nat_policy is not None:
            self.nat_policy = nat_policy
        if notes is not None:
            self.notes = notes
        if oper_staled is not None:
            self.oper_staled = oper_staled
        if oper_staled_at is not None:
            self.oper_staled_at = oper_staled_at
        if oper_updated_at is not None:
            self.oper_updated_at = oper_updated_at
        if ospfv2_enabled is not None:
            self.ospfv2_enabled = ospfv2_enabled
        if ospfv3_enabled is not None:
            self.ospfv3_enabled = ospfv3_enabled
        if platform is not None:
            self.platform = platform
        if prefix_sets is not None:
            self.prefix_sets = prefix_sets
        if reboot_reason is not None:
            self.reboot_reason = reboot_reason
        if region is not None:
            self.region = region
        if region_override is not None:
            self.region_override = region_override
        if role is not None:
            self.role = role
        if routing_policies is not None:
            self.routing_policies = routing_policies
        if segments is not None:
            self.segments = segments
        if serial_number is not None:
            self.serial_number = serial_number
        if site is not None:
            self.site = site
        if snmp is not None:
            self.snmp = snmp
        if software_version is not None:
            self.software_version = software_version
        if static_routes_enabled is not None:
            self.static_routes_enabled = static_routes_enabled
        if status is not None:
            self.status = status
        if traffic_policy is not None:
            self.traffic_policy = traffic_policy
        if uptime is not None:
            self.uptime = uptime
        if vrrp_enabled is not None:
            self.vrrp_enabled = vrrp_enabled

    @property
    def bgp(self):
        """Gets the bgp of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The bgp of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: object
        """
        return self._bgp

    @bgp.setter
    def bgp(self, bgp):
        """Sets the bgp of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param bgp: The bgp of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: object
        """

        self._bgp = bgp

    @property
    def bgp_enabled(self):
        """Gets the bgp_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The bgp_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._bgp_enabled

    @bgp_enabled.setter
    def bgp_enabled(self, bgp_enabled):
        """Sets the bgp_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param bgp_enabled: The bgp_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._bgp_enabled = bgp_enabled

    @property
    def circuits(self):
        """Gets the circuits of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The circuits of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: list[object]
        """
        return self._circuits

    @circuits.setter
    def circuits(self, circuits):
        """Sets the circuits of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param circuits: The circuits of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: list[object]
        """

        self._circuits = circuits

    @property
    def config_updated_at(self):
        """Gets the config_updated_at of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The config_updated_at of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: object
        """
        return self._config_updated_at

    @config_updated_at.setter
    def config_updated_at(self, config_updated_at):
        """Sets the config_updated_at of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param config_updated_at: The config_updated_at of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: object
        """

        self._config_updated_at = config_updated_at

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The created_at of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: object
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param created_at: The created_at of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: object
        """

        self._created_at = created_at

    @property
    def dhcp_server_enabled(self):
        """Gets the dhcp_server_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The dhcp_server_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._dhcp_server_enabled

    @dhcp_server_enabled.setter
    def dhcp_server_enabled(self, dhcp_server_enabled):
        """Sets the dhcp_server_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param dhcp_server_enabled: The dhcp_server_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._dhcp_server_enabled = dhcp_server_enabled

    @property
    def dns(self):
        """Gets the dns of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The dns of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: object
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param dns: The dns of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: object
        """

        self._dns = dns

    @property
    def gdi(self):
        """Gets the gdi of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The gdi of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._gdi

    @gdi.setter
    def gdi(self, gdi):
        """Sets the gdi of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param gdi: The gdi of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._gdi = gdi

    @property
    def hostname(self):
        """Gets the hostname of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The hostname of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param hostname: The hostname of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def id(self):
        """Gets the id of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The id of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param id: The id of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def interfaces(self):
        """Gets the interfaces of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The interfaces of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: list[object]
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """Sets the interfaces of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param interfaces: The interfaces of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: list[object]
        """

        self._interfaces = interfaces

    @property
    def internal_state(self):
        """Gets the internal_state of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The internal_state of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._internal_state

    @internal_state.setter
    def internal_state(self, internal_state):
        """Sets the internal_state of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param internal_state: The internal_state of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._internal_state = internal_state

    @property
    def ipfix_enabled(self):
        """Gets the ipfix_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The ipfix_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._ipfix_enabled

    @ipfix_enabled.setter
    def ipfix_enabled(self, ipfix_enabled):
        """Sets the ipfix_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param ipfix_enabled: The ipfix_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._ipfix_enabled = ipfix_enabled

    @property
    def ipfix_exporters(self):
        """Gets the ipfix_exporters of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The ipfix_exporters of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: list[object]
        """
        return self._ipfix_exporters

    @ipfix_exporters.setter
    def ipfix_exporters(self, ipfix_exporters):
        """Sets the ipfix_exporters of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param ipfix_exporters: The ipfix_exporters of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: list[object]
        """

        self._ipfix_exporters = ipfix_exporters

    @property
    def ipsec_tunnels(self):
        """Gets the ipsec_tunnels of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The ipsec_tunnels of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: list[object]
        """
        return self._ipsec_tunnels

    @ipsec_tunnels.setter
    def ipsec_tunnels(self, ipsec_tunnels):
        """Sets the ipsec_tunnels of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param ipsec_tunnels: The ipsec_tunnels of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: list[object]
        """

        self._ipsec_tunnels = ipsec_tunnels

    @property
    def last_booted_at(self):
        """Gets the last_booted_at of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The last_booted_at of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: object
        """
        return self._last_booted_at

    @last_booted_at.setter
    def last_booted_at(self, last_booted_at):
        """Sets the last_booted_at of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param last_booted_at: The last_booted_at of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: object
        """

        self._last_booted_at = last_booted_at

    @property
    def lldp_enabled(self):
        """Gets the lldp_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The lldp_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._lldp_enabled

    @lldp_enabled.setter
    def lldp_enabled(self, lldp_enabled):
        """Sets the lldp_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param lldp_enabled: The lldp_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._lldp_enabled = lldp_enabled

    @property
    def local_route_tag(self):
        """Gets the local_route_tag of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The local_route_tag of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: object
        """
        return self._local_route_tag

    @local_route_tag.setter
    def local_route_tag(self, local_route_tag):
        """Sets the local_route_tag of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param local_route_tag: The local_route_tag of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: object
        """

        self._local_route_tag = local_route_tag

    @property
    def local_web_server_password(self):
        """Gets the local_web_server_password of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The local_web_server_password of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._local_web_server_password

    @local_web_server_password.setter
    def local_web_server_password(self, local_web_server_password):
        """Sets the local_web_server_password of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param local_web_server_password: The local_web_server_password of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._local_web_server_password = local_web_server_password

    @property
    def location(self):
        """Gets the location of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The location of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: object
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param location: The location of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: object
        """

        self._location = location

    @property
    def maintenance_mode(self):
        """Gets the maintenance_mode of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The maintenance_mode of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """Sets the maintenance_mode of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param maintenance_mode: The maintenance_mode of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._maintenance_mode = maintenance_mode

    @property
    def nat_policy(self):
        """Gets the nat_policy of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The nat_policy of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: object
        """
        return self._nat_policy

    @nat_policy.setter
    def nat_policy(self, nat_policy):
        """Sets the nat_policy of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param nat_policy: The nat_policy of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: object
        """

        self._nat_policy = nat_policy

    @property
    def notes(self):
        """Gets the notes of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The notes of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param notes: The notes of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def oper_staled(self):
        """Gets the oper_staled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The oper_staled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._oper_staled

    @oper_staled.setter
    def oper_staled(self, oper_staled):
        """Sets the oper_staled of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param oper_staled: The oper_staled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._oper_staled = oper_staled

    @property
    def oper_staled_at(self):
        """Gets the oper_staled_at of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The oper_staled_at of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: object
        """
        return self._oper_staled_at

    @oper_staled_at.setter
    def oper_staled_at(self, oper_staled_at):
        """Sets the oper_staled_at of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param oper_staled_at: The oper_staled_at of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: object
        """

        self._oper_staled_at = oper_staled_at

    @property
    def oper_updated_at(self):
        """Gets the oper_updated_at of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The oper_updated_at of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: object
        """
        return self._oper_updated_at

    @oper_updated_at.setter
    def oper_updated_at(self, oper_updated_at):
        """Sets the oper_updated_at of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param oper_updated_at: The oper_updated_at of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: object
        """

        self._oper_updated_at = oper_updated_at

    @property
    def ospfv2_enabled(self):
        """Gets the ospfv2_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The ospfv2_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._ospfv2_enabled

    @ospfv2_enabled.setter
    def ospfv2_enabled(self, ospfv2_enabled):
        """Sets the ospfv2_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param ospfv2_enabled: The ospfv2_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._ospfv2_enabled = ospfv2_enabled

    @property
    def ospfv3_enabled(self):
        """Gets the ospfv3_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The ospfv3_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._ospfv3_enabled

    @ospfv3_enabled.setter
    def ospfv3_enabled(self, ospfv3_enabled):
        """Sets the ospfv3_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param ospfv3_enabled: The ospfv3_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._ospfv3_enabled = ospfv3_enabled

    @property
    def platform(self):
        """Gets the platform of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The platform of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param platform: The platform of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def prefix_sets(self):
        """Gets the prefix_sets of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The prefix_sets of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: list[object]
        """
        return self._prefix_sets

    @prefix_sets.setter
    def prefix_sets(self, prefix_sets):
        """Sets the prefix_sets of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param prefix_sets: The prefix_sets of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: list[object]
        """

        self._prefix_sets = prefix_sets

    @property
    def reboot_reason(self):
        """Gets the reboot_reason of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The reboot_reason of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._reboot_reason

    @reboot_reason.setter
    def reboot_reason(self, reboot_reason):
        """Sets the reboot_reason of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param reboot_reason: The reboot_reason of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._reboot_reason = reboot_reason

    @property
    def region(self):
        """Gets the region of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The region of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: object
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param region: The region of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: object
        """

        self._region = region

    @property
    def region_override(self):
        """Gets the region_override of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The region_override of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: object
        """
        return self._region_override

    @region_override.setter
    def region_override(self, region_override):
        """Sets the region_override of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param region_override: The region_override of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: object
        """

        self._region_override = region_override

    @property
    def role(self):
        """Gets the role of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The role of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param role: The role of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def routing_policies(self):
        """Gets the routing_policies of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The routing_policies of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: list[object]
        """
        return self._routing_policies

    @routing_policies.setter
    def routing_policies(self, routing_policies):
        """Sets the routing_policies of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param routing_policies: The routing_policies of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: list[object]
        """

        self._routing_policies = routing_policies

    @property
    def segments(self):
        """Gets the segments of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The segments of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: list[object]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param segments: The segments of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: list[object]
        """

        self._segments = segments

    @property
    def serial_number(self):
        """Gets the serial_number of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The serial_number of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param serial_number: The serial_number of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def site(self):
        """Gets the site of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The site of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: object
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param site: The site of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: object
        """

        self._site = site

    @property
    def snmp(self):
        """Gets the snmp of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The snmp of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: object
        """
        return self._snmp

    @snmp.setter
    def snmp(self, snmp):
        """Sets the snmp of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param snmp: The snmp of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: object
        """

        self._snmp = snmp

    @property
    def software_version(self):
        """Gets the software_version of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The software_version of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param software_version: The software_version of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def static_routes_enabled(self):
        """Gets the static_routes_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The static_routes_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._static_routes_enabled

    @static_routes_enabled.setter
    def static_routes_enabled(self, static_routes_enabled):
        """Sets the static_routes_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param static_routes_enabled: The static_routes_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._static_routes_enabled = static_routes_enabled

    @property
    def status(self):
        """Gets the status of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The status of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param status: The status of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def traffic_policy(self):
        """Gets the traffic_policy of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The traffic_policy of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: object
        """
        return self._traffic_policy

    @traffic_policy.setter
    def traffic_policy(self, traffic_policy):
        """Sets the traffic_policy of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param traffic_policy: The traffic_policy of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: object
        """

        self._traffic_policy = traffic_policy

    @property
    def uptime(self):
        """Gets the uptime of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The uptime of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: object
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param uptime: The uptime of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: object
        """

        self._uptime = uptime

    @property
    def vrrp_enabled(self):
        """Gets the vrrp_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501


        :return: The vrrp_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :rtype: str
        """
        return self._vrrp_enabled

    @vrrp_enabled.setter
    def vrrp_enabled(self, vrrp_enabled):
        """Sets the vrrp_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.


        :param vrrp_enabled: The vrrp_enabled of this InlineResponse20097PolicyBranchesExcludedDevices.  # noqa: E501
        :type: str
        """

        self._vrrp_enabled = vrrp_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20097PolicyBranchesExcludedDevices, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20097PolicyBranchesExcludedDevices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
