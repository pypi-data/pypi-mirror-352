# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppsBandwidthBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_id': 'str',
        'device_id': 'str',
        'dl_circuit_name': 'str',
        'is_dia': 'str',
        'sla_class': 'str',
        'time_window': 'V2assistantgetconversationdetailsTimeWindow',
        'ul_circuit_name': 'str'
    }

    attribute_map = {
        'app_id': 'appId',
        'device_id': 'deviceId',
        'dl_circuit_name': 'dlCircuitName',
        'is_dia': 'isDia',
        'sla_class': 'slaClass',
        'time_window': 'timeWindow',
        'ul_circuit_name': 'ulCircuitName'
    }

    def __init__(self, app_id=None, device_id=None, dl_circuit_name=None, is_dia=None, sla_class=None, time_window=None, ul_circuit_name=None):  # noqa: E501
        """AppsBandwidthBody - a model defined in Swagger"""  # noqa: E501
        self._app_id = None
        self._device_id = None
        self._dl_circuit_name = None
        self._is_dia = None
        self._sla_class = None
        self._time_window = None
        self._ul_circuit_name = None
        self.discriminator = None
        if app_id is not None:
            self.app_id = app_id
        if device_id is not None:
            self.device_id = device_id
        if dl_circuit_name is not None:
            self.dl_circuit_name = dl_circuit_name
        if is_dia is not None:
            self.is_dia = is_dia
        if sla_class is not None:
            self.sla_class = sla_class
        if time_window is not None:
            self.time_window = time_window
        if ul_circuit_name is not None:
            self.ul_circuit_name = ul_circuit_name

    @property
    def app_id(self):
        """Gets the app_id of this AppsBandwidthBody.  # noqa: E501


        :return: The app_id of this AppsBandwidthBody.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AppsBandwidthBody.


        :param app_id: The app_id of this AppsBandwidthBody.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def device_id(self):
        """Gets the device_id of this AppsBandwidthBody.  # noqa: E501


        :return: The device_id of this AppsBandwidthBody.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this AppsBandwidthBody.


        :param device_id: The device_id of this AppsBandwidthBody.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def dl_circuit_name(self):
        """Gets the dl_circuit_name of this AppsBandwidthBody.  # noqa: E501


        :return: The dl_circuit_name of this AppsBandwidthBody.  # noqa: E501
        :rtype: str
        """
        return self._dl_circuit_name

    @dl_circuit_name.setter
    def dl_circuit_name(self, dl_circuit_name):
        """Sets the dl_circuit_name of this AppsBandwidthBody.


        :param dl_circuit_name: The dl_circuit_name of this AppsBandwidthBody.  # noqa: E501
        :type: str
        """

        self._dl_circuit_name = dl_circuit_name

    @property
    def is_dia(self):
        """Gets the is_dia of this AppsBandwidthBody.  # noqa: E501


        :return: The is_dia of this AppsBandwidthBody.  # noqa: E501
        :rtype: str
        """
        return self._is_dia

    @is_dia.setter
    def is_dia(self, is_dia):
        """Sets the is_dia of this AppsBandwidthBody.


        :param is_dia: The is_dia of this AppsBandwidthBody.  # noqa: E501
        :type: str
        """

        self._is_dia = is_dia

    @property
    def sla_class(self):
        """Gets the sla_class of this AppsBandwidthBody.  # noqa: E501


        :return: The sla_class of this AppsBandwidthBody.  # noqa: E501
        :rtype: str
        """
        return self._sla_class

    @sla_class.setter
    def sla_class(self, sla_class):
        """Sets the sla_class of this AppsBandwidthBody.


        :param sla_class: The sla_class of this AppsBandwidthBody.  # noqa: E501
        :type: str
        """

        self._sla_class = sla_class

    @property
    def time_window(self):
        """Gets the time_window of this AppsBandwidthBody.  # noqa: E501


        :return: The time_window of this AppsBandwidthBody.  # noqa: E501
        :rtype: V2assistantgetconversationdetailsTimeWindow
        """
        return self._time_window

    @time_window.setter
    def time_window(self, time_window):
        """Sets the time_window of this AppsBandwidthBody.


        :param time_window: The time_window of this AppsBandwidthBody.  # noqa: E501
        :type: V2assistantgetconversationdetailsTimeWindow
        """

        self._time_window = time_window

    @property
    def ul_circuit_name(self):
        """Gets the ul_circuit_name of this AppsBandwidthBody.  # noqa: E501


        :return: The ul_circuit_name of this AppsBandwidthBody.  # noqa: E501
        :rtype: str
        """
        return self._ul_circuit_name

    @ul_circuit_name.setter
    def ul_circuit_name(self, ul_circuit_name):
        """Sets the ul_circuit_name of this AppsBandwidthBody.


        :param ul_circuit_name: The ul_circuit_name of this AppsBandwidthBody.  # noqa: E501
        :type: str
        """

        self._ul_circuit_name = ul_circuit_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppsBandwidthBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppsBandwidthBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
