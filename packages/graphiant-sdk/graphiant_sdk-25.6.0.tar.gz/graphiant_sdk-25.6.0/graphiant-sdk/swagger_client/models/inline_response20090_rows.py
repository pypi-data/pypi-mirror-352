# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20090Rows(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apps': 'list[InlineResponse20090Apps]',
        'assurance_id': 'str',
        'assurance_name': 'str',
        'created_at': 'V1devicesbringuptokenValidTillTs',
        'flex_algo': 'str',
        'lans': 'list[InlineResponse20090Lans]',
        'sites': 'list[InlineResponse20090Sites]',
        'updated_at': 'V1devicesbringuptokenValidTillTs'
    }

    attribute_map = {
        'apps': 'apps',
        'assurance_id': 'assuranceId',
        'assurance_name': 'assuranceName',
        'created_at': 'createdAt',
        'flex_algo': 'flexAlgo',
        'lans': 'lans',
        'sites': 'sites',
        'updated_at': 'updatedAt'
    }

    def __init__(self, apps=None, assurance_id=None, assurance_name=None, created_at=None, flex_algo=None, lans=None, sites=None, updated_at=None):  # noqa: E501
        """InlineResponse20090Rows - a model defined in Swagger"""  # noqa: E501
        self._apps = None
        self._assurance_id = None
        self._assurance_name = None
        self._created_at = None
        self._flex_algo = None
        self._lans = None
        self._sites = None
        self._updated_at = None
        self.discriminator = None
        if apps is not None:
            self.apps = apps
        if assurance_id is not None:
            self.assurance_id = assurance_id
        if assurance_name is not None:
            self.assurance_name = assurance_name
        if created_at is not None:
            self.created_at = created_at
        if flex_algo is not None:
            self.flex_algo = flex_algo
        if lans is not None:
            self.lans = lans
        if sites is not None:
            self.sites = sites
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def apps(self):
        """Gets the apps of this InlineResponse20090Rows.  # noqa: E501


        :return: The apps of this InlineResponse20090Rows.  # noqa: E501
        :rtype: list[InlineResponse20090Apps]
        """
        return self._apps

    @apps.setter
    def apps(self, apps):
        """Sets the apps of this InlineResponse20090Rows.


        :param apps: The apps of this InlineResponse20090Rows.  # noqa: E501
        :type: list[InlineResponse20090Apps]
        """

        self._apps = apps

    @property
    def assurance_id(self):
        """Gets the assurance_id of this InlineResponse20090Rows.  # noqa: E501


        :return: The assurance_id of this InlineResponse20090Rows.  # noqa: E501
        :rtype: str
        """
        return self._assurance_id

    @assurance_id.setter
    def assurance_id(self, assurance_id):
        """Sets the assurance_id of this InlineResponse20090Rows.


        :param assurance_id: The assurance_id of this InlineResponse20090Rows.  # noqa: E501
        :type: str
        """

        self._assurance_id = assurance_id

    @property
    def assurance_name(self):
        """Gets the assurance_name of this InlineResponse20090Rows.  # noqa: E501


        :return: The assurance_name of this InlineResponse20090Rows.  # noqa: E501
        :rtype: str
        """
        return self._assurance_name

    @assurance_name.setter
    def assurance_name(self, assurance_name):
        """Sets the assurance_name of this InlineResponse20090Rows.


        :param assurance_name: The assurance_name of this InlineResponse20090Rows.  # noqa: E501
        :type: str
        """

        self._assurance_name = assurance_name

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse20090Rows.  # noqa: E501


        :return: The created_at of this InlineResponse20090Rows.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse20090Rows.


        :param created_at: The created_at of this InlineResponse20090Rows.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._created_at = created_at

    @property
    def flex_algo(self):
        """Gets the flex_algo of this InlineResponse20090Rows.  # noqa: E501


        :return: The flex_algo of this InlineResponse20090Rows.  # noqa: E501
        :rtype: str
        """
        return self._flex_algo

    @flex_algo.setter
    def flex_algo(self, flex_algo):
        """Sets the flex_algo of this InlineResponse20090Rows.


        :param flex_algo: The flex_algo of this InlineResponse20090Rows.  # noqa: E501
        :type: str
        """

        self._flex_algo = flex_algo

    @property
    def lans(self):
        """Gets the lans of this InlineResponse20090Rows.  # noqa: E501


        :return: The lans of this InlineResponse20090Rows.  # noqa: E501
        :rtype: list[InlineResponse20090Lans]
        """
        return self._lans

    @lans.setter
    def lans(self, lans):
        """Sets the lans of this InlineResponse20090Rows.


        :param lans: The lans of this InlineResponse20090Rows.  # noqa: E501
        :type: list[InlineResponse20090Lans]
        """

        self._lans = lans

    @property
    def sites(self):
        """Gets the sites of this InlineResponse20090Rows.  # noqa: E501


        :return: The sites of this InlineResponse20090Rows.  # noqa: E501
        :rtype: list[InlineResponse20090Sites]
        """
        return self._sites

    @sites.setter
    def sites(self, sites):
        """Sets the sites of this InlineResponse20090Rows.


        :param sites: The sites of this InlineResponse20090Rows.  # noqa: E501
        :type: list[InlineResponse20090Sites]
        """

        self._sites = sites

    @property
    def updated_at(self):
        """Gets the updated_at of this InlineResponse20090Rows.  # noqa: E501


        :return: The updated_at of this InlineResponse20090Rows.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InlineResponse20090Rows.


        :param updated_at: The updated_at of this InlineResponse20090Rows.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20090Rows, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20090Rows):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
