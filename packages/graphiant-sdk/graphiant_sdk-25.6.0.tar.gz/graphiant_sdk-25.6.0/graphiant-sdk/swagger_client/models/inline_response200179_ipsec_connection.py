# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200179IpsecConnection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'anti_replay_w_size': 'str',
        'established_time': 'object',
        'local_circuit': 'str',
        'local_interface': 'object',
        'local_port': 'str',
        'local_spi': 'str',
        'negotiated_algorithms': 'str',
        'oper_state': 'str',
        'peer_address': 'str',
        'protocol': 'str',
        'rekey_time': 'object',
        'remote_port': 'str',
        'remote_spi': 'str',
        'session_id': 'str',
        'source_address': 'str',
        'tunnel_interface': 'object'
    }

    attribute_map = {
        'anti_replay_w_size': 'antiReplayWSize',
        'established_time': 'establishedTime',
        'local_circuit': 'localCircuit',
        'local_interface': 'localInterface',
        'local_port': 'localPort',
        'local_spi': 'localSpi',
        'negotiated_algorithms': 'negotiatedAlgorithms',
        'oper_state': 'operState',
        'peer_address': 'peerAddress',
        'protocol': 'protocol',
        'rekey_time': 'rekeyTime',
        'remote_port': 'remotePort',
        'remote_spi': 'remoteSpi',
        'session_id': 'sessionId',
        'source_address': 'sourceAddress',
        'tunnel_interface': 'tunnelInterface'
    }

    def __init__(self, anti_replay_w_size=None, established_time=None, local_circuit=None, local_interface=None, local_port=None, local_spi=None, negotiated_algorithms=None, oper_state=None, peer_address=None, protocol=None, rekey_time=None, remote_port=None, remote_spi=None, session_id=None, source_address=None, tunnel_interface=None):  # noqa: E501
        """InlineResponse200179IpsecConnection - a model defined in Swagger"""  # noqa: E501
        self._anti_replay_w_size = None
        self._established_time = None
        self._local_circuit = None
        self._local_interface = None
        self._local_port = None
        self._local_spi = None
        self._negotiated_algorithms = None
        self._oper_state = None
        self._peer_address = None
        self._protocol = None
        self._rekey_time = None
        self._remote_port = None
        self._remote_spi = None
        self._session_id = None
        self._source_address = None
        self._tunnel_interface = None
        self.discriminator = None
        if anti_replay_w_size is not None:
            self.anti_replay_w_size = anti_replay_w_size
        if established_time is not None:
            self.established_time = established_time
        if local_circuit is not None:
            self.local_circuit = local_circuit
        if local_interface is not None:
            self.local_interface = local_interface
        if local_port is not None:
            self.local_port = local_port
        if local_spi is not None:
            self.local_spi = local_spi
        if negotiated_algorithms is not None:
            self.negotiated_algorithms = negotiated_algorithms
        if oper_state is not None:
            self.oper_state = oper_state
        if peer_address is not None:
            self.peer_address = peer_address
        if protocol is not None:
            self.protocol = protocol
        if rekey_time is not None:
            self.rekey_time = rekey_time
        if remote_port is not None:
            self.remote_port = remote_port
        if remote_spi is not None:
            self.remote_spi = remote_spi
        if session_id is not None:
            self.session_id = session_id
        if source_address is not None:
            self.source_address = source_address
        if tunnel_interface is not None:
            self.tunnel_interface = tunnel_interface

    @property
    def anti_replay_w_size(self):
        """Gets the anti_replay_w_size of this InlineResponse200179IpsecConnection.  # noqa: E501


        :return: The anti_replay_w_size of this InlineResponse200179IpsecConnection.  # noqa: E501
        :rtype: str
        """
        return self._anti_replay_w_size

    @anti_replay_w_size.setter
    def anti_replay_w_size(self, anti_replay_w_size):
        """Sets the anti_replay_w_size of this InlineResponse200179IpsecConnection.


        :param anti_replay_w_size: The anti_replay_w_size of this InlineResponse200179IpsecConnection.  # noqa: E501
        :type: str
        """

        self._anti_replay_w_size = anti_replay_w_size

    @property
    def established_time(self):
        """Gets the established_time of this InlineResponse200179IpsecConnection.  # noqa: E501


        :return: The established_time of this InlineResponse200179IpsecConnection.  # noqa: E501
        :rtype: object
        """
        return self._established_time

    @established_time.setter
    def established_time(self, established_time):
        """Sets the established_time of this InlineResponse200179IpsecConnection.


        :param established_time: The established_time of this InlineResponse200179IpsecConnection.  # noqa: E501
        :type: object
        """

        self._established_time = established_time

    @property
    def local_circuit(self):
        """Gets the local_circuit of this InlineResponse200179IpsecConnection.  # noqa: E501


        :return: The local_circuit of this InlineResponse200179IpsecConnection.  # noqa: E501
        :rtype: str
        """
        return self._local_circuit

    @local_circuit.setter
    def local_circuit(self, local_circuit):
        """Sets the local_circuit of this InlineResponse200179IpsecConnection.


        :param local_circuit: The local_circuit of this InlineResponse200179IpsecConnection.  # noqa: E501
        :type: str
        """

        self._local_circuit = local_circuit

    @property
    def local_interface(self):
        """Gets the local_interface of this InlineResponse200179IpsecConnection.  # noqa: E501


        :return: The local_interface of this InlineResponse200179IpsecConnection.  # noqa: E501
        :rtype: object
        """
        return self._local_interface

    @local_interface.setter
    def local_interface(self, local_interface):
        """Sets the local_interface of this InlineResponse200179IpsecConnection.


        :param local_interface: The local_interface of this InlineResponse200179IpsecConnection.  # noqa: E501
        :type: object
        """

        self._local_interface = local_interface

    @property
    def local_port(self):
        """Gets the local_port of this InlineResponse200179IpsecConnection.  # noqa: E501


        :return: The local_port of this InlineResponse200179IpsecConnection.  # noqa: E501
        :rtype: str
        """
        return self._local_port

    @local_port.setter
    def local_port(self, local_port):
        """Sets the local_port of this InlineResponse200179IpsecConnection.


        :param local_port: The local_port of this InlineResponse200179IpsecConnection.  # noqa: E501
        :type: str
        """

        self._local_port = local_port

    @property
    def local_spi(self):
        """Gets the local_spi of this InlineResponse200179IpsecConnection.  # noqa: E501


        :return: The local_spi of this InlineResponse200179IpsecConnection.  # noqa: E501
        :rtype: str
        """
        return self._local_spi

    @local_spi.setter
    def local_spi(self, local_spi):
        """Sets the local_spi of this InlineResponse200179IpsecConnection.


        :param local_spi: The local_spi of this InlineResponse200179IpsecConnection.  # noqa: E501
        :type: str
        """

        self._local_spi = local_spi

    @property
    def negotiated_algorithms(self):
        """Gets the negotiated_algorithms of this InlineResponse200179IpsecConnection.  # noqa: E501


        :return: The negotiated_algorithms of this InlineResponse200179IpsecConnection.  # noqa: E501
        :rtype: str
        """
        return self._negotiated_algorithms

    @negotiated_algorithms.setter
    def negotiated_algorithms(self, negotiated_algorithms):
        """Sets the negotiated_algorithms of this InlineResponse200179IpsecConnection.


        :param negotiated_algorithms: The negotiated_algorithms of this InlineResponse200179IpsecConnection.  # noqa: E501
        :type: str
        """

        self._negotiated_algorithms = negotiated_algorithms

    @property
    def oper_state(self):
        """Gets the oper_state of this InlineResponse200179IpsecConnection.  # noqa: E501


        :return: The oper_state of this InlineResponse200179IpsecConnection.  # noqa: E501
        :rtype: str
        """
        return self._oper_state

    @oper_state.setter
    def oper_state(self, oper_state):
        """Sets the oper_state of this InlineResponse200179IpsecConnection.


        :param oper_state: The oper_state of this InlineResponse200179IpsecConnection.  # noqa: E501
        :type: str
        """

        self._oper_state = oper_state

    @property
    def peer_address(self):
        """Gets the peer_address of this InlineResponse200179IpsecConnection.  # noqa: E501


        :return: The peer_address of this InlineResponse200179IpsecConnection.  # noqa: E501
        :rtype: str
        """
        return self._peer_address

    @peer_address.setter
    def peer_address(self, peer_address):
        """Sets the peer_address of this InlineResponse200179IpsecConnection.


        :param peer_address: The peer_address of this InlineResponse200179IpsecConnection.  # noqa: E501
        :type: str
        """

        self._peer_address = peer_address

    @property
    def protocol(self):
        """Gets the protocol of this InlineResponse200179IpsecConnection.  # noqa: E501


        :return: The protocol of this InlineResponse200179IpsecConnection.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this InlineResponse200179IpsecConnection.


        :param protocol: The protocol of this InlineResponse200179IpsecConnection.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def rekey_time(self):
        """Gets the rekey_time of this InlineResponse200179IpsecConnection.  # noqa: E501


        :return: The rekey_time of this InlineResponse200179IpsecConnection.  # noqa: E501
        :rtype: object
        """
        return self._rekey_time

    @rekey_time.setter
    def rekey_time(self, rekey_time):
        """Sets the rekey_time of this InlineResponse200179IpsecConnection.


        :param rekey_time: The rekey_time of this InlineResponse200179IpsecConnection.  # noqa: E501
        :type: object
        """

        self._rekey_time = rekey_time

    @property
    def remote_port(self):
        """Gets the remote_port of this InlineResponse200179IpsecConnection.  # noqa: E501


        :return: The remote_port of this InlineResponse200179IpsecConnection.  # noqa: E501
        :rtype: str
        """
        return self._remote_port

    @remote_port.setter
    def remote_port(self, remote_port):
        """Sets the remote_port of this InlineResponse200179IpsecConnection.


        :param remote_port: The remote_port of this InlineResponse200179IpsecConnection.  # noqa: E501
        :type: str
        """

        self._remote_port = remote_port

    @property
    def remote_spi(self):
        """Gets the remote_spi of this InlineResponse200179IpsecConnection.  # noqa: E501


        :return: The remote_spi of this InlineResponse200179IpsecConnection.  # noqa: E501
        :rtype: str
        """
        return self._remote_spi

    @remote_spi.setter
    def remote_spi(self, remote_spi):
        """Sets the remote_spi of this InlineResponse200179IpsecConnection.


        :param remote_spi: The remote_spi of this InlineResponse200179IpsecConnection.  # noqa: E501
        :type: str
        """

        self._remote_spi = remote_spi

    @property
    def session_id(self):
        """Gets the session_id of this InlineResponse200179IpsecConnection.  # noqa: E501


        :return: The session_id of this InlineResponse200179IpsecConnection.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this InlineResponse200179IpsecConnection.


        :param session_id: The session_id of this InlineResponse200179IpsecConnection.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def source_address(self):
        """Gets the source_address of this InlineResponse200179IpsecConnection.  # noqa: E501


        :return: The source_address of this InlineResponse200179IpsecConnection.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this InlineResponse200179IpsecConnection.


        :param source_address: The source_address of this InlineResponse200179IpsecConnection.  # noqa: E501
        :type: str
        """

        self._source_address = source_address

    @property
    def tunnel_interface(self):
        """Gets the tunnel_interface of this InlineResponse200179IpsecConnection.  # noqa: E501


        :return: The tunnel_interface of this InlineResponse200179IpsecConnection.  # noqa: E501
        :rtype: object
        """
        return self._tunnel_interface

    @tunnel_interface.setter
    def tunnel_interface(self, tunnel_interface):
        """Sets the tunnel_interface of this InlineResponse200179IpsecConnection.


        :param tunnel_interface: The tunnel_interface of this InlineResponse200179IpsecConnection.  # noqa: E501
        :type: object
        """

        self._tunnel_interface = tunnel_interface

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200179IpsecConnection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200179IpsecConnection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
