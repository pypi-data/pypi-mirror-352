# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeviceIdConfigBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'configuration_metadata': 'V1versionConfigurationMetadata',
        'core': 'V1devicesdeviceIdconfigCore',
        'description': 'str',
        'edge': 'V1devicesdeviceIdconfigEdge',
        'local_web_server_password': 'str',
        'replace': 'str'
    }

    attribute_map = {
        'configuration_metadata': 'configurationMetadata',
        'core': 'core',
        'description': 'description',
        'edge': 'edge',
        'local_web_server_password': 'localWebServerPassword',
        'replace': 'replace'
    }

    def __init__(self, configuration_metadata=None, core=None, description=None, edge=None, local_web_server_password=None, replace=None):  # noqa: E501
        """DeviceIdConfigBody - a model defined in Swagger"""  # noqa: E501
        self._configuration_metadata = None
        self._core = None
        self._description = None
        self._edge = None
        self._local_web_server_password = None
        self._replace = None
        self.discriminator = None
        if configuration_metadata is not None:
            self.configuration_metadata = configuration_metadata
        if core is not None:
            self.core = core
        if description is not None:
            self.description = description
        if edge is not None:
            self.edge = edge
        if local_web_server_password is not None:
            self.local_web_server_password = local_web_server_password
        if replace is not None:
            self.replace = replace

    @property
    def configuration_metadata(self):
        """Gets the configuration_metadata of this DeviceIdConfigBody.  # noqa: E501


        :return: The configuration_metadata of this DeviceIdConfigBody.  # noqa: E501
        :rtype: V1versionConfigurationMetadata
        """
        return self._configuration_metadata

    @configuration_metadata.setter
    def configuration_metadata(self, configuration_metadata):
        """Sets the configuration_metadata of this DeviceIdConfigBody.


        :param configuration_metadata: The configuration_metadata of this DeviceIdConfigBody.  # noqa: E501
        :type: V1versionConfigurationMetadata
        """

        self._configuration_metadata = configuration_metadata

    @property
    def core(self):
        """Gets the core of this DeviceIdConfigBody.  # noqa: E501


        :return: The core of this DeviceIdConfigBody.  # noqa: E501
        :rtype: V1devicesdeviceIdconfigCore
        """
        return self._core

    @core.setter
    def core(self, core):
        """Sets the core of this DeviceIdConfigBody.


        :param core: The core of this DeviceIdConfigBody.  # noqa: E501
        :type: V1devicesdeviceIdconfigCore
        """

        self._core = core

    @property
    def description(self):
        """Gets the description of this DeviceIdConfigBody.  # noqa: E501


        :return: The description of this DeviceIdConfigBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceIdConfigBody.


        :param description: The description of this DeviceIdConfigBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def edge(self):
        """Gets the edge of this DeviceIdConfigBody.  # noqa: E501


        :return: The edge of this DeviceIdConfigBody.  # noqa: E501
        :rtype: V1devicesdeviceIdconfigEdge
        """
        return self._edge

    @edge.setter
    def edge(self, edge):
        """Sets the edge of this DeviceIdConfigBody.


        :param edge: The edge of this DeviceIdConfigBody.  # noqa: E501
        :type: V1devicesdeviceIdconfigEdge
        """

        self._edge = edge

    @property
    def local_web_server_password(self):
        """Gets the local_web_server_password of this DeviceIdConfigBody.  # noqa: E501


        :return: The local_web_server_password of this DeviceIdConfigBody.  # noqa: E501
        :rtype: str
        """
        return self._local_web_server_password

    @local_web_server_password.setter
    def local_web_server_password(self, local_web_server_password):
        """Sets the local_web_server_password of this DeviceIdConfigBody.


        :param local_web_server_password: The local_web_server_password of this DeviceIdConfigBody.  # noqa: E501
        :type: str
        """

        self._local_web_server_password = local_web_server_password

    @property
    def replace(self):
        """Gets the replace of this DeviceIdConfigBody.  # noqa: E501


        :return: The replace of this DeviceIdConfigBody.  # noqa: E501
        :rtype: str
        """
        return self._replace

    @replace.setter
    def replace(self, replace):
        """Sets the replace of this DeviceIdConfigBody.


        :param replace: The replace of this DeviceIdConfigBody.  # noqa: E501
        :type: str
        """

        self._replace = replace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceIdConfigBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceIdConfigBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
