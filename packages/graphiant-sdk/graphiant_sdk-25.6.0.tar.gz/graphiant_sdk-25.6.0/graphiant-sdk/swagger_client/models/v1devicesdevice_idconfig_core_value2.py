# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1devicesdeviceIdconfigCoreValue2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bgp_aggregations': 'list[object]',
        'bgp_neighbors': 'list[object]',
        'bgp_redistribution': 'list[object]',
        'dhcp_subnets': 'list[object]',
        'ebgp_multipath': 'object',
        'ipfix_exporters': 'list[object]',
        'nat_ruleset': 'object',
        'networks': 'list[str]',
        'ospfv2': 'object',
        'ospfv3': 'object',
        'overlay_filters': 'object',
        'static_routes': 'list[object]',
        'syslog_targets': 'list[object]',
        'traffic_ruleset': 'object'
    }

    attribute_map = {
        'bgp_aggregations': 'bgpAggregations',
        'bgp_neighbors': 'bgpNeighbors',
        'bgp_redistribution': 'bgpRedistribution',
        'dhcp_subnets': 'dhcpSubnets',
        'ebgp_multipath': 'ebgpMultipath',
        'ipfix_exporters': 'ipfixExporters',
        'nat_ruleset': 'natRuleset',
        'networks': 'networks',
        'ospfv2': 'ospfv2',
        'ospfv3': 'ospfv3',
        'overlay_filters': 'overlayFilters',
        'static_routes': 'staticRoutes',
        'syslog_targets': 'syslogTargets',
        'traffic_ruleset': 'trafficRuleset'
    }

    def __init__(self, bgp_aggregations=None, bgp_neighbors=None, bgp_redistribution=None, dhcp_subnets=None, ebgp_multipath=None, ipfix_exporters=None, nat_ruleset=None, networks=None, ospfv2=None, ospfv3=None, overlay_filters=None, static_routes=None, syslog_targets=None, traffic_ruleset=None):  # noqa: E501
        """V1devicesdeviceIdconfigCoreValue2 - a model defined in Swagger"""  # noqa: E501
        self._bgp_aggregations = None
        self._bgp_neighbors = None
        self._bgp_redistribution = None
        self._dhcp_subnets = None
        self._ebgp_multipath = None
        self._ipfix_exporters = None
        self._nat_ruleset = None
        self._networks = None
        self._ospfv2 = None
        self._ospfv3 = None
        self._overlay_filters = None
        self._static_routes = None
        self._syslog_targets = None
        self._traffic_ruleset = None
        self.discriminator = None
        if bgp_aggregations is not None:
            self.bgp_aggregations = bgp_aggregations
        if bgp_neighbors is not None:
            self.bgp_neighbors = bgp_neighbors
        if bgp_redistribution is not None:
            self.bgp_redistribution = bgp_redistribution
        if dhcp_subnets is not None:
            self.dhcp_subnets = dhcp_subnets
        if ebgp_multipath is not None:
            self.ebgp_multipath = ebgp_multipath
        if ipfix_exporters is not None:
            self.ipfix_exporters = ipfix_exporters
        if nat_ruleset is not None:
            self.nat_ruleset = nat_ruleset
        if networks is not None:
            self.networks = networks
        if ospfv2 is not None:
            self.ospfv2 = ospfv2
        if ospfv3 is not None:
            self.ospfv3 = ospfv3
        if overlay_filters is not None:
            self.overlay_filters = overlay_filters
        if static_routes is not None:
            self.static_routes = static_routes
        if syslog_targets is not None:
            self.syslog_targets = syslog_targets
        if traffic_ruleset is not None:
            self.traffic_ruleset = traffic_ruleset

    @property
    def bgp_aggregations(self):
        """Gets the bgp_aggregations of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501


        :return: The bgp_aggregations of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :rtype: list[object]
        """
        return self._bgp_aggregations

    @bgp_aggregations.setter
    def bgp_aggregations(self, bgp_aggregations):
        """Sets the bgp_aggregations of this V1devicesdeviceIdconfigCoreValue2.


        :param bgp_aggregations: The bgp_aggregations of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :type: list[object]
        """

        self._bgp_aggregations = bgp_aggregations

    @property
    def bgp_neighbors(self):
        """Gets the bgp_neighbors of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501


        :return: The bgp_neighbors of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :rtype: list[object]
        """
        return self._bgp_neighbors

    @bgp_neighbors.setter
    def bgp_neighbors(self, bgp_neighbors):
        """Sets the bgp_neighbors of this V1devicesdeviceIdconfigCoreValue2.


        :param bgp_neighbors: The bgp_neighbors of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :type: list[object]
        """

        self._bgp_neighbors = bgp_neighbors

    @property
    def bgp_redistribution(self):
        """Gets the bgp_redistribution of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501


        :return: The bgp_redistribution of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :rtype: list[object]
        """
        return self._bgp_redistribution

    @bgp_redistribution.setter
    def bgp_redistribution(self, bgp_redistribution):
        """Sets the bgp_redistribution of this V1devicesdeviceIdconfigCoreValue2.


        :param bgp_redistribution: The bgp_redistribution of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :type: list[object]
        """

        self._bgp_redistribution = bgp_redistribution

    @property
    def dhcp_subnets(self):
        """Gets the dhcp_subnets of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501


        :return: The dhcp_subnets of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :rtype: list[object]
        """
        return self._dhcp_subnets

    @dhcp_subnets.setter
    def dhcp_subnets(self, dhcp_subnets):
        """Sets the dhcp_subnets of this V1devicesdeviceIdconfigCoreValue2.


        :param dhcp_subnets: The dhcp_subnets of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :type: list[object]
        """

        self._dhcp_subnets = dhcp_subnets

    @property
    def ebgp_multipath(self):
        """Gets the ebgp_multipath of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501


        :return: The ebgp_multipath of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :rtype: object
        """
        return self._ebgp_multipath

    @ebgp_multipath.setter
    def ebgp_multipath(self, ebgp_multipath):
        """Sets the ebgp_multipath of this V1devicesdeviceIdconfigCoreValue2.


        :param ebgp_multipath: The ebgp_multipath of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :type: object
        """

        self._ebgp_multipath = ebgp_multipath

    @property
    def ipfix_exporters(self):
        """Gets the ipfix_exporters of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501


        :return: The ipfix_exporters of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :rtype: list[object]
        """
        return self._ipfix_exporters

    @ipfix_exporters.setter
    def ipfix_exporters(self, ipfix_exporters):
        """Sets the ipfix_exporters of this V1devicesdeviceIdconfigCoreValue2.


        :param ipfix_exporters: The ipfix_exporters of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :type: list[object]
        """

        self._ipfix_exporters = ipfix_exporters

    @property
    def nat_ruleset(self):
        """Gets the nat_ruleset of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501


        :return: The nat_ruleset of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :rtype: object
        """
        return self._nat_ruleset

    @nat_ruleset.setter
    def nat_ruleset(self, nat_ruleset):
        """Sets the nat_ruleset of this V1devicesdeviceIdconfigCoreValue2.


        :param nat_ruleset: The nat_ruleset of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :type: object
        """

        self._nat_ruleset = nat_ruleset

    @property
    def networks(self):
        """Gets the networks of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501


        :return: The networks of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :rtype: list[str]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this V1devicesdeviceIdconfigCoreValue2.


        :param networks: The networks of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :type: list[str]
        """

        self._networks = networks

    @property
    def ospfv2(self):
        """Gets the ospfv2 of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501


        :return: The ospfv2 of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :rtype: object
        """
        return self._ospfv2

    @ospfv2.setter
    def ospfv2(self, ospfv2):
        """Sets the ospfv2 of this V1devicesdeviceIdconfigCoreValue2.


        :param ospfv2: The ospfv2 of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :type: object
        """

        self._ospfv2 = ospfv2

    @property
    def ospfv3(self):
        """Gets the ospfv3 of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501


        :return: The ospfv3 of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :rtype: object
        """
        return self._ospfv3

    @ospfv3.setter
    def ospfv3(self, ospfv3):
        """Sets the ospfv3 of this V1devicesdeviceIdconfigCoreValue2.


        :param ospfv3: The ospfv3 of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :type: object
        """

        self._ospfv3 = ospfv3

    @property
    def overlay_filters(self):
        """Gets the overlay_filters of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501


        :return: The overlay_filters of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :rtype: object
        """
        return self._overlay_filters

    @overlay_filters.setter
    def overlay_filters(self, overlay_filters):
        """Sets the overlay_filters of this V1devicesdeviceIdconfigCoreValue2.


        :param overlay_filters: The overlay_filters of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :type: object
        """

        self._overlay_filters = overlay_filters

    @property
    def static_routes(self):
        """Gets the static_routes of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501


        :return: The static_routes of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :rtype: list[object]
        """
        return self._static_routes

    @static_routes.setter
    def static_routes(self, static_routes):
        """Sets the static_routes of this V1devicesdeviceIdconfigCoreValue2.


        :param static_routes: The static_routes of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :type: list[object]
        """

        self._static_routes = static_routes

    @property
    def syslog_targets(self):
        """Gets the syslog_targets of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501


        :return: The syslog_targets of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :rtype: list[object]
        """
        return self._syslog_targets

    @syslog_targets.setter
    def syslog_targets(self, syslog_targets):
        """Sets the syslog_targets of this V1devicesdeviceIdconfigCoreValue2.


        :param syslog_targets: The syslog_targets of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :type: list[object]
        """

        self._syslog_targets = syslog_targets

    @property
    def traffic_ruleset(self):
        """Gets the traffic_ruleset of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501


        :return: The traffic_ruleset of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :rtype: object
        """
        return self._traffic_ruleset

    @traffic_ruleset.setter
    def traffic_ruleset(self, traffic_ruleset):
        """Sets the traffic_ruleset of this V1devicesdeviceIdconfigCoreValue2.


        :param traffic_ruleset: The traffic_ruleset of this V1devicesdeviceIdconfigCoreValue2.  # noqa: E501
        :type: object
        """

        self._traffic_ruleset = traffic_ruleset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1devicesdeviceIdconfigCoreValue2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1devicesdeviceIdconfigCoreValue2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
