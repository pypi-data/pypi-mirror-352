# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200130(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bgp': 'str',
        'connected': 'str',
        'graphiant': 'str',
        'ospfv2': 'str',
        'ospfv3': 'str',
        'static': 'str'
    }

    attribute_map = {
        'bgp': 'bgp',
        'connected': 'connected',
        'graphiant': 'graphiant',
        'ospfv2': 'ospfv2',
        'ospfv3': 'ospfv3',
        'static': 'static'
    }

    def __init__(self, bgp=None, connected=None, graphiant=None, ospfv2=None, ospfv3=None, static=None):  # noqa: E501
        """InlineResponse200130 - a model defined in Swagger"""  # noqa: E501
        self._bgp = None
        self._connected = None
        self._graphiant = None
        self._ospfv2 = None
        self._ospfv3 = None
        self._static = None
        self.discriminator = None
        if bgp is not None:
            self.bgp = bgp
        if connected is not None:
            self.connected = connected
        if graphiant is not None:
            self.graphiant = graphiant
        if ospfv2 is not None:
            self.ospfv2 = ospfv2
        if ospfv3 is not None:
            self.ospfv3 = ospfv3
        if static is not None:
            self.static = static

    @property
    def bgp(self):
        """Gets the bgp of this InlineResponse200130.  # noqa: E501


        :return: The bgp of this InlineResponse200130.  # noqa: E501
        :rtype: str
        """
        return self._bgp

    @bgp.setter
    def bgp(self, bgp):
        """Sets the bgp of this InlineResponse200130.


        :param bgp: The bgp of this InlineResponse200130.  # noqa: E501
        :type: str
        """

        self._bgp = bgp

    @property
    def connected(self):
        """Gets the connected of this InlineResponse200130.  # noqa: E501


        :return: The connected of this InlineResponse200130.  # noqa: E501
        :rtype: str
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this InlineResponse200130.


        :param connected: The connected of this InlineResponse200130.  # noqa: E501
        :type: str
        """

        self._connected = connected

    @property
    def graphiant(self):
        """Gets the graphiant of this InlineResponse200130.  # noqa: E501


        :return: The graphiant of this InlineResponse200130.  # noqa: E501
        :rtype: str
        """
        return self._graphiant

    @graphiant.setter
    def graphiant(self, graphiant):
        """Sets the graphiant of this InlineResponse200130.


        :param graphiant: The graphiant of this InlineResponse200130.  # noqa: E501
        :type: str
        """

        self._graphiant = graphiant

    @property
    def ospfv2(self):
        """Gets the ospfv2 of this InlineResponse200130.  # noqa: E501


        :return: The ospfv2 of this InlineResponse200130.  # noqa: E501
        :rtype: str
        """
        return self._ospfv2

    @ospfv2.setter
    def ospfv2(self, ospfv2):
        """Sets the ospfv2 of this InlineResponse200130.


        :param ospfv2: The ospfv2 of this InlineResponse200130.  # noqa: E501
        :type: str
        """

        self._ospfv2 = ospfv2

    @property
    def ospfv3(self):
        """Gets the ospfv3 of this InlineResponse200130.  # noqa: E501


        :return: The ospfv3 of this InlineResponse200130.  # noqa: E501
        :rtype: str
        """
        return self._ospfv3

    @ospfv3.setter
    def ospfv3(self, ospfv3):
        """Sets the ospfv3 of this InlineResponse200130.


        :param ospfv3: The ospfv3 of this InlineResponse200130.  # noqa: E501
        :type: str
        """

        self._ospfv3 = ospfv3

    @property
    def static(self):
        """Gets the static of this InlineResponse200130.  # noqa: E501


        :return: The static of this InlineResponse200130.  # noqa: E501
        :rtype: str
        """
        return self._static

    @static.setter
    def static(self, static):
        """Sets the static of this InlineResponse200130.


        :param static: The static of this InlineResponse200130.  # noqa: E501
        :type: str
        """

        self._static = static

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200130, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200130):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
