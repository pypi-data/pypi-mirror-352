# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200109DraftManaDeviceDns(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloudflare_servers': 'list[object]',
        'dynamic_servers': 'list[object]',
        'dynamic_servers_v2': 'object',
        'mode': 'str',
        'static_servers': 'list[object]',
        'static_servers_v2': 'object'
    }

    attribute_map = {
        'cloudflare_servers': 'cloudflareServers',
        'dynamic_servers': 'dynamicServers',
        'dynamic_servers_v2': 'dynamicServersV2',
        'mode': 'mode',
        'static_servers': 'staticServers',
        'static_servers_v2': 'staticServersV2'
    }

    def __init__(self, cloudflare_servers=None, dynamic_servers=None, dynamic_servers_v2=None, mode=None, static_servers=None, static_servers_v2=None):  # noqa: E501
        """InlineResponse200109DraftManaDeviceDns - a model defined in Swagger"""  # noqa: E501
        self._cloudflare_servers = None
        self._dynamic_servers = None
        self._dynamic_servers_v2 = None
        self._mode = None
        self._static_servers = None
        self._static_servers_v2 = None
        self.discriminator = None
        if cloudflare_servers is not None:
            self.cloudflare_servers = cloudflare_servers
        if dynamic_servers is not None:
            self.dynamic_servers = dynamic_servers
        if dynamic_servers_v2 is not None:
            self.dynamic_servers_v2 = dynamic_servers_v2
        if mode is not None:
            self.mode = mode
        if static_servers is not None:
            self.static_servers = static_servers
        if static_servers_v2 is not None:
            self.static_servers_v2 = static_servers_v2

    @property
    def cloudflare_servers(self):
        """Gets the cloudflare_servers of this InlineResponse200109DraftManaDeviceDns.  # noqa: E501


        :return: The cloudflare_servers of this InlineResponse200109DraftManaDeviceDns.  # noqa: E501
        :rtype: list[object]
        """
        return self._cloudflare_servers

    @cloudflare_servers.setter
    def cloudflare_servers(self, cloudflare_servers):
        """Sets the cloudflare_servers of this InlineResponse200109DraftManaDeviceDns.


        :param cloudflare_servers: The cloudflare_servers of this InlineResponse200109DraftManaDeviceDns.  # noqa: E501
        :type: list[object]
        """

        self._cloudflare_servers = cloudflare_servers

    @property
    def dynamic_servers(self):
        """Gets the dynamic_servers of this InlineResponse200109DraftManaDeviceDns.  # noqa: E501


        :return: The dynamic_servers of this InlineResponse200109DraftManaDeviceDns.  # noqa: E501
        :rtype: list[object]
        """
        return self._dynamic_servers

    @dynamic_servers.setter
    def dynamic_servers(self, dynamic_servers):
        """Sets the dynamic_servers of this InlineResponse200109DraftManaDeviceDns.


        :param dynamic_servers: The dynamic_servers of this InlineResponse200109DraftManaDeviceDns.  # noqa: E501
        :type: list[object]
        """

        self._dynamic_servers = dynamic_servers

    @property
    def dynamic_servers_v2(self):
        """Gets the dynamic_servers_v2 of this InlineResponse200109DraftManaDeviceDns.  # noqa: E501


        :return: The dynamic_servers_v2 of this InlineResponse200109DraftManaDeviceDns.  # noqa: E501
        :rtype: object
        """
        return self._dynamic_servers_v2

    @dynamic_servers_v2.setter
    def dynamic_servers_v2(self, dynamic_servers_v2):
        """Sets the dynamic_servers_v2 of this InlineResponse200109DraftManaDeviceDns.


        :param dynamic_servers_v2: The dynamic_servers_v2 of this InlineResponse200109DraftManaDeviceDns.  # noqa: E501
        :type: object
        """

        self._dynamic_servers_v2 = dynamic_servers_v2

    @property
    def mode(self):
        """Gets the mode of this InlineResponse200109DraftManaDeviceDns.  # noqa: E501


        :return: The mode of this InlineResponse200109DraftManaDeviceDns.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this InlineResponse200109DraftManaDeviceDns.


        :param mode: The mode of this InlineResponse200109DraftManaDeviceDns.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def static_servers(self):
        """Gets the static_servers of this InlineResponse200109DraftManaDeviceDns.  # noqa: E501


        :return: The static_servers of this InlineResponse200109DraftManaDeviceDns.  # noqa: E501
        :rtype: list[object]
        """
        return self._static_servers

    @static_servers.setter
    def static_servers(self, static_servers):
        """Sets the static_servers of this InlineResponse200109DraftManaDeviceDns.


        :param static_servers: The static_servers of this InlineResponse200109DraftManaDeviceDns.  # noqa: E501
        :type: list[object]
        """

        self._static_servers = static_servers

    @property
    def static_servers_v2(self):
        """Gets the static_servers_v2 of this InlineResponse200109DraftManaDeviceDns.  # noqa: E501


        :return: The static_servers_v2 of this InlineResponse200109DraftManaDeviceDns.  # noqa: E501
        :rtype: object
        """
        return self._static_servers_v2

    @static_servers_v2.setter
    def static_servers_v2(self, static_servers_v2):
        """Sets the static_servers_v2 of this InlineResponse200109DraftManaDeviceDns.


        :param static_servers_v2: The static_servers_v2 of this InlineResponse200109DraftManaDeviceDns.  # noqa: E501
        :type: object
        """

        self._static_servers_v2 = static_servers_v2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200109DraftManaDeviceDns, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200109DraftManaDeviceDns):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
