# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200112Vrfs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bgp_aggregations': 'list[V1devicesdeviceIddraftDraftBgpAggregations]',
        'bgp_multipath': 'V1devicesdeviceIddraftDraftBgpMultipath',
        'bgp_neighbors': 'list[InlineResponse200112BgpNeighbors]',
        'bgp_redistributions': 'V1devicesdeviceIddraftDraftBgpRedistributions',
        'description': 'str',
        'dhcp_subnets': 'list[InlineResponse200112DhcpSubnets]',
        'enterprise_id': 'str',
        'function': 'str',
        'id': 'str',
        'ipfix_exporters': 'list[V1devicesdeviceIddraftDraftIpfixExporters]',
        'name': 'str',
        'nat_ruleset': 'str',
        'networks': 'list[str]',
        'ospfv2_process': 'InlineResponse200112Ospfv2Process',
        'ospfv3_process': 'InlineResponse200112Ospfv3Process',
        'overlay_filters': 'V1devicesdeviceIddraftDraftOverlayFilters',
        'routable': 'str',
        'route_distinguisher': 'str',
        'static_routes': 'list[InlineResponse200112StaticRoutes]',
        'syslog_targets': 'list[V1devicesdeviceIddraftDraftSyslogTargets]',
        'traffic_ruleset': 'str'
    }

    attribute_map = {
        'bgp_aggregations': 'bgpAggregations',
        'bgp_multipath': 'bgpMultipath',
        'bgp_neighbors': 'bgpNeighbors',
        'bgp_redistributions': 'bgpRedistributions',
        'description': 'description',
        'dhcp_subnets': 'dhcpSubnets',
        'enterprise_id': 'enterpriseId',
        'function': 'function',
        'id': 'id',
        'ipfix_exporters': 'ipfixExporters',
        'name': 'name',
        'nat_ruleset': 'natRuleset',
        'networks': 'networks',
        'ospfv2_process': 'ospfv2Process',
        'ospfv3_process': 'ospfv3Process',
        'overlay_filters': 'overlayFilters',
        'routable': 'routable',
        'route_distinguisher': 'routeDistinguisher',
        'static_routes': 'staticRoutes',
        'syslog_targets': 'syslogTargets',
        'traffic_ruleset': 'trafficRuleset'
    }

    def __init__(self, bgp_aggregations=None, bgp_multipath=None, bgp_neighbors=None, bgp_redistributions=None, description=None, dhcp_subnets=None, enterprise_id=None, function=None, id=None, ipfix_exporters=None, name=None, nat_ruleset=None, networks=None, ospfv2_process=None, ospfv3_process=None, overlay_filters=None, routable=None, route_distinguisher=None, static_routes=None, syslog_targets=None, traffic_ruleset=None):  # noqa: E501
        """InlineResponse200112Vrfs - a model defined in Swagger"""  # noqa: E501
        self._bgp_aggregations = None
        self._bgp_multipath = None
        self._bgp_neighbors = None
        self._bgp_redistributions = None
        self._description = None
        self._dhcp_subnets = None
        self._enterprise_id = None
        self._function = None
        self._id = None
        self._ipfix_exporters = None
        self._name = None
        self._nat_ruleset = None
        self._networks = None
        self._ospfv2_process = None
        self._ospfv3_process = None
        self._overlay_filters = None
        self._routable = None
        self._route_distinguisher = None
        self._static_routes = None
        self._syslog_targets = None
        self._traffic_ruleset = None
        self.discriminator = None
        if bgp_aggregations is not None:
            self.bgp_aggregations = bgp_aggregations
        if bgp_multipath is not None:
            self.bgp_multipath = bgp_multipath
        if bgp_neighbors is not None:
            self.bgp_neighbors = bgp_neighbors
        if bgp_redistributions is not None:
            self.bgp_redistributions = bgp_redistributions
        if description is not None:
            self.description = description
        if dhcp_subnets is not None:
            self.dhcp_subnets = dhcp_subnets
        if enterprise_id is not None:
            self.enterprise_id = enterprise_id
        if function is not None:
            self.function = function
        if id is not None:
            self.id = id
        if ipfix_exporters is not None:
            self.ipfix_exporters = ipfix_exporters
        if name is not None:
            self.name = name
        if nat_ruleset is not None:
            self.nat_ruleset = nat_ruleset
        if networks is not None:
            self.networks = networks
        if ospfv2_process is not None:
            self.ospfv2_process = ospfv2_process
        if ospfv3_process is not None:
            self.ospfv3_process = ospfv3_process
        if overlay_filters is not None:
            self.overlay_filters = overlay_filters
        if routable is not None:
            self.routable = routable
        if route_distinguisher is not None:
            self.route_distinguisher = route_distinguisher
        if static_routes is not None:
            self.static_routes = static_routes
        if syslog_targets is not None:
            self.syslog_targets = syslog_targets
        if traffic_ruleset is not None:
            self.traffic_ruleset = traffic_ruleset

    @property
    def bgp_aggregations(self):
        """Gets the bgp_aggregations of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The bgp_aggregations of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: list[V1devicesdeviceIddraftDraftBgpAggregations]
        """
        return self._bgp_aggregations

    @bgp_aggregations.setter
    def bgp_aggregations(self, bgp_aggregations):
        """Sets the bgp_aggregations of this InlineResponse200112Vrfs.


        :param bgp_aggregations: The bgp_aggregations of this InlineResponse200112Vrfs.  # noqa: E501
        :type: list[V1devicesdeviceIddraftDraftBgpAggregations]
        """

        self._bgp_aggregations = bgp_aggregations

    @property
    def bgp_multipath(self):
        """Gets the bgp_multipath of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The bgp_multipath of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: V1devicesdeviceIddraftDraftBgpMultipath
        """
        return self._bgp_multipath

    @bgp_multipath.setter
    def bgp_multipath(self, bgp_multipath):
        """Sets the bgp_multipath of this InlineResponse200112Vrfs.


        :param bgp_multipath: The bgp_multipath of this InlineResponse200112Vrfs.  # noqa: E501
        :type: V1devicesdeviceIddraftDraftBgpMultipath
        """

        self._bgp_multipath = bgp_multipath

    @property
    def bgp_neighbors(self):
        """Gets the bgp_neighbors of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The bgp_neighbors of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: list[InlineResponse200112BgpNeighbors]
        """
        return self._bgp_neighbors

    @bgp_neighbors.setter
    def bgp_neighbors(self, bgp_neighbors):
        """Sets the bgp_neighbors of this InlineResponse200112Vrfs.


        :param bgp_neighbors: The bgp_neighbors of this InlineResponse200112Vrfs.  # noqa: E501
        :type: list[InlineResponse200112BgpNeighbors]
        """

        self._bgp_neighbors = bgp_neighbors

    @property
    def bgp_redistributions(self):
        """Gets the bgp_redistributions of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The bgp_redistributions of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: V1devicesdeviceIddraftDraftBgpRedistributions
        """
        return self._bgp_redistributions

    @bgp_redistributions.setter
    def bgp_redistributions(self, bgp_redistributions):
        """Sets the bgp_redistributions of this InlineResponse200112Vrfs.


        :param bgp_redistributions: The bgp_redistributions of this InlineResponse200112Vrfs.  # noqa: E501
        :type: V1devicesdeviceIddraftDraftBgpRedistributions
        """

        self._bgp_redistributions = bgp_redistributions

    @property
    def description(self):
        """Gets the description of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The description of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse200112Vrfs.


        :param description: The description of this InlineResponse200112Vrfs.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dhcp_subnets(self):
        """Gets the dhcp_subnets of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The dhcp_subnets of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: list[InlineResponse200112DhcpSubnets]
        """
        return self._dhcp_subnets

    @dhcp_subnets.setter
    def dhcp_subnets(self, dhcp_subnets):
        """Sets the dhcp_subnets of this InlineResponse200112Vrfs.


        :param dhcp_subnets: The dhcp_subnets of this InlineResponse200112Vrfs.  # noqa: E501
        :type: list[InlineResponse200112DhcpSubnets]
        """

        self._dhcp_subnets = dhcp_subnets

    @property
    def enterprise_id(self):
        """Gets the enterprise_id of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The enterprise_id of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_id

    @enterprise_id.setter
    def enterprise_id(self, enterprise_id):
        """Sets the enterprise_id of this InlineResponse200112Vrfs.


        :param enterprise_id: The enterprise_id of this InlineResponse200112Vrfs.  # noqa: E501
        :type: str
        """

        self._enterprise_id = enterprise_id

    @property
    def function(self):
        """Gets the function of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The function of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this InlineResponse200112Vrfs.


        :param function: The function of this InlineResponse200112Vrfs.  # noqa: E501
        :type: str
        """

        self._function = function

    @property
    def id(self):
        """Gets the id of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The id of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200112Vrfs.


        :param id: The id of this InlineResponse200112Vrfs.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ipfix_exporters(self):
        """Gets the ipfix_exporters of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The ipfix_exporters of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: list[V1devicesdeviceIddraftDraftIpfixExporters]
        """
        return self._ipfix_exporters

    @ipfix_exporters.setter
    def ipfix_exporters(self, ipfix_exporters):
        """Sets the ipfix_exporters of this InlineResponse200112Vrfs.


        :param ipfix_exporters: The ipfix_exporters of this InlineResponse200112Vrfs.  # noqa: E501
        :type: list[V1devicesdeviceIddraftDraftIpfixExporters]
        """

        self._ipfix_exporters = ipfix_exporters

    @property
    def name(self):
        """Gets the name of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The name of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200112Vrfs.


        :param name: The name of this InlineResponse200112Vrfs.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nat_ruleset(self):
        """Gets the nat_ruleset of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The nat_ruleset of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: str
        """
        return self._nat_ruleset

    @nat_ruleset.setter
    def nat_ruleset(self, nat_ruleset):
        """Sets the nat_ruleset of this InlineResponse200112Vrfs.


        :param nat_ruleset: The nat_ruleset of this InlineResponse200112Vrfs.  # noqa: E501
        :type: str
        """

        self._nat_ruleset = nat_ruleset

    @property
    def networks(self):
        """Gets the networks of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The networks of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: list[str]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this InlineResponse200112Vrfs.


        :param networks: The networks of this InlineResponse200112Vrfs.  # noqa: E501
        :type: list[str]
        """

        self._networks = networks

    @property
    def ospfv2_process(self):
        """Gets the ospfv2_process of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The ospfv2_process of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: InlineResponse200112Ospfv2Process
        """
        return self._ospfv2_process

    @ospfv2_process.setter
    def ospfv2_process(self, ospfv2_process):
        """Sets the ospfv2_process of this InlineResponse200112Vrfs.


        :param ospfv2_process: The ospfv2_process of this InlineResponse200112Vrfs.  # noqa: E501
        :type: InlineResponse200112Ospfv2Process
        """

        self._ospfv2_process = ospfv2_process

    @property
    def ospfv3_process(self):
        """Gets the ospfv3_process of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The ospfv3_process of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: InlineResponse200112Ospfv3Process
        """
        return self._ospfv3_process

    @ospfv3_process.setter
    def ospfv3_process(self, ospfv3_process):
        """Sets the ospfv3_process of this InlineResponse200112Vrfs.


        :param ospfv3_process: The ospfv3_process of this InlineResponse200112Vrfs.  # noqa: E501
        :type: InlineResponse200112Ospfv3Process
        """

        self._ospfv3_process = ospfv3_process

    @property
    def overlay_filters(self):
        """Gets the overlay_filters of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The overlay_filters of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: V1devicesdeviceIddraftDraftOverlayFilters
        """
        return self._overlay_filters

    @overlay_filters.setter
    def overlay_filters(self, overlay_filters):
        """Sets the overlay_filters of this InlineResponse200112Vrfs.


        :param overlay_filters: The overlay_filters of this InlineResponse200112Vrfs.  # noqa: E501
        :type: V1devicesdeviceIddraftDraftOverlayFilters
        """

        self._overlay_filters = overlay_filters

    @property
    def routable(self):
        """Gets the routable of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The routable of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: str
        """
        return self._routable

    @routable.setter
    def routable(self, routable):
        """Sets the routable of this InlineResponse200112Vrfs.


        :param routable: The routable of this InlineResponse200112Vrfs.  # noqa: E501
        :type: str
        """

        self._routable = routable

    @property
    def route_distinguisher(self):
        """Gets the route_distinguisher of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The route_distinguisher of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: str
        """
        return self._route_distinguisher

    @route_distinguisher.setter
    def route_distinguisher(self, route_distinguisher):
        """Sets the route_distinguisher of this InlineResponse200112Vrfs.


        :param route_distinguisher: The route_distinguisher of this InlineResponse200112Vrfs.  # noqa: E501
        :type: str
        """

        self._route_distinguisher = route_distinguisher

    @property
    def static_routes(self):
        """Gets the static_routes of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The static_routes of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: list[InlineResponse200112StaticRoutes]
        """
        return self._static_routes

    @static_routes.setter
    def static_routes(self, static_routes):
        """Sets the static_routes of this InlineResponse200112Vrfs.


        :param static_routes: The static_routes of this InlineResponse200112Vrfs.  # noqa: E501
        :type: list[InlineResponse200112StaticRoutes]
        """

        self._static_routes = static_routes

    @property
    def syslog_targets(self):
        """Gets the syslog_targets of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The syslog_targets of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: list[V1devicesdeviceIddraftDraftSyslogTargets]
        """
        return self._syslog_targets

    @syslog_targets.setter
    def syslog_targets(self, syslog_targets):
        """Sets the syslog_targets of this InlineResponse200112Vrfs.


        :param syslog_targets: The syslog_targets of this InlineResponse200112Vrfs.  # noqa: E501
        :type: list[V1devicesdeviceIddraftDraftSyslogTargets]
        """

        self._syslog_targets = syslog_targets

    @property
    def traffic_ruleset(self):
        """Gets the traffic_ruleset of this InlineResponse200112Vrfs.  # noqa: E501


        :return: The traffic_ruleset of this InlineResponse200112Vrfs.  # noqa: E501
        :rtype: str
        """
        return self._traffic_ruleset

    @traffic_ruleset.setter
    def traffic_ruleset(self, traffic_ruleset):
        """Sets the traffic_ruleset of this InlineResponse200112Vrfs.


        :param traffic_ruleset: The traffic_ruleset of this InlineResponse200112Vrfs.  # noqa: E501
        :type: str
        """

        self._traffic_ruleset = traffic_ruleset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200112Vrfs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200112Vrfs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
