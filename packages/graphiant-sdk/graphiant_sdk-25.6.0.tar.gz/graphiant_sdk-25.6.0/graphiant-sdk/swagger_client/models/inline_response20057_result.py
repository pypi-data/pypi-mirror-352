# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20057Result(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avg_ping_time': 'str',
        'date_time': 'V1devicesbringuptokenValidTillTs',
        'download_speed': 'str',
        'isp': 'str',
        'max_ping_time': 'str',
        'min_ping_time': 'str',
        'result': 'str',
        'server_details': 'InlineResponse20055Server',
        'upload_speed': 'str'
    }

    attribute_map = {
        'avg_ping_time': 'avgPingTime',
        'date_time': 'dateTime',
        'download_speed': 'downloadSpeed',
        'isp': 'isp',
        'max_ping_time': 'maxPingTime',
        'min_ping_time': 'minPingTime',
        'result': 'result',
        'server_details': 'serverDetails',
        'upload_speed': 'uploadSpeed'
    }

    def __init__(self, avg_ping_time=None, date_time=None, download_speed=None, isp=None, max_ping_time=None, min_ping_time=None, result=None, server_details=None, upload_speed=None):  # noqa: E501
        """InlineResponse20057Result - a model defined in Swagger"""  # noqa: E501
        self._avg_ping_time = None
        self._date_time = None
        self._download_speed = None
        self._isp = None
        self._max_ping_time = None
        self._min_ping_time = None
        self._result = None
        self._server_details = None
        self._upload_speed = None
        self.discriminator = None
        if avg_ping_time is not None:
            self.avg_ping_time = avg_ping_time
        if date_time is not None:
            self.date_time = date_time
        if download_speed is not None:
            self.download_speed = download_speed
        if isp is not None:
            self.isp = isp
        if max_ping_time is not None:
            self.max_ping_time = max_ping_time
        if min_ping_time is not None:
            self.min_ping_time = min_ping_time
        if result is not None:
            self.result = result
        if server_details is not None:
            self.server_details = server_details
        if upload_speed is not None:
            self.upload_speed = upload_speed

    @property
    def avg_ping_time(self):
        """Gets the avg_ping_time of this InlineResponse20057Result.  # noqa: E501


        :return: The avg_ping_time of this InlineResponse20057Result.  # noqa: E501
        :rtype: str
        """
        return self._avg_ping_time

    @avg_ping_time.setter
    def avg_ping_time(self, avg_ping_time):
        """Sets the avg_ping_time of this InlineResponse20057Result.


        :param avg_ping_time: The avg_ping_time of this InlineResponse20057Result.  # noqa: E501
        :type: str
        """

        self._avg_ping_time = avg_ping_time

    @property
    def date_time(self):
        """Gets the date_time of this InlineResponse20057Result.  # noqa: E501


        :return: The date_time of this InlineResponse20057Result.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this InlineResponse20057Result.


        :param date_time: The date_time of this InlineResponse20057Result.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._date_time = date_time

    @property
    def download_speed(self):
        """Gets the download_speed of this InlineResponse20057Result.  # noqa: E501


        :return: The download_speed of this InlineResponse20057Result.  # noqa: E501
        :rtype: str
        """
        return self._download_speed

    @download_speed.setter
    def download_speed(self, download_speed):
        """Sets the download_speed of this InlineResponse20057Result.


        :param download_speed: The download_speed of this InlineResponse20057Result.  # noqa: E501
        :type: str
        """

        self._download_speed = download_speed

    @property
    def isp(self):
        """Gets the isp of this InlineResponse20057Result.  # noqa: E501


        :return: The isp of this InlineResponse20057Result.  # noqa: E501
        :rtype: str
        """
        return self._isp

    @isp.setter
    def isp(self, isp):
        """Sets the isp of this InlineResponse20057Result.


        :param isp: The isp of this InlineResponse20057Result.  # noqa: E501
        :type: str
        """

        self._isp = isp

    @property
    def max_ping_time(self):
        """Gets the max_ping_time of this InlineResponse20057Result.  # noqa: E501


        :return: The max_ping_time of this InlineResponse20057Result.  # noqa: E501
        :rtype: str
        """
        return self._max_ping_time

    @max_ping_time.setter
    def max_ping_time(self, max_ping_time):
        """Sets the max_ping_time of this InlineResponse20057Result.


        :param max_ping_time: The max_ping_time of this InlineResponse20057Result.  # noqa: E501
        :type: str
        """

        self._max_ping_time = max_ping_time

    @property
    def min_ping_time(self):
        """Gets the min_ping_time of this InlineResponse20057Result.  # noqa: E501


        :return: The min_ping_time of this InlineResponse20057Result.  # noqa: E501
        :rtype: str
        """
        return self._min_ping_time

    @min_ping_time.setter
    def min_ping_time(self, min_ping_time):
        """Sets the min_ping_time of this InlineResponse20057Result.


        :param min_ping_time: The min_ping_time of this InlineResponse20057Result.  # noqa: E501
        :type: str
        """

        self._min_ping_time = min_ping_time

    @property
    def result(self):
        """Gets the result of this InlineResponse20057Result.  # noqa: E501


        :return: The result of this InlineResponse20057Result.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this InlineResponse20057Result.


        :param result: The result of this InlineResponse20057Result.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def server_details(self):
        """Gets the server_details of this InlineResponse20057Result.  # noqa: E501


        :return: The server_details of this InlineResponse20057Result.  # noqa: E501
        :rtype: InlineResponse20055Server
        """
        return self._server_details

    @server_details.setter
    def server_details(self, server_details):
        """Sets the server_details of this InlineResponse20057Result.


        :param server_details: The server_details of this InlineResponse20057Result.  # noqa: E501
        :type: InlineResponse20055Server
        """

        self._server_details = server_details

    @property
    def upload_speed(self):
        """Gets the upload_speed of this InlineResponse20057Result.  # noqa: E501


        :return: The upload_speed of this InlineResponse20057Result.  # noqa: E501
        :rtype: str
        """
        return self._upload_speed

    @upload_speed.setter
    def upload_speed(self, upload_speed):
        """Sets the upload_speed of this InlineResponse20057Result.


        :param upload_speed: The upload_speed of this InlineResponse20057Result.  # noqa: E501
        :type: str
        """

        self._upload_speed = upload_speed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20057Result, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20057Result):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
