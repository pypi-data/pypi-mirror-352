# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200256SystemPlane(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu': 'list[InlineResponse200222SystemPlaneCpu]',
        'crashes': 'list[InlineResponse200222SystemPlaneCrashes]',
        'disk': 'list[InlineResponse200222SystemPlaneCpu]',
        'last_crash': 'InlineResponse200222SystemPlaneLastCrash',
        'maintenance_windows': 'list[InlineResponse200222SystemPlaneMaintenanceWindows]',
        'memory': 'list[InlineResponse200222SystemPlaneCpu]',
        'status': 'str',
        'temperature': 'list[InlineResponse200222SystemPlaneMaintenanceWindows]',
        'temperature_series': 'list[InlineResponse200222SystemPlaneCpu]'
    }

    attribute_map = {
        'cpu': 'cpu',
        'crashes': 'crashes',
        'disk': 'disk',
        'last_crash': 'lastCrash',
        'maintenance_windows': 'maintenanceWindows',
        'memory': 'memory',
        'status': 'status',
        'temperature': 'temperature',
        'temperature_series': 'temperatureSeries'
    }

    def __init__(self, cpu=None, crashes=None, disk=None, last_crash=None, maintenance_windows=None, memory=None, status=None, temperature=None, temperature_series=None):  # noqa: E501
        """InlineResponse200256SystemPlane - a model defined in Swagger"""  # noqa: E501
        self._cpu = None
        self._crashes = None
        self._disk = None
        self._last_crash = None
        self._maintenance_windows = None
        self._memory = None
        self._status = None
        self._temperature = None
        self._temperature_series = None
        self.discriminator = None
        if cpu is not None:
            self.cpu = cpu
        if crashes is not None:
            self.crashes = crashes
        if disk is not None:
            self.disk = disk
        if last_crash is not None:
            self.last_crash = last_crash
        if maintenance_windows is not None:
            self.maintenance_windows = maintenance_windows
        if memory is not None:
            self.memory = memory
        if status is not None:
            self.status = status
        if temperature is not None:
            self.temperature = temperature
        if temperature_series is not None:
            self.temperature_series = temperature_series

    @property
    def cpu(self):
        """Gets the cpu of this InlineResponse200256SystemPlane.  # noqa: E501


        :return: The cpu of this InlineResponse200256SystemPlane.  # noqa: E501
        :rtype: list[InlineResponse200222SystemPlaneCpu]
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this InlineResponse200256SystemPlane.


        :param cpu: The cpu of this InlineResponse200256SystemPlane.  # noqa: E501
        :type: list[InlineResponse200222SystemPlaneCpu]
        """

        self._cpu = cpu

    @property
    def crashes(self):
        """Gets the crashes of this InlineResponse200256SystemPlane.  # noqa: E501


        :return: The crashes of this InlineResponse200256SystemPlane.  # noqa: E501
        :rtype: list[InlineResponse200222SystemPlaneCrashes]
        """
        return self._crashes

    @crashes.setter
    def crashes(self, crashes):
        """Sets the crashes of this InlineResponse200256SystemPlane.


        :param crashes: The crashes of this InlineResponse200256SystemPlane.  # noqa: E501
        :type: list[InlineResponse200222SystemPlaneCrashes]
        """

        self._crashes = crashes

    @property
    def disk(self):
        """Gets the disk of this InlineResponse200256SystemPlane.  # noqa: E501


        :return: The disk of this InlineResponse200256SystemPlane.  # noqa: E501
        :rtype: list[InlineResponse200222SystemPlaneCpu]
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this InlineResponse200256SystemPlane.


        :param disk: The disk of this InlineResponse200256SystemPlane.  # noqa: E501
        :type: list[InlineResponse200222SystemPlaneCpu]
        """

        self._disk = disk

    @property
    def last_crash(self):
        """Gets the last_crash of this InlineResponse200256SystemPlane.  # noqa: E501


        :return: The last_crash of this InlineResponse200256SystemPlane.  # noqa: E501
        :rtype: InlineResponse200222SystemPlaneLastCrash
        """
        return self._last_crash

    @last_crash.setter
    def last_crash(self, last_crash):
        """Sets the last_crash of this InlineResponse200256SystemPlane.


        :param last_crash: The last_crash of this InlineResponse200256SystemPlane.  # noqa: E501
        :type: InlineResponse200222SystemPlaneLastCrash
        """

        self._last_crash = last_crash

    @property
    def maintenance_windows(self):
        """Gets the maintenance_windows of this InlineResponse200256SystemPlane.  # noqa: E501


        :return: The maintenance_windows of this InlineResponse200256SystemPlane.  # noqa: E501
        :rtype: list[InlineResponse200222SystemPlaneMaintenanceWindows]
        """
        return self._maintenance_windows

    @maintenance_windows.setter
    def maintenance_windows(self, maintenance_windows):
        """Sets the maintenance_windows of this InlineResponse200256SystemPlane.


        :param maintenance_windows: The maintenance_windows of this InlineResponse200256SystemPlane.  # noqa: E501
        :type: list[InlineResponse200222SystemPlaneMaintenanceWindows]
        """

        self._maintenance_windows = maintenance_windows

    @property
    def memory(self):
        """Gets the memory of this InlineResponse200256SystemPlane.  # noqa: E501


        :return: The memory of this InlineResponse200256SystemPlane.  # noqa: E501
        :rtype: list[InlineResponse200222SystemPlaneCpu]
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this InlineResponse200256SystemPlane.


        :param memory: The memory of this InlineResponse200256SystemPlane.  # noqa: E501
        :type: list[InlineResponse200222SystemPlaneCpu]
        """

        self._memory = memory

    @property
    def status(self):
        """Gets the status of this InlineResponse200256SystemPlane.  # noqa: E501


        :return: The status of this InlineResponse200256SystemPlane.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200256SystemPlane.


        :param status: The status of this InlineResponse200256SystemPlane.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def temperature(self):
        """Gets the temperature of this InlineResponse200256SystemPlane.  # noqa: E501


        :return: The temperature of this InlineResponse200256SystemPlane.  # noqa: E501
        :rtype: list[InlineResponse200222SystemPlaneMaintenanceWindows]
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this InlineResponse200256SystemPlane.


        :param temperature: The temperature of this InlineResponse200256SystemPlane.  # noqa: E501
        :type: list[InlineResponse200222SystemPlaneMaintenanceWindows]
        """

        self._temperature = temperature

    @property
    def temperature_series(self):
        """Gets the temperature_series of this InlineResponse200256SystemPlane.  # noqa: E501


        :return: The temperature_series of this InlineResponse200256SystemPlane.  # noqa: E501
        :rtype: list[InlineResponse200222SystemPlaneCpu]
        """
        return self._temperature_series

    @temperature_series.setter
    def temperature_series(self, temperature_series):
        """Sets the temperature_series of this InlineResponse200256SystemPlane.


        :param temperature_series: The temperature_series of this InlineResponse200256SystemPlane.  # noqa: E501
        :type: list[InlineResponse200222SystemPlaneCpu]
        """

        self._temperature_series = temperature_series

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200256SystemPlane, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200256SystemPlane):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
