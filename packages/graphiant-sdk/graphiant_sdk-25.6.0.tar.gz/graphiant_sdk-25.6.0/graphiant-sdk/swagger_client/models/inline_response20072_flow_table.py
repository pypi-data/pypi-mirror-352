# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20072FlowTable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dest_ip': 'str',
        'dest_port': 'str',
        'dl_circuit_name': 'str',
        'dl_usage': 'str',
        'egress_local_core_region': 'str',
        'ingress_local_core_region': 'str',
        'lan_segment': 'str',
        'protocol': 'str',
        'remote_core_region': 'str',
        'sla_class': 'str',
        'src_ip': 'str',
        'src_port': 'str',
        'ts': 'V1devicesbringuptokenValidTillTs',
        'ul_circuit_name': 'str',
        'ul_usage': 'str'
    }

    attribute_map = {
        'dest_ip': 'destIp',
        'dest_port': 'destPort',
        'dl_circuit_name': 'dlCircuitName',
        'dl_usage': 'dlUsage',
        'egress_local_core_region': 'egressLocalCoreRegion',
        'ingress_local_core_region': 'ingressLocalCoreRegion',
        'lan_segment': 'lanSegment',
        'protocol': 'protocol',
        'remote_core_region': 'remoteCoreRegion',
        'sla_class': 'slaClass',
        'src_ip': 'srcIp',
        'src_port': 'srcPort',
        'ts': 'ts',
        'ul_circuit_name': 'ulCircuitName',
        'ul_usage': 'ulUsage'
    }

    def __init__(self, dest_ip=None, dest_port=None, dl_circuit_name=None, dl_usage=None, egress_local_core_region=None, ingress_local_core_region=None, lan_segment=None, protocol=None, remote_core_region=None, sla_class=None, src_ip=None, src_port=None, ts=None, ul_circuit_name=None, ul_usage=None):  # noqa: E501
        """InlineResponse20072FlowTable - a model defined in Swagger"""  # noqa: E501
        self._dest_ip = None
        self._dest_port = None
        self._dl_circuit_name = None
        self._dl_usage = None
        self._egress_local_core_region = None
        self._ingress_local_core_region = None
        self._lan_segment = None
        self._protocol = None
        self._remote_core_region = None
        self._sla_class = None
        self._src_ip = None
        self._src_port = None
        self._ts = None
        self._ul_circuit_name = None
        self._ul_usage = None
        self.discriminator = None
        if dest_ip is not None:
            self.dest_ip = dest_ip
        if dest_port is not None:
            self.dest_port = dest_port
        if dl_circuit_name is not None:
            self.dl_circuit_name = dl_circuit_name
        if dl_usage is not None:
            self.dl_usage = dl_usage
        if egress_local_core_region is not None:
            self.egress_local_core_region = egress_local_core_region
        if ingress_local_core_region is not None:
            self.ingress_local_core_region = ingress_local_core_region
        if lan_segment is not None:
            self.lan_segment = lan_segment
        if protocol is not None:
            self.protocol = protocol
        if remote_core_region is not None:
            self.remote_core_region = remote_core_region
        if sla_class is not None:
            self.sla_class = sla_class
        if src_ip is not None:
            self.src_ip = src_ip
        if src_port is not None:
            self.src_port = src_port
        if ts is not None:
            self.ts = ts
        if ul_circuit_name is not None:
            self.ul_circuit_name = ul_circuit_name
        if ul_usage is not None:
            self.ul_usage = ul_usage

    @property
    def dest_ip(self):
        """Gets the dest_ip of this InlineResponse20072FlowTable.  # noqa: E501


        :return: The dest_ip of this InlineResponse20072FlowTable.  # noqa: E501
        :rtype: str
        """
        return self._dest_ip

    @dest_ip.setter
    def dest_ip(self, dest_ip):
        """Sets the dest_ip of this InlineResponse20072FlowTable.


        :param dest_ip: The dest_ip of this InlineResponse20072FlowTable.  # noqa: E501
        :type: str
        """

        self._dest_ip = dest_ip

    @property
    def dest_port(self):
        """Gets the dest_port of this InlineResponse20072FlowTable.  # noqa: E501


        :return: The dest_port of this InlineResponse20072FlowTable.  # noqa: E501
        :rtype: str
        """
        return self._dest_port

    @dest_port.setter
    def dest_port(self, dest_port):
        """Sets the dest_port of this InlineResponse20072FlowTable.


        :param dest_port: The dest_port of this InlineResponse20072FlowTable.  # noqa: E501
        :type: str
        """

        self._dest_port = dest_port

    @property
    def dl_circuit_name(self):
        """Gets the dl_circuit_name of this InlineResponse20072FlowTable.  # noqa: E501


        :return: The dl_circuit_name of this InlineResponse20072FlowTable.  # noqa: E501
        :rtype: str
        """
        return self._dl_circuit_name

    @dl_circuit_name.setter
    def dl_circuit_name(self, dl_circuit_name):
        """Sets the dl_circuit_name of this InlineResponse20072FlowTable.


        :param dl_circuit_name: The dl_circuit_name of this InlineResponse20072FlowTable.  # noqa: E501
        :type: str
        """

        self._dl_circuit_name = dl_circuit_name

    @property
    def dl_usage(self):
        """Gets the dl_usage of this InlineResponse20072FlowTable.  # noqa: E501


        :return: The dl_usage of this InlineResponse20072FlowTable.  # noqa: E501
        :rtype: str
        """
        return self._dl_usage

    @dl_usage.setter
    def dl_usage(self, dl_usage):
        """Sets the dl_usage of this InlineResponse20072FlowTable.


        :param dl_usage: The dl_usage of this InlineResponse20072FlowTable.  # noqa: E501
        :type: str
        """

        self._dl_usage = dl_usage

    @property
    def egress_local_core_region(self):
        """Gets the egress_local_core_region of this InlineResponse20072FlowTable.  # noqa: E501


        :return: The egress_local_core_region of this InlineResponse20072FlowTable.  # noqa: E501
        :rtype: str
        """
        return self._egress_local_core_region

    @egress_local_core_region.setter
    def egress_local_core_region(self, egress_local_core_region):
        """Sets the egress_local_core_region of this InlineResponse20072FlowTable.


        :param egress_local_core_region: The egress_local_core_region of this InlineResponse20072FlowTable.  # noqa: E501
        :type: str
        """

        self._egress_local_core_region = egress_local_core_region

    @property
    def ingress_local_core_region(self):
        """Gets the ingress_local_core_region of this InlineResponse20072FlowTable.  # noqa: E501


        :return: The ingress_local_core_region of this InlineResponse20072FlowTable.  # noqa: E501
        :rtype: str
        """
        return self._ingress_local_core_region

    @ingress_local_core_region.setter
    def ingress_local_core_region(self, ingress_local_core_region):
        """Sets the ingress_local_core_region of this InlineResponse20072FlowTable.


        :param ingress_local_core_region: The ingress_local_core_region of this InlineResponse20072FlowTable.  # noqa: E501
        :type: str
        """

        self._ingress_local_core_region = ingress_local_core_region

    @property
    def lan_segment(self):
        """Gets the lan_segment of this InlineResponse20072FlowTable.  # noqa: E501


        :return: The lan_segment of this InlineResponse20072FlowTable.  # noqa: E501
        :rtype: str
        """
        return self._lan_segment

    @lan_segment.setter
    def lan_segment(self, lan_segment):
        """Sets the lan_segment of this InlineResponse20072FlowTable.


        :param lan_segment: The lan_segment of this InlineResponse20072FlowTable.  # noqa: E501
        :type: str
        """

        self._lan_segment = lan_segment

    @property
    def protocol(self):
        """Gets the protocol of this InlineResponse20072FlowTable.  # noqa: E501


        :return: The protocol of this InlineResponse20072FlowTable.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this InlineResponse20072FlowTable.


        :param protocol: The protocol of this InlineResponse20072FlowTable.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def remote_core_region(self):
        """Gets the remote_core_region of this InlineResponse20072FlowTable.  # noqa: E501


        :return: The remote_core_region of this InlineResponse20072FlowTable.  # noqa: E501
        :rtype: str
        """
        return self._remote_core_region

    @remote_core_region.setter
    def remote_core_region(self, remote_core_region):
        """Sets the remote_core_region of this InlineResponse20072FlowTable.


        :param remote_core_region: The remote_core_region of this InlineResponse20072FlowTable.  # noqa: E501
        :type: str
        """

        self._remote_core_region = remote_core_region

    @property
    def sla_class(self):
        """Gets the sla_class of this InlineResponse20072FlowTable.  # noqa: E501


        :return: The sla_class of this InlineResponse20072FlowTable.  # noqa: E501
        :rtype: str
        """
        return self._sla_class

    @sla_class.setter
    def sla_class(self, sla_class):
        """Sets the sla_class of this InlineResponse20072FlowTable.


        :param sla_class: The sla_class of this InlineResponse20072FlowTable.  # noqa: E501
        :type: str
        """

        self._sla_class = sla_class

    @property
    def src_ip(self):
        """Gets the src_ip of this InlineResponse20072FlowTable.  # noqa: E501


        :return: The src_ip of this InlineResponse20072FlowTable.  # noqa: E501
        :rtype: str
        """
        return self._src_ip

    @src_ip.setter
    def src_ip(self, src_ip):
        """Sets the src_ip of this InlineResponse20072FlowTable.


        :param src_ip: The src_ip of this InlineResponse20072FlowTable.  # noqa: E501
        :type: str
        """

        self._src_ip = src_ip

    @property
    def src_port(self):
        """Gets the src_port of this InlineResponse20072FlowTable.  # noqa: E501


        :return: The src_port of this InlineResponse20072FlowTable.  # noqa: E501
        :rtype: str
        """
        return self._src_port

    @src_port.setter
    def src_port(self, src_port):
        """Sets the src_port of this InlineResponse20072FlowTable.


        :param src_port: The src_port of this InlineResponse20072FlowTable.  # noqa: E501
        :type: str
        """

        self._src_port = src_port

    @property
    def ts(self):
        """Gets the ts of this InlineResponse20072FlowTable.  # noqa: E501


        :return: The ts of this InlineResponse20072FlowTable.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this InlineResponse20072FlowTable.


        :param ts: The ts of this InlineResponse20072FlowTable.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._ts = ts

    @property
    def ul_circuit_name(self):
        """Gets the ul_circuit_name of this InlineResponse20072FlowTable.  # noqa: E501


        :return: The ul_circuit_name of this InlineResponse20072FlowTable.  # noqa: E501
        :rtype: str
        """
        return self._ul_circuit_name

    @ul_circuit_name.setter
    def ul_circuit_name(self, ul_circuit_name):
        """Sets the ul_circuit_name of this InlineResponse20072FlowTable.


        :param ul_circuit_name: The ul_circuit_name of this InlineResponse20072FlowTable.  # noqa: E501
        :type: str
        """

        self._ul_circuit_name = ul_circuit_name

    @property
    def ul_usage(self):
        """Gets the ul_usage of this InlineResponse20072FlowTable.  # noqa: E501


        :return: The ul_usage of this InlineResponse20072FlowTable.  # noqa: E501
        :rtype: str
        """
        return self._ul_usage

    @ul_usage.setter
    def ul_usage(self, ul_usage):
        """Sets the ul_usage of this InlineResponse20072FlowTable.


        :param ul_usage: The ul_usage of this InlineResponse20072FlowTable.  # noqa: E501
        :type: str
        """

        self._ul_usage = ul_usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20072FlowTable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20072FlowTable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
