# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200234NodeInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'control_quality': 'str',
        'cpu': 'str',
        'data_quality': 'str',
        'device_id': 'str',
        'hostname': 'str',
        'location': 'str',
        'maintenance_mode': 'str',
        'memory': 'str',
        'mgmt_ip': 'str',
        'model': 'str',
        'portal_quality': 'str',
        'serial_number': 'str',
        'software_version': 'str',
        'staging_mode': 'str',
        'temperature': 'str',
        'uptime': 'V1devicesbringuptokenValidTillTs'
    }

    attribute_map = {
        'control_quality': 'controlQuality',
        'cpu': 'cpu',
        'data_quality': 'dataQuality',
        'device_id': 'deviceId',
        'hostname': 'hostname',
        'location': 'location',
        'maintenance_mode': 'maintenanceMode',
        'memory': 'memory',
        'mgmt_ip': 'mgmtIp',
        'model': 'model',
        'portal_quality': 'portalQuality',
        'serial_number': 'serialNumber',
        'software_version': 'softwareVersion',
        'staging_mode': 'stagingMode',
        'temperature': 'temperature',
        'uptime': 'uptime'
    }

    def __init__(self, control_quality=None, cpu=None, data_quality=None, device_id=None, hostname=None, location=None, maintenance_mode=None, memory=None, mgmt_ip=None, model=None, portal_quality=None, serial_number=None, software_version=None, staging_mode=None, temperature=None, uptime=None):  # noqa: E501
        """InlineResponse200234NodeInfo - a model defined in Swagger"""  # noqa: E501
        self._control_quality = None
        self._cpu = None
        self._data_quality = None
        self._device_id = None
        self._hostname = None
        self._location = None
        self._maintenance_mode = None
        self._memory = None
        self._mgmt_ip = None
        self._model = None
        self._portal_quality = None
        self._serial_number = None
        self._software_version = None
        self._staging_mode = None
        self._temperature = None
        self._uptime = None
        self.discriminator = None
        if control_quality is not None:
            self.control_quality = control_quality
        if cpu is not None:
            self.cpu = cpu
        if data_quality is not None:
            self.data_quality = data_quality
        if device_id is not None:
            self.device_id = device_id
        if hostname is not None:
            self.hostname = hostname
        if location is not None:
            self.location = location
        if maintenance_mode is not None:
            self.maintenance_mode = maintenance_mode
        if memory is not None:
            self.memory = memory
        if mgmt_ip is not None:
            self.mgmt_ip = mgmt_ip
        if model is not None:
            self.model = model
        if portal_quality is not None:
            self.portal_quality = portal_quality
        if serial_number is not None:
            self.serial_number = serial_number
        if software_version is not None:
            self.software_version = software_version
        if staging_mode is not None:
            self.staging_mode = staging_mode
        if temperature is not None:
            self.temperature = temperature
        if uptime is not None:
            self.uptime = uptime

    @property
    def control_quality(self):
        """Gets the control_quality of this InlineResponse200234NodeInfo.  # noqa: E501


        :return: The control_quality of this InlineResponse200234NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._control_quality

    @control_quality.setter
    def control_quality(self, control_quality):
        """Sets the control_quality of this InlineResponse200234NodeInfo.


        :param control_quality: The control_quality of this InlineResponse200234NodeInfo.  # noqa: E501
        :type: str
        """

        self._control_quality = control_quality

    @property
    def cpu(self):
        """Gets the cpu of this InlineResponse200234NodeInfo.  # noqa: E501


        :return: The cpu of this InlineResponse200234NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this InlineResponse200234NodeInfo.


        :param cpu: The cpu of this InlineResponse200234NodeInfo.  # noqa: E501
        :type: str
        """

        self._cpu = cpu

    @property
    def data_quality(self):
        """Gets the data_quality of this InlineResponse200234NodeInfo.  # noqa: E501


        :return: The data_quality of this InlineResponse200234NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._data_quality

    @data_quality.setter
    def data_quality(self, data_quality):
        """Sets the data_quality of this InlineResponse200234NodeInfo.


        :param data_quality: The data_quality of this InlineResponse200234NodeInfo.  # noqa: E501
        :type: str
        """

        self._data_quality = data_quality

    @property
    def device_id(self):
        """Gets the device_id of this InlineResponse200234NodeInfo.  # noqa: E501


        :return: The device_id of this InlineResponse200234NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this InlineResponse200234NodeInfo.


        :param device_id: The device_id of this InlineResponse200234NodeInfo.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def hostname(self):
        """Gets the hostname of this InlineResponse200234NodeInfo.  # noqa: E501


        :return: The hostname of this InlineResponse200234NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this InlineResponse200234NodeInfo.


        :param hostname: The hostname of this InlineResponse200234NodeInfo.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def location(self):
        """Gets the location of this InlineResponse200234NodeInfo.  # noqa: E501


        :return: The location of this InlineResponse200234NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InlineResponse200234NodeInfo.


        :param location: The location of this InlineResponse200234NodeInfo.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def maintenance_mode(self):
        """Gets the maintenance_mode of this InlineResponse200234NodeInfo.  # noqa: E501


        :return: The maintenance_mode of this InlineResponse200234NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """Sets the maintenance_mode of this InlineResponse200234NodeInfo.


        :param maintenance_mode: The maintenance_mode of this InlineResponse200234NodeInfo.  # noqa: E501
        :type: str
        """

        self._maintenance_mode = maintenance_mode

    @property
    def memory(self):
        """Gets the memory of this InlineResponse200234NodeInfo.  # noqa: E501


        :return: The memory of this InlineResponse200234NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this InlineResponse200234NodeInfo.


        :param memory: The memory of this InlineResponse200234NodeInfo.  # noqa: E501
        :type: str
        """

        self._memory = memory

    @property
    def mgmt_ip(self):
        """Gets the mgmt_ip of this InlineResponse200234NodeInfo.  # noqa: E501


        :return: The mgmt_ip of this InlineResponse200234NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._mgmt_ip

    @mgmt_ip.setter
    def mgmt_ip(self, mgmt_ip):
        """Sets the mgmt_ip of this InlineResponse200234NodeInfo.


        :param mgmt_ip: The mgmt_ip of this InlineResponse200234NodeInfo.  # noqa: E501
        :type: str
        """

        self._mgmt_ip = mgmt_ip

    @property
    def model(self):
        """Gets the model of this InlineResponse200234NodeInfo.  # noqa: E501


        :return: The model of this InlineResponse200234NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this InlineResponse200234NodeInfo.


        :param model: The model of this InlineResponse200234NodeInfo.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def portal_quality(self):
        """Gets the portal_quality of this InlineResponse200234NodeInfo.  # noqa: E501


        :return: The portal_quality of this InlineResponse200234NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._portal_quality

    @portal_quality.setter
    def portal_quality(self, portal_quality):
        """Sets the portal_quality of this InlineResponse200234NodeInfo.


        :param portal_quality: The portal_quality of this InlineResponse200234NodeInfo.  # noqa: E501
        :type: str
        """

        self._portal_quality = portal_quality

    @property
    def serial_number(self):
        """Gets the serial_number of this InlineResponse200234NodeInfo.  # noqa: E501


        :return: The serial_number of this InlineResponse200234NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this InlineResponse200234NodeInfo.


        :param serial_number: The serial_number of this InlineResponse200234NodeInfo.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def software_version(self):
        """Gets the software_version of this InlineResponse200234NodeInfo.  # noqa: E501


        :return: The software_version of this InlineResponse200234NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this InlineResponse200234NodeInfo.


        :param software_version: The software_version of this InlineResponse200234NodeInfo.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def staging_mode(self):
        """Gets the staging_mode of this InlineResponse200234NodeInfo.  # noqa: E501


        :return: The staging_mode of this InlineResponse200234NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._staging_mode

    @staging_mode.setter
    def staging_mode(self, staging_mode):
        """Sets the staging_mode of this InlineResponse200234NodeInfo.


        :param staging_mode: The staging_mode of this InlineResponse200234NodeInfo.  # noqa: E501
        :type: str
        """

        self._staging_mode = staging_mode

    @property
    def temperature(self):
        """Gets the temperature of this InlineResponse200234NodeInfo.  # noqa: E501


        :return: The temperature of this InlineResponse200234NodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this InlineResponse200234NodeInfo.


        :param temperature: The temperature of this InlineResponse200234NodeInfo.  # noqa: E501
        :type: str
        """

        self._temperature = temperature

    @property
    def uptime(self):
        """Gets the uptime of this InlineResponse200234NodeInfo.  # noqa: E501


        :return: The uptime of this InlineResponse200234NodeInfo.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this InlineResponse200234NodeInfo.


        :param uptime: The uptime of this InlineResponse200234NodeInfo.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._uptime = uptime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200234NodeInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200234NodeInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
