# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200152Summaries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'V1devicesbringuptokenValidTillTs',
        'gateway_device_summary': 'list[InlineResponse200152GatewayDeviceSummary]',
        'graphiant_region': 'str',
        'id': 'str',
        'name': 'str',
        'speed': 'str',
        'status': 'str',
        'support_status': 'str',
        'type': 'str',
        'updated_at': 'V1devicesbringuptokenValidTillTs'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'gateway_device_summary': 'gatewayDeviceSummary',
        'graphiant_region': 'graphiantRegion',
        'id': 'id',
        'name': 'name',
        'speed': 'speed',
        'status': 'status',
        'support_status': 'supportStatus',
        'type': 'type',
        'updated_at': 'updatedAt'
    }

    def __init__(self, created_at=None, gateway_device_summary=None, graphiant_region=None, id=None, name=None, speed=None, status=None, support_status=None, type=None, updated_at=None):  # noqa: E501
        """InlineResponse200152Summaries - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._gateway_device_summary = None
        self._graphiant_region = None
        self._id = None
        self._name = None
        self._speed = None
        self._status = None
        self._support_status = None
        self._type = None
        self._updated_at = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if gateway_device_summary is not None:
            self.gateway_device_summary = gateway_device_summary
        if graphiant_region is not None:
            self.graphiant_region = graphiant_region
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if speed is not None:
            self.speed = speed
        if status is not None:
            self.status = status
        if support_status is not None:
            self.support_status = support_status
        if type is not None:
            self.type = type
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse200152Summaries.  # noqa: E501


        :return: The created_at of this InlineResponse200152Summaries.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse200152Summaries.


        :param created_at: The created_at of this InlineResponse200152Summaries.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._created_at = created_at

    @property
    def gateway_device_summary(self):
        """Gets the gateway_device_summary of this InlineResponse200152Summaries.  # noqa: E501


        :return: The gateway_device_summary of this InlineResponse200152Summaries.  # noqa: E501
        :rtype: list[InlineResponse200152GatewayDeviceSummary]
        """
        return self._gateway_device_summary

    @gateway_device_summary.setter
    def gateway_device_summary(self, gateway_device_summary):
        """Sets the gateway_device_summary of this InlineResponse200152Summaries.


        :param gateway_device_summary: The gateway_device_summary of this InlineResponse200152Summaries.  # noqa: E501
        :type: list[InlineResponse200152GatewayDeviceSummary]
        """

        self._gateway_device_summary = gateway_device_summary

    @property
    def graphiant_region(self):
        """Gets the graphiant_region of this InlineResponse200152Summaries.  # noqa: E501


        :return: The graphiant_region of this InlineResponse200152Summaries.  # noqa: E501
        :rtype: str
        """
        return self._graphiant_region

    @graphiant_region.setter
    def graphiant_region(self, graphiant_region):
        """Sets the graphiant_region of this InlineResponse200152Summaries.


        :param graphiant_region: The graphiant_region of this InlineResponse200152Summaries.  # noqa: E501
        :type: str
        """

        self._graphiant_region = graphiant_region

    @property
    def id(self):
        """Gets the id of this InlineResponse200152Summaries.  # noqa: E501


        :return: The id of this InlineResponse200152Summaries.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200152Summaries.


        :param id: The id of this InlineResponse200152Summaries.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse200152Summaries.  # noqa: E501


        :return: The name of this InlineResponse200152Summaries.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200152Summaries.


        :param name: The name of this InlineResponse200152Summaries.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def speed(self):
        """Gets the speed of this InlineResponse200152Summaries.  # noqa: E501


        :return: The speed of this InlineResponse200152Summaries.  # noqa: E501
        :rtype: str
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this InlineResponse200152Summaries.


        :param speed: The speed of this InlineResponse200152Summaries.  # noqa: E501
        :type: str
        """

        self._speed = speed

    @property
    def status(self):
        """Gets the status of this InlineResponse200152Summaries.  # noqa: E501


        :return: The status of this InlineResponse200152Summaries.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200152Summaries.


        :param status: The status of this InlineResponse200152Summaries.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def support_status(self):
        """Gets the support_status of this InlineResponse200152Summaries.  # noqa: E501


        :return: The support_status of this InlineResponse200152Summaries.  # noqa: E501
        :rtype: str
        """
        return self._support_status

    @support_status.setter
    def support_status(self, support_status):
        """Sets the support_status of this InlineResponse200152Summaries.


        :param support_status: The support_status of this InlineResponse200152Summaries.  # noqa: E501
        :type: str
        """

        self._support_status = support_status

    @property
    def type(self):
        """Gets the type of this InlineResponse200152Summaries.  # noqa: E501


        :return: The type of this InlineResponse200152Summaries.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse200152Summaries.


        :param type: The type of this InlineResponse200152Summaries.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this InlineResponse200152Summaries.  # noqa: E501


        :return: The updated_at of this InlineResponse200152Summaries.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InlineResponse200152Summaries.


        :param updated_at: The updated_at of this InlineResponse200152Summaries.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200152Summaries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200152Summaries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
