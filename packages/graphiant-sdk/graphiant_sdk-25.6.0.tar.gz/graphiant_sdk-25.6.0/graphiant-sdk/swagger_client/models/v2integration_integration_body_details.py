# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2integrationIntegrationBodyDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'opsgenie_key': 'str',
        'opsramp_details': 'str',
        'webhook_url': 'str'
    }

    attribute_map = {
        'opsgenie_key': 'opsgenieKey',
        'opsramp_details': 'opsrampDetails',
        'webhook_url': 'webhookUrl'
    }

    def __init__(self, opsgenie_key=None, opsramp_details=None, webhook_url=None):  # noqa: E501
        """V2integrationIntegrationBodyDetails - a model defined in Swagger"""  # noqa: E501
        self._opsgenie_key = None
        self._opsramp_details = None
        self._webhook_url = None
        self.discriminator = None
        if opsgenie_key is not None:
            self.opsgenie_key = opsgenie_key
        if opsramp_details is not None:
            self.opsramp_details = opsramp_details
        if webhook_url is not None:
            self.webhook_url = webhook_url

    @property
    def opsgenie_key(self):
        """Gets the opsgenie_key of this V2integrationIntegrationBodyDetails.  # noqa: E501


        :return: The opsgenie_key of this V2integrationIntegrationBodyDetails.  # noqa: E501
        :rtype: str
        """
        return self._opsgenie_key

    @opsgenie_key.setter
    def opsgenie_key(self, opsgenie_key):
        """Sets the opsgenie_key of this V2integrationIntegrationBodyDetails.


        :param opsgenie_key: The opsgenie_key of this V2integrationIntegrationBodyDetails.  # noqa: E501
        :type: str
        """

        self._opsgenie_key = opsgenie_key

    @property
    def opsramp_details(self):
        """Gets the opsramp_details of this V2integrationIntegrationBodyDetails.  # noqa: E501


        :return: The opsramp_details of this V2integrationIntegrationBodyDetails.  # noqa: E501
        :rtype: str
        """
        return self._opsramp_details

    @opsramp_details.setter
    def opsramp_details(self, opsramp_details):
        """Sets the opsramp_details of this V2integrationIntegrationBodyDetails.


        :param opsramp_details: The opsramp_details of this V2integrationIntegrationBodyDetails.  # noqa: E501
        :type: str
        """

        self._opsramp_details = opsramp_details

    @property
    def webhook_url(self):
        """Gets the webhook_url of this V2integrationIntegrationBodyDetails.  # noqa: E501


        :return: The webhook_url of this V2integrationIntegrationBodyDetails.  # noqa: E501
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this V2integrationIntegrationBodyDetails.


        :param webhook_url: The webhook_url of this V2integrationIntegrationBodyDetails.  # noqa: E501
        :type: str
        """

        self._webhook_url = webhook_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2integrationIntegrationBodyDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2integrationIntegrationBodyDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
