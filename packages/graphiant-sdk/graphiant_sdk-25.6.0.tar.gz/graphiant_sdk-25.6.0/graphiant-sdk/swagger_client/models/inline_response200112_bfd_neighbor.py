# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200112BfdNeighbor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'desired_minimum_tx_interval': 'str',
        'if_index': 'str',
        'interface': 'str',
        'last_updated': 'object',
        'local_diag': 'str',
        'peer_address': 'str',
        'remote_diag': 'str',
        'required_minimum_rx_interval': 'str',
        'segment_name': 'str',
        'source_address': 'str',
        'state': 'str',
        'time_in_state': 'object',
        'up': 'str'
    }

    attribute_map = {
        'desired_minimum_tx_interval': 'desiredMinimumTxInterval',
        'if_index': 'ifIndex',
        'interface': 'interface',
        'last_updated': 'lastUpdated',
        'local_diag': 'localDiag',
        'peer_address': 'peerAddress',
        'remote_diag': 'remoteDiag',
        'required_minimum_rx_interval': 'requiredMinimumRxInterval',
        'segment_name': 'segmentName',
        'source_address': 'sourceAddress',
        'state': 'state',
        'time_in_state': 'timeInState',
        'up': 'up'
    }

    def __init__(self, desired_minimum_tx_interval=None, if_index=None, interface=None, last_updated=None, local_diag=None, peer_address=None, remote_diag=None, required_minimum_rx_interval=None, segment_name=None, source_address=None, state=None, time_in_state=None, up=None):  # noqa: E501
        """InlineResponse200112BfdNeighbor - a model defined in Swagger"""  # noqa: E501
        self._desired_minimum_tx_interval = None
        self._if_index = None
        self._interface = None
        self._last_updated = None
        self._local_diag = None
        self._peer_address = None
        self._remote_diag = None
        self._required_minimum_rx_interval = None
        self._segment_name = None
        self._source_address = None
        self._state = None
        self._time_in_state = None
        self._up = None
        self.discriminator = None
        if desired_minimum_tx_interval is not None:
            self.desired_minimum_tx_interval = desired_minimum_tx_interval
        if if_index is not None:
            self.if_index = if_index
        if interface is not None:
            self.interface = interface
        if last_updated is not None:
            self.last_updated = last_updated
        if local_diag is not None:
            self.local_diag = local_diag
        if peer_address is not None:
            self.peer_address = peer_address
        if remote_diag is not None:
            self.remote_diag = remote_diag
        if required_minimum_rx_interval is not None:
            self.required_minimum_rx_interval = required_minimum_rx_interval
        if segment_name is not None:
            self.segment_name = segment_name
        if source_address is not None:
            self.source_address = source_address
        if state is not None:
            self.state = state
        if time_in_state is not None:
            self.time_in_state = time_in_state
        if up is not None:
            self.up = up

    @property
    def desired_minimum_tx_interval(self):
        """Gets the desired_minimum_tx_interval of this InlineResponse200112BfdNeighbor.  # noqa: E501


        :return: The desired_minimum_tx_interval of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._desired_minimum_tx_interval

    @desired_minimum_tx_interval.setter
    def desired_minimum_tx_interval(self, desired_minimum_tx_interval):
        """Sets the desired_minimum_tx_interval of this InlineResponse200112BfdNeighbor.


        :param desired_minimum_tx_interval: The desired_minimum_tx_interval of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :type: str
        """

        self._desired_minimum_tx_interval = desired_minimum_tx_interval

    @property
    def if_index(self):
        """Gets the if_index of this InlineResponse200112BfdNeighbor.  # noqa: E501


        :return: The if_index of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._if_index

    @if_index.setter
    def if_index(self, if_index):
        """Sets the if_index of this InlineResponse200112BfdNeighbor.


        :param if_index: The if_index of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :type: str
        """

        self._if_index = if_index

    @property
    def interface(self):
        """Gets the interface of this InlineResponse200112BfdNeighbor.  # noqa: E501


        :return: The interface of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this InlineResponse200112BfdNeighbor.


        :param interface: The interface of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :type: str
        """

        self._interface = interface

    @property
    def last_updated(self):
        """Gets the last_updated of this InlineResponse200112BfdNeighbor.  # noqa: E501


        :return: The last_updated of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :rtype: object
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this InlineResponse200112BfdNeighbor.


        :param last_updated: The last_updated of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :type: object
        """

        self._last_updated = last_updated

    @property
    def local_diag(self):
        """Gets the local_diag of this InlineResponse200112BfdNeighbor.  # noqa: E501


        :return: The local_diag of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._local_diag

    @local_diag.setter
    def local_diag(self, local_diag):
        """Sets the local_diag of this InlineResponse200112BfdNeighbor.


        :param local_diag: The local_diag of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :type: str
        """

        self._local_diag = local_diag

    @property
    def peer_address(self):
        """Gets the peer_address of this InlineResponse200112BfdNeighbor.  # noqa: E501


        :return: The peer_address of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._peer_address

    @peer_address.setter
    def peer_address(self, peer_address):
        """Sets the peer_address of this InlineResponse200112BfdNeighbor.


        :param peer_address: The peer_address of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :type: str
        """

        self._peer_address = peer_address

    @property
    def remote_diag(self):
        """Gets the remote_diag of this InlineResponse200112BfdNeighbor.  # noqa: E501


        :return: The remote_diag of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._remote_diag

    @remote_diag.setter
    def remote_diag(self, remote_diag):
        """Sets the remote_diag of this InlineResponse200112BfdNeighbor.


        :param remote_diag: The remote_diag of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :type: str
        """

        self._remote_diag = remote_diag

    @property
    def required_minimum_rx_interval(self):
        """Gets the required_minimum_rx_interval of this InlineResponse200112BfdNeighbor.  # noqa: E501


        :return: The required_minimum_rx_interval of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._required_minimum_rx_interval

    @required_minimum_rx_interval.setter
    def required_minimum_rx_interval(self, required_minimum_rx_interval):
        """Sets the required_minimum_rx_interval of this InlineResponse200112BfdNeighbor.


        :param required_minimum_rx_interval: The required_minimum_rx_interval of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :type: str
        """

        self._required_minimum_rx_interval = required_minimum_rx_interval

    @property
    def segment_name(self):
        """Gets the segment_name of this InlineResponse200112BfdNeighbor.  # noqa: E501


        :return: The segment_name of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._segment_name

    @segment_name.setter
    def segment_name(self, segment_name):
        """Sets the segment_name of this InlineResponse200112BfdNeighbor.


        :param segment_name: The segment_name of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :type: str
        """

        self._segment_name = segment_name

    @property
    def source_address(self):
        """Gets the source_address of this InlineResponse200112BfdNeighbor.  # noqa: E501


        :return: The source_address of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this InlineResponse200112BfdNeighbor.


        :param source_address: The source_address of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :type: str
        """

        self._source_address = source_address

    @property
    def state(self):
        """Gets the state of this InlineResponse200112BfdNeighbor.  # noqa: E501


        :return: The state of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse200112BfdNeighbor.


        :param state: The state of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def time_in_state(self):
        """Gets the time_in_state of this InlineResponse200112BfdNeighbor.  # noqa: E501


        :return: The time_in_state of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :rtype: object
        """
        return self._time_in_state

    @time_in_state.setter
    def time_in_state(self, time_in_state):
        """Sets the time_in_state of this InlineResponse200112BfdNeighbor.


        :param time_in_state: The time_in_state of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :type: object
        """

        self._time_in_state = time_in_state

    @property
    def up(self):
        """Gets the up of this InlineResponse200112BfdNeighbor.  # noqa: E501


        :return: The up of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._up

    @up.setter
    def up(self, up):
        """Sets the up of this InlineResponse200112BfdNeighbor.


        :param up: The up of this InlineResponse200112BfdNeighbor.  # noqa: E501
        :type: str
        """

        self._up = up

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200112BfdNeighbor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200112BfdNeighbor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
