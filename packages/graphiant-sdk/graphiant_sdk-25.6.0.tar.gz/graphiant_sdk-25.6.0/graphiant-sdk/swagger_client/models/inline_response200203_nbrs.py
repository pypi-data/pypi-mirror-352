# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200203Nbrs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'cost': 'str',
        'dead_timer': 'str',
        'last_state_change': 'V1devicesbringuptokenValidTillTs',
        'router_id': 'str',
        'state': 'str'
    }

    attribute_map = {
        'address': 'address',
        'cost': 'cost',
        'dead_timer': 'deadTimer',
        'last_state_change': 'lastStateChange',
        'router_id': 'routerId',
        'state': 'state'
    }

    def __init__(self, address=None, cost=None, dead_timer=None, last_state_change=None, router_id=None, state=None):  # noqa: E501
        """InlineResponse200203Nbrs - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._cost = None
        self._dead_timer = None
        self._last_state_change = None
        self._router_id = None
        self._state = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if cost is not None:
            self.cost = cost
        if dead_timer is not None:
            self.dead_timer = dead_timer
        if last_state_change is not None:
            self.last_state_change = last_state_change
        if router_id is not None:
            self.router_id = router_id
        if state is not None:
            self.state = state

    @property
    def address(self):
        """Gets the address of this InlineResponse200203Nbrs.  # noqa: E501


        :return: The address of this InlineResponse200203Nbrs.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InlineResponse200203Nbrs.


        :param address: The address of this InlineResponse200203Nbrs.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def cost(self):
        """Gets the cost of this InlineResponse200203Nbrs.  # noqa: E501


        :return: The cost of this InlineResponse200203Nbrs.  # noqa: E501
        :rtype: str
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this InlineResponse200203Nbrs.


        :param cost: The cost of this InlineResponse200203Nbrs.  # noqa: E501
        :type: str
        """

        self._cost = cost

    @property
    def dead_timer(self):
        """Gets the dead_timer of this InlineResponse200203Nbrs.  # noqa: E501


        :return: The dead_timer of this InlineResponse200203Nbrs.  # noqa: E501
        :rtype: str
        """
        return self._dead_timer

    @dead_timer.setter
    def dead_timer(self, dead_timer):
        """Sets the dead_timer of this InlineResponse200203Nbrs.


        :param dead_timer: The dead_timer of this InlineResponse200203Nbrs.  # noqa: E501
        :type: str
        """

        self._dead_timer = dead_timer

    @property
    def last_state_change(self):
        """Gets the last_state_change of this InlineResponse200203Nbrs.  # noqa: E501


        :return: The last_state_change of this InlineResponse200203Nbrs.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._last_state_change

    @last_state_change.setter
    def last_state_change(self, last_state_change):
        """Sets the last_state_change of this InlineResponse200203Nbrs.


        :param last_state_change: The last_state_change of this InlineResponse200203Nbrs.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._last_state_change = last_state_change

    @property
    def router_id(self):
        """Gets the router_id of this InlineResponse200203Nbrs.  # noqa: E501


        :return: The router_id of this InlineResponse200203Nbrs.  # noqa: E501
        :rtype: str
        """
        return self._router_id

    @router_id.setter
    def router_id(self, router_id):
        """Sets the router_id of this InlineResponse200203Nbrs.


        :param router_id: The router_id of this InlineResponse200203Nbrs.  # noqa: E501
        :type: str
        """

        self._router_id = router_id

    @property
    def state(self):
        """Gets the state of this InlineResponse200203Nbrs.  # noqa: E501


        :return: The state of this InlineResponse200203Nbrs.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse200203Nbrs.


        :param state: The state of this InlineResponse200203Nbrs.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200203Nbrs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200203Nbrs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
