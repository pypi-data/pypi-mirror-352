# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse204ResultTraceResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hops': 'list[InlineResponse204ResultTraceResultHops]',
        'max_latency': 'str',
        'max_latency_host': 'str',
        'max_path_mtu': 'str',
        'min_path_mtu': 'str',
        'result': 'str',
        'stopped_time': 'V1devicesbringuptokenValidTillTs'
    }

    attribute_map = {
        'hops': 'hops',
        'max_latency': 'maxLatency',
        'max_latency_host': 'maxLatencyHost',
        'max_path_mtu': 'maxPathMtu',
        'min_path_mtu': 'minPathMtu',
        'result': 'result',
        'stopped_time': 'stoppedTime'
    }

    def __init__(self, hops=None, max_latency=None, max_latency_host=None, max_path_mtu=None, min_path_mtu=None, result=None, stopped_time=None):  # noqa: E501
        """InlineResponse204ResultTraceResult - a model defined in Swagger"""  # noqa: E501
        self._hops = None
        self._max_latency = None
        self._max_latency_host = None
        self._max_path_mtu = None
        self._min_path_mtu = None
        self._result = None
        self._stopped_time = None
        self.discriminator = None
        if hops is not None:
            self.hops = hops
        if max_latency is not None:
            self.max_latency = max_latency
        if max_latency_host is not None:
            self.max_latency_host = max_latency_host
        if max_path_mtu is not None:
            self.max_path_mtu = max_path_mtu
        if min_path_mtu is not None:
            self.min_path_mtu = min_path_mtu
        if result is not None:
            self.result = result
        if stopped_time is not None:
            self.stopped_time = stopped_time

    @property
    def hops(self):
        """Gets the hops of this InlineResponse204ResultTraceResult.  # noqa: E501


        :return: The hops of this InlineResponse204ResultTraceResult.  # noqa: E501
        :rtype: list[InlineResponse204ResultTraceResultHops]
        """
        return self._hops

    @hops.setter
    def hops(self, hops):
        """Sets the hops of this InlineResponse204ResultTraceResult.


        :param hops: The hops of this InlineResponse204ResultTraceResult.  # noqa: E501
        :type: list[InlineResponse204ResultTraceResultHops]
        """

        self._hops = hops

    @property
    def max_latency(self):
        """Gets the max_latency of this InlineResponse204ResultTraceResult.  # noqa: E501


        :return: The max_latency of this InlineResponse204ResultTraceResult.  # noqa: E501
        :rtype: str
        """
        return self._max_latency

    @max_latency.setter
    def max_latency(self, max_latency):
        """Sets the max_latency of this InlineResponse204ResultTraceResult.


        :param max_latency: The max_latency of this InlineResponse204ResultTraceResult.  # noqa: E501
        :type: str
        """

        self._max_latency = max_latency

    @property
    def max_latency_host(self):
        """Gets the max_latency_host of this InlineResponse204ResultTraceResult.  # noqa: E501


        :return: The max_latency_host of this InlineResponse204ResultTraceResult.  # noqa: E501
        :rtype: str
        """
        return self._max_latency_host

    @max_latency_host.setter
    def max_latency_host(self, max_latency_host):
        """Sets the max_latency_host of this InlineResponse204ResultTraceResult.


        :param max_latency_host: The max_latency_host of this InlineResponse204ResultTraceResult.  # noqa: E501
        :type: str
        """

        self._max_latency_host = max_latency_host

    @property
    def max_path_mtu(self):
        """Gets the max_path_mtu of this InlineResponse204ResultTraceResult.  # noqa: E501


        :return: The max_path_mtu of this InlineResponse204ResultTraceResult.  # noqa: E501
        :rtype: str
        """
        return self._max_path_mtu

    @max_path_mtu.setter
    def max_path_mtu(self, max_path_mtu):
        """Sets the max_path_mtu of this InlineResponse204ResultTraceResult.


        :param max_path_mtu: The max_path_mtu of this InlineResponse204ResultTraceResult.  # noqa: E501
        :type: str
        """

        self._max_path_mtu = max_path_mtu

    @property
    def min_path_mtu(self):
        """Gets the min_path_mtu of this InlineResponse204ResultTraceResult.  # noqa: E501


        :return: The min_path_mtu of this InlineResponse204ResultTraceResult.  # noqa: E501
        :rtype: str
        """
        return self._min_path_mtu

    @min_path_mtu.setter
    def min_path_mtu(self, min_path_mtu):
        """Sets the min_path_mtu of this InlineResponse204ResultTraceResult.


        :param min_path_mtu: The min_path_mtu of this InlineResponse204ResultTraceResult.  # noqa: E501
        :type: str
        """

        self._min_path_mtu = min_path_mtu

    @property
    def result(self):
        """Gets the result of this InlineResponse204ResultTraceResult.  # noqa: E501


        :return: The result of this InlineResponse204ResultTraceResult.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this InlineResponse204ResultTraceResult.


        :param result: The result of this InlineResponse204ResultTraceResult.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def stopped_time(self):
        """Gets the stopped_time of this InlineResponse204ResultTraceResult.  # noqa: E501


        :return: The stopped_time of this InlineResponse204ResultTraceResult.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._stopped_time

    @stopped_time.setter
    def stopped_time(self, stopped_time):
        """Sets the stopped_time of this InlineResponse204ResultTraceResult.


        :param stopped_time: The stopped_time of this InlineResponse204ResultTraceResult.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._stopped_time = stopped_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse204ResultTraceResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse204ResultTraceResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
