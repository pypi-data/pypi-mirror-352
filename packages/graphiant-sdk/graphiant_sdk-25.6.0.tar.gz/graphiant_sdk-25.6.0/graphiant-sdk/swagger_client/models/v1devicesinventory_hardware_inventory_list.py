# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1devicesinventoryHardwareInventoryList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assigned_on': 'V1devicesbringuptokenValidTillTs',
        'created_on': 'V1devicesbringuptokenValidTillTs',
        'device_model': 'str',
        'device_serial': 'str',
        'ek_cert': 'str',
        'enterprise_id': 'str',
        'enterprise_name': 'str',
        'gek_pub': 'str',
        'is_core': 'str',
        'is_new': 'str',
        'is_requested': 'str',
        'parent_enterprise_id': 'str',
        'parent_enterprise_name': 'str',
        'role': 'str',
        'use_oauth': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'assigned_on': 'assignedOn',
        'created_on': 'createdOn',
        'device_model': 'deviceModel',
        'device_serial': 'deviceSerial',
        'ek_cert': 'ekCert',
        'enterprise_id': 'enterpriseId',
        'enterprise_name': 'enterpriseName',
        'gek_pub': 'gekPub',
        'is_core': 'isCore',
        'is_new': 'isNew',
        'is_requested': 'isRequested',
        'parent_enterprise_id': 'parentEnterpriseId',
        'parent_enterprise_name': 'parentEnterpriseName',
        'role': 'role',
        'use_oauth': 'useOauth',
        'uuid': 'uuid'
    }

    def __init__(self, assigned_on=None, created_on=None, device_model=None, device_serial=None, ek_cert=None, enterprise_id=None, enterprise_name=None, gek_pub=None, is_core=None, is_new=None, is_requested=None, parent_enterprise_id=None, parent_enterprise_name=None, role=None, use_oauth=None, uuid=None):  # noqa: E501
        """V1devicesinventoryHardwareInventoryList - a model defined in Swagger"""  # noqa: E501
        self._assigned_on = None
        self._created_on = None
        self._device_model = None
        self._device_serial = None
        self._ek_cert = None
        self._enterprise_id = None
        self._enterprise_name = None
        self._gek_pub = None
        self._is_core = None
        self._is_new = None
        self._is_requested = None
        self._parent_enterprise_id = None
        self._parent_enterprise_name = None
        self._role = None
        self._use_oauth = None
        self._uuid = None
        self.discriminator = None
        if assigned_on is not None:
            self.assigned_on = assigned_on
        if created_on is not None:
            self.created_on = created_on
        if device_model is not None:
            self.device_model = device_model
        if device_serial is not None:
            self.device_serial = device_serial
        if ek_cert is not None:
            self.ek_cert = ek_cert
        if enterprise_id is not None:
            self.enterprise_id = enterprise_id
        if enterprise_name is not None:
            self.enterprise_name = enterprise_name
        if gek_pub is not None:
            self.gek_pub = gek_pub
        if is_core is not None:
            self.is_core = is_core
        if is_new is not None:
            self.is_new = is_new
        if is_requested is not None:
            self.is_requested = is_requested
        if parent_enterprise_id is not None:
            self.parent_enterprise_id = parent_enterprise_id
        if parent_enterprise_name is not None:
            self.parent_enterprise_name = parent_enterprise_name
        if role is not None:
            self.role = role
        if use_oauth is not None:
            self.use_oauth = use_oauth
        if uuid is not None:
            self.uuid = uuid

    @property
    def assigned_on(self):
        """Gets the assigned_on of this V1devicesinventoryHardwareInventoryList.  # noqa: E501


        :return: The assigned_on of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._assigned_on

    @assigned_on.setter
    def assigned_on(self, assigned_on):
        """Sets the assigned_on of this V1devicesinventoryHardwareInventoryList.


        :param assigned_on: The assigned_on of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._assigned_on = assigned_on

    @property
    def created_on(self):
        """Gets the created_on of this V1devicesinventoryHardwareInventoryList.  # noqa: E501


        :return: The created_on of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this V1devicesinventoryHardwareInventoryList.


        :param created_on: The created_on of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._created_on = created_on

    @property
    def device_model(self):
        """Gets the device_model of this V1devicesinventoryHardwareInventoryList.  # noqa: E501


        :return: The device_model of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :rtype: str
        """
        return self._device_model

    @device_model.setter
    def device_model(self, device_model):
        """Sets the device_model of this V1devicesinventoryHardwareInventoryList.


        :param device_model: The device_model of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :type: str
        """

        self._device_model = device_model

    @property
    def device_serial(self):
        """Gets the device_serial of this V1devicesinventoryHardwareInventoryList.  # noqa: E501


        :return: The device_serial of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :rtype: str
        """
        return self._device_serial

    @device_serial.setter
    def device_serial(self, device_serial):
        """Sets the device_serial of this V1devicesinventoryHardwareInventoryList.


        :param device_serial: The device_serial of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :type: str
        """

        self._device_serial = device_serial

    @property
    def ek_cert(self):
        """Gets the ek_cert of this V1devicesinventoryHardwareInventoryList.  # noqa: E501


        :return: The ek_cert of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :rtype: str
        """
        return self._ek_cert

    @ek_cert.setter
    def ek_cert(self, ek_cert):
        """Sets the ek_cert of this V1devicesinventoryHardwareInventoryList.


        :param ek_cert: The ek_cert of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :type: str
        """

        self._ek_cert = ek_cert

    @property
    def enterprise_id(self):
        """Gets the enterprise_id of this V1devicesinventoryHardwareInventoryList.  # noqa: E501


        :return: The enterprise_id of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_id

    @enterprise_id.setter
    def enterprise_id(self, enterprise_id):
        """Sets the enterprise_id of this V1devicesinventoryHardwareInventoryList.


        :param enterprise_id: The enterprise_id of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :type: str
        """

        self._enterprise_id = enterprise_id

    @property
    def enterprise_name(self):
        """Gets the enterprise_name of this V1devicesinventoryHardwareInventoryList.  # noqa: E501


        :return: The enterprise_name of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_name

    @enterprise_name.setter
    def enterprise_name(self, enterprise_name):
        """Sets the enterprise_name of this V1devicesinventoryHardwareInventoryList.


        :param enterprise_name: The enterprise_name of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :type: str
        """

        self._enterprise_name = enterprise_name

    @property
    def gek_pub(self):
        """Gets the gek_pub of this V1devicesinventoryHardwareInventoryList.  # noqa: E501


        :return: The gek_pub of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :rtype: str
        """
        return self._gek_pub

    @gek_pub.setter
    def gek_pub(self, gek_pub):
        """Sets the gek_pub of this V1devicesinventoryHardwareInventoryList.


        :param gek_pub: The gek_pub of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :type: str
        """

        self._gek_pub = gek_pub

    @property
    def is_core(self):
        """Gets the is_core of this V1devicesinventoryHardwareInventoryList.  # noqa: E501


        :return: The is_core of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :rtype: str
        """
        return self._is_core

    @is_core.setter
    def is_core(self, is_core):
        """Sets the is_core of this V1devicesinventoryHardwareInventoryList.


        :param is_core: The is_core of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :type: str
        """

        self._is_core = is_core

    @property
    def is_new(self):
        """Gets the is_new of this V1devicesinventoryHardwareInventoryList.  # noqa: E501


        :return: The is_new of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :rtype: str
        """
        return self._is_new

    @is_new.setter
    def is_new(self, is_new):
        """Sets the is_new of this V1devicesinventoryHardwareInventoryList.


        :param is_new: The is_new of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :type: str
        """

        self._is_new = is_new

    @property
    def is_requested(self):
        """Gets the is_requested of this V1devicesinventoryHardwareInventoryList.  # noqa: E501


        :return: The is_requested of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :rtype: str
        """
        return self._is_requested

    @is_requested.setter
    def is_requested(self, is_requested):
        """Sets the is_requested of this V1devicesinventoryHardwareInventoryList.


        :param is_requested: The is_requested of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :type: str
        """

        self._is_requested = is_requested

    @property
    def parent_enterprise_id(self):
        """Gets the parent_enterprise_id of this V1devicesinventoryHardwareInventoryList.  # noqa: E501


        :return: The parent_enterprise_id of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :rtype: str
        """
        return self._parent_enterprise_id

    @parent_enterprise_id.setter
    def parent_enterprise_id(self, parent_enterprise_id):
        """Sets the parent_enterprise_id of this V1devicesinventoryHardwareInventoryList.


        :param parent_enterprise_id: The parent_enterprise_id of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :type: str
        """

        self._parent_enterprise_id = parent_enterprise_id

    @property
    def parent_enterprise_name(self):
        """Gets the parent_enterprise_name of this V1devicesinventoryHardwareInventoryList.  # noqa: E501


        :return: The parent_enterprise_name of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :rtype: str
        """
        return self._parent_enterprise_name

    @parent_enterprise_name.setter
    def parent_enterprise_name(self, parent_enterprise_name):
        """Sets the parent_enterprise_name of this V1devicesinventoryHardwareInventoryList.


        :param parent_enterprise_name: The parent_enterprise_name of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :type: str
        """

        self._parent_enterprise_name = parent_enterprise_name

    @property
    def role(self):
        """Gets the role of this V1devicesinventoryHardwareInventoryList.  # noqa: E501


        :return: The role of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this V1devicesinventoryHardwareInventoryList.


        :param role: The role of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def use_oauth(self):
        """Gets the use_oauth of this V1devicesinventoryHardwareInventoryList.  # noqa: E501


        :return: The use_oauth of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :rtype: str
        """
        return self._use_oauth

    @use_oauth.setter
    def use_oauth(self, use_oauth):
        """Sets the use_oauth of this V1devicesinventoryHardwareInventoryList.


        :param use_oauth: The use_oauth of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :type: str
        """

        self._use_oauth = use_oauth

    @property
    def uuid(self):
        """Gets the uuid of this V1devicesinventoryHardwareInventoryList.  # noqa: E501


        :return: The uuid of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this V1devicesinventoryHardwareInventoryList.


        :param uuid: The uuid of this V1devicesinventoryHardwareInventoryList.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1devicesinventoryHardwareInventoryList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1devicesinventoryHardwareInventoryList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
