# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20019(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conversation_id': 'str',
        'dataframe_dictionary': 'list[InlineResponse20019DataframeDictionary]',
        'original_question': 'V2assistantaddtoconversationQuestion',
        'response_id': 'str',
        'response_language': 'str',
        'response_text': 'str',
        'response_timestamp': 'str',
        'response_type': 'str'
    }

    attribute_map = {
        'conversation_id': 'conversationId',
        'dataframe_dictionary': 'dataframeDictionary',
        'original_question': 'originalQuestion',
        'response_id': 'responseId',
        'response_language': 'responseLanguage',
        'response_text': 'responseText',
        'response_timestamp': 'responseTimestamp',
        'response_type': 'responseType'
    }

    def __init__(self, conversation_id=None, dataframe_dictionary=None, original_question=None, response_id=None, response_language=None, response_text=None, response_timestamp=None, response_type=None):  # noqa: E501
        """InlineResponse20019 - a model defined in Swagger"""  # noqa: E501
        self._conversation_id = None
        self._dataframe_dictionary = None
        self._original_question = None
        self._response_id = None
        self._response_language = None
        self._response_text = None
        self._response_timestamp = None
        self._response_type = None
        self.discriminator = None
        if conversation_id is not None:
            self.conversation_id = conversation_id
        if dataframe_dictionary is not None:
            self.dataframe_dictionary = dataframe_dictionary
        if original_question is not None:
            self.original_question = original_question
        if response_id is not None:
            self.response_id = response_id
        if response_language is not None:
            self.response_language = response_language
        if response_text is not None:
            self.response_text = response_text
        if response_timestamp is not None:
            self.response_timestamp = response_timestamp
        if response_type is not None:
            self.response_type = response_type

    @property
    def conversation_id(self):
        """Gets the conversation_id of this InlineResponse20019.  # noqa: E501


        :return: The conversation_id of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this InlineResponse20019.


        :param conversation_id: The conversation_id of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._conversation_id = conversation_id

    @property
    def dataframe_dictionary(self):
        """Gets the dataframe_dictionary of this InlineResponse20019.  # noqa: E501


        :return: The dataframe_dictionary of this InlineResponse20019.  # noqa: E501
        :rtype: list[InlineResponse20019DataframeDictionary]
        """
        return self._dataframe_dictionary

    @dataframe_dictionary.setter
    def dataframe_dictionary(self, dataframe_dictionary):
        """Sets the dataframe_dictionary of this InlineResponse20019.


        :param dataframe_dictionary: The dataframe_dictionary of this InlineResponse20019.  # noqa: E501
        :type: list[InlineResponse20019DataframeDictionary]
        """

        self._dataframe_dictionary = dataframe_dictionary

    @property
    def original_question(self):
        """Gets the original_question of this InlineResponse20019.  # noqa: E501


        :return: The original_question of this InlineResponse20019.  # noqa: E501
        :rtype: V2assistantaddtoconversationQuestion
        """
        return self._original_question

    @original_question.setter
    def original_question(self, original_question):
        """Sets the original_question of this InlineResponse20019.


        :param original_question: The original_question of this InlineResponse20019.  # noqa: E501
        :type: V2assistantaddtoconversationQuestion
        """

        self._original_question = original_question

    @property
    def response_id(self):
        """Gets the response_id of this InlineResponse20019.  # noqa: E501


        :return: The response_id of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._response_id

    @response_id.setter
    def response_id(self, response_id):
        """Sets the response_id of this InlineResponse20019.


        :param response_id: The response_id of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._response_id = response_id

    @property
    def response_language(self):
        """Gets the response_language of this InlineResponse20019.  # noqa: E501


        :return: The response_language of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._response_language

    @response_language.setter
    def response_language(self, response_language):
        """Sets the response_language of this InlineResponse20019.


        :param response_language: The response_language of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._response_language = response_language

    @property
    def response_text(self):
        """Gets the response_text of this InlineResponse20019.  # noqa: E501


        :return: The response_text of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._response_text

    @response_text.setter
    def response_text(self, response_text):
        """Sets the response_text of this InlineResponse20019.


        :param response_text: The response_text of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._response_text = response_text

    @property
    def response_timestamp(self):
        """Gets the response_timestamp of this InlineResponse20019.  # noqa: E501


        :return: The response_timestamp of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._response_timestamp

    @response_timestamp.setter
    def response_timestamp(self, response_timestamp):
        """Sets the response_timestamp of this InlineResponse20019.


        :param response_timestamp: The response_timestamp of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._response_timestamp = response_timestamp

    @property
    def response_type(self):
        """Gets the response_type of this InlineResponse20019.  # noqa: E501


        :return: The response_type of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._response_type

    @response_type.setter
    def response_type(self, response_type):
        """Sets the response_type of this InlineResponse20019.


        :param response_type: The response_type of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._response_type = response_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20019, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20019):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
