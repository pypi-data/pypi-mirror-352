# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20010History(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boot_id': 'str',
        'description': 'str',
        'is_cleared': 'str',
        'perceived_severity': 'str',
        'sequence_number': 'str',
        'time': 'V1devicesbringuptokenValidTillTs'
    }

    attribute_map = {
        'boot_id': 'bootId',
        'description': 'description',
        'is_cleared': 'isCleared',
        'perceived_severity': 'perceivedSeverity',
        'sequence_number': 'sequenceNumber',
        'time': 'time'
    }

    def __init__(self, boot_id=None, description=None, is_cleared=None, perceived_severity=None, sequence_number=None, time=None):  # noqa: E501
        """InlineResponse20010History - a model defined in Swagger"""  # noqa: E501
        self._boot_id = None
        self._description = None
        self._is_cleared = None
        self._perceived_severity = None
        self._sequence_number = None
        self._time = None
        self.discriminator = None
        if boot_id is not None:
            self.boot_id = boot_id
        if description is not None:
            self.description = description
        if is_cleared is not None:
            self.is_cleared = is_cleared
        if perceived_severity is not None:
            self.perceived_severity = perceived_severity
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if time is not None:
            self.time = time

    @property
    def boot_id(self):
        """Gets the boot_id of this InlineResponse20010History.  # noqa: E501


        :return: The boot_id of this InlineResponse20010History.  # noqa: E501
        :rtype: str
        """
        return self._boot_id

    @boot_id.setter
    def boot_id(self, boot_id):
        """Sets the boot_id of this InlineResponse20010History.


        :param boot_id: The boot_id of this InlineResponse20010History.  # noqa: E501
        :type: str
        """

        self._boot_id = boot_id

    @property
    def description(self):
        """Gets the description of this InlineResponse20010History.  # noqa: E501


        :return: The description of this InlineResponse20010History.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse20010History.


        :param description: The description of this InlineResponse20010History.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_cleared(self):
        """Gets the is_cleared of this InlineResponse20010History.  # noqa: E501


        :return: The is_cleared of this InlineResponse20010History.  # noqa: E501
        :rtype: str
        """
        return self._is_cleared

    @is_cleared.setter
    def is_cleared(self, is_cleared):
        """Sets the is_cleared of this InlineResponse20010History.


        :param is_cleared: The is_cleared of this InlineResponse20010History.  # noqa: E501
        :type: str
        """

        self._is_cleared = is_cleared

    @property
    def perceived_severity(self):
        """Gets the perceived_severity of this InlineResponse20010History.  # noqa: E501


        :return: The perceived_severity of this InlineResponse20010History.  # noqa: E501
        :rtype: str
        """
        return self._perceived_severity

    @perceived_severity.setter
    def perceived_severity(self, perceived_severity):
        """Sets the perceived_severity of this InlineResponse20010History.


        :param perceived_severity: The perceived_severity of this InlineResponse20010History.  # noqa: E501
        :type: str
        """

        self._perceived_severity = perceived_severity

    @property
    def sequence_number(self):
        """Gets the sequence_number of this InlineResponse20010History.  # noqa: E501


        :return: The sequence_number of this InlineResponse20010History.  # noqa: E501
        :rtype: str
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this InlineResponse20010History.


        :param sequence_number: The sequence_number of this InlineResponse20010History.  # noqa: E501
        :type: str
        """

        self._sequence_number = sequence_number

    @property
    def time(self):
        """Gets the time of this InlineResponse20010History.  # noqa: E501


        :return: The time of this InlineResponse20010History.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this InlineResponse20010History.


        :param time: The time of this InlineResponse20010History.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20010History, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20010History):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
