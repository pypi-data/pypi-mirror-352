# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200111AppConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'ip_lists': 'list[str]',
        'ip_prefixes': 'list[str]',
        'ip_protocol': 'str',
        'name': 'str',
        'port_ranges': 'list[InlineResponse200111AppConfigPortRanges]',
        'url': 'str'
    }

    attribute_map = {
        'description': 'description',
        'ip_lists': 'ipLists',
        'ip_prefixes': 'ipPrefixes',
        'ip_protocol': 'ipProtocol',
        'name': 'name',
        'port_ranges': 'portRanges',
        'url': 'url'
    }

    def __init__(self, description=None, ip_lists=None, ip_prefixes=None, ip_protocol=None, name=None, port_ranges=None, url=None):  # noqa: E501
        """InlineResponse200111AppConfig - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._ip_lists = None
        self._ip_prefixes = None
        self._ip_protocol = None
        self._name = None
        self._port_ranges = None
        self._url = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if ip_lists is not None:
            self.ip_lists = ip_lists
        if ip_prefixes is not None:
            self.ip_prefixes = ip_prefixes
        if ip_protocol is not None:
            self.ip_protocol = ip_protocol
        if name is not None:
            self.name = name
        if port_ranges is not None:
            self.port_ranges = port_ranges
        if url is not None:
            self.url = url

    @property
    def description(self):
        """Gets the description of this InlineResponse200111AppConfig.  # noqa: E501


        :return: The description of this InlineResponse200111AppConfig.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse200111AppConfig.


        :param description: The description of this InlineResponse200111AppConfig.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def ip_lists(self):
        """Gets the ip_lists of this InlineResponse200111AppConfig.  # noqa: E501


        :return: The ip_lists of this InlineResponse200111AppConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_lists

    @ip_lists.setter
    def ip_lists(self, ip_lists):
        """Sets the ip_lists of this InlineResponse200111AppConfig.


        :param ip_lists: The ip_lists of this InlineResponse200111AppConfig.  # noqa: E501
        :type: list[str]
        """

        self._ip_lists = ip_lists

    @property
    def ip_prefixes(self):
        """Gets the ip_prefixes of this InlineResponse200111AppConfig.  # noqa: E501


        :return: The ip_prefixes of this InlineResponse200111AppConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_prefixes

    @ip_prefixes.setter
    def ip_prefixes(self, ip_prefixes):
        """Sets the ip_prefixes of this InlineResponse200111AppConfig.


        :param ip_prefixes: The ip_prefixes of this InlineResponse200111AppConfig.  # noqa: E501
        :type: list[str]
        """

        self._ip_prefixes = ip_prefixes

    @property
    def ip_protocol(self):
        """Gets the ip_protocol of this InlineResponse200111AppConfig.  # noqa: E501


        :return: The ip_protocol of this InlineResponse200111AppConfig.  # noqa: E501
        :rtype: str
        """
        return self._ip_protocol

    @ip_protocol.setter
    def ip_protocol(self, ip_protocol):
        """Sets the ip_protocol of this InlineResponse200111AppConfig.


        :param ip_protocol: The ip_protocol of this InlineResponse200111AppConfig.  # noqa: E501
        :type: str
        """

        self._ip_protocol = ip_protocol

    @property
    def name(self):
        """Gets the name of this InlineResponse200111AppConfig.  # noqa: E501


        :return: The name of this InlineResponse200111AppConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200111AppConfig.


        :param name: The name of this InlineResponse200111AppConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def port_ranges(self):
        """Gets the port_ranges of this InlineResponse200111AppConfig.  # noqa: E501


        :return: The port_ranges of this InlineResponse200111AppConfig.  # noqa: E501
        :rtype: list[InlineResponse200111AppConfigPortRanges]
        """
        return self._port_ranges

    @port_ranges.setter
    def port_ranges(self, port_ranges):
        """Sets the port_ranges of this InlineResponse200111AppConfig.


        :param port_ranges: The port_ranges of this InlineResponse200111AppConfig.  # noqa: E501
        :type: list[InlineResponse200111AppConfigPortRanges]
        """

        self._port_ranges = port_ranges

    @property
    def url(self):
        """Gets the url of this InlineResponse200111AppConfig.  # noqa: E501


        :return: The url of this InlineResponse200111AppConfig.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineResponse200111AppConfig.


        :param url: The url of this InlineResponse200111AppConfig.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200111AppConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200111AppConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
