# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1groupsPermissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_manager': 'str',
        'b2b': 'str',
        'billing_and_invoicing': 'str',
        'compliance': 'str',
        'developer_tools': 'str',
        'gateway': 'str',
        'global_services': 'str',
        'insights': 'str',
        'licensing': 'str',
        'logs': 'str',
        'monitoring_and_troubleshooting': 'str',
        'network_configuration': 'str',
        'order_status': 'str',
        'reports': 'str',
        'safety_and_security': 'str',
        'service_policies': 'str',
        'support': 'str',
        'user_and_tenant_management': 'str'
    }

    attribute_map = {
        'asset_manager': 'assetManager',
        'b2b': 'b2b',
        'billing_and_invoicing': 'billingAndInvoicing',
        'compliance': 'compliance',
        'developer_tools': 'developerTools',
        'gateway': 'gateway',
        'global_services': 'globalServices',
        'insights': 'insights',
        'licensing': 'licensing',
        'logs': 'logs',
        'monitoring_and_troubleshooting': 'monitoringAndTroubleshooting',
        'network_configuration': 'networkConfiguration',
        'order_status': 'orderStatus',
        'reports': 'reports',
        'safety_and_security': 'safetyAndSecurity',
        'service_policies': 'servicePolicies',
        'support': 'support',
        'user_and_tenant_management': 'userAndTenantManagement'
    }

    def __init__(self, asset_manager=None, b2b=None, billing_and_invoicing=None, compliance=None, developer_tools=None, gateway=None, global_services=None, insights=None, licensing=None, logs=None, monitoring_and_troubleshooting=None, network_configuration=None, order_status=None, reports=None, safety_and_security=None, service_policies=None, support=None, user_and_tenant_management=None):  # noqa: E501
        """V1groupsPermissions - a model defined in Swagger"""  # noqa: E501
        self._asset_manager = None
        self._b2b = None
        self._billing_and_invoicing = None
        self._compliance = None
        self._developer_tools = None
        self._gateway = None
        self._global_services = None
        self._insights = None
        self._licensing = None
        self._logs = None
        self._monitoring_and_troubleshooting = None
        self._network_configuration = None
        self._order_status = None
        self._reports = None
        self._safety_and_security = None
        self._service_policies = None
        self._support = None
        self._user_and_tenant_management = None
        self.discriminator = None
        if asset_manager is not None:
            self.asset_manager = asset_manager
        if b2b is not None:
            self.b2b = b2b
        if billing_and_invoicing is not None:
            self.billing_and_invoicing = billing_and_invoicing
        if compliance is not None:
            self.compliance = compliance
        if developer_tools is not None:
            self.developer_tools = developer_tools
        if gateway is not None:
            self.gateway = gateway
        if global_services is not None:
            self.global_services = global_services
        if insights is not None:
            self.insights = insights
        if licensing is not None:
            self.licensing = licensing
        if logs is not None:
            self.logs = logs
        if monitoring_and_troubleshooting is not None:
            self.monitoring_and_troubleshooting = monitoring_and_troubleshooting
        if network_configuration is not None:
            self.network_configuration = network_configuration
        if order_status is not None:
            self.order_status = order_status
        if reports is not None:
            self.reports = reports
        if safety_and_security is not None:
            self.safety_and_security = safety_and_security
        if service_policies is not None:
            self.service_policies = service_policies
        if support is not None:
            self.support = support
        if user_and_tenant_management is not None:
            self.user_and_tenant_management = user_and_tenant_management

    @property
    def asset_manager(self):
        """Gets the asset_manager of this V1groupsPermissions.  # noqa: E501


        :return: The asset_manager of this V1groupsPermissions.  # noqa: E501
        :rtype: str
        """
        return self._asset_manager

    @asset_manager.setter
    def asset_manager(self, asset_manager):
        """Sets the asset_manager of this V1groupsPermissions.


        :param asset_manager: The asset_manager of this V1groupsPermissions.  # noqa: E501
        :type: str
        """

        self._asset_manager = asset_manager

    @property
    def b2b(self):
        """Gets the b2b of this V1groupsPermissions.  # noqa: E501


        :return: The b2b of this V1groupsPermissions.  # noqa: E501
        :rtype: str
        """
        return self._b2b

    @b2b.setter
    def b2b(self, b2b):
        """Sets the b2b of this V1groupsPermissions.


        :param b2b: The b2b of this V1groupsPermissions.  # noqa: E501
        :type: str
        """

        self._b2b = b2b

    @property
    def billing_and_invoicing(self):
        """Gets the billing_and_invoicing of this V1groupsPermissions.  # noqa: E501


        :return: The billing_and_invoicing of this V1groupsPermissions.  # noqa: E501
        :rtype: str
        """
        return self._billing_and_invoicing

    @billing_and_invoicing.setter
    def billing_and_invoicing(self, billing_and_invoicing):
        """Sets the billing_and_invoicing of this V1groupsPermissions.


        :param billing_and_invoicing: The billing_and_invoicing of this V1groupsPermissions.  # noqa: E501
        :type: str
        """

        self._billing_and_invoicing = billing_and_invoicing

    @property
    def compliance(self):
        """Gets the compliance of this V1groupsPermissions.  # noqa: E501


        :return: The compliance of this V1groupsPermissions.  # noqa: E501
        :rtype: str
        """
        return self._compliance

    @compliance.setter
    def compliance(self, compliance):
        """Sets the compliance of this V1groupsPermissions.


        :param compliance: The compliance of this V1groupsPermissions.  # noqa: E501
        :type: str
        """

        self._compliance = compliance

    @property
    def developer_tools(self):
        """Gets the developer_tools of this V1groupsPermissions.  # noqa: E501


        :return: The developer_tools of this V1groupsPermissions.  # noqa: E501
        :rtype: str
        """
        return self._developer_tools

    @developer_tools.setter
    def developer_tools(self, developer_tools):
        """Sets the developer_tools of this V1groupsPermissions.


        :param developer_tools: The developer_tools of this V1groupsPermissions.  # noqa: E501
        :type: str
        """

        self._developer_tools = developer_tools

    @property
    def gateway(self):
        """Gets the gateway of this V1groupsPermissions.  # noqa: E501


        :return: The gateway of this V1groupsPermissions.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this V1groupsPermissions.


        :param gateway: The gateway of this V1groupsPermissions.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def global_services(self):
        """Gets the global_services of this V1groupsPermissions.  # noqa: E501


        :return: The global_services of this V1groupsPermissions.  # noqa: E501
        :rtype: str
        """
        return self._global_services

    @global_services.setter
    def global_services(self, global_services):
        """Sets the global_services of this V1groupsPermissions.


        :param global_services: The global_services of this V1groupsPermissions.  # noqa: E501
        :type: str
        """

        self._global_services = global_services

    @property
    def insights(self):
        """Gets the insights of this V1groupsPermissions.  # noqa: E501


        :return: The insights of this V1groupsPermissions.  # noqa: E501
        :rtype: str
        """
        return self._insights

    @insights.setter
    def insights(self, insights):
        """Sets the insights of this V1groupsPermissions.


        :param insights: The insights of this V1groupsPermissions.  # noqa: E501
        :type: str
        """

        self._insights = insights

    @property
    def licensing(self):
        """Gets the licensing of this V1groupsPermissions.  # noqa: E501


        :return: The licensing of this V1groupsPermissions.  # noqa: E501
        :rtype: str
        """
        return self._licensing

    @licensing.setter
    def licensing(self, licensing):
        """Sets the licensing of this V1groupsPermissions.


        :param licensing: The licensing of this V1groupsPermissions.  # noqa: E501
        :type: str
        """

        self._licensing = licensing

    @property
    def logs(self):
        """Gets the logs of this V1groupsPermissions.  # noqa: E501


        :return: The logs of this V1groupsPermissions.  # noqa: E501
        :rtype: str
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this V1groupsPermissions.


        :param logs: The logs of this V1groupsPermissions.  # noqa: E501
        :type: str
        """

        self._logs = logs

    @property
    def monitoring_and_troubleshooting(self):
        """Gets the monitoring_and_troubleshooting of this V1groupsPermissions.  # noqa: E501


        :return: The monitoring_and_troubleshooting of this V1groupsPermissions.  # noqa: E501
        :rtype: str
        """
        return self._monitoring_and_troubleshooting

    @monitoring_and_troubleshooting.setter
    def monitoring_and_troubleshooting(self, monitoring_and_troubleshooting):
        """Sets the monitoring_and_troubleshooting of this V1groupsPermissions.


        :param monitoring_and_troubleshooting: The monitoring_and_troubleshooting of this V1groupsPermissions.  # noqa: E501
        :type: str
        """

        self._monitoring_and_troubleshooting = monitoring_and_troubleshooting

    @property
    def network_configuration(self):
        """Gets the network_configuration of this V1groupsPermissions.  # noqa: E501


        :return: The network_configuration of this V1groupsPermissions.  # noqa: E501
        :rtype: str
        """
        return self._network_configuration

    @network_configuration.setter
    def network_configuration(self, network_configuration):
        """Sets the network_configuration of this V1groupsPermissions.


        :param network_configuration: The network_configuration of this V1groupsPermissions.  # noqa: E501
        :type: str
        """

        self._network_configuration = network_configuration

    @property
    def order_status(self):
        """Gets the order_status of this V1groupsPermissions.  # noqa: E501


        :return: The order_status of this V1groupsPermissions.  # noqa: E501
        :rtype: str
        """
        return self._order_status

    @order_status.setter
    def order_status(self, order_status):
        """Sets the order_status of this V1groupsPermissions.


        :param order_status: The order_status of this V1groupsPermissions.  # noqa: E501
        :type: str
        """

        self._order_status = order_status

    @property
    def reports(self):
        """Gets the reports of this V1groupsPermissions.  # noqa: E501


        :return: The reports of this V1groupsPermissions.  # noqa: E501
        :rtype: str
        """
        return self._reports

    @reports.setter
    def reports(self, reports):
        """Sets the reports of this V1groupsPermissions.


        :param reports: The reports of this V1groupsPermissions.  # noqa: E501
        :type: str
        """

        self._reports = reports

    @property
    def safety_and_security(self):
        """Gets the safety_and_security of this V1groupsPermissions.  # noqa: E501


        :return: The safety_and_security of this V1groupsPermissions.  # noqa: E501
        :rtype: str
        """
        return self._safety_and_security

    @safety_and_security.setter
    def safety_and_security(self, safety_and_security):
        """Sets the safety_and_security of this V1groupsPermissions.


        :param safety_and_security: The safety_and_security of this V1groupsPermissions.  # noqa: E501
        :type: str
        """

        self._safety_and_security = safety_and_security

    @property
    def service_policies(self):
        """Gets the service_policies of this V1groupsPermissions.  # noqa: E501


        :return: The service_policies of this V1groupsPermissions.  # noqa: E501
        :rtype: str
        """
        return self._service_policies

    @service_policies.setter
    def service_policies(self, service_policies):
        """Sets the service_policies of this V1groupsPermissions.


        :param service_policies: The service_policies of this V1groupsPermissions.  # noqa: E501
        :type: str
        """

        self._service_policies = service_policies

    @property
    def support(self):
        """Gets the support of this V1groupsPermissions.  # noqa: E501


        :return: The support of this V1groupsPermissions.  # noqa: E501
        :rtype: str
        """
        return self._support

    @support.setter
    def support(self, support):
        """Sets the support of this V1groupsPermissions.


        :param support: The support of this V1groupsPermissions.  # noqa: E501
        :type: str
        """

        self._support = support

    @property
    def user_and_tenant_management(self):
        """Gets the user_and_tenant_management of this V1groupsPermissions.  # noqa: E501


        :return: The user_and_tenant_management of this V1groupsPermissions.  # noqa: E501
        :rtype: str
        """
        return self._user_and_tenant_management

    @user_and_tenant_management.setter
    def user_and_tenant_management(self, user_and_tenant_management):
        """Sets the user_and_tenant_management of this V1groupsPermissions.


        :param user_and_tenant_management: The user_and_tenant_management of this V1groupsPermissions.  # noqa: E501
        :type: str
        """

        self._user_and_tenant_management = user_and_tenant_management

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1groupsPermissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1groupsPermissions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
