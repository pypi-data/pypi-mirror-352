# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20095(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_snapshot': 'InlineResponse20095FirstSnapshot',
        'second_snapshot': 'InlineResponse20095FirstSnapshot',
        'third_snapshot': 'InlineResponse20095FirstSnapshot'
    }

    attribute_map = {
        'first_snapshot': 'firstSnapshot',
        'second_snapshot': 'secondSnapshot',
        'third_snapshot': 'thirdSnapshot'
    }

    def __init__(self, first_snapshot=None, second_snapshot=None, third_snapshot=None):  # noqa: E501
        """InlineResponse20095 - a model defined in Swagger"""  # noqa: E501
        self._first_snapshot = None
        self._second_snapshot = None
        self._third_snapshot = None
        self.discriminator = None
        if first_snapshot is not None:
            self.first_snapshot = first_snapshot
        if second_snapshot is not None:
            self.second_snapshot = second_snapshot
        if third_snapshot is not None:
            self.third_snapshot = third_snapshot

    @property
    def first_snapshot(self):
        """Gets the first_snapshot of this InlineResponse20095.  # noqa: E501


        :return: The first_snapshot of this InlineResponse20095.  # noqa: E501
        :rtype: InlineResponse20095FirstSnapshot
        """
        return self._first_snapshot

    @first_snapshot.setter
    def first_snapshot(self, first_snapshot):
        """Sets the first_snapshot of this InlineResponse20095.


        :param first_snapshot: The first_snapshot of this InlineResponse20095.  # noqa: E501
        :type: InlineResponse20095FirstSnapshot
        """

        self._first_snapshot = first_snapshot

    @property
    def second_snapshot(self):
        """Gets the second_snapshot of this InlineResponse20095.  # noqa: E501


        :return: The second_snapshot of this InlineResponse20095.  # noqa: E501
        :rtype: InlineResponse20095FirstSnapshot
        """
        return self._second_snapshot

    @second_snapshot.setter
    def second_snapshot(self, second_snapshot):
        """Sets the second_snapshot of this InlineResponse20095.


        :param second_snapshot: The second_snapshot of this InlineResponse20095.  # noqa: E501
        :type: InlineResponse20095FirstSnapshot
        """

        self._second_snapshot = second_snapshot

    @property
    def third_snapshot(self):
        """Gets the third_snapshot of this InlineResponse20095.  # noqa: E501


        :return: The third_snapshot of this InlineResponse20095.  # noqa: E501
        :rtype: InlineResponse20095FirstSnapshot
        """
        return self._third_snapshot

    @third_snapshot.setter
    def third_snapshot(self, third_snapshot):
        """Sets the third_snapshot of this InlineResponse20095.


        :param third_snapshot: The third_snapshot of this InlineResponse20095.  # noqa: E501
        :type: InlineResponse20095FirstSnapshot
        """

        self._third_snapshot = third_snapshot

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20095, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20095):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
