# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1devicesdeviceIdconfigCoreTrafficPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dpi_applications': 'list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]',
        'network_lists': 'list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]',
        'port_lists': 'list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]',
        'security_rulesets': 'list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]',
        'traffic_rulesets': 'list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]',
        'zone_firewalls': 'list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]',
        'zones': 'list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]'
    }

    attribute_map = {
        'dpi_applications': 'dpiApplications',
        'network_lists': 'networkLists',
        'port_lists': 'portLists',
        'security_rulesets': 'securityRulesets',
        'traffic_rulesets': 'trafficRulesets',
        'zone_firewalls': 'zoneFirewalls',
        'zones': 'zones'
    }

    def __init__(self, dpi_applications=None, network_lists=None, port_lists=None, security_rulesets=None, traffic_rulesets=None, zone_firewalls=None, zones=None):  # noqa: E501
        """V1devicesdeviceIdconfigCoreTrafficPolicy - a model defined in Swagger"""  # noqa: E501
        self._dpi_applications = None
        self._network_lists = None
        self._port_lists = None
        self._security_rulesets = None
        self._traffic_rulesets = None
        self._zone_firewalls = None
        self._zones = None
        self.discriminator = None
        if dpi_applications is not None:
            self.dpi_applications = dpi_applications
        if network_lists is not None:
            self.network_lists = network_lists
        if port_lists is not None:
            self.port_lists = port_lists
        if security_rulesets is not None:
            self.security_rulesets = security_rulesets
        if traffic_rulesets is not None:
            self.traffic_rulesets = traffic_rulesets
        if zone_firewalls is not None:
            self.zone_firewalls = zone_firewalls
        if zones is not None:
            self.zones = zones

    @property
    def dpi_applications(self):
        """Gets the dpi_applications of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501


        :return: The dpi_applications of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]
        """
        return self._dpi_applications

    @dpi_applications.setter
    def dpi_applications(self, dpi_applications):
        """Sets the dpi_applications of this V1devicesdeviceIdconfigCoreTrafficPolicy.


        :param dpi_applications: The dpi_applications of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]
        """

        self._dpi_applications = dpi_applications

    @property
    def network_lists(self):
        """Gets the network_lists of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501


        :return: The network_lists of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]
        """
        return self._network_lists

    @network_lists.setter
    def network_lists(self, network_lists):
        """Sets the network_lists of this V1devicesdeviceIdconfigCoreTrafficPolicy.


        :param network_lists: The network_lists of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]
        """

        self._network_lists = network_lists

    @property
    def port_lists(self):
        """Gets the port_lists of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501


        :return: The port_lists of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]
        """
        return self._port_lists

    @port_lists.setter
    def port_lists(self, port_lists):
        """Sets the port_lists of this V1devicesdeviceIdconfigCoreTrafficPolicy.


        :param port_lists: The port_lists of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]
        """

        self._port_lists = port_lists

    @property
    def security_rulesets(self):
        """Gets the security_rulesets of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501


        :return: The security_rulesets of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]
        """
        return self._security_rulesets

    @security_rulesets.setter
    def security_rulesets(self, security_rulesets):
        """Sets the security_rulesets of this V1devicesdeviceIdconfigCoreTrafficPolicy.


        :param security_rulesets: The security_rulesets of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]
        """

        self._security_rulesets = security_rulesets

    @property
    def traffic_rulesets(self):
        """Gets the traffic_rulesets of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501


        :return: The traffic_rulesets of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]
        """
        return self._traffic_rulesets

    @traffic_rulesets.setter
    def traffic_rulesets(self, traffic_rulesets):
        """Sets the traffic_rulesets of this V1devicesdeviceIdconfigCoreTrafficPolicy.


        :param traffic_rulesets: The traffic_rulesets of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]
        """

        self._traffic_rulesets = traffic_rulesets

    @property
    def zone_firewalls(self):
        """Gets the zone_firewalls of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501


        :return: The zone_firewalls of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]
        """
        return self._zone_firewalls

    @zone_firewalls.setter
    def zone_firewalls(self, zone_firewalls):
        """Sets the zone_firewalls of this V1devicesdeviceIdconfigCoreTrafficPolicy.


        :param zone_firewalls: The zone_firewalls of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]
        """

        self._zone_firewalls = zone_firewalls

    @property
    def zones(self):
        """Gets the zones of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501


        :return: The zones of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this V1devicesdeviceIdconfigCoreTrafficPolicy.


        :param zones: The zones of this V1devicesdeviceIdconfigCoreTrafficPolicy.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]
        """

        self._zones = zones

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1devicesdeviceIdconfigCoreTrafficPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1devicesdeviceIdconfigCoreTrafficPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
