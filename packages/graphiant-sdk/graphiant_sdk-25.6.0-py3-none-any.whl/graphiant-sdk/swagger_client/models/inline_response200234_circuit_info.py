# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200234CircuitInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'average_downlink_utilization': 'str',
        'average_uplink_utilization': 'str',
        'circuit_carrier': 'str',
        'circuit_name': 'str',
        'current_downlink_utilization': 'str',
        'current_uplink_utilization': 'str',
        'device_id': 'str',
        'interface_name': 'str',
        'jitter': 'str',
        'label': 'str',
        'last_resort': 'str',
        'latency': 'str',
        'loss': 'str',
        'qoe': 'str',
        'quality': 'str'
    }

    attribute_map = {
        'average_downlink_utilization': 'averageDownlinkUtilization',
        'average_uplink_utilization': 'averageUplinkUtilization',
        'circuit_carrier': 'circuitCarrier',
        'circuit_name': 'circuitName',
        'current_downlink_utilization': 'currentDownlinkUtilization',
        'current_uplink_utilization': 'currentUplinkUtilization',
        'device_id': 'deviceId',
        'interface_name': 'interfaceName',
        'jitter': 'jitter',
        'label': 'label',
        'last_resort': 'lastResort',
        'latency': 'latency',
        'loss': 'loss',
        'qoe': 'qoe',
        'quality': 'quality'
    }

    def __init__(self, average_downlink_utilization=None, average_uplink_utilization=None, circuit_carrier=None, circuit_name=None, current_downlink_utilization=None, current_uplink_utilization=None, device_id=None, interface_name=None, jitter=None, label=None, last_resort=None, latency=None, loss=None, qoe=None, quality=None):  # noqa: E501
        """InlineResponse200234CircuitInfo - a model defined in Swagger"""  # noqa: E501
        self._average_downlink_utilization = None
        self._average_uplink_utilization = None
        self._circuit_carrier = None
        self._circuit_name = None
        self._current_downlink_utilization = None
        self._current_uplink_utilization = None
        self._device_id = None
        self._interface_name = None
        self._jitter = None
        self._label = None
        self._last_resort = None
        self._latency = None
        self._loss = None
        self._qoe = None
        self._quality = None
        self.discriminator = None
        if average_downlink_utilization is not None:
            self.average_downlink_utilization = average_downlink_utilization
        if average_uplink_utilization is not None:
            self.average_uplink_utilization = average_uplink_utilization
        if circuit_carrier is not None:
            self.circuit_carrier = circuit_carrier
        if circuit_name is not None:
            self.circuit_name = circuit_name
        if current_downlink_utilization is not None:
            self.current_downlink_utilization = current_downlink_utilization
        if current_uplink_utilization is not None:
            self.current_uplink_utilization = current_uplink_utilization
        if device_id is not None:
            self.device_id = device_id
        if interface_name is not None:
            self.interface_name = interface_name
        if jitter is not None:
            self.jitter = jitter
        if label is not None:
            self.label = label
        if last_resort is not None:
            self.last_resort = last_resort
        if latency is not None:
            self.latency = latency
        if loss is not None:
            self.loss = loss
        if qoe is not None:
            self.qoe = qoe
        if quality is not None:
            self.quality = quality

    @property
    def average_downlink_utilization(self):
        """Gets the average_downlink_utilization of this InlineResponse200234CircuitInfo.  # noqa: E501


        :return: The average_downlink_utilization of this InlineResponse200234CircuitInfo.  # noqa: E501
        :rtype: str
        """
        return self._average_downlink_utilization

    @average_downlink_utilization.setter
    def average_downlink_utilization(self, average_downlink_utilization):
        """Sets the average_downlink_utilization of this InlineResponse200234CircuitInfo.


        :param average_downlink_utilization: The average_downlink_utilization of this InlineResponse200234CircuitInfo.  # noqa: E501
        :type: str
        """

        self._average_downlink_utilization = average_downlink_utilization

    @property
    def average_uplink_utilization(self):
        """Gets the average_uplink_utilization of this InlineResponse200234CircuitInfo.  # noqa: E501


        :return: The average_uplink_utilization of this InlineResponse200234CircuitInfo.  # noqa: E501
        :rtype: str
        """
        return self._average_uplink_utilization

    @average_uplink_utilization.setter
    def average_uplink_utilization(self, average_uplink_utilization):
        """Sets the average_uplink_utilization of this InlineResponse200234CircuitInfo.


        :param average_uplink_utilization: The average_uplink_utilization of this InlineResponse200234CircuitInfo.  # noqa: E501
        :type: str
        """

        self._average_uplink_utilization = average_uplink_utilization

    @property
    def circuit_carrier(self):
        """Gets the circuit_carrier of this InlineResponse200234CircuitInfo.  # noqa: E501


        :return: The circuit_carrier of this InlineResponse200234CircuitInfo.  # noqa: E501
        :rtype: str
        """
        return self._circuit_carrier

    @circuit_carrier.setter
    def circuit_carrier(self, circuit_carrier):
        """Sets the circuit_carrier of this InlineResponse200234CircuitInfo.


        :param circuit_carrier: The circuit_carrier of this InlineResponse200234CircuitInfo.  # noqa: E501
        :type: str
        """

        self._circuit_carrier = circuit_carrier

    @property
    def circuit_name(self):
        """Gets the circuit_name of this InlineResponse200234CircuitInfo.  # noqa: E501


        :return: The circuit_name of this InlineResponse200234CircuitInfo.  # noqa: E501
        :rtype: str
        """
        return self._circuit_name

    @circuit_name.setter
    def circuit_name(self, circuit_name):
        """Sets the circuit_name of this InlineResponse200234CircuitInfo.


        :param circuit_name: The circuit_name of this InlineResponse200234CircuitInfo.  # noqa: E501
        :type: str
        """

        self._circuit_name = circuit_name

    @property
    def current_downlink_utilization(self):
        """Gets the current_downlink_utilization of this InlineResponse200234CircuitInfo.  # noqa: E501


        :return: The current_downlink_utilization of this InlineResponse200234CircuitInfo.  # noqa: E501
        :rtype: str
        """
        return self._current_downlink_utilization

    @current_downlink_utilization.setter
    def current_downlink_utilization(self, current_downlink_utilization):
        """Sets the current_downlink_utilization of this InlineResponse200234CircuitInfo.


        :param current_downlink_utilization: The current_downlink_utilization of this InlineResponse200234CircuitInfo.  # noqa: E501
        :type: str
        """

        self._current_downlink_utilization = current_downlink_utilization

    @property
    def current_uplink_utilization(self):
        """Gets the current_uplink_utilization of this InlineResponse200234CircuitInfo.  # noqa: E501


        :return: The current_uplink_utilization of this InlineResponse200234CircuitInfo.  # noqa: E501
        :rtype: str
        """
        return self._current_uplink_utilization

    @current_uplink_utilization.setter
    def current_uplink_utilization(self, current_uplink_utilization):
        """Sets the current_uplink_utilization of this InlineResponse200234CircuitInfo.


        :param current_uplink_utilization: The current_uplink_utilization of this InlineResponse200234CircuitInfo.  # noqa: E501
        :type: str
        """

        self._current_uplink_utilization = current_uplink_utilization

    @property
    def device_id(self):
        """Gets the device_id of this InlineResponse200234CircuitInfo.  # noqa: E501


        :return: The device_id of this InlineResponse200234CircuitInfo.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this InlineResponse200234CircuitInfo.


        :param device_id: The device_id of this InlineResponse200234CircuitInfo.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def interface_name(self):
        """Gets the interface_name of this InlineResponse200234CircuitInfo.  # noqa: E501


        :return: The interface_name of this InlineResponse200234CircuitInfo.  # noqa: E501
        :rtype: str
        """
        return self._interface_name

    @interface_name.setter
    def interface_name(self, interface_name):
        """Sets the interface_name of this InlineResponse200234CircuitInfo.


        :param interface_name: The interface_name of this InlineResponse200234CircuitInfo.  # noqa: E501
        :type: str
        """

        self._interface_name = interface_name

    @property
    def jitter(self):
        """Gets the jitter of this InlineResponse200234CircuitInfo.  # noqa: E501


        :return: The jitter of this InlineResponse200234CircuitInfo.  # noqa: E501
        :rtype: str
        """
        return self._jitter

    @jitter.setter
    def jitter(self, jitter):
        """Sets the jitter of this InlineResponse200234CircuitInfo.


        :param jitter: The jitter of this InlineResponse200234CircuitInfo.  # noqa: E501
        :type: str
        """

        self._jitter = jitter

    @property
    def label(self):
        """Gets the label of this InlineResponse200234CircuitInfo.  # noqa: E501


        :return: The label of this InlineResponse200234CircuitInfo.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this InlineResponse200234CircuitInfo.


        :param label: The label of this InlineResponse200234CircuitInfo.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def last_resort(self):
        """Gets the last_resort of this InlineResponse200234CircuitInfo.  # noqa: E501


        :return: The last_resort of this InlineResponse200234CircuitInfo.  # noqa: E501
        :rtype: str
        """
        return self._last_resort

    @last_resort.setter
    def last_resort(self, last_resort):
        """Sets the last_resort of this InlineResponse200234CircuitInfo.


        :param last_resort: The last_resort of this InlineResponse200234CircuitInfo.  # noqa: E501
        :type: str
        """

        self._last_resort = last_resort

    @property
    def latency(self):
        """Gets the latency of this InlineResponse200234CircuitInfo.  # noqa: E501


        :return: The latency of this InlineResponse200234CircuitInfo.  # noqa: E501
        :rtype: str
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this InlineResponse200234CircuitInfo.


        :param latency: The latency of this InlineResponse200234CircuitInfo.  # noqa: E501
        :type: str
        """

        self._latency = latency

    @property
    def loss(self):
        """Gets the loss of this InlineResponse200234CircuitInfo.  # noqa: E501


        :return: The loss of this InlineResponse200234CircuitInfo.  # noqa: E501
        :rtype: str
        """
        return self._loss

    @loss.setter
    def loss(self, loss):
        """Sets the loss of this InlineResponse200234CircuitInfo.


        :param loss: The loss of this InlineResponse200234CircuitInfo.  # noqa: E501
        :type: str
        """

        self._loss = loss

    @property
    def qoe(self):
        """Gets the qoe of this InlineResponse200234CircuitInfo.  # noqa: E501


        :return: The qoe of this InlineResponse200234CircuitInfo.  # noqa: E501
        :rtype: str
        """
        return self._qoe

    @qoe.setter
    def qoe(self, qoe):
        """Sets the qoe of this InlineResponse200234CircuitInfo.


        :param qoe: The qoe of this InlineResponse200234CircuitInfo.  # noqa: E501
        :type: str
        """

        self._qoe = qoe

    @property
    def quality(self):
        """Gets the quality of this InlineResponse200234CircuitInfo.  # noqa: E501


        :return: The quality of this InlineResponse200234CircuitInfo.  # noqa: E501
        :rtype: str
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this InlineResponse200234CircuitInfo.


        :param quality: The quality of this InlineResponse200234CircuitInfo.  # noqa: E501
        :type: str
        """

        self._quality = quality

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200234CircuitInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200234CircuitInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
