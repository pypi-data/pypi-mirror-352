# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200208UpgradeSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'str',
        'last_discovered_ts': 'V1devicesbringuptokenValidTillTs',
        'last_upgrade_ts': 'V1devicesbringuptokenValidTillTs',
        'running_version': 'V1devicesupgradescheduleVersion',
        'schedule': 'InlineResponse200208UpgradeSummarySchedule',
        'status': 'str'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'last_discovered_ts': 'lastDiscoveredTs',
        'last_upgrade_ts': 'lastUpgradeTs',
        'running_version': 'runningVersion',
        'schedule': 'schedule',
        'status': 'status'
    }

    def __init__(self, device_id=None, last_discovered_ts=None, last_upgrade_ts=None, running_version=None, schedule=None, status=None):  # noqa: E501
        """InlineResponse200208UpgradeSummary - a model defined in Swagger"""  # noqa: E501
        self._device_id = None
        self._last_discovered_ts = None
        self._last_upgrade_ts = None
        self._running_version = None
        self._schedule = None
        self._status = None
        self.discriminator = None
        if device_id is not None:
            self.device_id = device_id
        if last_discovered_ts is not None:
            self.last_discovered_ts = last_discovered_ts
        if last_upgrade_ts is not None:
            self.last_upgrade_ts = last_upgrade_ts
        if running_version is not None:
            self.running_version = running_version
        if schedule is not None:
            self.schedule = schedule
        if status is not None:
            self.status = status

    @property
    def device_id(self):
        """Gets the device_id of this InlineResponse200208UpgradeSummary.  # noqa: E501


        :return: The device_id of this InlineResponse200208UpgradeSummary.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this InlineResponse200208UpgradeSummary.


        :param device_id: The device_id of this InlineResponse200208UpgradeSummary.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def last_discovered_ts(self):
        """Gets the last_discovered_ts of this InlineResponse200208UpgradeSummary.  # noqa: E501


        :return: The last_discovered_ts of this InlineResponse200208UpgradeSummary.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._last_discovered_ts

    @last_discovered_ts.setter
    def last_discovered_ts(self, last_discovered_ts):
        """Sets the last_discovered_ts of this InlineResponse200208UpgradeSummary.


        :param last_discovered_ts: The last_discovered_ts of this InlineResponse200208UpgradeSummary.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._last_discovered_ts = last_discovered_ts

    @property
    def last_upgrade_ts(self):
        """Gets the last_upgrade_ts of this InlineResponse200208UpgradeSummary.  # noqa: E501


        :return: The last_upgrade_ts of this InlineResponse200208UpgradeSummary.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._last_upgrade_ts

    @last_upgrade_ts.setter
    def last_upgrade_ts(self, last_upgrade_ts):
        """Sets the last_upgrade_ts of this InlineResponse200208UpgradeSummary.


        :param last_upgrade_ts: The last_upgrade_ts of this InlineResponse200208UpgradeSummary.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._last_upgrade_ts = last_upgrade_ts

    @property
    def running_version(self):
        """Gets the running_version of this InlineResponse200208UpgradeSummary.  # noqa: E501


        :return: The running_version of this InlineResponse200208UpgradeSummary.  # noqa: E501
        :rtype: V1devicesupgradescheduleVersion
        """
        return self._running_version

    @running_version.setter
    def running_version(self, running_version):
        """Sets the running_version of this InlineResponse200208UpgradeSummary.


        :param running_version: The running_version of this InlineResponse200208UpgradeSummary.  # noqa: E501
        :type: V1devicesupgradescheduleVersion
        """

        self._running_version = running_version

    @property
    def schedule(self):
        """Gets the schedule of this InlineResponse200208UpgradeSummary.  # noqa: E501


        :return: The schedule of this InlineResponse200208UpgradeSummary.  # noqa: E501
        :rtype: InlineResponse200208UpgradeSummarySchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this InlineResponse200208UpgradeSummary.


        :param schedule: The schedule of this InlineResponse200208UpgradeSummary.  # noqa: E501
        :type: InlineResponse200208UpgradeSummarySchedule
        """

        self._schedule = schedule

    @property
    def status(self):
        """Gets the status of this InlineResponse200208UpgradeSummary.  # noqa: E501


        :return: The status of this InlineResponse200208UpgradeSummary.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200208UpgradeSummary.


        :param status: The status of this InlineResponse200208UpgradeSummary.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200208UpgradeSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200208UpgradeSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
