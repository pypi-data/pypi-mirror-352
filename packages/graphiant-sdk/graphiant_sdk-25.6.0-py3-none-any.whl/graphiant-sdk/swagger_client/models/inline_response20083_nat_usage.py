# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20083NatUsage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_count': 'str',
        'current_count_extranet': 'str',
        'current_count_pat': 'str',
        'current_count_static': 'str',
        'max_count': 'str'
    }

    attribute_map = {
        'current_count': 'currentCount',
        'current_count_extranet': 'currentCountExtranet',
        'current_count_pat': 'currentCountPat',
        'current_count_static': 'currentCountStatic',
        'max_count': 'maxCount'
    }

    def __init__(self, current_count=None, current_count_extranet=None, current_count_pat=None, current_count_static=None, max_count=None):  # noqa: E501
        """InlineResponse20083NatUsage - a model defined in Swagger"""  # noqa: E501
        self._current_count = None
        self._current_count_extranet = None
        self._current_count_pat = None
        self._current_count_static = None
        self._max_count = None
        self.discriminator = None
        if current_count is not None:
            self.current_count = current_count
        if current_count_extranet is not None:
            self.current_count_extranet = current_count_extranet
        if current_count_pat is not None:
            self.current_count_pat = current_count_pat
        if current_count_static is not None:
            self.current_count_static = current_count_static
        if max_count is not None:
            self.max_count = max_count

    @property
    def current_count(self):
        """Gets the current_count of this InlineResponse20083NatUsage.  # noqa: E501


        :return: The current_count of this InlineResponse20083NatUsage.  # noqa: E501
        :rtype: str
        """
        return self._current_count

    @current_count.setter
    def current_count(self, current_count):
        """Sets the current_count of this InlineResponse20083NatUsage.


        :param current_count: The current_count of this InlineResponse20083NatUsage.  # noqa: E501
        :type: str
        """

        self._current_count = current_count

    @property
    def current_count_extranet(self):
        """Gets the current_count_extranet of this InlineResponse20083NatUsage.  # noqa: E501


        :return: The current_count_extranet of this InlineResponse20083NatUsage.  # noqa: E501
        :rtype: str
        """
        return self._current_count_extranet

    @current_count_extranet.setter
    def current_count_extranet(self, current_count_extranet):
        """Sets the current_count_extranet of this InlineResponse20083NatUsage.


        :param current_count_extranet: The current_count_extranet of this InlineResponse20083NatUsage.  # noqa: E501
        :type: str
        """

        self._current_count_extranet = current_count_extranet

    @property
    def current_count_pat(self):
        """Gets the current_count_pat of this InlineResponse20083NatUsage.  # noqa: E501


        :return: The current_count_pat of this InlineResponse20083NatUsage.  # noqa: E501
        :rtype: str
        """
        return self._current_count_pat

    @current_count_pat.setter
    def current_count_pat(self, current_count_pat):
        """Sets the current_count_pat of this InlineResponse20083NatUsage.


        :param current_count_pat: The current_count_pat of this InlineResponse20083NatUsage.  # noqa: E501
        :type: str
        """

        self._current_count_pat = current_count_pat

    @property
    def current_count_static(self):
        """Gets the current_count_static of this InlineResponse20083NatUsage.  # noqa: E501


        :return: The current_count_static of this InlineResponse20083NatUsage.  # noqa: E501
        :rtype: str
        """
        return self._current_count_static

    @current_count_static.setter
    def current_count_static(self, current_count_static):
        """Sets the current_count_static of this InlineResponse20083NatUsage.


        :param current_count_static: The current_count_static of this InlineResponse20083NatUsage.  # noqa: E501
        :type: str
        """

        self._current_count_static = current_count_static

    @property
    def max_count(self):
        """Gets the max_count of this InlineResponse20083NatUsage.  # noqa: E501


        :return: The max_count of this InlineResponse20083NatUsage.  # noqa: E501
        :rtype: str
        """
        return self._max_count

    @max_count.setter
    def max_count(self, max_count):
        """Sets the max_count of this InlineResponse20083NatUsage.


        :param max_count: The max_count of this InlineResponse20083NatUsage.  # noqa: E501
        :type: str
        """

        self._max_count = max_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20083NatUsage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20083NatUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
