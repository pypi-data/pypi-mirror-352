# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200208EdgesSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assigned_on': 'V1devicesbringuptokenValidTillTs',
        'device_id': 'str',
        'discovered_location': 'str',
        'enterprise_id': 'str',
        'enterprise_name': 'str',
        'first_appeared_on': 'V1devicesbringuptokenValidTillTs',
        'hostname': 'str',
        'ip_detected': 'str',
        'is_hardware': 'str',
        'is_new': 'str',
        'is_requested': 'str',
        'last_booted_at': 'V1devicesbringuptokenValidTillTs',
        'location': 'V1sitesSiteLocation',
        'model': 'str',
        'override_region': 'str',
        'parent_enterprise_name': 'str',
        'portal_status': 'str',
        'region': 'str',
        'role': 'str',
        'serial_num': 'str',
        'site': 'str',
        'site_id': 'str',
        'stale': 'str',
        'status': 'str',
        'sw_name': 'str',
        'sw_version': 'str',
        'tt_conn_count': 'str',
        'upgrade_summary': 'InlineResponse200208UpgradeSummary'
    }

    attribute_map = {
        'assigned_on': 'assignedOn',
        'device_id': 'deviceId',
        'discovered_location': 'discoveredLocation',
        'enterprise_id': 'enterpriseId',
        'enterprise_name': 'enterpriseName',
        'first_appeared_on': 'firstAppearedOn',
        'hostname': 'hostname',
        'ip_detected': 'ipDetected',
        'is_hardware': 'isHardware',
        'is_new': 'isNew',
        'is_requested': 'isRequested',
        'last_booted_at': 'lastBootedAt',
        'location': 'location',
        'model': 'model',
        'override_region': 'overrideRegion',
        'parent_enterprise_name': 'parentEnterpriseName',
        'portal_status': 'portalStatus',
        'region': 'region',
        'role': 'role',
        'serial_num': 'serialNum',
        'site': 'site',
        'site_id': 'siteId',
        'stale': 'stale',
        'status': 'status',
        'sw_name': 'swName',
        'sw_version': 'swVersion',
        'tt_conn_count': 'ttConnCount',
        'upgrade_summary': 'upgradeSummary'
    }

    def __init__(self, assigned_on=None, device_id=None, discovered_location=None, enterprise_id=None, enterprise_name=None, first_appeared_on=None, hostname=None, ip_detected=None, is_hardware=None, is_new=None, is_requested=None, last_booted_at=None, location=None, model=None, override_region=None, parent_enterprise_name=None, portal_status=None, region=None, role=None, serial_num=None, site=None, site_id=None, stale=None, status=None, sw_name=None, sw_version=None, tt_conn_count=None, upgrade_summary=None):  # noqa: E501
        """InlineResponse200208EdgesSummary - a model defined in Swagger"""  # noqa: E501
        self._assigned_on = None
        self._device_id = None
        self._discovered_location = None
        self._enterprise_id = None
        self._enterprise_name = None
        self._first_appeared_on = None
        self._hostname = None
        self._ip_detected = None
        self._is_hardware = None
        self._is_new = None
        self._is_requested = None
        self._last_booted_at = None
        self._location = None
        self._model = None
        self._override_region = None
        self._parent_enterprise_name = None
        self._portal_status = None
        self._region = None
        self._role = None
        self._serial_num = None
        self._site = None
        self._site_id = None
        self._stale = None
        self._status = None
        self._sw_name = None
        self._sw_version = None
        self._tt_conn_count = None
        self._upgrade_summary = None
        self.discriminator = None
        if assigned_on is not None:
            self.assigned_on = assigned_on
        if device_id is not None:
            self.device_id = device_id
        if discovered_location is not None:
            self.discovered_location = discovered_location
        if enterprise_id is not None:
            self.enterprise_id = enterprise_id
        if enterprise_name is not None:
            self.enterprise_name = enterprise_name
        if first_appeared_on is not None:
            self.first_appeared_on = first_appeared_on
        if hostname is not None:
            self.hostname = hostname
        if ip_detected is not None:
            self.ip_detected = ip_detected
        if is_hardware is not None:
            self.is_hardware = is_hardware
        if is_new is not None:
            self.is_new = is_new
        if is_requested is not None:
            self.is_requested = is_requested
        if last_booted_at is not None:
            self.last_booted_at = last_booted_at
        if location is not None:
            self.location = location
        if model is not None:
            self.model = model
        if override_region is not None:
            self.override_region = override_region
        if parent_enterprise_name is not None:
            self.parent_enterprise_name = parent_enterprise_name
        if portal_status is not None:
            self.portal_status = portal_status
        if region is not None:
            self.region = region
        if role is not None:
            self.role = role
        if serial_num is not None:
            self.serial_num = serial_num
        if site is not None:
            self.site = site
        if site_id is not None:
            self.site_id = site_id
        if stale is not None:
            self.stale = stale
        if status is not None:
            self.status = status
        if sw_name is not None:
            self.sw_name = sw_name
        if sw_version is not None:
            self.sw_version = sw_version
        if tt_conn_count is not None:
            self.tt_conn_count = tt_conn_count
        if upgrade_summary is not None:
            self.upgrade_summary = upgrade_summary

    @property
    def assigned_on(self):
        """Gets the assigned_on of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The assigned_on of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._assigned_on

    @assigned_on.setter
    def assigned_on(self, assigned_on):
        """Sets the assigned_on of this InlineResponse200208EdgesSummary.


        :param assigned_on: The assigned_on of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._assigned_on = assigned_on

    @property
    def device_id(self):
        """Gets the device_id of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The device_id of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this InlineResponse200208EdgesSummary.


        :param device_id: The device_id of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def discovered_location(self):
        """Gets the discovered_location of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The discovered_location of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._discovered_location

    @discovered_location.setter
    def discovered_location(self, discovered_location):
        """Sets the discovered_location of this InlineResponse200208EdgesSummary.


        :param discovered_location: The discovered_location of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._discovered_location = discovered_location

    @property
    def enterprise_id(self):
        """Gets the enterprise_id of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The enterprise_id of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_id

    @enterprise_id.setter
    def enterprise_id(self, enterprise_id):
        """Sets the enterprise_id of this InlineResponse200208EdgesSummary.


        :param enterprise_id: The enterprise_id of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._enterprise_id = enterprise_id

    @property
    def enterprise_name(self):
        """Gets the enterprise_name of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The enterprise_name of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_name

    @enterprise_name.setter
    def enterprise_name(self, enterprise_name):
        """Sets the enterprise_name of this InlineResponse200208EdgesSummary.


        :param enterprise_name: The enterprise_name of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._enterprise_name = enterprise_name

    @property
    def first_appeared_on(self):
        """Gets the first_appeared_on of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The first_appeared_on of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._first_appeared_on

    @first_appeared_on.setter
    def first_appeared_on(self, first_appeared_on):
        """Sets the first_appeared_on of this InlineResponse200208EdgesSummary.


        :param first_appeared_on: The first_appeared_on of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._first_appeared_on = first_appeared_on

    @property
    def hostname(self):
        """Gets the hostname of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The hostname of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this InlineResponse200208EdgesSummary.


        :param hostname: The hostname of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def ip_detected(self):
        """Gets the ip_detected of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The ip_detected of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._ip_detected

    @ip_detected.setter
    def ip_detected(self, ip_detected):
        """Sets the ip_detected of this InlineResponse200208EdgesSummary.


        :param ip_detected: The ip_detected of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._ip_detected = ip_detected

    @property
    def is_hardware(self):
        """Gets the is_hardware of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The is_hardware of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._is_hardware

    @is_hardware.setter
    def is_hardware(self, is_hardware):
        """Sets the is_hardware of this InlineResponse200208EdgesSummary.


        :param is_hardware: The is_hardware of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._is_hardware = is_hardware

    @property
    def is_new(self):
        """Gets the is_new of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The is_new of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._is_new

    @is_new.setter
    def is_new(self, is_new):
        """Sets the is_new of this InlineResponse200208EdgesSummary.


        :param is_new: The is_new of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._is_new = is_new

    @property
    def is_requested(self):
        """Gets the is_requested of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The is_requested of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._is_requested

    @is_requested.setter
    def is_requested(self, is_requested):
        """Sets the is_requested of this InlineResponse200208EdgesSummary.


        :param is_requested: The is_requested of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._is_requested = is_requested

    @property
    def last_booted_at(self):
        """Gets the last_booted_at of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The last_booted_at of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._last_booted_at

    @last_booted_at.setter
    def last_booted_at(self, last_booted_at):
        """Sets the last_booted_at of this InlineResponse200208EdgesSummary.


        :param last_booted_at: The last_booted_at of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._last_booted_at = last_booted_at

    @property
    def location(self):
        """Gets the location of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The location of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: V1sitesSiteLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InlineResponse200208EdgesSummary.


        :param location: The location of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: V1sitesSiteLocation
        """

        self._location = location

    @property
    def model(self):
        """Gets the model of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The model of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this InlineResponse200208EdgesSummary.


        :param model: The model of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def override_region(self):
        """Gets the override_region of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The override_region of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._override_region

    @override_region.setter
    def override_region(self, override_region):
        """Sets the override_region of this InlineResponse200208EdgesSummary.


        :param override_region: The override_region of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._override_region = override_region

    @property
    def parent_enterprise_name(self):
        """Gets the parent_enterprise_name of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The parent_enterprise_name of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._parent_enterprise_name

    @parent_enterprise_name.setter
    def parent_enterprise_name(self, parent_enterprise_name):
        """Sets the parent_enterprise_name of this InlineResponse200208EdgesSummary.


        :param parent_enterprise_name: The parent_enterprise_name of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._parent_enterprise_name = parent_enterprise_name

    @property
    def portal_status(self):
        """Gets the portal_status of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The portal_status of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._portal_status

    @portal_status.setter
    def portal_status(self, portal_status):
        """Sets the portal_status of this InlineResponse200208EdgesSummary.


        :param portal_status: The portal_status of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._portal_status = portal_status

    @property
    def region(self):
        """Gets the region of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The region of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this InlineResponse200208EdgesSummary.


        :param region: The region of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def role(self):
        """Gets the role of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The role of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this InlineResponse200208EdgesSummary.


        :param role: The role of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def serial_num(self):
        """Gets the serial_num of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The serial_num of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._serial_num

    @serial_num.setter
    def serial_num(self, serial_num):
        """Sets the serial_num of this InlineResponse200208EdgesSummary.


        :param serial_num: The serial_num of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._serial_num = serial_num

    @property
    def site(self):
        """Gets the site of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The site of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this InlineResponse200208EdgesSummary.


        :param site: The site of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._site = site

    @property
    def site_id(self):
        """Gets the site_id of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The site_id of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this InlineResponse200208EdgesSummary.


        :param site_id: The site_id of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._site_id = site_id

    @property
    def stale(self):
        """Gets the stale of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The stale of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._stale

    @stale.setter
    def stale(self, stale):
        """Sets the stale of this InlineResponse200208EdgesSummary.


        :param stale: The stale of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._stale = stale

    @property
    def status(self):
        """Gets the status of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The status of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200208EdgesSummary.


        :param status: The status of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def sw_name(self):
        """Gets the sw_name of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The sw_name of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._sw_name

    @sw_name.setter
    def sw_name(self, sw_name):
        """Sets the sw_name of this InlineResponse200208EdgesSummary.


        :param sw_name: The sw_name of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._sw_name = sw_name

    @property
    def sw_version(self):
        """Gets the sw_version of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The sw_version of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._sw_version

    @sw_version.setter
    def sw_version(self, sw_version):
        """Sets the sw_version of this InlineResponse200208EdgesSummary.


        :param sw_version: The sw_version of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._sw_version = sw_version

    @property
    def tt_conn_count(self):
        """Gets the tt_conn_count of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The tt_conn_count of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: str
        """
        return self._tt_conn_count

    @tt_conn_count.setter
    def tt_conn_count(self, tt_conn_count):
        """Sets the tt_conn_count of this InlineResponse200208EdgesSummary.


        :param tt_conn_count: The tt_conn_count of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: str
        """

        self._tt_conn_count = tt_conn_count

    @property
    def upgrade_summary(self):
        """Gets the upgrade_summary of this InlineResponse200208EdgesSummary.  # noqa: E501


        :return: The upgrade_summary of this InlineResponse200208EdgesSummary.  # noqa: E501
        :rtype: InlineResponse200208UpgradeSummary
        """
        return self._upgrade_summary

    @upgrade_summary.setter
    def upgrade_summary(self, upgrade_summary):
        """Sets the upgrade_summary of this InlineResponse200208EdgesSummary.


        :param upgrade_summary: The upgrade_summary of this InlineResponse200208EdgesSummary.  # noqa: E501
        :type: InlineResponse200208UpgradeSummary
        """

        self._upgrade_summary = upgrade_summary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200208EdgesSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200208EdgesSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
