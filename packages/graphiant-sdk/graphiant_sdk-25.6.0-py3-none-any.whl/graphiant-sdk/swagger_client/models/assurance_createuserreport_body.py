# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssuranceCreateuserreportBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_on': 'str',
        'email_list': 'list[str]',
        'pdf_content': 'str',
        'raw_content': 'list[str]',
        'report_name': 'str',
        'report_type': 'str',
        'time_period': 'str'
    }

    attribute_map = {
        'created_on': 'createdOn',
        'email_list': 'emailList',
        'pdf_content': 'pdfContent',
        'raw_content': 'rawContent',
        'report_name': 'reportName',
        'report_type': 'reportType',
        'time_period': 'timePeriod'
    }

    def __init__(self, created_on=None, email_list=None, pdf_content=None, raw_content=None, report_name=None, report_type=None, time_period=None):  # noqa: E501
        """AssuranceCreateuserreportBody - a model defined in Swagger"""  # noqa: E501
        self._created_on = None
        self._email_list = None
        self._pdf_content = None
        self._raw_content = None
        self._report_name = None
        self._report_type = None
        self._time_period = None
        self.discriminator = None
        if created_on is not None:
            self.created_on = created_on
        if email_list is not None:
            self.email_list = email_list
        if pdf_content is not None:
            self.pdf_content = pdf_content
        if raw_content is not None:
            self.raw_content = raw_content
        if report_name is not None:
            self.report_name = report_name
        if report_type is not None:
            self.report_type = report_type
        if time_period is not None:
            self.time_period = time_period

    @property
    def created_on(self):
        """Gets the created_on of this AssuranceCreateuserreportBody.  # noqa: E501


        :return: The created_on of this AssuranceCreateuserreportBody.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this AssuranceCreateuserreportBody.


        :param created_on: The created_on of this AssuranceCreateuserreportBody.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def email_list(self):
        """Gets the email_list of this AssuranceCreateuserreportBody.  # noqa: E501


        :return: The email_list of this AssuranceCreateuserreportBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._email_list

    @email_list.setter
    def email_list(self, email_list):
        """Sets the email_list of this AssuranceCreateuserreportBody.


        :param email_list: The email_list of this AssuranceCreateuserreportBody.  # noqa: E501
        :type: list[str]
        """

        self._email_list = email_list

    @property
    def pdf_content(self):
        """Gets the pdf_content of this AssuranceCreateuserreportBody.  # noqa: E501


        :return: The pdf_content of this AssuranceCreateuserreportBody.  # noqa: E501
        :rtype: str
        """
        return self._pdf_content

    @pdf_content.setter
    def pdf_content(self, pdf_content):
        """Sets the pdf_content of this AssuranceCreateuserreportBody.


        :param pdf_content: The pdf_content of this AssuranceCreateuserreportBody.  # noqa: E501
        :type: str
        """

        self._pdf_content = pdf_content

    @property
    def raw_content(self):
        """Gets the raw_content of this AssuranceCreateuserreportBody.  # noqa: E501


        :return: The raw_content of this AssuranceCreateuserreportBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._raw_content

    @raw_content.setter
    def raw_content(self, raw_content):
        """Sets the raw_content of this AssuranceCreateuserreportBody.


        :param raw_content: The raw_content of this AssuranceCreateuserreportBody.  # noqa: E501
        :type: list[str]
        """

        self._raw_content = raw_content

    @property
    def report_name(self):
        """Gets the report_name of this AssuranceCreateuserreportBody.  # noqa: E501


        :return: The report_name of this AssuranceCreateuserreportBody.  # noqa: E501
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """Sets the report_name of this AssuranceCreateuserreportBody.


        :param report_name: The report_name of this AssuranceCreateuserreportBody.  # noqa: E501
        :type: str
        """

        self._report_name = report_name

    @property
    def report_type(self):
        """Gets the report_type of this AssuranceCreateuserreportBody.  # noqa: E501


        :return: The report_type of this AssuranceCreateuserreportBody.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this AssuranceCreateuserreportBody.


        :param report_type: The report_type of this AssuranceCreateuserreportBody.  # noqa: E501
        :type: str
        """

        self._report_type = report_type

    @property
    def time_period(self):
        """Gets the time_period of this AssuranceCreateuserreportBody.  # noqa: E501


        :return: The time_period of this AssuranceCreateuserreportBody.  # noqa: E501
        :rtype: str
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this AssuranceCreateuserreportBody.


        :param time_period: The time_period of this AssuranceCreateuserreportBody.  # noqa: E501
        :type: str
        """

        self._time_period = time_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssuranceCreateuserreportBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssuranceCreateuserreportBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
