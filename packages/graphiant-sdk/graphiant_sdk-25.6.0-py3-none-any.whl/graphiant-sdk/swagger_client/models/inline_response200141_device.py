# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200141Device(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'str',
        'hostname': 'str',
        'location': 'str',
        'maintenance_mode': 'str',
        'management_ip': 'str',
        'model': 'str',
        'role': 'str',
        'serial_number': 'str',
        'site_id': 'str',
        'software_version': 'str',
        'staging_mode': 'str',
        'uptime': 'V1devicesbringuptokenValidTillTs',
        'vrrp_interface': 'str',
        'vrrp_state': 'str'
    }

    attribute_map = {
        'device_id': 'deviceId',
        'hostname': 'hostname',
        'location': 'location',
        'maintenance_mode': 'maintenanceMode',
        'management_ip': 'managementIp',
        'model': 'model',
        'role': 'role',
        'serial_number': 'serialNumber',
        'site_id': 'siteId',
        'software_version': 'softwareVersion',
        'staging_mode': 'stagingMode',
        'uptime': 'uptime',
        'vrrp_interface': 'vrrpInterface',
        'vrrp_state': 'vrrpState'
    }

    def __init__(self, device_id=None, hostname=None, location=None, maintenance_mode=None, management_ip=None, model=None, role=None, serial_number=None, site_id=None, software_version=None, staging_mode=None, uptime=None, vrrp_interface=None, vrrp_state=None):  # noqa: E501
        """InlineResponse200141Device - a model defined in Swagger"""  # noqa: E501
        self._device_id = None
        self._hostname = None
        self._location = None
        self._maintenance_mode = None
        self._management_ip = None
        self._model = None
        self._role = None
        self._serial_number = None
        self._site_id = None
        self._software_version = None
        self._staging_mode = None
        self._uptime = None
        self._vrrp_interface = None
        self._vrrp_state = None
        self.discriminator = None
        if device_id is not None:
            self.device_id = device_id
        if hostname is not None:
            self.hostname = hostname
        if location is not None:
            self.location = location
        if maintenance_mode is not None:
            self.maintenance_mode = maintenance_mode
        if management_ip is not None:
            self.management_ip = management_ip
        if model is not None:
            self.model = model
        if role is not None:
            self.role = role
        if serial_number is not None:
            self.serial_number = serial_number
        if site_id is not None:
            self.site_id = site_id
        if software_version is not None:
            self.software_version = software_version
        if staging_mode is not None:
            self.staging_mode = staging_mode
        if uptime is not None:
            self.uptime = uptime
        if vrrp_interface is not None:
            self.vrrp_interface = vrrp_interface
        if vrrp_state is not None:
            self.vrrp_state = vrrp_state

    @property
    def device_id(self):
        """Gets the device_id of this InlineResponse200141Device.  # noqa: E501


        :return: The device_id of this InlineResponse200141Device.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this InlineResponse200141Device.


        :param device_id: The device_id of this InlineResponse200141Device.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def hostname(self):
        """Gets the hostname of this InlineResponse200141Device.  # noqa: E501


        :return: The hostname of this InlineResponse200141Device.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this InlineResponse200141Device.


        :param hostname: The hostname of this InlineResponse200141Device.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def location(self):
        """Gets the location of this InlineResponse200141Device.  # noqa: E501


        :return: The location of this InlineResponse200141Device.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InlineResponse200141Device.


        :param location: The location of this InlineResponse200141Device.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def maintenance_mode(self):
        """Gets the maintenance_mode of this InlineResponse200141Device.  # noqa: E501


        :return: The maintenance_mode of this InlineResponse200141Device.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """Sets the maintenance_mode of this InlineResponse200141Device.


        :param maintenance_mode: The maintenance_mode of this InlineResponse200141Device.  # noqa: E501
        :type: str
        """

        self._maintenance_mode = maintenance_mode

    @property
    def management_ip(self):
        """Gets the management_ip of this InlineResponse200141Device.  # noqa: E501


        :return: The management_ip of this InlineResponse200141Device.  # noqa: E501
        :rtype: str
        """
        return self._management_ip

    @management_ip.setter
    def management_ip(self, management_ip):
        """Sets the management_ip of this InlineResponse200141Device.


        :param management_ip: The management_ip of this InlineResponse200141Device.  # noqa: E501
        :type: str
        """

        self._management_ip = management_ip

    @property
    def model(self):
        """Gets the model of this InlineResponse200141Device.  # noqa: E501


        :return: The model of this InlineResponse200141Device.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this InlineResponse200141Device.


        :param model: The model of this InlineResponse200141Device.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def role(self):
        """Gets the role of this InlineResponse200141Device.  # noqa: E501


        :return: The role of this InlineResponse200141Device.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this InlineResponse200141Device.


        :param role: The role of this InlineResponse200141Device.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def serial_number(self):
        """Gets the serial_number of this InlineResponse200141Device.  # noqa: E501


        :return: The serial_number of this InlineResponse200141Device.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this InlineResponse200141Device.


        :param serial_number: The serial_number of this InlineResponse200141Device.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def site_id(self):
        """Gets the site_id of this InlineResponse200141Device.  # noqa: E501


        :return: The site_id of this InlineResponse200141Device.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this InlineResponse200141Device.


        :param site_id: The site_id of this InlineResponse200141Device.  # noqa: E501
        :type: str
        """

        self._site_id = site_id

    @property
    def software_version(self):
        """Gets the software_version of this InlineResponse200141Device.  # noqa: E501


        :return: The software_version of this InlineResponse200141Device.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this InlineResponse200141Device.


        :param software_version: The software_version of this InlineResponse200141Device.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def staging_mode(self):
        """Gets the staging_mode of this InlineResponse200141Device.  # noqa: E501


        :return: The staging_mode of this InlineResponse200141Device.  # noqa: E501
        :rtype: str
        """
        return self._staging_mode

    @staging_mode.setter
    def staging_mode(self, staging_mode):
        """Sets the staging_mode of this InlineResponse200141Device.


        :param staging_mode: The staging_mode of this InlineResponse200141Device.  # noqa: E501
        :type: str
        """

        self._staging_mode = staging_mode

    @property
    def uptime(self):
        """Gets the uptime of this InlineResponse200141Device.  # noqa: E501


        :return: The uptime of this InlineResponse200141Device.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this InlineResponse200141Device.


        :param uptime: The uptime of this InlineResponse200141Device.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._uptime = uptime

    @property
    def vrrp_interface(self):
        """Gets the vrrp_interface of this InlineResponse200141Device.  # noqa: E501


        :return: The vrrp_interface of this InlineResponse200141Device.  # noqa: E501
        :rtype: str
        """
        return self._vrrp_interface

    @vrrp_interface.setter
    def vrrp_interface(self, vrrp_interface):
        """Sets the vrrp_interface of this InlineResponse200141Device.


        :param vrrp_interface: The vrrp_interface of this InlineResponse200141Device.  # noqa: E501
        :type: str
        """

        self._vrrp_interface = vrrp_interface

    @property
    def vrrp_state(self):
        """Gets the vrrp_state of this InlineResponse200141Device.  # noqa: E501


        :return: The vrrp_state of this InlineResponse200141Device.  # noqa: E501
        :rtype: str
        """
        return self._vrrp_state

    @vrrp_state.setter
    def vrrp_state(self, vrrp_state):
        """Sets the vrrp_state of this InlineResponse200141Device.


        :param vrrp_state: The vrrp_state of this InlineResponse200141Device.  # noqa: E501
        :type: str
        """

        self._vrrp_state = vrrp_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200141Device, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200141Device):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
