# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200179BgpConnection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'local_address': 'str',
        'oper_status': 'str',
        'remote_address': 'str',
        'state': 'str',
        'time_since_last_oper_change': 'object',
        'up': 'str'
    }

    attribute_map = {
        'local_address': 'localAddress',
        'oper_status': 'operStatus',
        'remote_address': 'remoteAddress',
        'state': 'state',
        'time_since_last_oper_change': 'timeSinceLastOperChange',
        'up': 'up'
    }

    def __init__(self, local_address=None, oper_status=None, remote_address=None, state=None, time_since_last_oper_change=None, up=None):  # noqa: E501
        """InlineResponse200179BgpConnection - a model defined in Swagger"""  # noqa: E501
        self._local_address = None
        self._oper_status = None
        self._remote_address = None
        self._state = None
        self._time_since_last_oper_change = None
        self._up = None
        self.discriminator = None
        if local_address is not None:
            self.local_address = local_address
        if oper_status is not None:
            self.oper_status = oper_status
        if remote_address is not None:
            self.remote_address = remote_address
        if state is not None:
            self.state = state
        if time_since_last_oper_change is not None:
            self.time_since_last_oper_change = time_since_last_oper_change
        if up is not None:
            self.up = up

    @property
    def local_address(self):
        """Gets the local_address of this InlineResponse200179BgpConnection.  # noqa: E501


        :return: The local_address of this InlineResponse200179BgpConnection.  # noqa: E501
        :rtype: str
        """
        return self._local_address

    @local_address.setter
    def local_address(self, local_address):
        """Sets the local_address of this InlineResponse200179BgpConnection.


        :param local_address: The local_address of this InlineResponse200179BgpConnection.  # noqa: E501
        :type: str
        """

        self._local_address = local_address

    @property
    def oper_status(self):
        """Gets the oper_status of this InlineResponse200179BgpConnection.  # noqa: E501


        :return: The oper_status of this InlineResponse200179BgpConnection.  # noqa: E501
        :rtype: str
        """
        return self._oper_status

    @oper_status.setter
    def oper_status(self, oper_status):
        """Sets the oper_status of this InlineResponse200179BgpConnection.


        :param oper_status: The oper_status of this InlineResponse200179BgpConnection.  # noqa: E501
        :type: str
        """

        self._oper_status = oper_status

    @property
    def remote_address(self):
        """Gets the remote_address of this InlineResponse200179BgpConnection.  # noqa: E501


        :return: The remote_address of this InlineResponse200179BgpConnection.  # noqa: E501
        :rtype: str
        """
        return self._remote_address

    @remote_address.setter
    def remote_address(self, remote_address):
        """Sets the remote_address of this InlineResponse200179BgpConnection.


        :param remote_address: The remote_address of this InlineResponse200179BgpConnection.  # noqa: E501
        :type: str
        """

        self._remote_address = remote_address

    @property
    def state(self):
        """Gets the state of this InlineResponse200179BgpConnection.  # noqa: E501


        :return: The state of this InlineResponse200179BgpConnection.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse200179BgpConnection.


        :param state: The state of this InlineResponse200179BgpConnection.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def time_since_last_oper_change(self):
        """Gets the time_since_last_oper_change of this InlineResponse200179BgpConnection.  # noqa: E501


        :return: The time_since_last_oper_change of this InlineResponse200179BgpConnection.  # noqa: E501
        :rtype: object
        """
        return self._time_since_last_oper_change

    @time_since_last_oper_change.setter
    def time_since_last_oper_change(self, time_since_last_oper_change):
        """Sets the time_since_last_oper_change of this InlineResponse200179BgpConnection.


        :param time_since_last_oper_change: The time_since_last_oper_change of this InlineResponse200179BgpConnection.  # noqa: E501
        :type: object
        """

        self._time_since_last_oper_change = time_since_last_oper_change

    @property
    def up(self):
        """Gets the up of this InlineResponse200179BgpConnection.  # noqa: E501


        :return: The up of this InlineResponse200179BgpConnection.  # noqa: E501
        :rtype: str
        """
        return self._up

    @up.setter
    def up(self, up):
        """Sets the up of this InlineResponse200179BgpConnection.


        :param up: The up of this InlineResponse200179BgpConnection.  # noqa: E501
        :type: str
        """

        self._up = up

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200179BgpConnection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200179BgpConnection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
