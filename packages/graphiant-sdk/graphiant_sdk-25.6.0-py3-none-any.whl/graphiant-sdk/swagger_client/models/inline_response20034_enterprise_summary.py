# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20034EnterpriseSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flows_analyzed': 'str',
        'gap_score': 'str',
        'prev_gap_score': 'str',
        'risk_bin': 'str',
        'threat_count': 'str',
        'unique_apps_count': 'str'
    }

    attribute_map = {
        'flows_analyzed': 'flowsAnalyzed',
        'gap_score': 'gapScore',
        'prev_gap_score': 'prevGapScore',
        'risk_bin': 'riskBin',
        'threat_count': 'threatCount',
        'unique_apps_count': 'uniqueAppsCount'
    }

    def __init__(self, flows_analyzed=None, gap_score=None, prev_gap_score=None, risk_bin=None, threat_count=None, unique_apps_count=None):  # noqa: E501
        """InlineResponse20034EnterpriseSummary - a model defined in Swagger"""  # noqa: E501
        self._flows_analyzed = None
        self._gap_score = None
        self._prev_gap_score = None
        self._risk_bin = None
        self._threat_count = None
        self._unique_apps_count = None
        self.discriminator = None
        if flows_analyzed is not None:
            self.flows_analyzed = flows_analyzed
        if gap_score is not None:
            self.gap_score = gap_score
        if prev_gap_score is not None:
            self.prev_gap_score = prev_gap_score
        if risk_bin is not None:
            self.risk_bin = risk_bin
        if threat_count is not None:
            self.threat_count = threat_count
        if unique_apps_count is not None:
            self.unique_apps_count = unique_apps_count

    @property
    def flows_analyzed(self):
        """Gets the flows_analyzed of this InlineResponse20034EnterpriseSummary.  # noqa: E501


        :return: The flows_analyzed of this InlineResponse20034EnterpriseSummary.  # noqa: E501
        :rtype: str
        """
        return self._flows_analyzed

    @flows_analyzed.setter
    def flows_analyzed(self, flows_analyzed):
        """Sets the flows_analyzed of this InlineResponse20034EnterpriseSummary.


        :param flows_analyzed: The flows_analyzed of this InlineResponse20034EnterpriseSummary.  # noqa: E501
        :type: str
        """

        self._flows_analyzed = flows_analyzed

    @property
    def gap_score(self):
        """Gets the gap_score of this InlineResponse20034EnterpriseSummary.  # noqa: E501


        :return: The gap_score of this InlineResponse20034EnterpriseSummary.  # noqa: E501
        :rtype: str
        """
        return self._gap_score

    @gap_score.setter
    def gap_score(self, gap_score):
        """Sets the gap_score of this InlineResponse20034EnterpriseSummary.


        :param gap_score: The gap_score of this InlineResponse20034EnterpriseSummary.  # noqa: E501
        :type: str
        """

        self._gap_score = gap_score

    @property
    def prev_gap_score(self):
        """Gets the prev_gap_score of this InlineResponse20034EnterpriseSummary.  # noqa: E501


        :return: The prev_gap_score of this InlineResponse20034EnterpriseSummary.  # noqa: E501
        :rtype: str
        """
        return self._prev_gap_score

    @prev_gap_score.setter
    def prev_gap_score(self, prev_gap_score):
        """Sets the prev_gap_score of this InlineResponse20034EnterpriseSummary.


        :param prev_gap_score: The prev_gap_score of this InlineResponse20034EnterpriseSummary.  # noqa: E501
        :type: str
        """

        self._prev_gap_score = prev_gap_score

    @property
    def risk_bin(self):
        """Gets the risk_bin of this InlineResponse20034EnterpriseSummary.  # noqa: E501


        :return: The risk_bin of this InlineResponse20034EnterpriseSummary.  # noqa: E501
        :rtype: str
        """
        return self._risk_bin

    @risk_bin.setter
    def risk_bin(self, risk_bin):
        """Sets the risk_bin of this InlineResponse20034EnterpriseSummary.


        :param risk_bin: The risk_bin of this InlineResponse20034EnterpriseSummary.  # noqa: E501
        :type: str
        """

        self._risk_bin = risk_bin

    @property
    def threat_count(self):
        """Gets the threat_count of this InlineResponse20034EnterpriseSummary.  # noqa: E501


        :return: The threat_count of this InlineResponse20034EnterpriseSummary.  # noqa: E501
        :rtype: str
        """
        return self._threat_count

    @threat_count.setter
    def threat_count(self, threat_count):
        """Sets the threat_count of this InlineResponse20034EnterpriseSummary.


        :param threat_count: The threat_count of this InlineResponse20034EnterpriseSummary.  # noqa: E501
        :type: str
        """

        self._threat_count = threat_count

    @property
    def unique_apps_count(self):
        """Gets the unique_apps_count of this InlineResponse20034EnterpriseSummary.  # noqa: E501


        :return: The unique_apps_count of this InlineResponse20034EnterpriseSummary.  # noqa: E501
        :rtype: str
        """
        return self._unique_apps_count

    @unique_apps_count.setter
    def unique_apps_count(self, unique_apps_count):
        """Sets the unique_apps_count of this InlineResponse20034EnterpriseSummary.


        :param unique_apps_count: The unique_apps_count of this InlineResponse20034EnterpriseSummary.  # noqa: E501
        :type: str
        """

        self._unique_apps_count = unique_apps_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20034EnterpriseSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20034EnterpriseSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
