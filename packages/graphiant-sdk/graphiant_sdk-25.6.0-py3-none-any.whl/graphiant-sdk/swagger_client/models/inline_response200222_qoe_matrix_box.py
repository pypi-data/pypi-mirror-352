# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200222QoeMatrixBox(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delay_value': 'str',
        'end_time': 'object',
        'jitter_value': 'str',
        'loss_value': 'str',
        'start_time': 'object',
        'status': 'str',
        'value': 'str'
    }

    attribute_map = {
        'delay_value': 'delayValue',
        'end_time': 'endTime',
        'jitter_value': 'jitterValue',
        'loss_value': 'lossValue',
        'start_time': 'startTime',
        'status': 'status',
        'value': 'value'
    }

    def __init__(self, delay_value=None, end_time=None, jitter_value=None, loss_value=None, start_time=None, status=None, value=None):  # noqa: E501
        """InlineResponse200222QoeMatrixBox - a model defined in Swagger"""  # noqa: E501
        self._delay_value = None
        self._end_time = None
        self._jitter_value = None
        self._loss_value = None
        self._start_time = None
        self._status = None
        self._value = None
        self.discriminator = None
        if delay_value is not None:
            self.delay_value = delay_value
        if end_time is not None:
            self.end_time = end_time
        if jitter_value is not None:
            self.jitter_value = jitter_value
        if loss_value is not None:
            self.loss_value = loss_value
        if start_time is not None:
            self.start_time = start_time
        if status is not None:
            self.status = status
        if value is not None:
            self.value = value

    @property
    def delay_value(self):
        """Gets the delay_value of this InlineResponse200222QoeMatrixBox.  # noqa: E501


        :return: The delay_value of this InlineResponse200222QoeMatrixBox.  # noqa: E501
        :rtype: str
        """
        return self._delay_value

    @delay_value.setter
    def delay_value(self, delay_value):
        """Sets the delay_value of this InlineResponse200222QoeMatrixBox.


        :param delay_value: The delay_value of this InlineResponse200222QoeMatrixBox.  # noqa: E501
        :type: str
        """

        self._delay_value = delay_value

    @property
    def end_time(self):
        """Gets the end_time of this InlineResponse200222QoeMatrixBox.  # noqa: E501


        :return: The end_time of this InlineResponse200222QoeMatrixBox.  # noqa: E501
        :rtype: object
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this InlineResponse200222QoeMatrixBox.


        :param end_time: The end_time of this InlineResponse200222QoeMatrixBox.  # noqa: E501
        :type: object
        """

        self._end_time = end_time

    @property
    def jitter_value(self):
        """Gets the jitter_value of this InlineResponse200222QoeMatrixBox.  # noqa: E501


        :return: The jitter_value of this InlineResponse200222QoeMatrixBox.  # noqa: E501
        :rtype: str
        """
        return self._jitter_value

    @jitter_value.setter
    def jitter_value(self, jitter_value):
        """Sets the jitter_value of this InlineResponse200222QoeMatrixBox.


        :param jitter_value: The jitter_value of this InlineResponse200222QoeMatrixBox.  # noqa: E501
        :type: str
        """

        self._jitter_value = jitter_value

    @property
    def loss_value(self):
        """Gets the loss_value of this InlineResponse200222QoeMatrixBox.  # noqa: E501


        :return: The loss_value of this InlineResponse200222QoeMatrixBox.  # noqa: E501
        :rtype: str
        """
        return self._loss_value

    @loss_value.setter
    def loss_value(self, loss_value):
        """Sets the loss_value of this InlineResponse200222QoeMatrixBox.


        :param loss_value: The loss_value of this InlineResponse200222QoeMatrixBox.  # noqa: E501
        :type: str
        """

        self._loss_value = loss_value

    @property
    def start_time(self):
        """Gets the start_time of this InlineResponse200222QoeMatrixBox.  # noqa: E501


        :return: The start_time of this InlineResponse200222QoeMatrixBox.  # noqa: E501
        :rtype: object
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InlineResponse200222QoeMatrixBox.


        :param start_time: The start_time of this InlineResponse200222QoeMatrixBox.  # noqa: E501
        :type: object
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this InlineResponse200222QoeMatrixBox.  # noqa: E501


        :return: The status of this InlineResponse200222QoeMatrixBox.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200222QoeMatrixBox.


        :param status: The status of this InlineResponse200222QoeMatrixBox.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def value(self):
        """Gets the value of this InlineResponse200222QoeMatrixBox.  # noqa: E501


        :return: The value of this InlineResponse200222QoeMatrixBox.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InlineResponse200222QoeMatrixBox.


        :param value: The value of this InlineResponse200222QoeMatrixBox.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200222QoeMatrixBox, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200222QoeMatrixBox):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
