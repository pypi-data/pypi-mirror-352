# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20051Archives(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'archive_file_name': 'str',
        'archive_id': 'str',
        'archive_url': 'str',
        'created': 'V1devicesbringuptokenValidTillTs',
        'creator': 'str',
        'description': 'str',
        'progress': 'str',
        'status': 'str',
        'type': 'str'
    }

    attribute_map = {
        'archive_file_name': 'archiveFileName',
        'archive_id': 'archiveId',
        'archive_url': 'archiveUrl',
        'created': 'created',
        'creator': 'creator',
        'description': 'description',
        'progress': 'progress',
        'status': 'status',
        'type': 'type'
    }

    def __init__(self, archive_file_name=None, archive_id=None, archive_url=None, created=None, creator=None, description=None, progress=None, status=None, type=None):  # noqa: E501
        """InlineResponse20051Archives - a model defined in Swagger"""  # noqa: E501
        self._archive_file_name = None
        self._archive_id = None
        self._archive_url = None
        self._created = None
        self._creator = None
        self._description = None
        self._progress = None
        self._status = None
        self._type = None
        self.discriminator = None
        if archive_file_name is not None:
            self.archive_file_name = archive_file_name
        if archive_id is not None:
            self.archive_id = archive_id
        if archive_url is not None:
            self.archive_url = archive_url
        if created is not None:
            self.created = created
        if creator is not None:
            self.creator = creator
        if description is not None:
            self.description = description
        if progress is not None:
            self.progress = progress
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type

    @property
    def archive_file_name(self):
        """Gets the archive_file_name of this InlineResponse20051Archives.  # noqa: E501


        :return: The archive_file_name of this InlineResponse20051Archives.  # noqa: E501
        :rtype: str
        """
        return self._archive_file_name

    @archive_file_name.setter
    def archive_file_name(self, archive_file_name):
        """Sets the archive_file_name of this InlineResponse20051Archives.


        :param archive_file_name: The archive_file_name of this InlineResponse20051Archives.  # noqa: E501
        :type: str
        """

        self._archive_file_name = archive_file_name

    @property
    def archive_id(self):
        """Gets the archive_id of this InlineResponse20051Archives.  # noqa: E501


        :return: The archive_id of this InlineResponse20051Archives.  # noqa: E501
        :rtype: str
        """
        return self._archive_id

    @archive_id.setter
    def archive_id(self, archive_id):
        """Sets the archive_id of this InlineResponse20051Archives.


        :param archive_id: The archive_id of this InlineResponse20051Archives.  # noqa: E501
        :type: str
        """

        self._archive_id = archive_id

    @property
    def archive_url(self):
        """Gets the archive_url of this InlineResponse20051Archives.  # noqa: E501


        :return: The archive_url of this InlineResponse20051Archives.  # noqa: E501
        :rtype: str
        """
        return self._archive_url

    @archive_url.setter
    def archive_url(self, archive_url):
        """Sets the archive_url of this InlineResponse20051Archives.


        :param archive_url: The archive_url of this InlineResponse20051Archives.  # noqa: E501
        :type: str
        """

        self._archive_url = archive_url

    @property
    def created(self):
        """Gets the created of this InlineResponse20051Archives.  # noqa: E501


        :return: The created of this InlineResponse20051Archives.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this InlineResponse20051Archives.


        :param created: The created of this InlineResponse20051Archives.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._created = created

    @property
    def creator(self):
        """Gets the creator of this InlineResponse20051Archives.  # noqa: E501


        :return: The creator of this InlineResponse20051Archives.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this InlineResponse20051Archives.


        :param creator: The creator of this InlineResponse20051Archives.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def description(self):
        """Gets the description of this InlineResponse20051Archives.  # noqa: E501


        :return: The description of this InlineResponse20051Archives.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse20051Archives.


        :param description: The description of this InlineResponse20051Archives.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def progress(self):
        """Gets the progress of this InlineResponse20051Archives.  # noqa: E501


        :return: The progress of this InlineResponse20051Archives.  # noqa: E501
        :rtype: str
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this InlineResponse20051Archives.


        :param progress: The progress of this InlineResponse20051Archives.  # noqa: E501
        :type: str
        """

        self._progress = progress

    @property
    def status(self):
        """Gets the status of this InlineResponse20051Archives.  # noqa: E501


        :return: The status of this InlineResponse20051Archives.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20051Archives.


        :param status: The status of this InlineResponse20051Archives.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this InlineResponse20051Archives.  # noqa: E501


        :return: The type of this InlineResponse20051Archives.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20051Archives.


        :param type: The type of this InlineResponse20051Archives.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20051Archives, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20051Archives):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
