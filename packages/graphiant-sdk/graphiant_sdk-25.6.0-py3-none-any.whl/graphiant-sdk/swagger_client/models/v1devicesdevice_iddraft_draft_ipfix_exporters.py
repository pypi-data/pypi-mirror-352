# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1devicesdeviceIddraftDraftIpfixExporters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_address': 'str',
        'destination_port': 'str',
        'error_message': 'str',
        'global_id': 'str',
        'id': 'str',
        'monitored_segments': 'list[str]',
        'name': 'str',
        'sample_mode': 'str',
        'sample_rate': 'str',
        'source_address': 'str',
        'source_interface': 'str',
        'source_segment': 'str',
        'status': 'str',
        'vrf_id': 'str',
        'vrf_name': 'str'
    }

    attribute_map = {
        'destination_address': 'destinationAddress',
        'destination_port': 'destinationPort',
        'error_message': 'errorMessage',
        'global_id': 'globalId',
        'id': 'id',
        'monitored_segments': 'monitoredSegments',
        'name': 'name',
        'sample_mode': 'sampleMode',
        'sample_rate': 'sampleRate',
        'source_address': 'sourceAddress',
        'source_interface': 'sourceInterface',
        'source_segment': 'sourceSegment',
        'status': 'status',
        'vrf_id': 'vrfId',
        'vrf_name': 'vrfName'
    }

    def __init__(self, destination_address=None, destination_port=None, error_message=None, global_id=None, id=None, monitored_segments=None, name=None, sample_mode=None, sample_rate=None, source_address=None, source_interface=None, source_segment=None, status=None, vrf_id=None, vrf_name=None):  # noqa: E501
        """V1devicesdeviceIddraftDraftIpfixExporters - a model defined in Swagger"""  # noqa: E501
        self._destination_address = None
        self._destination_port = None
        self._error_message = None
        self._global_id = None
        self._id = None
        self._monitored_segments = None
        self._name = None
        self._sample_mode = None
        self._sample_rate = None
        self._source_address = None
        self._source_interface = None
        self._source_segment = None
        self._status = None
        self._vrf_id = None
        self._vrf_name = None
        self.discriminator = None
        if destination_address is not None:
            self.destination_address = destination_address
        if destination_port is not None:
            self.destination_port = destination_port
        if error_message is not None:
            self.error_message = error_message
        if global_id is not None:
            self.global_id = global_id
        if id is not None:
            self.id = id
        if monitored_segments is not None:
            self.monitored_segments = monitored_segments
        if name is not None:
            self.name = name
        if sample_mode is not None:
            self.sample_mode = sample_mode
        if sample_rate is not None:
            self.sample_rate = sample_rate
        if source_address is not None:
            self.source_address = source_address
        if source_interface is not None:
            self.source_interface = source_interface
        if source_segment is not None:
            self.source_segment = source_segment
        if status is not None:
            self.status = status
        if vrf_id is not None:
            self.vrf_id = vrf_id
        if vrf_name is not None:
            self.vrf_name = vrf_name

    @property
    def destination_address(self):
        """Gets the destination_address of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501


        :return: The destination_address of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :rtype: str
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, destination_address):
        """Sets the destination_address of this V1devicesdeviceIddraftDraftIpfixExporters.


        :param destination_address: The destination_address of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :type: str
        """

        self._destination_address = destination_address

    @property
    def destination_port(self):
        """Gets the destination_port of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501


        :return: The destination_port of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :rtype: str
        """
        return self._destination_port

    @destination_port.setter
    def destination_port(self, destination_port):
        """Sets the destination_port of this V1devicesdeviceIddraftDraftIpfixExporters.


        :param destination_port: The destination_port of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :type: str
        """

        self._destination_port = destination_port

    @property
    def error_message(self):
        """Gets the error_message of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501


        :return: The error_message of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this V1devicesdeviceIddraftDraftIpfixExporters.


        :param error_message: The error_message of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def global_id(self):
        """Gets the global_id of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501


        :return: The global_id of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :rtype: str
        """
        return self._global_id

    @global_id.setter
    def global_id(self, global_id):
        """Sets the global_id of this V1devicesdeviceIddraftDraftIpfixExporters.


        :param global_id: The global_id of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :type: str
        """

        self._global_id = global_id

    @property
    def id(self):
        """Gets the id of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501


        :return: The id of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1devicesdeviceIddraftDraftIpfixExporters.


        :param id: The id of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def monitored_segments(self):
        """Gets the monitored_segments of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501


        :return: The monitored_segments of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :rtype: list[str]
        """
        return self._monitored_segments

    @monitored_segments.setter
    def monitored_segments(self, monitored_segments):
        """Sets the monitored_segments of this V1devicesdeviceIddraftDraftIpfixExporters.


        :param monitored_segments: The monitored_segments of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :type: list[str]
        """

        self._monitored_segments = monitored_segments

    @property
    def name(self):
        """Gets the name of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501


        :return: The name of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1devicesdeviceIddraftDraftIpfixExporters.


        :param name: The name of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sample_mode(self):
        """Gets the sample_mode of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501


        :return: The sample_mode of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :rtype: str
        """
        return self._sample_mode

    @sample_mode.setter
    def sample_mode(self, sample_mode):
        """Sets the sample_mode of this V1devicesdeviceIddraftDraftIpfixExporters.


        :param sample_mode: The sample_mode of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :type: str
        """

        self._sample_mode = sample_mode

    @property
    def sample_rate(self):
        """Gets the sample_rate of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501


        :return: The sample_rate of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :rtype: str
        """
        return self._sample_rate

    @sample_rate.setter
    def sample_rate(self, sample_rate):
        """Sets the sample_rate of this V1devicesdeviceIddraftDraftIpfixExporters.


        :param sample_rate: The sample_rate of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :type: str
        """

        self._sample_rate = sample_rate

    @property
    def source_address(self):
        """Gets the source_address of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501


        :return: The source_address of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this V1devicesdeviceIddraftDraftIpfixExporters.


        :param source_address: The source_address of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :type: str
        """

        self._source_address = source_address

    @property
    def source_interface(self):
        """Gets the source_interface of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501


        :return: The source_interface of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :rtype: str
        """
        return self._source_interface

    @source_interface.setter
    def source_interface(self, source_interface):
        """Sets the source_interface of this V1devicesdeviceIddraftDraftIpfixExporters.


        :param source_interface: The source_interface of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :type: str
        """

        self._source_interface = source_interface

    @property
    def source_segment(self):
        """Gets the source_segment of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501


        :return: The source_segment of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :rtype: str
        """
        return self._source_segment

    @source_segment.setter
    def source_segment(self, source_segment):
        """Sets the source_segment of this V1devicesdeviceIddraftDraftIpfixExporters.


        :param source_segment: The source_segment of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :type: str
        """

        self._source_segment = source_segment

    @property
    def status(self):
        """Gets the status of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501


        :return: The status of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V1devicesdeviceIddraftDraftIpfixExporters.


        :param status: The status of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def vrf_id(self):
        """Gets the vrf_id of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501


        :return: The vrf_id of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :rtype: str
        """
        return self._vrf_id

    @vrf_id.setter
    def vrf_id(self, vrf_id):
        """Sets the vrf_id of this V1devicesdeviceIddraftDraftIpfixExporters.


        :param vrf_id: The vrf_id of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :type: str
        """

        self._vrf_id = vrf_id

    @property
    def vrf_name(self):
        """Gets the vrf_name of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501


        :return: The vrf_name of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :rtype: str
        """
        return self._vrf_name

    @vrf_name.setter
    def vrf_name(self, vrf_name):
        """Sets the vrf_name of this V1devicesdeviceIddraftDraftIpfixExporters.


        :param vrf_name: The vrf_name of this V1devicesdeviceIddraftDraftIpfixExporters.  # noqa: E501
        :type: str
        """

        self._vrf_name = vrf_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1devicesdeviceIddraftDraftIpfixExporters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1devicesdeviceIddraftDraftIpfixExporters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
