# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200226Devices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'control_status': 'str',
        'data_status': 'str',
        'device_id': 'str',
        'device_name': 'str',
        'device_role': 'str',
        'overall_status': 'str',
        'region': 'InlineResponse200224Region',
        'selected_status': 'str',
        'system_status': 'str'
    }

    attribute_map = {
        'control_status': 'controlStatus',
        'data_status': 'dataStatus',
        'device_id': 'deviceId',
        'device_name': 'deviceName',
        'device_role': 'deviceRole',
        'overall_status': 'overallStatus',
        'region': 'region',
        'selected_status': 'selectedStatus',
        'system_status': 'systemStatus'
    }

    def __init__(self, control_status=None, data_status=None, device_id=None, device_name=None, device_role=None, overall_status=None, region=None, selected_status=None, system_status=None):  # noqa: E501
        """InlineResponse200226Devices - a model defined in Swagger"""  # noqa: E501
        self._control_status = None
        self._data_status = None
        self._device_id = None
        self._device_name = None
        self._device_role = None
        self._overall_status = None
        self._region = None
        self._selected_status = None
        self._system_status = None
        self.discriminator = None
        if control_status is not None:
            self.control_status = control_status
        if data_status is not None:
            self.data_status = data_status
        if device_id is not None:
            self.device_id = device_id
        if device_name is not None:
            self.device_name = device_name
        if device_role is not None:
            self.device_role = device_role
        if overall_status is not None:
            self.overall_status = overall_status
        if region is not None:
            self.region = region
        if selected_status is not None:
            self.selected_status = selected_status
        if system_status is not None:
            self.system_status = system_status

    @property
    def control_status(self):
        """Gets the control_status of this InlineResponse200226Devices.  # noqa: E501


        :return: The control_status of this InlineResponse200226Devices.  # noqa: E501
        :rtype: str
        """
        return self._control_status

    @control_status.setter
    def control_status(self, control_status):
        """Sets the control_status of this InlineResponse200226Devices.


        :param control_status: The control_status of this InlineResponse200226Devices.  # noqa: E501
        :type: str
        """

        self._control_status = control_status

    @property
    def data_status(self):
        """Gets the data_status of this InlineResponse200226Devices.  # noqa: E501


        :return: The data_status of this InlineResponse200226Devices.  # noqa: E501
        :rtype: str
        """
        return self._data_status

    @data_status.setter
    def data_status(self, data_status):
        """Sets the data_status of this InlineResponse200226Devices.


        :param data_status: The data_status of this InlineResponse200226Devices.  # noqa: E501
        :type: str
        """

        self._data_status = data_status

    @property
    def device_id(self):
        """Gets the device_id of this InlineResponse200226Devices.  # noqa: E501


        :return: The device_id of this InlineResponse200226Devices.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this InlineResponse200226Devices.


        :param device_id: The device_id of this InlineResponse200226Devices.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def device_name(self):
        """Gets the device_name of this InlineResponse200226Devices.  # noqa: E501


        :return: The device_name of this InlineResponse200226Devices.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this InlineResponse200226Devices.


        :param device_name: The device_name of this InlineResponse200226Devices.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def device_role(self):
        """Gets the device_role of this InlineResponse200226Devices.  # noqa: E501


        :return: The device_role of this InlineResponse200226Devices.  # noqa: E501
        :rtype: str
        """
        return self._device_role

    @device_role.setter
    def device_role(self, device_role):
        """Sets the device_role of this InlineResponse200226Devices.


        :param device_role: The device_role of this InlineResponse200226Devices.  # noqa: E501
        :type: str
        """

        self._device_role = device_role

    @property
    def overall_status(self):
        """Gets the overall_status of this InlineResponse200226Devices.  # noqa: E501


        :return: The overall_status of this InlineResponse200226Devices.  # noqa: E501
        :rtype: str
        """
        return self._overall_status

    @overall_status.setter
    def overall_status(self, overall_status):
        """Sets the overall_status of this InlineResponse200226Devices.


        :param overall_status: The overall_status of this InlineResponse200226Devices.  # noqa: E501
        :type: str
        """

        self._overall_status = overall_status

    @property
    def region(self):
        """Gets the region of this InlineResponse200226Devices.  # noqa: E501


        :return: The region of this InlineResponse200226Devices.  # noqa: E501
        :rtype: InlineResponse200224Region
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this InlineResponse200226Devices.


        :param region: The region of this InlineResponse200226Devices.  # noqa: E501
        :type: InlineResponse200224Region
        """

        self._region = region

    @property
    def selected_status(self):
        """Gets the selected_status of this InlineResponse200226Devices.  # noqa: E501


        :return: The selected_status of this InlineResponse200226Devices.  # noqa: E501
        :rtype: str
        """
        return self._selected_status

    @selected_status.setter
    def selected_status(self, selected_status):
        """Sets the selected_status of this InlineResponse200226Devices.


        :param selected_status: The selected_status of this InlineResponse200226Devices.  # noqa: E501
        :type: str
        """

        self._selected_status = selected_status

    @property
    def system_status(self):
        """Gets the system_status of this InlineResponse200226Devices.  # noqa: E501


        :return: The system_status of this InlineResponse200226Devices.  # noqa: E501
        :rtype: str
        """
        return self._system_status

    @system_status.setter
    def system_status(self, system_status):
        """Sets the system_status of this InlineResponse200226Devices.


        :param system_status: The system_status of this InlineResponse200226Devices.  # noqa: E501
        :type: str
        """

        self._system_status = system_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200226Devices, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200226Devices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
