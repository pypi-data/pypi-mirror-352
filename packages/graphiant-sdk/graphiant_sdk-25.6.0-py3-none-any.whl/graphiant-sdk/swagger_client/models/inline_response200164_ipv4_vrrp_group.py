# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200164Ipv4VrrpGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accept_mode': 'str',
        'allow_inter_operability': 'str',
        'description': 'str',
        'effective_priority': 'str',
        'enabled': 'str',
        'group_members': 'list[object]',
        'id': 'str',
        'name': 'str',
        'preempt': 'str',
        'priority': 'str',
        'state': 'str',
        'tracked_interfaces': 'list[object]',
        'virtual_ip_address': 'str',
        'virtual_mac_address': 'str'
    }

    attribute_map = {
        'accept_mode': 'acceptMode',
        'allow_inter_operability': 'allowInterOperability',
        'description': 'description',
        'effective_priority': 'effectivePriority',
        'enabled': 'enabled',
        'group_members': 'groupMembers',
        'id': 'id',
        'name': 'name',
        'preempt': 'preempt',
        'priority': 'priority',
        'state': 'state',
        'tracked_interfaces': 'trackedInterfaces',
        'virtual_ip_address': 'virtualIpAddress',
        'virtual_mac_address': 'virtualMacAddress'
    }

    def __init__(self, accept_mode=None, allow_inter_operability=None, description=None, effective_priority=None, enabled=None, group_members=None, id=None, name=None, preempt=None, priority=None, state=None, tracked_interfaces=None, virtual_ip_address=None, virtual_mac_address=None):  # noqa: E501
        """InlineResponse200164Ipv4VrrpGroup - a model defined in Swagger"""  # noqa: E501
        self._accept_mode = None
        self._allow_inter_operability = None
        self._description = None
        self._effective_priority = None
        self._enabled = None
        self._group_members = None
        self._id = None
        self._name = None
        self._preempt = None
        self._priority = None
        self._state = None
        self._tracked_interfaces = None
        self._virtual_ip_address = None
        self._virtual_mac_address = None
        self.discriminator = None
        if accept_mode is not None:
            self.accept_mode = accept_mode
        if allow_inter_operability is not None:
            self.allow_inter_operability = allow_inter_operability
        if description is not None:
            self.description = description
        if effective_priority is not None:
            self.effective_priority = effective_priority
        if enabled is not None:
            self.enabled = enabled
        if group_members is not None:
            self.group_members = group_members
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if preempt is not None:
            self.preempt = preempt
        if priority is not None:
            self.priority = priority
        if state is not None:
            self.state = state
        if tracked_interfaces is not None:
            self.tracked_interfaces = tracked_interfaces
        if virtual_ip_address is not None:
            self.virtual_ip_address = virtual_ip_address
        if virtual_mac_address is not None:
            self.virtual_mac_address = virtual_mac_address

    @property
    def accept_mode(self):
        """Gets the accept_mode of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501


        :return: The accept_mode of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :rtype: str
        """
        return self._accept_mode

    @accept_mode.setter
    def accept_mode(self, accept_mode):
        """Sets the accept_mode of this InlineResponse200164Ipv4VrrpGroup.


        :param accept_mode: The accept_mode of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :type: str
        """

        self._accept_mode = accept_mode

    @property
    def allow_inter_operability(self):
        """Gets the allow_inter_operability of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501


        :return: The allow_inter_operability of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :rtype: str
        """
        return self._allow_inter_operability

    @allow_inter_operability.setter
    def allow_inter_operability(self, allow_inter_operability):
        """Sets the allow_inter_operability of this InlineResponse200164Ipv4VrrpGroup.


        :param allow_inter_operability: The allow_inter_operability of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :type: str
        """

        self._allow_inter_operability = allow_inter_operability

    @property
    def description(self):
        """Gets the description of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501


        :return: The description of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse200164Ipv4VrrpGroup.


        :param description: The description of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def effective_priority(self):
        """Gets the effective_priority of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501


        :return: The effective_priority of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :rtype: str
        """
        return self._effective_priority

    @effective_priority.setter
    def effective_priority(self, effective_priority):
        """Sets the effective_priority of this InlineResponse200164Ipv4VrrpGroup.


        :param effective_priority: The effective_priority of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :type: str
        """

        self._effective_priority = effective_priority

    @property
    def enabled(self):
        """Gets the enabled of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501


        :return: The enabled of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this InlineResponse200164Ipv4VrrpGroup.


        :param enabled: The enabled of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :type: str
        """

        self._enabled = enabled

    @property
    def group_members(self):
        """Gets the group_members of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501


        :return: The group_members of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :rtype: list[object]
        """
        return self._group_members

    @group_members.setter
    def group_members(self, group_members):
        """Sets the group_members of this InlineResponse200164Ipv4VrrpGroup.


        :param group_members: The group_members of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :type: list[object]
        """

        self._group_members = group_members

    @property
    def id(self):
        """Gets the id of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501


        :return: The id of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200164Ipv4VrrpGroup.


        :param id: The id of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501


        :return: The name of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200164Ipv4VrrpGroup.


        :param name: The name of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def preempt(self):
        """Gets the preempt of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501


        :return: The preempt of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :rtype: str
        """
        return self._preempt

    @preempt.setter
    def preempt(self, preempt):
        """Sets the preempt of this InlineResponse200164Ipv4VrrpGroup.


        :param preempt: The preempt of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :type: str
        """

        self._preempt = preempt

    @property
    def priority(self):
        """Gets the priority of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501


        :return: The priority of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this InlineResponse200164Ipv4VrrpGroup.


        :param priority: The priority of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def state(self):
        """Gets the state of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501


        :return: The state of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse200164Ipv4VrrpGroup.


        :param state: The state of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def tracked_interfaces(self):
        """Gets the tracked_interfaces of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501


        :return: The tracked_interfaces of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :rtype: list[object]
        """
        return self._tracked_interfaces

    @tracked_interfaces.setter
    def tracked_interfaces(self, tracked_interfaces):
        """Sets the tracked_interfaces of this InlineResponse200164Ipv4VrrpGroup.


        :param tracked_interfaces: The tracked_interfaces of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :type: list[object]
        """

        self._tracked_interfaces = tracked_interfaces

    @property
    def virtual_ip_address(self):
        """Gets the virtual_ip_address of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501


        :return: The virtual_ip_address of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :rtype: str
        """
        return self._virtual_ip_address

    @virtual_ip_address.setter
    def virtual_ip_address(self, virtual_ip_address):
        """Sets the virtual_ip_address of this InlineResponse200164Ipv4VrrpGroup.


        :param virtual_ip_address: The virtual_ip_address of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :type: str
        """

        self._virtual_ip_address = virtual_ip_address

    @property
    def virtual_mac_address(self):
        """Gets the virtual_mac_address of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501


        :return: The virtual_mac_address of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :rtype: str
        """
        return self._virtual_mac_address

    @virtual_mac_address.setter
    def virtual_mac_address(self, virtual_mac_address):
        """Sets the virtual_mac_address of this InlineResponse200164Ipv4VrrpGroup.


        :param virtual_mac_address: The virtual_mac_address of this InlineResponse200164Ipv4VrrpGroup.  # noqa: E501
        :type: str
        """

        self._virtual_mac_address = virtual_mac_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200164Ipv4VrrpGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200164Ipv4VrrpGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
