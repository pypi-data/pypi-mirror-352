# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1devicesdeviceIdconfigCorePrometheus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rule_groups': 'list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]',
        'sink': 'V1devicesdeviceIdconfigCorePrometheusSink',
        'sysdb_monitors': 'list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]'
    }

    attribute_map = {
        'rule_groups': 'ruleGroups',
        'sink': 'sink',
        'sysdb_monitors': 'sysdbMonitors'
    }

    def __init__(self, rule_groups=None, sink=None, sysdb_monitors=None):  # noqa: E501
        """V1devicesdeviceIdconfigCorePrometheus - a model defined in Swagger"""  # noqa: E501
        self._rule_groups = None
        self._sink = None
        self._sysdb_monitors = None
        self.discriminator = None
        if rule_groups is not None:
            self.rule_groups = rule_groups
        if sink is not None:
            self.sink = sink
        if sysdb_monitors is not None:
            self.sysdb_monitors = sysdb_monitors

    @property
    def rule_groups(self):
        """Gets the rule_groups of this V1devicesdeviceIdconfigCorePrometheus.  # noqa: E501


        :return: The rule_groups of this V1devicesdeviceIdconfigCorePrometheus.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]
        """
        return self._rule_groups

    @rule_groups.setter
    def rule_groups(self, rule_groups):
        """Sets the rule_groups of this V1devicesdeviceIdconfigCorePrometheus.


        :param rule_groups: The rule_groups of this V1devicesdeviceIdconfigCorePrometheus.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]
        """

        self._rule_groups = rule_groups

    @property
    def sink(self):
        """Gets the sink of this V1devicesdeviceIdconfigCorePrometheus.  # noqa: E501


        :return: The sink of this V1devicesdeviceIdconfigCorePrometheus.  # noqa: E501
        :rtype: V1devicesdeviceIdconfigCorePrometheusSink
        """
        return self._sink

    @sink.setter
    def sink(self, sink):
        """Sets the sink of this V1devicesdeviceIdconfigCorePrometheus.


        :param sink: The sink of this V1devicesdeviceIdconfigCorePrometheus.  # noqa: E501
        :type: V1devicesdeviceIdconfigCorePrometheusSink
        """

        self._sink = sink

    @property
    def sysdb_monitors(self):
        """Gets the sysdb_monitors of this V1devicesdeviceIdconfigCorePrometheus.  # noqa: E501


        :return: The sysdb_monitors of this V1devicesdeviceIdconfigCorePrometheus.  # noqa: E501
        :rtype: list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]
        """
        return self._sysdb_monitors

    @sysdb_monitors.setter
    def sysdb_monitors(self, sysdb_monitors):
        """Sets the sysdb_monitors of this V1devicesdeviceIdconfigCorePrometheus.


        :param sysdb_monitors: The sysdb_monitors of this V1devicesdeviceIdconfigCorePrometheus.  # noqa: E501
        :type: list[V1devicesdeviceIdconfigCoreCoreVrfBgpAggregations]
        """

        self._sysdb_monitors = sysdb_monitors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1devicesdeviceIdconfigCorePrometheus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1devicesdeviceIdconfigCorePrometheus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
