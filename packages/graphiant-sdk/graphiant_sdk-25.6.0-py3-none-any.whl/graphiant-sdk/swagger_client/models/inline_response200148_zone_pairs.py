# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200148ZonePairs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inside': 'str',
        'outside': 'str',
        'security_rulesets': 'list[InlineResponse200148SecurityRulesets]'
    }

    attribute_map = {
        'inside': 'inside',
        'outside': 'outside',
        'security_rulesets': 'securityRulesets'
    }

    def __init__(self, inside=None, outside=None, security_rulesets=None):  # noqa: E501
        """InlineResponse200148ZonePairs - a model defined in Swagger"""  # noqa: E501
        self._inside = None
        self._outside = None
        self._security_rulesets = None
        self.discriminator = None
        if inside is not None:
            self.inside = inside
        if outside is not None:
            self.outside = outside
        if security_rulesets is not None:
            self.security_rulesets = security_rulesets

    @property
    def inside(self):
        """Gets the inside of this InlineResponse200148ZonePairs.  # noqa: E501


        :return: The inside of this InlineResponse200148ZonePairs.  # noqa: E501
        :rtype: str
        """
        return self._inside

    @inside.setter
    def inside(self, inside):
        """Sets the inside of this InlineResponse200148ZonePairs.


        :param inside: The inside of this InlineResponse200148ZonePairs.  # noqa: E501
        :type: str
        """

        self._inside = inside

    @property
    def outside(self):
        """Gets the outside of this InlineResponse200148ZonePairs.  # noqa: E501


        :return: The outside of this InlineResponse200148ZonePairs.  # noqa: E501
        :rtype: str
        """
        return self._outside

    @outside.setter
    def outside(self, outside):
        """Sets the outside of this InlineResponse200148ZonePairs.


        :param outside: The outside of this InlineResponse200148ZonePairs.  # noqa: E501
        :type: str
        """

        self._outside = outside

    @property
    def security_rulesets(self):
        """Gets the security_rulesets of this InlineResponse200148ZonePairs.  # noqa: E501


        :return: The security_rulesets of this InlineResponse200148ZonePairs.  # noqa: E501
        :rtype: list[InlineResponse200148SecurityRulesets]
        """
        return self._security_rulesets

    @security_rulesets.setter
    def security_rulesets(self, security_rulesets):
        """Sets the security_rulesets of this InlineResponse200148ZonePairs.


        :param security_rulesets: The security_rulesets of this InlineResponse200148ZonePairs.  # noqa: E501
        :type: list[InlineResponse200148SecurityRulesets]
        """

        self._security_rulesets = security_rulesets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200148ZonePairs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200148ZonePairs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
