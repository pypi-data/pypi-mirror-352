# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2notificationcreateNotificationBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'duration': 'str',
        'enabled': 'str',
        'frequency': 'str',
        'message_body': 'str',
        'notification_name': 'str',
        'opsgenie_list': 'list[str]',
        'opsramp_list': 'list[str]',
        'recipient_list': 'list[str]',
        'teams_list': 'list[str]'
    }

    attribute_map = {
        'description': 'description',
        'duration': 'duration',
        'enabled': 'enabled',
        'frequency': 'frequency',
        'message_body': 'messageBody',
        'notification_name': 'notificationName',
        'opsgenie_list': 'opsgenieList',
        'opsramp_list': 'opsrampList',
        'recipient_list': 'recipientList',
        'teams_list': 'teamsList'
    }

    def __init__(self, description=None, duration=None, enabled=None, frequency=None, message_body=None, notification_name=None, opsgenie_list=None, opsramp_list=None, recipient_list=None, teams_list=None):  # noqa: E501
        """V2notificationcreateNotificationBody - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._duration = None
        self._enabled = None
        self._frequency = None
        self._message_body = None
        self._notification_name = None
        self._opsgenie_list = None
        self._opsramp_list = None
        self._recipient_list = None
        self._teams_list = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if duration is not None:
            self.duration = duration
        if enabled is not None:
            self.enabled = enabled
        if frequency is not None:
            self.frequency = frequency
        if message_body is not None:
            self.message_body = message_body
        if notification_name is not None:
            self.notification_name = notification_name
        if opsgenie_list is not None:
            self.opsgenie_list = opsgenie_list
        if opsramp_list is not None:
            self.opsramp_list = opsramp_list
        if recipient_list is not None:
            self.recipient_list = recipient_list
        if teams_list is not None:
            self.teams_list = teams_list

    @property
    def description(self):
        """Gets the description of this V2notificationcreateNotificationBody.  # noqa: E501


        :return: The description of this V2notificationcreateNotificationBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V2notificationcreateNotificationBody.


        :param description: The description of this V2notificationcreateNotificationBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def duration(self):
        """Gets the duration of this V2notificationcreateNotificationBody.  # noqa: E501


        :return: The duration of this V2notificationcreateNotificationBody.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this V2notificationcreateNotificationBody.


        :param duration: The duration of this V2notificationcreateNotificationBody.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def enabled(self):
        """Gets the enabled of this V2notificationcreateNotificationBody.  # noqa: E501


        :return: The enabled of this V2notificationcreateNotificationBody.  # noqa: E501
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this V2notificationcreateNotificationBody.


        :param enabled: The enabled of this V2notificationcreateNotificationBody.  # noqa: E501
        :type: str
        """

        self._enabled = enabled

    @property
    def frequency(self):
        """Gets the frequency of this V2notificationcreateNotificationBody.  # noqa: E501


        :return: The frequency of this V2notificationcreateNotificationBody.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this V2notificationcreateNotificationBody.


        :param frequency: The frequency of this V2notificationcreateNotificationBody.  # noqa: E501
        :type: str
        """

        self._frequency = frequency

    @property
    def message_body(self):
        """Gets the message_body of this V2notificationcreateNotificationBody.  # noqa: E501


        :return: The message_body of this V2notificationcreateNotificationBody.  # noqa: E501
        :rtype: str
        """
        return self._message_body

    @message_body.setter
    def message_body(self, message_body):
        """Sets the message_body of this V2notificationcreateNotificationBody.


        :param message_body: The message_body of this V2notificationcreateNotificationBody.  # noqa: E501
        :type: str
        """

        self._message_body = message_body

    @property
    def notification_name(self):
        """Gets the notification_name of this V2notificationcreateNotificationBody.  # noqa: E501


        :return: The notification_name of this V2notificationcreateNotificationBody.  # noqa: E501
        :rtype: str
        """
        return self._notification_name

    @notification_name.setter
    def notification_name(self, notification_name):
        """Sets the notification_name of this V2notificationcreateNotificationBody.


        :param notification_name: The notification_name of this V2notificationcreateNotificationBody.  # noqa: E501
        :type: str
        """

        self._notification_name = notification_name

    @property
    def opsgenie_list(self):
        """Gets the opsgenie_list of this V2notificationcreateNotificationBody.  # noqa: E501


        :return: The opsgenie_list of this V2notificationcreateNotificationBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._opsgenie_list

    @opsgenie_list.setter
    def opsgenie_list(self, opsgenie_list):
        """Sets the opsgenie_list of this V2notificationcreateNotificationBody.


        :param opsgenie_list: The opsgenie_list of this V2notificationcreateNotificationBody.  # noqa: E501
        :type: list[str]
        """

        self._opsgenie_list = opsgenie_list

    @property
    def opsramp_list(self):
        """Gets the opsramp_list of this V2notificationcreateNotificationBody.  # noqa: E501


        :return: The opsramp_list of this V2notificationcreateNotificationBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._opsramp_list

    @opsramp_list.setter
    def opsramp_list(self, opsramp_list):
        """Sets the opsramp_list of this V2notificationcreateNotificationBody.


        :param opsramp_list: The opsramp_list of this V2notificationcreateNotificationBody.  # noqa: E501
        :type: list[str]
        """

        self._opsramp_list = opsramp_list

    @property
    def recipient_list(self):
        """Gets the recipient_list of this V2notificationcreateNotificationBody.  # noqa: E501


        :return: The recipient_list of this V2notificationcreateNotificationBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._recipient_list

    @recipient_list.setter
    def recipient_list(self, recipient_list):
        """Sets the recipient_list of this V2notificationcreateNotificationBody.


        :param recipient_list: The recipient_list of this V2notificationcreateNotificationBody.  # noqa: E501
        :type: list[str]
        """

        self._recipient_list = recipient_list

    @property
    def teams_list(self):
        """Gets the teams_list of this V2notificationcreateNotificationBody.  # noqa: E501


        :return: The teams_list of this V2notificationcreateNotificationBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._teams_list

    @teams_list.setter
    def teams_list(self, teams_list):
        """Sets the teams_list of this V2notificationcreateNotificationBody.


        :param teams_list: The teams_list of this V2notificationcreateNotificationBody.  # noqa: E501
        :type: list[str]
        """

        self._teams_list = teams_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2notificationcreateNotificationBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2notificationcreateNotificationBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
