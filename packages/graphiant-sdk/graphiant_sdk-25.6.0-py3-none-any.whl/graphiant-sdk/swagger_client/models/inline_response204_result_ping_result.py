# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse204ResultPingResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avg_loss': 'str',
        'avg_time': 'str',
        'completed_time': 'V1devicesbringuptokenValidTillTs',
        'max_time': 'str',
        'min_time': 'str',
        'result': 'str'
    }

    attribute_map = {
        'avg_loss': 'avgLoss',
        'avg_time': 'avgTime',
        'completed_time': 'completedTime',
        'max_time': 'maxTime',
        'min_time': 'minTime',
        'result': 'result'
    }

    def __init__(self, avg_loss=None, avg_time=None, completed_time=None, max_time=None, min_time=None, result=None):  # noqa: E501
        """InlineResponse204ResultPingResult - a model defined in Swagger"""  # noqa: E501
        self._avg_loss = None
        self._avg_time = None
        self._completed_time = None
        self._max_time = None
        self._min_time = None
        self._result = None
        self.discriminator = None
        if avg_loss is not None:
            self.avg_loss = avg_loss
        if avg_time is not None:
            self.avg_time = avg_time
        if completed_time is not None:
            self.completed_time = completed_time
        if max_time is not None:
            self.max_time = max_time
        if min_time is not None:
            self.min_time = min_time
        if result is not None:
            self.result = result

    @property
    def avg_loss(self):
        """Gets the avg_loss of this InlineResponse204ResultPingResult.  # noqa: E501


        :return: The avg_loss of this InlineResponse204ResultPingResult.  # noqa: E501
        :rtype: str
        """
        return self._avg_loss

    @avg_loss.setter
    def avg_loss(self, avg_loss):
        """Sets the avg_loss of this InlineResponse204ResultPingResult.


        :param avg_loss: The avg_loss of this InlineResponse204ResultPingResult.  # noqa: E501
        :type: str
        """

        self._avg_loss = avg_loss

    @property
    def avg_time(self):
        """Gets the avg_time of this InlineResponse204ResultPingResult.  # noqa: E501


        :return: The avg_time of this InlineResponse204ResultPingResult.  # noqa: E501
        :rtype: str
        """
        return self._avg_time

    @avg_time.setter
    def avg_time(self, avg_time):
        """Sets the avg_time of this InlineResponse204ResultPingResult.


        :param avg_time: The avg_time of this InlineResponse204ResultPingResult.  # noqa: E501
        :type: str
        """

        self._avg_time = avg_time

    @property
    def completed_time(self):
        """Gets the completed_time of this InlineResponse204ResultPingResult.  # noqa: E501


        :return: The completed_time of this InlineResponse204ResultPingResult.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._completed_time

    @completed_time.setter
    def completed_time(self, completed_time):
        """Sets the completed_time of this InlineResponse204ResultPingResult.


        :param completed_time: The completed_time of this InlineResponse204ResultPingResult.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._completed_time = completed_time

    @property
    def max_time(self):
        """Gets the max_time of this InlineResponse204ResultPingResult.  # noqa: E501


        :return: The max_time of this InlineResponse204ResultPingResult.  # noqa: E501
        :rtype: str
        """
        return self._max_time

    @max_time.setter
    def max_time(self, max_time):
        """Sets the max_time of this InlineResponse204ResultPingResult.


        :param max_time: The max_time of this InlineResponse204ResultPingResult.  # noqa: E501
        :type: str
        """

        self._max_time = max_time

    @property
    def min_time(self):
        """Gets the min_time of this InlineResponse204ResultPingResult.  # noqa: E501


        :return: The min_time of this InlineResponse204ResultPingResult.  # noqa: E501
        :rtype: str
        """
        return self._min_time

    @min_time.setter
    def min_time(self, min_time):
        """Sets the min_time of this InlineResponse204ResultPingResult.


        :param min_time: The min_time of this InlineResponse204ResultPingResult.  # noqa: E501
        :type: str
        """

        self._min_time = min_time

    @property
    def result(self):
        """Gets the result of this InlineResponse204ResultPingResult.  # noqa: E501


        :return: The result of this InlineResponse204ResultPingResult.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this InlineResponse204ResultPingResult.


        :param result: The result of this InlineResponse204ResultPingResult.  # noqa: E501
        :type: str
        """

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse204ResultPingResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse204ResultPingResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
