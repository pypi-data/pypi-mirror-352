# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20047Logs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activity': 'str',
        'actor': 'str',
        'category': 'str',
        'end': 'V1devicesbringuptokenValidTillTs',
        'failed_target_results': 'list[InlineResponse20047FailedTargetResults]',
        'info': 'str',
        'reason': 'str',
        'service': 'str',
        'start': 'V1devicesbringuptokenValidTillTs',
        'status': 'str',
        'targets': 'list[InlineResponse20047FailedTargetResults]'
    }

    attribute_map = {
        'activity': 'activity',
        'actor': 'actor',
        'category': 'category',
        'end': 'end',
        'failed_target_results': 'failedTargetResults',
        'info': 'info',
        'reason': 'reason',
        'service': 'service',
        'start': 'start',
        'status': 'status',
        'targets': 'targets'
    }

    def __init__(self, activity=None, actor=None, category=None, end=None, failed_target_results=None, info=None, reason=None, service=None, start=None, status=None, targets=None):  # noqa: E501
        """InlineResponse20047Logs - a model defined in Swagger"""  # noqa: E501
        self._activity = None
        self._actor = None
        self._category = None
        self._end = None
        self._failed_target_results = None
        self._info = None
        self._reason = None
        self._service = None
        self._start = None
        self._status = None
        self._targets = None
        self.discriminator = None
        if activity is not None:
            self.activity = activity
        if actor is not None:
            self.actor = actor
        if category is not None:
            self.category = category
        if end is not None:
            self.end = end
        if failed_target_results is not None:
            self.failed_target_results = failed_target_results
        if info is not None:
            self.info = info
        if reason is not None:
            self.reason = reason
        if service is not None:
            self.service = service
        if start is not None:
            self.start = start
        if status is not None:
            self.status = status
        if targets is not None:
            self.targets = targets

    @property
    def activity(self):
        """Gets the activity of this InlineResponse20047Logs.  # noqa: E501


        :return: The activity of this InlineResponse20047Logs.  # noqa: E501
        :rtype: str
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this InlineResponse20047Logs.


        :param activity: The activity of this InlineResponse20047Logs.  # noqa: E501
        :type: str
        """

        self._activity = activity

    @property
    def actor(self):
        """Gets the actor of this InlineResponse20047Logs.  # noqa: E501


        :return: The actor of this InlineResponse20047Logs.  # noqa: E501
        :rtype: str
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this InlineResponse20047Logs.


        :param actor: The actor of this InlineResponse20047Logs.  # noqa: E501
        :type: str
        """

        self._actor = actor

    @property
    def category(self):
        """Gets the category of this InlineResponse20047Logs.  # noqa: E501


        :return: The category of this InlineResponse20047Logs.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this InlineResponse20047Logs.


        :param category: The category of this InlineResponse20047Logs.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def end(self):
        """Gets the end of this InlineResponse20047Logs.  # noqa: E501


        :return: The end of this InlineResponse20047Logs.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this InlineResponse20047Logs.


        :param end: The end of this InlineResponse20047Logs.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._end = end

    @property
    def failed_target_results(self):
        """Gets the failed_target_results of this InlineResponse20047Logs.  # noqa: E501


        :return: The failed_target_results of this InlineResponse20047Logs.  # noqa: E501
        :rtype: list[InlineResponse20047FailedTargetResults]
        """
        return self._failed_target_results

    @failed_target_results.setter
    def failed_target_results(self, failed_target_results):
        """Sets the failed_target_results of this InlineResponse20047Logs.


        :param failed_target_results: The failed_target_results of this InlineResponse20047Logs.  # noqa: E501
        :type: list[InlineResponse20047FailedTargetResults]
        """

        self._failed_target_results = failed_target_results

    @property
    def info(self):
        """Gets the info of this InlineResponse20047Logs.  # noqa: E501


        :return: The info of this InlineResponse20047Logs.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this InlineResponse20047Logs.


        :param info: The info of this InlineResponse20047Logs.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def reason(self):
        """Gets the reason of this InlineResponse20047Logs.  # noqa: E501


        :return: The reason of this InlineResponse20047Logs.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this InlineResponse20047Logs.


        :param reason: The reason of this InlineResponse20047Logs.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def service(self):
        """Gets the service of this InlineResponse20047Logs.  # noqa: E501


        :return: The service of this InlineResponse20047Logs.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this InlineResponse20047Logs.


        :param service: The service of this InlineResponse20047Logs.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def start(self):
        """Gets the start of this InlineResponse20047Logs.  # noqa: E501


        :return: The start of this InlineResponse20047Logs.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this InlineResponse20047Logs.


        :param start: The start of this InlineResponse20047Logs.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._start = start

    @property
    def status(self):
        """Gets the status of this InlineResponse20047Logs.  # noqa: E501


        :return: The status of this InlineResponse20047Logs.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20047Logs.


        :param status: The status of this InlineResponse20047Logs.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def targets(self):
        """Gets the targets of this InlineResponse20047Logs.  # noqa: E501


        :return: The targets of this InlineResponse20047Logs.  # noqa: E501
        :rtype: list[InlineResponse20047FailedTargetResults]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this InlineResponse20047Logs.


        :param targets: The targets of this InlineResponse20047Logs.  # noqa: E501
        :type: list[InlineResponse20047FailedTargetResults]
        """

        self._targets = targets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20047Logs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20047Logs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
