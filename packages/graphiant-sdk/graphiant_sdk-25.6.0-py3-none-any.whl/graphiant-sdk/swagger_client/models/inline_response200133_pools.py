# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200133Pools(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_lease_time_secs': 'str',
        'description': 'str',
        'domain_name': 'str',
        'gateway': 'str',
        'id': 'str',
        'interface': 'str',
        'ip_prefix': 'str',
        'ip_version': 'str',
        'leases': 'list[InlineResponse200133Leases]',
        'max_lease_time_secs': 'str',
        'min_lease_time_secs': 'str',
        'name': 'str',
        'nameservers': 'InlineResponse200112Nameservers',
        'ranges': 'list[InlineResponse200112Ranges]',
        'static_leases': 'list[InlineResponse200112StaticLeases]',
        'total_addresses': 'str',
        'utilization': 'str'
    }

    attribute_map = {
        'default_lease_time_secs': 'defaultLeaseTimeSecs',
        'description': 'description',
        'domain_name': 'domainName',
        'gateway': 'gateway',
        'id': 'id',
        'interface': 'interface',
        'ip_prefix': 'ipPrefix',
        'ip_version': 'ipVersion',
        'leases': 'leases',
        'max_lease_time_secs': 'maxLeaseTimeSecs',
        'min_lease_time_secs': 'minLeaseTimeSecs',
        'name': 'name',
        'nameservers': 'nameservers',
        'ranges': 'ranges',
        'static_leases': 'staticLeases',
        'total_addresses': 'totalAddresses',
        'utilization': 'utilization'
    }

    def __init__(self, default_lease_time_secs=None, description=None, domain_name=None, gateway=None, id=None, interface=None, ip_prefix=None, ip_version=None, leases=None, max_lease_time_secs=None, min_lease_time_secs=None, name=None, nameservers=None, ranges=None, static_leases=None, total_addresses=None, utilization=None):  # noqa: E501
        """InlineResponse200133Pools - a model defined in Swagger"""  # noqa: E501
        self._default_lease_time_secs = None
        self._description = None
        self._domain_name = None
        self._gateway = None
        self._id = None
        self._interface = None
        self._ip_prefix = None
        self._ip_version = None
        self._leases = None
        self._max_lease_time_secs = None
        self._min_lease_time_secs = None
        self._name = None
        self._nameservers = None
        self._ranges = None
        self._static_leases = None
        self._total_addresses = None
        self._utilization = None
        self.discriminator = None
        if default_lease_time_secs is not None:
            self.default_lease_time_secs = default_lease_time_secs
        if description is not None:
            self.description = description
        if domain_name is not None:
            self.domain_name = domain_name
        if gateway is not None:
            self.gateway = gateway
        if id is not None:
            self.id = id
        if interface is not None:
            self.interface = interface
        if ip_prefix is not None:
            self.ip_prefix = ip_prefix
        if ip_version is not None:
            self.ip_version = ip_version
        if leases is not None:
            self.leases = leases
        if max_lease_time_secs is not None:
            self.max_lease_time_secs = max_lease_time_secs
        if min_lease_time_secs is not None:
            self.min_lease_time_secs = min_lease_time_secs
        if name is not None:
            self.name = name
        if nameservers is not None:
            self.nameservers = nameservers
        if ranges is not None:
            self.ranges = ranges
        if static_leases is not None:
            self.static_leases = static_leases
        if total_addresses is not None:
            self.total_addresses = total_addresses
        if utilization is not None:
            self.utilization = utilization

    @property
    def default_lease_time_secs(self):
        """Gets the default_lease_time_secs of this InlineResponse200133Pools.  # noqa: E501


        :return: The default_lease_time_secs of this InlineResponse200133Pools.  # noqa: E501
        :rtype: str
        """
        return self._default_lease_time_secs

    @default_lease_time_secs.setter
    def default_lease_time_secs(self, default_lease_time_secs):
        """Sets the default_lease_time_secs of this InlineResponse200133Pools.


        :param default_lease_time_secs: The default_lease_time_secs of this InlineResponse200133Pools.  # noqa: E501
        :type: str
        """

        self._default_lease_time_secs = default_lease_time_secs

    @property
    def description(self):
        """Gets the description of this InlineResponse200133Pools.  # noqa: E501


        :return: The description of this InlineResponse200133Pools.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse200133Pools.


        :param description: The description of this InlineResponse200133Pools.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def domain_name(self):
        """Gets the domain_name of this InlineResponse200133Pools.  # noqa: E501


        :return: The domain_name of this InlineResponse200133Pools.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this InlineResponse200133Pools.


        :param domain_name: The domain_name of this InlineResponse200133Pools.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def gateway(self):
        """Gets the gateway of this InlineResponse200133Pools.  # noqa: E501


        :return: The gateway of this InlineResponse200133Pools.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this InlineResponse200133Pools.


        :param gateway: The gateway of this InlineResponse200133Pools.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def id(self):
        """Gets the id of this InlineResponse200133Pools.  # noqa: E501


        :return: The id of this InlineResponse200133Pools.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200133Pools.


        :param id: The id of this InlineResponse200133Pools.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def interface(self):
        """Gets the interface of this InlineResponse200133Pools.  # noqa: E501


        :return: The interface of this InlineResponse200133Pools.  # noqa: E501
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this InlineResponse200133Pools.


        :param interface: The interface of this InlineResponse200133Pools.  # noqa: E501
        :type: str
        """

        self._interface = interface

    @property
    def ip_prefix(self):
        """Gets the ip_prefix of this InlineResponse200133Pools.  # noqa: E501


        :return: The ip_prefix of this InlineResponse200133Pools.  # noqa: E501
        :rtype: str
        """
        return self._ip_prefix

    @ip_prefix.setter
    def ip_prefix(self, ip_prefix):
        """Sets the ip_prefix of this InlineResponse200133Pools.


        :param ip_prefix: The ip_prefix of this InlineResponse200133Pools.  # noqa: E501
        :type: str
        """

        self._ip_prefix = ip_prefix

    @property
    def ip_version(self):
        """Gets the ip_version of this InlineResponse200133Pools.  # noqa: E501


        :return: The ip_version of this InlineResponse200133Pools.  # noqa: E501
        :rtype: str
        """
        return self._ip_version

    @ip_version.setter
    def ip_version(self, ip_version):
        """Sets the ip_version of this InlineResponse200133Pools.


        :param ip_version: The ip_version of this InlineResponse200133Pools.  # noqa: E501
        :type: str
        """

        self._ip_version = ip_version

    @property
    def leases(self):
        """Gets the leases of this InlineResponse200133Pools.  # noqa: E501


        :return: The leases of this InlineResponse200133Pools.  # noqa: E501
        :rtype: list[InlineResponse200133Leases]
        """
        return self._leases

    @leases.setter
    def leases(self, leases):
        """Sets the leases of this InlineResponse200133Pools.


        :param leases: The leases of this InlineResponse200133Pools.  # noqa: E501
        :type: list[InlineResponse200133Leases]
        """

        self._leases = leases

    @property
    def max_lease_time_secs(self):
        """Gets the max_lease_time_secs of this InlineResponse200133Pools.  # noqa: E501


        :return: The max_lease_time_secs of this InlineResponse200133Pools.  # noqa: E501
        :rtype: str
        """
        return self._max_lease_time_secs

    @max_lease_time_secs.setter
    def max_lease_time_secs(self, max_lease_time_secs):
        """Sets the max_lease_time_secs of this InlineResponse200133Pools.


        :param max_lease_time_secs: The max_lease_time_secs of this InlineResponse200133Pools.  # noqa: E501
        :type: str
        """

        self._max_lease_time_secs = max_lease_time_secs

    @property
    def min_lease_time_secs(self):
        """Gets the min_lease_time_secs of this InlineResponse200133Pools.  # noqa: E501


        :return: The min_lease_time_secs of this InlineResponse200133Pools.  # noqa: E501
        :rtype: str
        """
        return self._min_lease_time_secs

    @min_lease_time_secs.setter
    def min_lease_time_secs(self, min_lease_time_secs):
        """Sets the min_lease_time_secs of this InlineResponse200133Pools.


        :param min_lease_time_secs: The min_lease_time_secs of this InlineResponse200133Pools.  # noqa: E501
        :type: str
        """

        self._min_lease_time_secs = min_lease_time_secs

    @property
    def name(self):
        """Gets the name of this InlineResponse200133Pools.  # noqa: E501


        :return: The name of this InlineResponse200133Pools.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200133Pools.


        :param name: The name of this InlineResponse200133Pools.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nameservers(self):
        """Gets the nameservers of this InlineResponse200133Pools.  # noqa: E501


        :return: The nameservers of this InlineResponse200133Pools.  # noqa: E501
        :rtype: InlineResponse200112Nameservers
        """
        return self._nameservers

    @nameservers.setter
    def nameservers(self, nameservers):
        """Sets the nameservers of this InlineResponse200133Pools.


        :param nameservers: The nameservers of this InlineResponse200133Pools.  # noqa: E501
        :type: InlineResponse200112Nameservers
        """

        self._nameservers = nameservers

    @property
    def ranges(self):
        """Gets the ranges of this InlineResponse200133Pools.  # noqa: E501


        :return: The ranges of this InlineResponse200133Pools.  # noqa: E501
        :rtype: list[InlineResponse200112Ranges]
        """
        return self._ranges

    @ranges.setter
    def ranges(self, ranges):
        """Sets the ranges of this InlineResponse200133Pools.


        :param ranges: The ranges of this InlineResponse200133Pools.  # noqa: E501
        :type: list[InlineResponse200112Ranges]
        """

        self._ranges = ranges

    @property
    def static_leases(self):
        """Gets the static_leases of this InlineResponse200133Pools.  # noqa: E501


        :return: The static_leases of this InlineResponse200133Pools.  # noqa: E501
        :rtype: list[InlineResponse200112StaticLeases]
        """
        return self._static_leases

    @static_leases.setter
    def static_leases(self, static_leases):
        """Sets the static_leases of this InlineResponse200133Pools.


        :param static_leases: The static_leases of this InlineResponse200133Pools.  # noqa: E501
        :type: list[InlineResponse200112StaticLeases]
        """

        self._static_leases = static_leases

    @property
    def total_addresses(self):
        """Gets the total_addresses of this InlineResponse200133Pools.  # noqa: E501


        :return: The total_addresses of this InlineResponse200133Pools.  # noqa: E501
        :rtype: str
        """
        return self._total_addresses

    @total_addresses.setter
    def total_addresses(self, total_addresses):
        """Sets the total_addresses of this InlineResponse200133Pools.


        :param total_addresses: The total_addresses of this InlineResponse200133Pools.  # noqa: E501
        :type: str
        """

        self._total_addresses = total_addresses

    @property
    def utilization(self):
        """Gets the utilization of this InlineResponse200133Pools.  # noqa: E501


        :return: The utilization of this InlineResponse200133Pools.  # noqa: E501
        :rtype: str
        """
        return self._utilization

    @utilization.setter
    def utilization(self, utilization):
        """Sets the utilization of this InlineResponse200133Pools.


        :param utilization: The utilization of this InlineResponse200133Pools.  # noqa: E501
        :type: str
        """

        self._utilization = utilization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200133Pools, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200133Pools):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
