# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1activitylogsSelector(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_ids': 'list[str]',
        'id': 'str',
        'in_progress': 'str',
        'job_entity': 'V1activitylogsSelectorJobEntity',
        'target_ids': 'list[V1activitylogsSelectorJobEntity]',
        'type': 'str'
    }

    attribute_map = {
        'device_ids': 'deviceIds',
        'id': 'id',
        'in_progress': 'inProgress',
        'job_entity': 'jobEntity',
        'target_ids': 'targetIds',
        'type': 'type'
    }

    def __init__(self, device_ids=None, id=None, in_progress=None, job_entity=None, target_ids=None, type=None):  # noqa: E501
        """V1activitylogsSelector - a model defined in Swagger"""  # noqa: E501
        self._device_ids = None
        self._id = None
        self._in_progress = None
        self._job_entity = None
        self._target_ids = None
        self._type = None
        self.discriminator = None
        if device_ids is not None:
            self.device_ids = device_ids
        if id is not None:
            self.id = id
        if in_progress is not None:
            self.in_progress = in_progress
        if job_entity is not None:
            self.job_entity = job_entity
        if target_ids is not None:
            self.target_ids = target_ids
        if type is not None:
            self.type = type

    @property
    def device_ids(self):
        """Gets the device_ids of this V1activitylogsSelector.  # noqa: E501


        :return: The device_ids of this V1activitylogsSelector.  # noqa: E501
        :rtype: list[str]
        """
        return self._device_ids

    @device_ids.setter
    def device_ids(self, device_ids):
        """Sets the device_ids of this V1activitylogsSelector.


        :param device_ids: The device_ids of this V1activitylogsSelector.  # noqa: E501
        :type: list[str]
        """

        self._device_ids = device_ids

    @property
    def id(self):
        """Gets the id of this V1activitylogsSelector.  # noqa: E501


        :return: The id of this V1activitylogsSelector.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1activitylogsSelector.


        :param id: The id of this V1activitylogsSelector.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def in_progress(self):
        """Gets the in_progress of this V1activitylogsSelector.  # noqa: E501


        :return: The in_progress of this V1activitylogsSelector.  # noqa: E501
        :rtype: str
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this V1activitylogsSelector.


        :param in_progress: The in_progress of this V1activitylogsSelector.  # noqa: E501
        :type: str
        """

        self._in_progress = in_progress

    @property
    def job_entity(self):
        """Gets the job_entity of this V1activitylogsSelector.  # noqa: E501


        :return: The job_entity of this V1activitylogsSelector.  # noqa: E501
        :rtype: V1activitylogsSelectorJobEntity
        """
        return self._job_entity

    @job_entity.setter
    def job_entity(self, job_entity):
        """Sets the job_entity of this V1activitylogsSelector.


        :param job_entity: The job_entity of this V1activitylogsSelector.  # noqa: E501
        :type: V1activitylogsSelectorJobEntity
        """

        self._job_entity = job_entity

    @property
    def target_ids(self):
        """Gets the target_ids of this V1activitylogsSelector.  # noqa: E501


        :return: The target_ids of this V1activitylogsSelector.  # noqa: E501
        :rtype: list[V1activitylogsSelectorJobEntity]
        """
        return self._target_ids

    @target_ids.setter
    def target_ids(self, target_ids):
        """Sets the target_ids of this V1activitylogsSelector.


        :param target_ids: The target_ids of this V1activitylogsSelector.  # noqa: E501
        :type: list[V1activitylogsSelectorJobEntity]
        """

        self._target_ids = target_ids

    @property
    def type(self):
        """Gets the type of this V1activitylogsSelector.  # noqa: E501


        :return: The type of this V1activitylogsSelector.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1activitylogsSelector.


        :param type: The type of this V1activitylogsSelector.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1activitylogsSelector, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1activitylogsSelector):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
