# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200156Accesses(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'str',
        'group_context_match': 'str',
        'id': 'str',
        'name': 'str',
        'read_view': 'str',
        'security_level': 'str',
        'write_view': 'str'
    }

    attribute_map = {
        'context': 'context',
        'group_context_match': 'groupContextMatch',
        'id': 'id',
        'name': 'name',
        'read_view': 'readView',
        'security_level': 'securityLevel',
        'write_view': 'writeView'
    }

    def __init__(self, context=None, group_context_match=None, id=None, name=None, read_view=None, security_level=None, write_view=None):  # noqa: E501
        """InlineResponse200156Accesses - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._group_context_match = None
        self._id = None
        self._name = None
        self._read_view = None
        self._security_level = None
        self._write_view = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if group_context_match is not None:
            self.group_context_match = group_context_match
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if read_view is not None:
            self.read_view = read_view
        if security_level is not None:
            self.security_level = security_level
        if write_view is not None:
            self.write_view = write_view

    @property
    def context(self):
        """Gets the context of this InlineResponse200156Accesses.  # noqa: E501


        :return: The context of this InlineResponse200156Accesses.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this InlineResponse200156Accesses.


        :param context: The context of this InlineResponse200156Accesses.  # noqa: E501
        :type: str
        """

        self._context = context

    @property
    def group_context_match(self):
        """Gets the group_context_match of this InlineResponse200156Accesses.  # noqa: E501


        :return: The group_context_match of this InlineResponse200156Accesses.  # noqa: E501
        :rtype: str
        """
        return self._group_context_match

    @group_context_match.setter
    def group_context_match(self, group_context_match):
        """Sets the group_context_match of this InlineResponse200156Accesses.


        :param group_context_match: The group_context_match of this InlineResponse200156Accesses.  # noqa: E501
        :type: str
        """

        self._group_context_match = group_context_match

    @property
    def id(self):
        """Gets the id of this InlineResponse200156Accesses.  # noqa: E501


        :return: The id of this InlineResponse200156Accesses.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200156Accesses.


        :param id: The id of this InlineResponse200156Accesses.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse200156Accesses.  # noqa: E501


        :return: The name of this InlineResponse200156Accesses.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200156Accesses.


        :param name: The name of this InlineResponse200156Accesses.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def read_view(self):
        """Gets the read_view of this InlineResponse200156Accesses.  # noqa: E501


        :return: The read_view of this InlineResponse200156Accesses.  # noqa: E501
        :rtype: str
        """
        return self._read_view

    @read_view.setter
    def read_view(self, read_view):
        """Sets the read_view of this InlineResponse200156Accesses.


        :param read_view: The read_view of this InlineResponse200156Accesses.  # noqa: E501
        :type: str
        """

        self._read_view = read_view

    @property
    def security_level(self):
        """Gets the security_level of this InlineResponse200156Accesses.  # noqa: E501


        :return: The security_level of this InlineResponse200156Accesses.  # noqa: E501
        :rtype: str
        """
        return self._security_level

    @security_level.setter
    def security_level(self, security_level):
        """Sets the security_level of this InlineResponse200156Accesses.


        :param security_level: The security_level of this InlineResponse200156Accesses.  # noqa: E501
        :type: str
        """

        self._security_level = security_level

    @property
    def write_view(self):
        """Gets the write_view of this InlineResponse200156Accesses.  # noqa: E501


        :return: The write_view of this InlineResponse200156Accesses.  # noqa: E501
        :rtype: str
        """
        return self._write_view

    @write_view.setter
    def write_view(self, write_view):
        """Sets the write_view of this InlineResponse200156Accesses.


        :param write_view: The write_view of this InlineResponse200156Accesses.  # noqa: E501
        :type: str
        """

        self._write_view = write_view

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200156Accesses, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200156Accesses):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
