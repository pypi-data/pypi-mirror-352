# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20087(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'global_prefix_sets': 'list[V1globalconfigsiteGlobalPrefixSetOps]',
        'ipfix_exporters': 'list[V1globalconfigsiteGlobalPrefixSetOps]',
        'prefix_sets': 'list[V1globalconfigsiteGlobalPrefixSetOps]',
        'routing_policies': 'list[V1globalconfigsiteGlobalPrefixSetOps]',
        'snmps': 'list[V1globalconfigsiteGlobalPrefixSetOps]',
        'status': 'str',
        'syslog_servers': 'list[V1globalconfigsiteGlobalPrefixSetOps]',
        'traffic_policies': 'list[V1globalconfigsiteGlobalPrefixSetOps]',
        'vpn_profiles': 'list[V1globalconfigsiteGlobalPrefixSetOps]'
    }

    attribute_map = {
        'global_prefix_sets': 'globalPrefixSets',
        'ipfix_exporters': 'ipfixExporters',
        'prefix_sets': 'prefixSets',
        'routing_policies': 'routingPolicies',
        'snmps': 'snmps',
        'status': 'status',
        'syslog_servers': 'syslogServers',
        'traffic_policies': 'trafficPolicies',
        'vpn_profiles': 'vpnProfiles'
    }

    def __init__(self, global_prefix_sets=None, ipfix_exporters=None, prefix_sets=None, routing_policies=None, snmps=None, status=None, syslog_servers=None, traffic_policies=None, vpn_profiles=None):  # noqa: E501
        """InlineResponse20087 - a model defined in Swagger"""  # noqa: E501
        self._global_prefix_sets = None
        self._ipfix_exporters = None
        self._prefix_sets = None
        self._routing_policies = None
        self._snmps = None
        self._status = None
        self._syslog_servers = None
        self._traffic_policies = None
        self._vpn_profiles = None
        self.discriminator = None
        if global_prefix_sets is not None:
            self.global_prefix_sets = global_prefix_sets
        if ipfix_exporters is not None:
            self.ipfix_exporters = ipfix_exporters
        if prefix_sets is not None:
            self.prefix_sets = prefix_sets
        if routing_policies is not None:
            self.routing_policies = routing_policies
        if snmps is not None:
            self.snmps = snmps
        if status is not None:
            self.status = status
        if syslog_servers is not None:
            self.syslog_servers = syslog_servers
        if traffic_policies is not None:
            self.traffic_policies = traffic_policies
        if vpn_profiles is not None:
            self.vpn_profiles = vpn_profiles

    @property
    def global_prefix_sets(self):
        """Gets the global_prefix_sets of this InlineResponse20087.  # noqa: E501


        :return: The global_prefix_sets of this InlineResponse20087.  # noqa: E501
        :rtype: list[V1globalconfigsiteGlobalPrefixSetOps]
        """
        return self._global_prefix_sets

    @global_prefix_sets.setter
    def global_prefix_sets(self, global_prefix_sets):
        """Sets the global_prefix_sets of this InlineResponse20087.


        :param global_prefix_sets: The global_prefix_sets of this InlineResponse20087.  # noqa: E501
        :type: list[V1globalconfigsiteGlobalPrefixSetOps]
        """

        self._global_prefix_sets = global_prefix_sets

    @property
    def ipfix_exporters(self):
        """Gets the ipfix_exporters of this InlineResponse20087.  # noqa: E501


        :return: The ipfix_exporters of this InlineResponse20087.  # noqa: E501
        :rtype: list[V1globalconfigsiteGlobalPrefixSetOps]
        """
        return self._ipfix_exporters

    @ipfix_exporters.setter
    def ipfix_exporters(self, ipfix_exporters):
        """Sets the ipfix_exporters of this InlineResponse20087.


        :param ipfix_exporters: The ipfix_exporters of this InlineResponse20087.  # noqa: E501
        :type: list[V1globalconfigsiteGlobalPrefixSetOps]
        """

        self._ipfix_exporters = ipfix_exporters

    @property
    def prefix_sets(self):
        """Gets the prefix_sets of this InlineResponse20087.  # noqa: E501


        :return: The prefix_sets of this InlineResponse20087.  # noqa: E501
        :rtype: list[V1globalconfigsiteGlobalPrefixSetOps]
        """
        return self._prefix_sets

    @prefix_sets.setter
    def prefix_sets(self, prefix_sets):
        """Sets the prefix_sets of this InlineResponse20087.


        :param prefix_sets: The prefix_sets of this InlineResponse20087.  # noqa: E501
        :type: list[V1globalconfigsiteGlobalPrefixSetOps]
        """

        self._prefix_sets = prefix_sets

    @property
    def routing_policies(self):
        """Gets the routing_policies of this InlineResponse20087.  # noqa: E501


        :return: The routing_policies of this InlineResponse20087.  # noqa: E501
        :rtype: list[V1globalconfigsiteGlobalPrefixSetOps]
        """
        return self._routing_policies

    @routing_policies.setter
    def routing_policies(self, routing_policies):
        """Sets the routing_policies of this InlineResponse20087.


        :param routing_policies: The routing_policies of this InlineResponse20087.  # noqa: E501
        :type: list[V1globalconfigsiteGlobalPrefixSetOps]
        """

        self._routing_policies = routing_policies

    @property
    def snmps(self):
        """Gets the snmps of this InlineResponse20087.  # noqa: E501


        :return: The snmps of this InlineResponse20087.  # noqa: E501
        :rtype: list[V1globalconfigsiteGlobalPrefixSetOps]
        """
        return self._snmps

    @snmps.setter
    def snmps(self, snmps):
        """Sets the snmps of this InlineResponse20087.


        :param snmps: The snmps of this InlineResponse20087.  # noqa: E501
        :type: list[V1globalconfigsiteGlobalPrefixSetOps]
        """

        self._snmps = snmps

    @property
    def status(self):
        """Gets the status of this InlineResponse20087.  # noqa: E501


        :return: The status of this InlineResponse20087.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20087.


        :param status: The status of this InlineResponse20087.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def syslog_servers(self):
        """Gets the syslog_servers of this InlineResponse20087.  # noqa: E501


        :return: The syslog_servers of this InlineResponse20087.  # noqa: E501
        :rtype: list[V1globalconfigsiteGlobalPrefixSetOps]
        """
        return self._syslog_servers

    @syslog_servers.setter
    def syslog_servers(self, syslog_servers):
        """Sets the syslog_servers of this InlineResponse20087.


        :param syslog_servers: The syslog_servers of this InlineResponse20087.  # noqa: E501
        :type: list[V1globalconfigsiteGlobalPrefixSetOps]
        """

        self._syslog_servers = syslog_servers

    @property
    def traffic_policies(self):
        """Gets the traffic_policies of this InlineResponse20087.  # noqa: E501


        :return: The traffic_policies of this InlineResponse20087.  # noqa: E501
        :rtype: list[V1globalconfigsiteGlobalPrefixSetOps]
        """
        return self._traffic_policies

    @traffic_policies.setter
    def traffic_policies(self, traffic_policies):
        """Sets the traffic_policies of this InlineResponse20087.


        :param traffic_policies: The traffic_policies of this InlineResponse20087.  # noqa: E501
        :type: list[V1globalconfigsiteGlobalPrefixSetOps]
        """

        self._traffic_policies = traffic_policies

    @property
    def vpn_profiles(self):
        """Gets the vpn_profiles of this InlineResponse20087.  # noqa: E501


        :return: The vpn_profiles of this InlineResponse20087.  # noqa: E501
        :rtype: list[V1globalconfigsiteGlobalPrefixSetOps]
        """
        return self._vpn_profiles

    @vpn_profiles.setter
    def vpn_profiles(self, vpn_profiles):
        """Sets the vpn_profiles of this InlineResponse20087.


        :param vpn_profiles: The vpn_profiles of this InlineResponse20087.  # noqa: E501
        :type: list[V1globalconfigsiteGlobalPrefixSetOps]
        """

        self._vpn_profiles = vpn_profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20087, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20087):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
