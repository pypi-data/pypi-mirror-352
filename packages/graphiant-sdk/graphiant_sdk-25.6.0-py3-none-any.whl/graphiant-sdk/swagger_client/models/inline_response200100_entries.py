# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200100Entries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'associated_interfaces': 'str',
        'created_at': 'V1devicesbringuptokenValidTillTs',
        'description': 'str',
        'edge_references': 'str',
        'id': 'str',
        'name': 'str',
        'site_list_references': 'str'
    }

    attribute_map = {
        'associated_interfaces': 'associatedInterfaces',
        'created_at': 'createdAt',
        'description': 'description',
        'edge_references': 'edgeReferences',
        'id': 'id',
        'name': 'name',
        'site_list_references': 'siteListReferences'
    }

    def __init__(self, associated_interfaces=None, created_at=None, description=None, edge_references=None, id=None, name=None, site_list_references=None):  # noqa: E501
        """InlineResponse200100Entries - a model defined in Swagger"""  # noqa: E501
        self._associated_interfaces = None
        self._created_at = None
        self._description = None
        self._edge_references = None
        self._id = None
        self._name = None
        self._site_list_references = None
        self.discriminator = None
        if associated_interfaces is not None:
            self.associated_interfaces = associated_interfaces
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if edge_references is not None:
            self.edge_references = edge_references
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if site_list_references is not None:
            self.site_list_references = site_list_references

    @property
    def associated_interfaces(self):
        """Gets the associated_interfaces of this InlineResponse200100Entries.  # noqa: E501


        :return: The associated_interfaces of this InlineResponse200100Entries.  # noqa: E501
        :rtype: str
        """
        return self._associated_interfaces

    @associated_interfaces.setter
    def associated_interfaces(self, associated_interfaces):
        """Sets the associated_interfaces of this InlineResponse200100Entries.


        :param associated_interfaces: The associated_interfaces of this InlineResponse200100Entries.  # noqa: E501
        :type: str
        """

        self._associated_interfaces = associated_interfaces

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse200100Entries.  # noqa: E501


        :return: The created_at of this InlineResponse200100Entries.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse200100Entries.


        :param created_at: The created_at of this InlineResponse200100Entries.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this InlineResponse200100Entries.  # noqa: E501


        :return: The description of this InlineResponse200100Entries.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse200100Entries.


        :param description: The description of this InlineResponse200100Entries.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def edge_references(self):
        """Gets the edge_references of this InlineResponse200100Entries.  # noqa: E501


        :return: The edge_references of this InlineResponse200100Entries.  # noqa: E501
        :rtype: str
        """
        return self._edge_references

    @edge_references.setter
    def edge_references(self, edge_references):
        """Sets the edge_references of this InlineResponse200100Entries.


        :param edge_references: The edge_references of this InlineResponse200100Entries.  # noqa: E501
        :type: str
        """

        self._edge_references = edge_references

    @property
    def id(self):
        """Gets the id of this InlineResponse200100Entries.  # noqa: E501


        :return: The id of this InlineResponse200100Entries.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200100Entries.


        :param id: The id of this InlineResponse200100Entries.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse200100Entries.  # noqa: E501


        :return: The name of this InlineResponse200100Entries.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200100Entries.


        :param name: The name of this InlineResponse200100Entries.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def site_list_references(self):
        """Gets the site_list_references of this InlineResponse200100Entries.  # noqa: E501


        :return: The site_list_references of this InlineResponse200100Entries.  # noqa: E501
        :rtype: str
        """
        return self._site_list_references

    @site_list_references.setter
    def site_list_references(self, site_list_references):
        """Sets the site_list_references of this InlineResponse200100Entries.


        :param site_list_references: The site_list_references of this InlineResponse200100Entries.  # noqa: E501
        :type: str
        """

        self._site_list_references = site_list_references

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200100Entries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200100Entries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
