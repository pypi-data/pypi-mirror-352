# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200113Author(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enterprise_id': 'str',
        'exp': 'str',
        'original_enterprise_id': 'str',
        'permissions': 'object',
        'time_zone': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'enterprise_id': 'enterpriseId',
        'exp': 'exp',
        'original_enterprise_id': 'originalEnterpriseId',
        'permissions': 'permissions',
        'time_zone': 'timeZone',
        'user_id': 'userId'
    }

    def __init__(self, enterprise_id=None, exp=None, original_enterprise_id=None, permissions=None, time_zone=None, user_id=None):  # noqa: E501
        """InlineResponse200113Author - a model defined in Swagger"""  # noqa: E501
        self._enterprise_id = None
        self._exp = None
        self._original_enterprise_id = None
        self._permissions = None
        self._time_zone = None
        self._user_id = None
        self.discriminator = None
        if enterprise_id is not None:
            self.enterprise_id = enterprise_id
        if exp is not None:
            self.exp = exp
        if original_enterprise_id is not None:
            self.original_enterprise_id = original_enterprise_id
        if permissions is not None:
            self.permissions = permissions
        if time_zone is not None:
            self.time_zone = time_zone
        if user_id is not None:
            self.user_id = user_id

    @property
    def enterprise_id(self):
        """Gets the enterprise_id of this InlineResponse200113Author.  # noqa: E501


        :return: The enterprise_id of this InlineResponse200113Author.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_id

    @enterprise_id.setter
    def enterprise_id(self, enterprise_id):
        """Sets the enterprise_id of this InlineResponse200113Author.


        :param enterprise_id: The enterprise_id of this InlineResponse200113Author.  # noqa: E501
        :type: str
        """

        self._enterprise_id = enterprise_id

    @property
    def exp(self):
        """Gets the exp of this InlineResponse200113Author.  # noqa: E501


        :return: The exp of this InlineResponse200113Author.  # noqa: E501
        :rtype: str
        """
        return self._exp

    @exp.setter
    def exp(self, exp):
        """Sets the exp of this InlineResponse200113Author.


        :param exp: The exp of this InlineResponse200113Author.  # noqa: E501
        :type: str
        """

        self._exp = exp

    @property
    def original_enterprise_id(self):
        """Gets the original_enterprise_id of this InlineResponse200113Author.  # noqa: E501


        :return: The original_enterprise_id of this InlineResponse200113Author.  # noqa: E501
        :rtype: str
        """
        return self._original_enterprise_id

    @original_enterprise_id.setter
    def original_enterprise_id(self, original_enterprise_id):
        """Sets the original_enterprise_id of this InlineResponse200113Author.


        :param original_enterprise_id: The original_enterprise_id of this InlineResponse200113Author.  # noqa: E501
        :type: str
        """

        self._original_enterprise_id = original_enterprise_id

    @property
    def permissions(self):
        """Gets the permissions of this InlineResponse200113Author.  # noqa: E501


        :return: The permissions of this InlineResponse200113Author.  # noqa: E501
        :rtype: object
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this InlineResponse200113Author.


        :param permissions: The permissions of this InlineResponse200113Author.  # noqa: E501
        :type: object
        """

        self._permissions = permissions

    @property
    def time_zone(self):
        """Gets the time_zone of this InlineResponse200113Author.  # noqa: E501


        :return: The time_zone of this InlineResponse200113Author.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this InlineResponse200113Author.


        :param time_zone: The time_zone of this InlineResponse200113Author.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def user_id(self):
        """Gets the user_id of this InlineResponse200113Author.  # noqa: E501


        :return: The user_id of this InlineResponse200113Author.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InlineResponse200113Author.


        :param user_id: The user_id of this InlineResponse200113Author.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200113Author, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200113Author):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
