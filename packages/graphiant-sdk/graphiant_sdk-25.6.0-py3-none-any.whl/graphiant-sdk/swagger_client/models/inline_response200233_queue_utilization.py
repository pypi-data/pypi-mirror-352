# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200233QueueUtilization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allocated_pct': 'str',
        'default_queue': 'str',
        'excess_weight': 'str',
        'sla_class': 'str',
        'utilization_pct': 'str'
    }

    attribute_map = {
        'allocated_pct': 'allocatedPct',
        'default_queue': 'defaultQueue',
        'excess_weight': 'excessWeight',
        'sla_class': 'slaClass',
        'utilization_pct': 'utilizationPct'
    }

    def __init__(self, allocated_pct=None, default_queue=None, excess_weight=None, sla_class=None, utilization_pct=None):  # noqa: E501
        """InlineResponse200233QueueUtilization - a model defined in Swagger"""  # noqa: E501
        self._allocated_pct = None
        self._default_queue = None
        self._excess_weight = None
        self._sla_class = None
        self._utilization_pct = None
        self.discriminator = None
        if allocated_pct is not None:
            self.allocated_pct = allocated_pct
        if default_queue is not None:
            self.default_queue = default_queue
        if excess_weight is not None:
            self.excess_weight = excess_weight
        if sla_class is not None:
            self.sla_class = sla_class
        if utilization_pct is not None:
            self.utilization_pct = utilization_pct

    @property
    def allocated_pct(self):
        """Gets the allocated_pct of this InlineResponse200233QueueUtilization.  # noqa: E501


        :return: The allocated_pct of this InlineResponse200233QueueUtilization.  # noqa: E501
        :rtype: str
        """
        return self._allocated_pct

    @allocated_pct.setter
    def allocated_pct(self, allocated_pct):
        """Sets the allocated_pct of this InlineResponse200233QueueUtilization.


        :param allocated_pct: The allocated_pct of this InlineResponse200233QueueUtilization.  # noqa: E501
        :type: str
        """

        self._allocated_pct = allocated_pct

    @property
    def default_queue(self):
        """Gets the default_queue of this InlineResponse200233QueueUtilization.  # noqa: E501


        :return: The default_queue of this InlineResponse200233QueueUtilization.  # noqa: E501
        :rtype: str
        """
        return self._default_queue

    @default_queue.setter
    def default_queue(self, default_queue):
        """Sets the default_queue of this InlineResponse200233QueueUtilization.


        :param default_queue: The default_queue of this InlineResponse200233QueueUtilization.  # noqa: E501
        :type: str
        """

        self._default_queue = default_queue

    @property
    def excess_weight(self):
        """Gets the excess_weight of this InlineResponse200233QueueUtilization.  # noqa: E501


        :return: The excess_weight of this InlineResponse200233QueueUtilization.  # noqa: E501
        :rtype: str
        """
        return self._excess_weight

    @excess_weight.setter
    def excess_weight(self, excess_weight):
        """Sets the excess_weight of this InlineResponse200233QueueUtilization.


        :param excess_weight: The excess_weight of this InlineResponse200233QueueUtilization.  # noqa: E501
        :type: str
        """

        self._excess_weight = excess_weight

    @property
    def sla_class(self):
        """Gets the sla_class of this InlineResponse200233QueueUtilization.  # noqa: E501


        :return: The sla_class of this InlineResponse200233QueueUtilization.  # noqa: E501
        :rtype: str
        """
        return self._sla_class

    @sla_class.setter
    def sla_class(self, sla_class):
        """Sets the sla_class of this InlineResponse200233QueueUtilization.


        :param sla_class: The sla_class of this InlineResponse200233QueueUtilization.  # noqa: E501
        :type: str
        """

        self._sla_class = sla_class

    @property
    def utilization_pct(self):
        """Gets the utilization_pct of this InlineResponse200233QueueUtilization.  # noqa: E501


        :return: The utilization_pct of this InlineResponse200233QueueUtilization.  # noqa: E501
        :rtype: str
        """
        return self._utilization_pct

    @utilization_pct.setter
    def utilization_pct(self, utilization_pct):
        """Sets the utilization_pct of this InlineResponse200233QueueUtilization.


        :param utilization_pct: The utilization_pct of this InlineResponse200233QueueUtilization.  # noqa: E501
        :type: str
        """

        self._utilization_pct = utilization_pct

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200233QueueUtilization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200233QueueUtilization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
