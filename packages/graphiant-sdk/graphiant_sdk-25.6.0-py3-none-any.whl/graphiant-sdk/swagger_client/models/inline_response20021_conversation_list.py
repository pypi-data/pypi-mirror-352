# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20021ConversationList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conversation_header': 'str',
        'conversation_id': 'str',
        'conversation_recent_timestamp': 'str'
    }

    attribute_map = {
        'conversation_header': 'conversationHeader',
        'conversation_id': 'conversationId',
        'conversation_recent_timestamp': 'conversationRecentTimestamp'
    }

    def __init__(self, conversation_header=None, conversation_id=None, conversation_recent_timestamp=None):  # noqa: E501
        """InlineResponse20021ConversationList - a model defined in Swagger"""  # noqa: E501
        self._conversation_header = None
        self._conversation_id = None
        self._conversation_recent_timestamp = None
        self.discriminator = None
        if conversation_header is not None:
            self.conversation_header = conversation_header
        if conversation_id is not None:
            self.conversation_id = conversation_id
        if conversation_recent_timestamp is not None:
            self.conversation_recent_timestamp = conversation_recent_timestamp

    @property
    def conversation_header(self):
        """Gets the conversation_header of this InlineResponse20021ConversationList.  # noqa: E501


        :return: The conversation_header of this InlineResponse20021ConversationList.  # noqa: E501
        :rtype: str
        """
        return self._conversation_header

    @conversation_header.setter
    def conversation_header(self, conversation_header):
        """Sets the conversation_header of this InlineResponse20021ConversationList.


        :param conversation_header: The conversation_header of this InlineResponse20021ConversationList.  # noqa: E501
        :type: str
        """

        self._conversation_header = conversation_header

    @property
    def conversation_id(self):
        """Gets the conversation_id of this InlineResponse20021ConversationList.  # noqa: E501


        :return: The conversation_id of this InlineResponse20021ConversationList.  # noqa: E501
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this InlineResponse20021ConversationList.


        :param conversation_id: The conversation_id of this InlineResponse20021ConversationList.  # noqa: E501
        :type: str
        """

        self._conversation_id = conversation_id

    @property
    def conversation_recent_timestamp(self):
        """Gets the conversation_recent_timestamp of this InlineResponse20021ConversationList.  # noqa: E501


        :return: The conversation_recent_timestamp of this InlineResponse20021ConversationList.  # noqa: E501
        :rtype: str
        """
        return self._conversation_recent_timestamp

    @conversation_recent_timestamp.setter
    def conversation_recent_timestamp(self, conversation_recent_timestamp):
        """Sets the conversation_recent_timestamp of this InlineResponse20021ConversationList.


        :param conversation_recent_timestamp: The conversation_recent_timestamp of this InlineResponse20021ConversationList.  # noqa: E501
        :type: str
        """

        self._conversation_recent_timestamp = conversation_recent_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20021ConversationList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20021ConversationList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
