# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20074(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_health': 'list[InlineResponse20073AppSummaryAppHealth]',
        'apps_on_device_count': 'str',
        'apps_visualization': 'list[InlineResponse20074AppsVisualization]',
        'average_qoe': 'str'
    }

    attribute_map = {
        'app_health': 'appHealth',
        'apps_on_device_count': 'appsOnDeviceCount',
        'apps_visualization': 'appsVisualization',
        'average_qoe': 'averageQoe'
    }

    def __init__(self, app_health=None, apps_on_device_count=None, apps_visualization=None, average_qoe=None):  # noqa: E501
        """InlineResponse20074 - a model defined in Swagger"""  # noqa: E501
        self._app_health = None
        self._apps_on_device_count = None
        self._apps_visualization = None
        self._average_qoe = None
        self.discriminator = None
        if app_health is not None:
            self.app_health = app_health
        if apps_on_device_count is not None:
            self.apps_on_device_count = apps_on_device_count
        if apps_visualization is not None:
            self.apps_visualization = apps_visualization
        if average_qoe is not None:
            self.average_qoe = average_qoe

    @property
    def app_health(self):
        """Gets the app_health of this InlineResponse20074.  # noqa: E501


        :return: The app_health of this InlineResponse20074.  # noqa: E501
        :rtype: list[InlineResponse20073AppSummaryAppHealth]
        """
        return self._app_health

    @app_health.setter
    def app_health(self, app_health):
        """Sets the app_health of this InlineResponse20074.


        :param app_health: The app_health of this InlineResponse20074.  # noqa: E501
        :type: list[InlineResponse20073AppSummaryAppHealth]
        """

        self._app_health = app_health

    @property
    def apps_on_device_count(self):
        """Gets the apps_on_device_count of this InlineResponse20074.  # noqa: E501


        :return: The apps_on_device_count of this InlineResponse20074.  # noqa: E501
        :rtype: str
        """
        return self._apps_on_device_count

    @apps_on_device_count.setter
    def apps_on_device_count(self, apps_on_device_count):
        """Sets the apps_on_device_count of this InlineResponse20074.


        :param apps_on_device_count: The apps_on_device_count of this InlineResponse20074.  # noqa: E501
        :type: str
        """

        self._apps_on_device_count = apps_on_device_count

    @property
    def apps_visualization(self):
        """Gets the apps_visualization of this InlineResponse20074.  # noqa: E501


        :return: The apps_visualization of this InlineResponse20074.  # noqa: E501
        :rtype: list[InlineResponse20074AppsVisualization]
        """
        return self._apps_visualization

    @apps_visualization.setter
    def apps_visualization(self, apps_visualization):
        """Sets the apps_visualization of this InlineResponse20074.


        :param apps_visualization: The apps_visualization of this InlineResponse20074.  # noqa: E501
        :type: list[InlineResponse20074AppsVisualization]
        """

        self._apps_visualization = apps_visualization

    @property
    def average_qoe(self):
        """Gets the average_qoe of this InlineResponse20074.  # noqa: E501


        :return: The average_qoe of this InlineResponse20074.  # noqa: E501
        :rtype: str
        """
        return self._average_qoe

    @average_qoe.setter
    def average_qoe(self, average_qoe):
        """Sets the average_qoe of this InlineResponse20074.


        :param average_qoe: The average_qoe of this InlineResponse20074.  # noqa: E501
        :type: str
        """

        self._average_qoe = average_qoe

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20074, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20074):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
