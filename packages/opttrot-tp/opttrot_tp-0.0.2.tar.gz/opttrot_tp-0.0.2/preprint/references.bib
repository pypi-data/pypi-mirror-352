@book{nielsen2010quantum,
  title={Quantum Computation and Quantum Information: 10th Anniversary Edition},
  author={Nielsen, M.A. and Chuang, I.L.},
  isbn={9781139495486},
  url={https://books.google.co.kr/books?id=-s4DEy7o-a0C},
  year={2010},
  publisher={Cambridge University Press}
}


@article{kurita_pauli_2023,
	title = {Pauli {String} {Partitioning} {Algorithm} with the {Ising} {Model} for {Simultaneous} {Measurements}},
	volume = {127},
	issn = {1089-5639, 1520-5215},
	url = {https://pubs.acs.org/doi/10.1021/acs.jpca.2c06453},
	doi = {10.1021/acs.jpca.2c06453},
	language = {en},
	number = {4},
	urldate = {2023-08-20},
	journal = {The Journal of Physical Chemistry A},
	author = {Kurita, Tomochika and Morita, Mikio and Oshima, Hirotaka and Sato, Shintaro},
	month = feb,
	year = {2023},
	pages = {1068--1080},
	annote = {This paper investigated mutually commuting partition algorithm about pre-calculated commuting pair graph of Pauli-basis applying ising hamiltonian based method. They converted the problems to Max-subset extraction QUBO problem and used annealer system to solve QUBO problem. 
With restriction of \$n\$ bit dimension of annealer solver, the authors suggested iterative algorithm using ascended sorting of Pauli basis by \# of commuting pairs of each elements.
},
	file = {전문(全文):C\:\\Users\\cmat411a\\Zotero\\storage\\YX6RTYTE\\Kurita 등 - 2023 - Pauli String Partitioning Algorithm with the Ising.pdf:application/pdf},
}


@misc{havlicek_moebius_2009,
	title = {Moebius {Pairs} of {Simplices} and {Commuting} {Pauli} {Operators}},
	url = {http://arxiv.org/abs/0905.4648},
	abstract = {There exists a large class of groups of operators acting on Hilbert spaces, where commutativity of group elements can be expressed in the geometric language of symplectic polar spaces embedded in the projective spaces PG(\$n, p\$), \$n\$ being odd and \$p\$ a prime. Here, we present a result about commuting and non-commuting group elements based on the existence of so-called Moebius pairs of \$n\$-simplices, i. e., pairs of \$n\$-simplices which are {\textbackslash}emph\{mutually inscribed and circumscribed\} to each other. For group elements representing an \$n\$-simplex there is no element outside the centre which commutes with all of them. This allows to express the dimension \$n\$ of the associated polar space in group theoretic terms. Any Moebius pair of \$n\$-simplices according to our construction corresponds to two disjoint families of group elements (operators) with the following properties: (i) Any two distinct elements of the same family do not commute. (ii) Each element of one family commutes with all but one of the elements from the other family. A three-qubit generalised Pauli group serves as a non-trivial example to illustrate the theory for \$p=2\$ and \$n=5\$.},
	urldate = {2023-08-20},
	publisher = {arXiv},
	author = {Havlicek, Hans and Odehnal, Boris and Saniga, Metod},
	month = aug,
	year = {2009},
	note = {arXiv:0905.4648 [math-ph, physics:quant-ph]},
	keywords = {Mathematical Physics, Möbius Pair, Quantum Physics},
	annote = {Comment: 13 pages, 1 example; Version 2 - slightly polished and updated},
	annote = {Commuting 관계 탐색 관련
Mobius pair method 는 Reggio et al Fast Partitioning of Pauli Strings in to Commuting Families for … 에 좀 더 쉬운 설명이 있음.
직접적으로 연관이 되어있지는 않으나 비슷한 방법을 사용함. 
수학 이론 근거로써 사용 가능해보임.
},
	file = {arXiv Fulltext PDF:files/107/Havlicek 등 - 2009 - Moebius Pairs of Simplices and Commuting Pauli Ope.pdf:application/pdf;arXiv.org Snapshot:files/106/0905.html:text/html},
}

@misc{reggio_fast_2023,
	title = {Fast {Partitioning} of {Pauli} {Strings} into {Commuting} {Families} for {Optimal} {Expectation} {Value} {Measurements} of {Dense} {Operators}},
	url = {http://arxiv.org/abs/2305.11847},
	abstract = {The Pauli strings appearing in the decomposition of an operator can be can be grouped into commuting families, reducing the number of quantum circuits needed to measure the expectation value of the operator. We detail an algorithm to completely partition the full set of Pauli strings acting on any number of qubits into the minimal number of sets of commuting families, and we provide python code to perform the partitioning. The partitioning method scales linearly with the size of the set of Pauli strings and it naturally provides a fast method of diagonalizing the commuting families with quantum gates. We provide a package that integrates the partitioning into Qiskit, and use this to benchmark the algorithm with dense Hamiltonians, such as those that arise in matrix quantum mechanics models, on IBM hardware. We demonstrate computational speedups close to the theoretical limit of \$(3/2){\textasciicircum}m\$ relative to qubit-wise commuting groupings, for \$m=2,{\textbackslash}dotsc,6\$ qubits.},
	urldate = {2023-10-08},
	publisher = {arXiv},
	author = {Reggio, Ben and Butt, Nouman and Lytle, Andrew and Draper, Patrick},
	month = jun,
	year = {2023},
	note = {arXiv:2305.11847 [hep-lat, physics:hep-ph, physics:quant-ph]},
	keywords = {Pauli-Partitioning},
	annote = {Comment: 17 pages, 6 figures},
	file = {arXiv Fulltext PDF:files/280/Reggio 등 - 2023 - Fast Partitioning of Pauli Strings into Commuting .pdf:application/pdf;arXiv.org Snapshot:files/281/2305.html:text/html},
}

@article{ying_preparing_2023,
	title = {Preparing a {Fast} {Pauli} {Decomposition} for {Variational} {Quantum} {Solving} {Linear} {Equations}},
	volume = {535},
	issn = {0003-3804, 1521-3889},
	url = {https://onlinelibrary.wiley.com/doi/10.1002/andp.202300212},
	doi = {10.1002/andp.202300212},
	abstract = {Abstract
            Solving linear equations is a basic and significant mathematical task, and it can be executed by variational quantum algorithm (VQA) with quantum advantages by leveraging near‐term quantum device and classical optimizer. In the above algorithm, the coefficient matrix should be decomposed first but slowly with the traditional method, for realizing an effective quantum circuit. In this paper, a general framework for preparing a fast Pauli decomposition for solving arbitrary linear equations using VQA is proposed. This method has a simpler form and reduces the complexity of matrix decomposition compared with the traditional one. Moreover, the concrete tables of two and three qubits cases are given for looking up quickly and the instances of Toeplitz matrix, Yule–Walker, and arbitrary equations are demonstrated. Finally, numerical simulations are given to verify this method. This work provides a more convenient and faster preparatory phase for solving linear equations using VQA.},
	language = {en},
	number = {11},
	urldate = {2024-03-04},
	journal = {Annalen der Physik},
	author = {Ying, Jia‐Wei and Shen, Jun‐Chen and Zhou, Lan and Zhong, Wei and Du, Ming‐Ming and Sheng, Yu‐Bo},
	month = nov,
	year = {2023},
	pages = {2300212},
	file = {Annalen der Physik - 2023 - Ying - Preparing a Fast Pauli Decomposition for Variational Quantum Solving Linear Equations.pdf:/Users/hyunseongkim/Downloads/Annalen der Physik - 2023 - Ying - Preparing a Fast Pauli Decomposition for Variational Quantum Solving Linear Equations.pdf:application/pdf},
}

@article{koska_tree-approach_2024,
	title = {A tree-approach {Pauli} decomposition algorithm with application to quantum computing},
	copyright = {arXiv.org perpetual, non-exclusive license},
	url = {https://arxiv.org/abs/2403.11644},
	doi = {10.48550/ARXIV.2403.11644},
	abstract = {The Pauli matrices are 2-by-2 matrices that are very useful in quantum computing. They can be used as elementary gates in quantum circuits but also to decompose any matrix of \${\textbackslash}mathbb\{C\}{\textasciicircum}\{2{\textasciicircum}n {\textbackslash}times 2{\textasciicircum}n\}\$ as a linear combination of tensor products of the Pauli matrices. However, the computational cost of this decomposition is potentially very expensive since it can be exponential in \$n\$. In this paper, we propose an algorithm with a parallel implementation that optimizes this decomposition using a tree approach to avoid redundancy in the computation while using a limited memory footprint. We also explain how some particular matrix structures can be exploited to reduce the number of operations. We provide numerical experiments to evaluate the sequential and parallel performance of our decomposition algorithm and we illustrate how this algorithm can be applied to encode matrices in a quantum memory.},
	urldate = {2024-03-25},
	author = {Koska, Océane and Baboulin, Marc and Gazda, Arnaud},
	year = {2024},
	note = {Publisher: [object Object] Version Number: 1},
	keywords = {FOS: Physical sciences, Quantum Physics (quant-ph)},
	annote = {Other 11 pages, 7 figures, submitted to ISC 2024},
	file = {Koska 등 - 2024 - A tree-approach Pauli decomposition algorithm with.pdf:files/448/Koska 등 - 2024 - A tree-approach Pauli decomposition algorithm with.pdf:application/pdf},
}

@article{Hantzko_2024,
doi = {10.1088/1402-4896/ad6499},
url = {https://dx.doi.org/10.1088/1402-4896/ad6499},
year = {2024},
month = {jul},
publisher = {IOP Publishing},
volume = {99},
number = {8},
pages = {085128},
author = {Lukas Hantzko and Lennart Binkowski and Sabhyata Gupta},
title = {Tensorized Pauli decomposition algorithm},
journal = {Physica Scripta},
abstract = {This paper introduces a novel general-purpose algorithm for Pauli decomposition that employs matrix slicing and addition rather than expensive matrix multiplication, significantly accelerating the decomposition of multi-qubit matrices. In a detailed complexity analysis, we show that the algorithm admits the best known worst-case scaling and more favorable runtimes for many practical examples. Numerical experiments are provided to validate the asymptotic speed-up already for small instance sizes, underscoring the algorithm’s potential significance in the realm of quantum computing and quantum chemistry simulations.}
}


@article{vidal_romero_paulicomposer_2023,
	title = {{PauliComposer}: compute tensor products of {Pauli} matrices efficiently},
	volume = {22},
	issn = {1573-1332},
	shorttitle = {{PauliComposer}},
	url = {https://link.springer.com/10.1007/s11128-023-04204-w},
	doi = {10.1007/s11128-023-04204-w},
	abstract = {We introduce a simple algorithm that efﬁciently computes tensor products of Pauli matrices. This is done by tailoring the calculations to this speciﬁc case, which allows to avoid unnecessary calculations. The strength of this strategy is benchmarked against state-of-the-art techniques, showing a remarkable acceleration. As a side product, we provide an optimized method for one key calculus in quantum simulations: the Pauli basis decomposition of Hamiltonians.},
	language = {en},
	number = {12},
	urldate = {2024-03-25},
	journal = {Quantum Information Processing},
	author = {Vidal Romero, Sebastián and Santos-Suárez, Juan},
	month = dec,
	year = {2023},
	pages = {449},
	annote = {이 논문은 Pauli matrix 를 주어진 Pauli string 으로 부터 빠르게 구현하는 방법을 다룬 논문인데, Hamiltonian 구축은 여전히 개별 matrix를 구현하고 더하는 방법으로 구현하고 있다.},
	file = {Vidal Romero 그리고 Santos-Suárez - 2023 - PauliComposer compute tensor products of Pauli ma.pdf:files/451/Vidal Romero 그리고 Santos-Suárez - 2023 - PauliComposer compute tensor products of Pauli ma.pdf:application/pdf},
}

@misc{Qiskit,
    author = {{Qiskit contributors}},
    title = {Qiskit: An Open-source Framework for Quantum Computing},
    year = {2023},
    doi = {10.5281/zenodo.2573505}
}

@article{bergholm2018pennylane,
  title={Pennylane: Automatic differentiation of hybrid quantum-classical computations},
  author={Bergholm, Ville and Izaac, Josh and Schuld, Maria and Gogolin, Christian and Ahmed, Shahnawaz and Ajith, Vishnu and Alam, M Sohaib and Alonso-Linaje, Guillermo and AkashNarayanan, B and Asadi, Ali and others},
  journal={arXiv preprint arXiv:1811.04968},
  year={2018}
}

@software{cirq_developers_2023_10247207,
  author       = {Cirq Developers},
  title        = {Cirq},
  month        = dec,
  year         = 2023,
  publisher    = {Zenodo},
  version      = {v1.3.0},
  doi          = {10.5281/zenodo.10247207},
  url          = {https://doi.org/10.5281/zenodo.10247207}
}

@article{harris2020array,
 title         = {Array programming with {NumPy}},
 author        = {Charles R. Harris and K. Jarrod Millman and St{\'{e}}fan J.
                 van der Walt and Ralf Gommers and Pauli Virtanen and David
                 Cournapeau and Eric Wieser and Julian Taylor and Sebastian
                 Berg and Nathaniel J. Smith and Robert Kern and Matti Picus
                 and Stephan Hoyer and Marten H. van Kerkwijk and Matthew
                 Brett and Allan Haldane and Jaime Fern{\'{a}}ndez del
                 R{\'{i}}o and Mark Wiebe and Pearu Peterson and Pierre
                 G{\'{e}}rard-Marchant and Kevin Sheppard and Tyler Reddy and
                 Warren Weckesser and Hameer Abbasi and Christoph Gohlke and
                 Travis E. Oliphant},
 year          = {2020},
 month         = sep,
 journal       = {Nature},
 volume        = {585},
 number        = {7825},
 pages         = {357--362},
 doi           = {10.1038/s41586-020-2649-2},
 publisher     = {Springer Science and Business Media {LLC}},
 url           = {https://doi.org/10.1038/s41586-020-2649-2}
}

@article{2020SciPy-NMeth,
  author  = {Virtanen, Pauli and Gommers, Ralf and Oliphant, Travis E. and
            Haberland, Matt and Reddy, Tyler and Cournapeau, David and
            Burovski, Evgeni and Peterson, Pearu and Weckesser, Warren and
            Bright, Jonathan and {van der Walt}, St{\'e}fan J. and
            Brett, Matthew and Wilson, Joshua and Millman, K. Jarrod and
            Mayorov, Nikolay and Nelson, Andrew R. J. and Jones, Eric and
            Kern, Robert and Larson, Eric and Carey, C J and
            Polat, {\.I}lhan and Feng, Yu and Moore, Eric W. and
            {VanderPlas}, Jake and Laxalde, Denis and Perktold, Josef and
            Cimrman, Robert and Henriksen, Ian and Quintero, E. A. and
            Harris, Charles R. and Archibald, Anne M. and
            Ribeiro, Ant{\^o}nio H. and Pedregosa, Fabian and
            {van Mulbregt}, Paul and {SciPy 1.0 Contributors}},
  title   = {{{SciPy} 1.0: Fundamental Algorithms for Scientific
            Computing in Python}},
  journal = {Nature Methods},
  year    = {2020},
  volume  = {17},
  pages   = {261--272},
  adsurl  = {https://rdcu.be/b08Wh},
  doi     = {10.1038/s41592-019-0686-2},
}

@software{kim_2024_TPC,
  author       = {Kim, Hyunseong},
  title        = {{Tensorized Pauli composer}},
  month        = Oct,
  year         = 2024,
  publisher    = {Github},
  url          = {https://github.com/HYUNSEONG-KIM/Tensorized-Pauli-Composer}
}

@software{kim_opttrot,
	author       = {Kim, Hyunseong},
  	title        = {{OptTrot: Optimization framework of Trotter circuit.}},
  	month        = Oct,
  	year         = 2024,
  	publisher    = {Github},
  	url          = {https://github.com/OptTrot/OptTrot}
}

{=======================================================================}


@article{budinich_computational_2009,
	title = {On {Computational} {Complexity} of {Clifford} {Algebra}},
	volume = {50},
	issn = {0022-2488, 1089-7658},
	url = {http://arxiv.org/abs/0904.0417},
	doi = {10.1063/1.3133042},
	abstract = {After a brief discussion of the computational complexity of Clifford algebras, we present a new basis for even Clifford algebra Cl(2m) that simplifies greatly the actual calculations and, without resorting to the conventional matrix isomorphism formulation, obtains the same complexity. In the last part we apply these results to the Clifford algebra formulation of the NP-complete problem of the maximum clique of a graph introduced in a previous paper.},
	number = {5},
	urldate = {2024-08-05},
	journal = {Journal of Mathematical Physics},
	author = {Budinich, Marco},
	month = may,
	year = {2009},
	note = {arXiv:0904.0417 [math-ph]},
	keywords = {Mathematical Physics, Computer Science - Discrete Mathematics, Clifford Algebra},
	pages = {053514},
	file = {arXiv Fulltext PDF:C\:\\Users\\cmat411a\\Zotero\\storage\\3MLV3PM5\\Budinich - 2009 - On Computational Complexity of Clifford Algebra.pdf:application/pdf;arXiv.org Snapshot:C\:\\Users\\cmat411a\\Zotero\\storage\\BUCPHLXL\\0904.html:text/html},
}
@misc{vlasov2002notesweylcliffordalgebras,
      title={Notes on Weyl-Clifford algebras}, 
      author={Alexander Yu. Vlasov},
      year={2002},
      eprint={math-ph/0112049},
      archivePrefix={arXiv},
      primaryClass={math-ph},
      url={https://arxiv.org/abs/math-ph/0112049}, 
}

@article{ablamowicz_matrix_nodate,
	title = {Matrix {Exponential} via {Clif} ford {Algebras}},
	abstract = {We use isomorphism ϕ between matrix algebras and simple orthogonal Clifford algebras C (Q) to compute matrix exponential eA of a real, complex, and quaternionic matrix A. The isomorphic image p = ϕ(A) in C (Q), where the quadratic form Q has a suitable signature (p, q), is exponentiated modulo a minimal polynomial of p using Clifford exponential. Elements of C (Q) are treated as symbolic multivariate polynomials in Grassmann monomials. Computations in C (Q) are performed with a Maple package ‘CLIFFORD’. Three examples of matrix exponentiation are given.},
	language = {en},
	author = {Ablamowicz, Rafal},
	keywords = {Clifford Algebra, Matrix exponential},
	file = {Ablamowicz - Matrix Exponential via Clif ford Algebras.pdf:C\:\\Users\\cmat411a\\Zotero\\storage\\7JWQNLGL\\Ablamowicz - Matrix Exponential via Clif ford Algebras.pdf:application/pdf},
}

@incollection{dorst_clifford_2002,
	address = {Boston, MA},
	title = {Clifford {Numbers} and their {Inverses} {Calculated} using the {Matrix} {Representation}},
	isbn = {978-1-4612-6606-8 978-1-4612-0089-5},
	url = {http://link.springer.com/10.1007/978-1-4612-0089-5_15},
	language = {en},
	urldate = {2024-08-06},
	booktitle = {Applications of {Geometric} {Algebra} in {Computer} {Science} and {Engineering}},
	publisher = {Birkhäuser Boston},
	author = {Fletcher, John P.},
	editor = {Dorst, Leo and Doran, Chris and Lasenby, Joan},
	year = {2002},
	doi = {10.1007/978-1-4612-0089-5_15},
	keywords = {Clifford Algebra},
	pages = {169--178},
}

@article{marin_drinov_academic_publishing_house_matrix_2017,
	title = {On {Matrix} {Representations} of {Geometric} ({Clifford}) {Algebras}},
	volume = {43},
	issn = {13125192, 13145673},
	url = {http://www.bio21.bas.bg/jgsp/jgsp_files/vol43/volume43cont.html},
	doi = {10.7546/jgsp-43-2017-1-36},
	abstract = {Representations of geometric (Clifford) algebras with real square matrices are reviewed by providing the general theorem as well as examples of lowest dimensions. New deﬁnitions for isometry and norm are proposed. Direct and indirect isometries are identiﬁed respectively with automorphisms and antiautomorphisms of the geometric algebra, while the norm of every element is deﬁned as the nth-root of the absolute value of the determinant of its matrix representation of order n. It is deduced in which geometric algebras direct isometries are inner automorphisms (similarity transformations of matrices). Indirect isometries need reversion too. Finally, the most common isometries are reviewed in order to write them in this way.},
	language = {en},
	urldate = {2024-08-06},
	journal = {Journal of Geometry and Symmetry in Physics},
	author = {{Marin Drinov Academic Publishing House} and Calvet, Ramon G.},
	year = {2017},
	keywords = {Clifford Algebra},
	pages = {1--36},
	file = {Marin Drinov Academic Publishing House 그리고 Calvet - 2017 - On Matrix Representations of Geometric (Clifford) .pdf:C\:\\Users\\cmat411a\\Zotero\\storage\\ZTWNEZUX\\Marin Drinov Academic Publishing House 그리고 Calvet - 2017 - On Matrix Representations of Geometric (Clifford) .pdf:application/pdf},
}

@article{poole_pauli-dirac_1982,
	title = {Pauli-{Dirac} matrix generators of {Clifford} {Algebras}},
	volume = {12},
	copyright = {http://www.springer.com/tdm},
	issn = {0015-9018, 1572-9516},
	url = {http://link.springer.com/10.1007/BF00729808},
	doi = {10.1007/BF00729808},
	language = {en},
	number = {7},
	urldate = {2024-08-10},
	journal = {Foundations of Physics},
	author = {Poole, Charles P. and Farach, Horacio A.},
	month = jul,
	year = {1982},
	keywords = {Clifford Algebra},
	pages = {719--738},
	file = {Poole 그리고 Farach - 1982 - Pauli-Dirac matrix generators of Clifford Algebras.pdf:C\:\\Users\\cmat411a\\Zotero\\storage\\RW432CAN\\Poole 그리고 Farach - 1982 - Pauli-Dirac matrix generators of Clifford Algebras.pdf:application/pdf},
}

@book{dorst_applications_2002,
	address = {Boston, MA},
	title = {Applications of {Geometric} {Algebra} in {Computer} {Science} and {Engineering}},
	copyright = {http://www.springer.com/tdm},
	isbn = {978-1-4612-6606-8 978-1-4612-0089-5},
	url = {http://link.springer.com/10.1007/978-1-4612-0089-5},
	language = {en},
	urldate = {2024-08-20},
	publisher = {Birkhäuser Boston},
	editor = {Dorst, Leo and Doran, Chris and Lasenby, Joan},
	year = {2002},
	doi = {10.1007/978-1-4612-0089-5},
	keywords = {Clifford Algebra},
	file = {전문(全文):C\:\\Users\\cmat411a\\Zotero\\storage\\L7HH9BLK\\Dorst 등 - 2002 - Applications of Geometric Algebra in Computer Scie.pdf:application/pdf},
}

@incollection{dorst_compound_2002,
	address = {Boston, MA},
	title = {Compound {Matrices} and {Pfaffians}: {A} {Representation} of  {Geometric} {Algebra}},
	copyright = {http://www.springer.com/tdm},
	isbn = {978-1-4612-6606-8 978-1-4612-0089-5},
	url = {http://link.springer.com/10.1007/978-1-4612-0089-5},
	language = {en},
	urldate = {2024-08-20},
	booktitle = {Applications of {Geometric} {Algebra} in {Computer} {Science} and {Engineering}},
	publisher = {Birkhäuser Boston},
	editor = {Dorst, Leo and Doran, Chris and Lasenby, Joan},
	year = {2002},
	doi = {10.1007/978-1-4612-0089-5},
	keywords = {Clifford Algebra},
	pages = {109--116},
}

@incollection{dorst_clifford_2002-1,
	address = {Boston, MA},
	title = {Clifford {Numbers} and their {Inverses} {Calculated} using the  {Matrix} {Representation}},
	copyright = {http://www.springer.com/tdm},
	isbn = {978-1-4612-6606-8 978-1-4612-0089-5},
	url = {http://link.springer.com/10.1007/978-1-4612-0089-5},
	language = {en},
	urldate = {2024-08-20},
	booktitle = {Applications of {Geometric} {Algebra} in {Computer} {Science} and {Engineering}},
	publisher = {Birkhäuser Boston},
	editor = {Dorst, Leo and Doran, Chris and Lasenby, Joan},
	year = {2002},
	doi = {10.1007/978-1-4612-0089-5},
	keywords = {Clifford Algebra},
	pages = {169--178},
}

@incollection{dorst_symbolic_2002,
	address = {Boston, MA},
	title = {Symbolic {Processing} of {Clifford} {Numbers} in {C}++},
	copyright = {http://www.springer.com/tdm},
	isbn = {978-1-4612-6606-8 978-1-4612-0089-5},
	url = {http://link.springer.com/10.1007/978-1-4612-0089-5},
	language = {en},
	urldate = {2024-08-20},
	booktitle = {Applications of {Geometric} {Algebra} in {Computer} {Science} and {Engineering}},
	publisher = {Birkhäuser Boston},
	editor = {Dorst, Leo and Doran, Chris and Lasenby, Joan},
	year = {2002},
	doi = {10.1007/978-1-4612-0089-5},
	keywords = {Clifford Algebra},
	pages = {157--168},
}


@misc{aragoncamarasa2018cliffordalgebramathematica,
      title={Clifford Algebra with Mathematica}, 
      author={G. Aragon-Camarasa and G. Aragon-Gonzalez and J. L. Aragon and M. A. Rodriguez-Andrade},
      year={2018},
      eprint={0810.2412},
      archivePrefix={arXiv},
      primaryClass={math-ph},
      url={https://arxiv.org/abs/0810.2412}, 
}

@misc{dion2024efficientlymanipulatingpaulistrings,
      title={Efficiently manipulating Pauli strings with PauliArray}, 
      author={Maxime Dion and Tania Belabbas and Nolan Bastien},
      year={2024},
      eprint={2405.19287},
      archivePrefix={arXiv},
      primaryClass={quant-ph},
      url={https://arxiv.org/abs/2405.19287}, 
}