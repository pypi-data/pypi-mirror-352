# coding: utf-8

"""
    Cisco ISE API - Endpoints

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OpenAPIEndpoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connected_links': 'object',
        'custom_attributes': 'object',
        'description': 'str',
        'device_type': 'str',
        'group_id': 'str',
        'hardware_revision': 'str',
        'id': 'str',
        'identity_store': 'str',
        'identity_store_id': 'str',
        'ip_address': 'str',
        'mac': 'str',
        'mdm_attributes': 'object',
        'name': 'str',
        'portal_user': 'str',
        'product_id': 'str',
        'profile_id': 'str',
        'protocol': 'str',
        'serial_number': 'str',
        'software_revision': 'str',
        'static_group_assignment': 'bool',
        'static_profile_assignment': 'bool',
        'vendor': 'str'
    }

    attribute_map = {
        'connected_links': 'connectedLinks',
        'custom_attributes': 'customAttributes',
        'description': 'description',
        'device_type': 'deviceType',
        'group_id': 'groupId',
        'hardware_revision': 'hardwareRevision',
        'id': 'id',
        'identity_store': 'identityStore',
        'identity_store_id': 'identityStoreId',
        'ip_address': 'ipAddress',
        'mac': 'mac',
        'mdm_attributes': 'mdmAttributes',
        'name': 'name',
        'portal_user': 'portalUser',
        'product_id': 'productId',
        'profile_id': 'profileId',
        'protocol': 'protocol',
        'serial_number': 'serialNumber',
        'software_revision': 'softwareRevision',
        'static_group_assignment': 'staticGroupAssignment',
        'static_profile_assignment': 'staticProfileAssignment',
        'vendor': 'vendor'
    }

    def __init__(self, connected_links=None, custom_attributes=None, description=None, device_type=None, group_id=None, hardware_revision=None, id=None, identity_store=None, identity_store_id=None, ip_address=None, mac=None, mdm_attributes=None, name=None, portal_user=None, product_id=None, profile_id=None, protocol=None, serial_number=None, software_revision=None, static_group_assignment=None, static_profile_assignment=None, vendor=None):  # noqa: E501
        """OpenAPIEndpoint - a model defined in Swagger"""  # noqa: E501
        self._connected_links = None
        self._custom_attributes = None
        self._description = None
        self._device_type = None
        self._group_id = None
        self._hardware_revision = None
        self._id = None
        self._identity_store = None
        self._identity_store_id = None
        self._ip_address = None
        self._mac = None
        self._mdm_attributes = None
        self._name = None
        self._portal_user = None
        self._product_id = None
        self._profile_id = None
        self._protocol = None
        self._serial_number = None
        self._software_revision = None
        self._static_group_assignment = None
        self._static_profile_assignment = None
        self._vendor = None
        self.discriminator = None
        if connected_links is not None:
            self.connected_links = connected_links
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes
        if description is not None:
            self.description = description
        if device_type is not None:
            self.device_type = device_type
        if group_id is not None:
            self.group_id = group_id
        if hardware_revision is not None:
            self.hardware_revision = hardware_revision
        if id is not None:
            self.id = id
        if identity_store is not None:
            self.identity_store = identity_store
        if identity_store_id is not None:
            self.identity_store_id = identity_store_id
        if ip_address is not None:
            self.ip_address = ip_address
        self.mac = mac
        if mdm_attributes is not None:
            self.mdm_attributes = mdm_attributes
        if name is not None:
            self.name = name
        if portal_user is not None:
            self.portal_user = portal_user
        if product_id is not None:
            self.product_id = product_id
        if profile_id is not None:
            self.profile_id = profile_id
        if protocol is not None:
            self.protocol = protocol
        if serial_number is not None:
            self.serial_number = serial_number
        if software_revision is not None:
            self.software_revision = software_revision
        if static_group_assignment is not None:
            self.static_group_assignment = static_group_assignment
        if static_profile_assignment is not None:
            self.static_profile_assignment = static_profile_assignment
        if vendor is not None:
            self.vendor = vendor

    @property
    def connected_links(self):
        """Gets the connected_links of this OpenAPIEndpoint.  # noqa: E501


        :return: The connected_links of this OpenAPIEndpoint.  # noqa: E501
        :rtype: object
        """
        return self._connected_links

    @connected_links.setter
    def connected_links(self, connected_links):
        """Sets the connected_links of this OpenAPIEndpoint.


        :param connected_links: The connected_links of this OpenAPIEndpoint.  # noqa: E501
        :type: object
        """

        self._connected_links = connected_links

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this OpenAPIEndpoint.  # noqa: E501


        :return: The custom_attributes of this OpenAPIEndpoint.  # noqa: E501
        :rtype: object
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this OpenAPIEndpoint.


        :param custom_attributes: The custom_attributes of this OpenAPIEndpoint.  # noqa: E501
        :type: object
        """

        self._custom_attributes = custom_attributes

    @property
    def description(self):
        """Gets the description of this OpenAPIEndpoint.  # noqa: E501


        :return: The description of this OpenAPIEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OpenAPIEndpoint.


        :param description: The description of this OpenAPIEndpoint.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def device_type(self):
        """Gets the device_type of this OpenAPIEndpoint.  # noqa: E501


        :return: The device_type of this OpenAPIEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this OpenAPIEndpoint.


        :param device_type: The device_type of this OpenAPIEndpoint.  # noqa: E501
        :type: str
        """

        self._device_type = device_type

    @property
    def group_id(self):
        """Gets the group_id of this OpenAPIEndpoint.  # noqa: E501


        :return: The group_id of this OpenAPIEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this OpenAPIEndpoint.


        :param group_id: The group_id of this OpenAPIEndpoint.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def hardware_revision(self):
        """Gets the hardware_revision of this OpenAPIEndpoint.  # noqa: E501


        :return: The hardware_revision of this OpenAPIEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._hardware_revision

    @hardware_revision.setter
    def hardware_revision(self, hardware_revision):
        """Sets the hardware_revision of this OpenAPIEndpoint.


        :param hardware_revision: The hardware_revision of this OpenAPIEndpoint.  # noqa: E501
        :type: str
        """

        self._hardware_revision = hardware_revision

    @property
    def id(self):
        """Gets the id of this OpenAPIEndpoint.  # noqa: E501


        :return: The id of this OpenAPIEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OpenAPIEndpoint.


        :param id: The id of this OpenAPIEndpoint.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def identity_store(self):
        """Gets the identity_store of this OpenAPIEndpoint.  # noqa: E501


        :return: The identity_store of this OpenAPIEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._identity_store

    @identity_store.setter
    def identity_store(self, identity_store):
        """Sets the identity_store of this OpenAPIEndpoint.


        :param identity_store: The identity_store of this OpenAPIEndpoint.  # noqa: E501
        :type: str
        """

        self._identity_store = identity_store

    @property
    def identity_store_id(self):
        """Gets the identity_store_id of this OpenAPIEndpoint.  # noqa: E501


        :return: The identity_store_id of this OpenAPIEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._identity_store_id

    @identity_store_id.setter
    def identity_store_id(self, identity_store_id):
        """Sets the identity_store_id of this OpenAPIEndpoint.


        :param identity_store_id: The identity_store_id of this OpenAPIEndpoint.  # noqa: E501
        :type: str
        """

        self._identity_store_id = identity_store_id

    @property
    def ip_address(self):
        """Gets the ip_address of this OpenAPIEndpoint.  # noqa: E501


        :return: The ip_address of this OpenAPIEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this OpenAPIEndpoint.


        :param ip_address: The ip_address of this OpenAPIEndpoint.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def mac(self):
        """Gets the mac of this OpenAPIEndpoint.  # noqa: E501


        :return: The mac of this OpenAPIEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this OpenAPIEndpoint.


        :param mac: The mac of this OpenAPIEndpoint.  # noqa: E501
        :type: str
        """
        if mac is None:
            raise ValueError("Invalid value for `mac`, must not be `None`")  # noqa: E501

        self._mac = mac

    @property
    def mdm_attributes(self):
        """Gets the mdm_attributes of this OpenAPIEndpoint.  # noqa: E501


        :return: The mdm_attributes of this OpenAPIEndpoint.  # noqa: E501
        :rtype: object
        """
        return self._mdm_attributes

    @mdm_attributes.setter
    def mdm_attributes(self, mdm_attributes):
        """Sets the mdm_attributes of this OpenAPIEndpoint.


        :param mdm_attributes: The mdm_attributes of this OpenAPIEndpoint.  # noqa: E501
        :type: object
        """

        self._mdm_attributes = mdm_attributes

    @property
    def name(self):
        """Gets the name of this OpenAPIEndpoint.  # noqa: E501


        :return: The name of this OpenAPIEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OpenAPIEndpoint.


        :param name: The name of this OpenAPIEndpoint.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def portal_user(self):
        """Gets the portal_user of this OpenAPIEndpoint.  # noqa: E501


        :return: The portal_user of this OpenAPIEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._portal_user

    @portal_user.setter
    def portal_user(self, portal_user):
        """Sets the portal_user of this OpenAPIEndpoint.


        :param portal_user: The portal_user of this OpenAPIEndpoint.  # noqa: E501
        :type: str
        """

        self._portal_user = portal_user

    @property
    def product_id(self):
        """Gets the product_id of this OpenAPIEndpoint.  # noqa: E501


        :return: The product_id of this OpenAPIEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this OpenAPIEndpoint.


        :param product_id: The product_id of this OpenAPIEndpoint.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def profile_id(self):
        """Gets the profile_id of this OpenAPIEndpoint.  # noqa: E501


        :return: The profile_id of this OpenAPIEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this OpenAPIEndpoint.


        :param profile_id: The profile_id of this OpenAPIEndpoint.  # noqa: E501
        :type: str
        """

        self._profile_id = profile_id

    @property
    def protocol(self):
        """Gets the protocol of this OpenAPIEndpoint.  # noqa: E501


        :return: The protocol of this OpenAPIEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this OpenAPIEndpoint.


        :param protocol: The protocol of this OpenAPIEndpoint.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def serial_number(self):
        """Gets the serial_number of this OpenAPIEndpoint.  # noqa: E501


        :return: The serial_number of this OpenAPIEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this OpenAPIEndpoint.


        :param serial_number: The serial_number of this OpenAPIEndpoint.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def software_revision(self):
        """Gets the software_revision of this OpenAPIEndpoint.  # noqa: E501


        :return: The software_revision of this OpenAPIEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._software_revision

    @software_revision.setter
    def software_revision(self, software_revision):
        """Sets the software_revision of this OpenAPIEndpoint.


        :param software_revision: The software_revision of this OpenAPIEndpoint.  # noqa: E501
        :type: str
        """

        self._software_revision = software_revision

    @property
    def static_group_assignment(self):
        """Gets the static_group_assignment of this OpenAPIEndpoint.  # noqa: E501


        :return: The static_group_assignment of this OpenAPIEndpoint.  # noqa: E501
        :rtype: bool
        """
        return self._static_group_assignment

    @static_group_assignment.setter
    def static_group_assignment(self, static_group_assignment):
        """Sets the static_group_assignment of this OpenAPIEndpoint.


        :param static_group_assignment: The static_group_assignment of this OpenAPIEndpoint.  # noqa: E501
        :type: bool
        """

        self._static_group_assignment = static_group_assignment

    @property
    def static_profile_assignment(self):
        """Gets the static_profile_assignment of this OpenAPIEndpoint.  # noqa: E501


        :return: The static_profile_assignment of this OpenAPIEndpoint.  # noqa: E501
        :rtype: bool
        """
        return self._static_profile_assignment

    @static_profile_assignment.setter
    def static_profile_assignment(self, static_profile_assignment):
        """Sets the static_profile_assignment of this OpenAPIEndpoint.


        :param static_profile_assignment: The static_profile_assignment of this OpenAPIEndpoint.  # noqa: E501
        :type: bool
        """

        self._static_profile_assignment = static_profile_assignment

    @property
    def vendor(self):
        """Gets the vendor of this OpenAPIEndpoint.  # noqa: E501


        :return: The vendor of this OpenAPIEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this OpenAPIEndpoint.


        :param vendor: The vendor of this OpenAPIEndpoint.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenAPIEndpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenAPIEndpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
