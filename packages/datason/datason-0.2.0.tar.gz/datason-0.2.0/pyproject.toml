[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "datason"
version = "0.2.0"
description = "A comprehensive Python package for intelligent serialization that handles complex data types with ease."
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = ["serialization", "json", "pandas", "datetime", "numpy", "ml", "ai", "data-science"]
authors = [
    { name = "datason Contributors" },
]
maintainers = [
    { name = "datason Maintainers", email = "maintainers@datason.dev" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dependencies = []

[project.optional-dependencies]
# Core data science dependencies
pandas = ["pandas>=1.3.0"]
numpy = ["numpy>=1.21.0"]

# Machine learning dependencies
ml = [
    "torch>=1.12.0",
    "tensorflow>=2.10.0",
    "scikit-learn>=1.1.0",
    "scipy>=1.9.0",
    "jax[cpu]>=0.4.0",
    "Pillow>=9.0.0",
    "transformers>=4.20.0",
]

# All optional features
all = [
    "pandas>=1.3.0",
    "numpy>=1.21.0",
    "torch>=1.12.0",
    "tensorflow>=2.10.0",
    "scikit-learn>=1.1.0",
    "scipy>=1.9.0",
    "jax[cpu]>=0.4.0",
    "Pillow>=9.0.0",
    "transformers>=4.20.0",
]

# Development dependencies
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",  # Parallel testing
    "pytest-benchmark>=4.0.0",  # Performance testing

    # Code quality (Ruff replaces black, isort, flake8, pyupgrade, etc.)
    "ruff>=0.1.6",

    # Type checking
    "mypy>=1.6.0",
    "types-requests>=2.31.0",

    # Security
    "bandit[toml]>=1.7.5",
    "safety>=2.3.5",
    "semgrep>=1.45.0",

    # Documentation
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.23.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.1",

    # Release and publishing
    "twine>=4.0.2",
    "build>=1.0.3",
    "hatch>=1.7.0",

    # Git hooks and automation
    "pre-commit>=3.5.0",

    # Dependency management
    "pip-audit>=2.6.1",
    "pip-tools>=7.3.0",
]

# Documentation only (lighter install for docs-only contributors)
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.23.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.1",
]

[project.urls]
Homepage = "https://github.com/danielendler/datason"
Documentation = "https://datason.readthedocs.io"
Repository = "https://github.com/danielendler/datason"
"Bug Tracker" = "https://github.com/danielendler/datason/issues"
Changelog = "https://github.com/danielendler/datason/blob/main/CHANGELOG.md"
Discussions = "https://github.com/danielendler/datason/discussions"
Funding = "https://github.com/sponsors/danielendler"

[tool.hatch.build.targets.wheel]
packages = ["datason"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.git",
    "/.github",
    "/.mypy_cache",
    "/.pytest_cache",
    "/.ruff_cache",
    "/venv",
    "/htmlcov",
    "/.coverage",
    "/coverage.xml",
    "/dist",
    "/build",
    "*.egg-info",
    "__pycache__",
    "/benchmarks",
    "/examples",
    "/tests",
    "/.pre-commit-config.yaml",
]

# ============================================================================
# RUFF CONFIGURATION (replaces black, isort, flake8, pyupgrade, etc.)
# ============================================================================
[tool.ruff]
target-version = "py38"
line-length = 88
extend-exclude = [
    ".bzr", ".direnv", ".eggs", ".git", ".hg", ".mypy_cache", ".nox", ".pants.d",
    ".ruff_cache", ".svn", ".tox", ".venv", "__pypackages__", "_build", "buck-out",
    "build", "dist", "node_modules", "venv"
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit (security)
    "BLE",  # flake8-blind-except
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PL",   # pylint
    "TRY",  # tryceratops
    "RUF",  # ruff-specific rules
]

ignore = [
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "D203",    # 1 blank line required before class docstring
    "D213",    # Multi-line docstring summary should start at the second line
    "ANN401",  # Dynamically typed expressions (Any) are disallowed
    "S101",    # Use of assert detected (OK for tests)
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "TRY003",  # Avoid specifying long messages outside the exception class
    "COM812",  # Missing trailing comma (conflicts with formatter)
    "ISC001",  # Implicit string concatenation (conflicts with formatter)
    # Complexity rules we'll address gradually
    "PLR0911", # Too many return statements (will fix case by case)
    "PLR0912", # Too many branches (will refactor gradually)
    # Strategic ignores for production readiness
    "E501",    # Line too long (black handles most, others are minor docstring overages)
    "BLE001",  # Blind except (many are intentional fallbacks in serialization)
    "SIM105",  # Suppressible exception (changing to contextlib.suppress affects imports)
    "S110",    # try-except-pass (often intentional in serialization fallbacks)
    "EM101",   # Exception message patterns (acceptable for this library type)
    "EM102",   # F-string in exception (acceptable pattern)
    "G004",    # Logging f-string (acceptable performance tradeoff)
    "PLR0124", # Comparison with itself (obj != obj is standard NaN check)
    "TRY300",  # Try-consider-else (minor style preference)
    "TRY400",  # Error instead of exception (acceptable logging pattern)
    "B904",    # Raise without from (acceptable in many serialization contexts)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # assert statements OK in tests
    "D",       # docstrings not required in tests
    "ANN",     # type annotations not required in tests
    "PLR2004", # magic values OK in tests
    "PLR0911", # many returns OK in tests
    "PLR0912", # many branches OK in tests
    "PLR0915", # too many statements OK in tests
    "PT009",   # unittest-style assertions can be mixed with pytest
    "PT011",   # pytest.raises too broad is acceptable in tests
    "PT027",   # unittest-style raises can be used
    "A003",    # class attribute shadowing builtin is OK in test classes
    "B007",    # unused loop variables OK in tests
    "B017",    # pytest.raises(Exception) is acceptable in tests
    "DTZ001",  # datetime without timezone OK in tests
    "DTZ005",  # datetime.now() without tz OK in tests
    "TRY002",  # custom exceptions not required in tests
    "TRY200",  # raise from not required in tests
    "SIM117",  # combined with statements not required in tests
    "SLF001",  # private member access OK in tests
    "F841",    # unused variables OK in tests
    "F401",    # unused imports OK in tests (like jax for testing optional deps)
    "C416",    # unnecessary list comprehension OK in tests
    "N806",    # variable names (like X) OK in tests for ML examples
]
"examples/**/*.py" = [
    "T201",    # print statements OK in examples
    "ANN",     # type annotations not required in examples
    "D",       # docstrings not required in examples
    "DTZ001",  # datetime without timezone OK in examples
    "DTZ005",  # datetime.now() without tz OK in examples
    "F401",    # unused imports OK in examples (for demonstration)
    "N806",    # variable names (like X, A) OK in examples
    "A003",    # class attribute shadowing builtin OK in examples
]
"scripts/**/*.py" = [
    "T201",    # print statements OK in scripts
    "ANN",     # type annotations not required in scripts
    "D",       # docstrings not required in scripts
]
"benchmarks/**/*.py" = [
    "T201",    # print statements OK in benchmarks
    "S301",    # pickle usage OK for benchmarking
    "ANN",     # type annotations not required in benchmarks
    "D415",    # docstring punctuation not critical in benchmarks
    "DTZ005",  # datetime.now() without tz OK in benchmarks
    "PLR0911", # many returns OK in benchmarks
    "PLR0912", # many branches OK in benchmarks
    "PLR0915", # too many statements OK in benchmarks
    "RUF001",  # ambiguous characters (like Ã—) OK in benchmarks
]
"datason/__init__.py" = [
    "F401",    # Unused imports OK - they're conditionally exported to __all__
]
"datason/core.py" = [
    "PLR0915", # too many statements OK in main serialize function - it's complex but well-structured
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["datason"]
force-sort-within-sections = true

# ============================================================================
# PYTEST CONFIGURATION
# ============================================================================
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-v",
    "--cov=datason",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmarks",
    "core: marks core functionality tests (no optional dependencies)",
    "numpy: marks tests requiring numpy",
    "pandas: marks tests requiring pandas",
    "sklearn: marks tests requiring scikit-learn",
    "ml: marks tests requiring ML libraries (torch, tensorflow, etc.)",
    "optional: marks tests for optional dependency functionality",
    "fallback: marks tests for fallback behavior when dependencies are missing",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# ============================================================================
# MYPY CONFIGURATION
# ============================================================================
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "numpy.*",
    "torch.*",
    "tensorflow.*",
    "sklearn.*",
    "scipy.*",
    "jax.*",
    "PIL.*",
    "transformers.*",
]
ignore_missing_imports = true

# ============================================================================
# COVERAGE CONFIGURATION
# ============================================================================
[tool.coverage.run]
source = ["datason"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "benchmarks/*",
    "scripts/*",
    "examples/*"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "TYPE_CHECKING",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

# ============================================================================
# BANDIT SECURITY CONFIGURATION
# ============================================================================
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "scripts"]
skips = ["B101"]  # Skip assert_used test

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/tests/*"]
