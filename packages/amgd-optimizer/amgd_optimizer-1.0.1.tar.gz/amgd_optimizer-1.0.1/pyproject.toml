[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "amgd_optimizer"
version = "1.0.1"
description = "Adaptive Momentum Gradient Descent for Regularized Poisson Regression"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Ibrahim Bakari", email = "2020913072@ogr.cu.edu.tr"},
]
maintainers = [
    {name = "Ibrahim Bakari", email = "brhmbakari@gmail.com"},
]
keywords = [
    "machine learning",
    "optimization", 
    "poisson regression",
    "regularization",
    "sparse modeling",
    "feature selection"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.19.0",
    "scikit-learn>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=21.0",
    "flake8>=3.8",
    "mypy>=0.812",
    "pre-commit>=2.15",
    "isort>=5.0",
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "sphinxcontrib-napoleon>=0.7",
    "matplotlib>=3.3",
    "myst-parser>=0.15",
]
examples = [
    "jupyter>=1.0",
    "seaborn>=0.11",
    "pandas>=1.3",
    "matplotlib>=3.3",
]
all = [
    # Dev dependencies
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=21.0",
    "flake8>=3.8",
    "mypy>=0.812",
    "pre-commit>=2.15",
    "isort>=5.0",
    # Docs dependencies
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "sphinxcontrib-napoleon>=0.7",
    "matplotlib>=3.3",
    "myst-parser>=0.15",
    # Examples dependencies
    "jupyter>=1.0",
    "seaborn>=0.11",
    "pandas>=1.3",
]

[project.urls]
Homepage = "https://github.com/elbakari01/amgd_optimizer"
Documentation = "https://amgd_optimizer.readthedocs.io/"
Repository = "https://github.com/elbakari01/amgd_optimizer.git"
"Bug Tracker" = "https://github.com/elbakari01/amgd_optimizer/issues"
Changelog = "https://github.com/elbakari01/amgd_optimizer/blob/main/CHANGELOG.md"

[tool.setuptools]
packages = ["amgd_optimizer"]
include-package-data = true

[tool.setuptools.package-data]
amgd_optimizer = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["amgd_optimizer"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "scipy.*",
    "matplotlib.*",
    "seaborn.*",
    "pandas.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=amgd_optimizer",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["amgd_optimizer"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".mypy_cache",
    ".pytest_cache"
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:F401,F811"
]
