[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "talkie"
version = "0.1.1"
description = "Ð£A command line HTTP client that is easy to use"
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT" }
authors = [
    { name = "Craxti" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
dependencies = [
    "typer>=0.9.0",
    "httpx>=0.24.0",
    "rich>=13.4.2",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "openapi-spec-validator>=0.5.1",
    "pygments>=2.14.0",
    "xmltodict>=0.13.0",
    "html2text>=2020.1.16",
    "websockets>=10.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.1.0",
    "pytest-httpserver>=1.0.6",
    "mypy>=1.3.0",
    "black>=23.3.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
]

[project.scripts]
talkie = "talkie.__main__:main"
tlk = "talkie.__main__:main"

[tool.black]
line-length = 88
target-version = ["py38"]

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "integration: marks tests as integration tests",
    "slow: marks tests as slow running",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["talkie"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "pass",
]
show_missing = true 