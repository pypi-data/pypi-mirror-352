# coding: utf-8

"""
    IGX Platform Public API

    The IGX Platform Public API is a powerful API that enables a wide variety of use cases.                 The architecture of the IGX Platform centers around files, collections, tags and analyses,                 securely managed through cloud-based access.                 The Public API can be used to easily import data, annotate metadata, run analyses and export results.

    The version of the OpenAPI document: 1.0.0
    Contact: info@enpicom.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from igx_api.l1.openapi_client.models.get_ml_invocation_stats_response_body_stats_inner_last_invoked_at import GetMlInvocationStatsResponseBodyStatsInnerLastInvokedAt
from igx_api.l1.openapi_client.models.ml_invocation_completed_at import MlInvocationCompletedAt
from typing import Optional, Set
from typing_extensions import Self

class MlInvocation(BaseModel):
    """
    Invocation of an ML endpoint
    """ # noqa: E501
    id: StrictStr
    ml_endpoint_id: StrictStr
    started_at: GetMlInvocationStatsResponseBodyStatsInnerLastInvokedAt
    completed_at: Optional[MlInvocationCompletedAt] = None
    status: StrictStr
    __properties: ClassVar[List[str]] = ["id", "ml_endpoint_id", "started_at", "completed_at", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Pending', 'HandlingIntent', 'Succeeded', 'Failed']):
            raise ValueError("must be one of enum values ('Pending', 'HandlingIntent', 'Succeeded', 'Failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MlInvocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of started_at
        if self.started_at:
            _dict['started_at'] = self.started_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of completed_at
        if self.completed_at:
            _dict['completed_at'] = self.completed_at.to_dict()
        # set to None if completed_at (nullable) is None
        # and model_fields_set contains the field
        if self.completed_at is None and "completed_at" in self.model_fields_set:
            _dict['completed_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MlInvocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "ml_endpoint_id": obj.get("ml_endpoint_id"),
            "started_at": GetMlInvocationStatsResponseBodyStatsInnerLastInvokedAt.from_dict(obj["started_at"]) if obj.get("started_at") is not None else None,
            "completed_at": MlInvocationCompletedAt.from_dict(obj["completed_at"]) if obj.get("completed_at") is not None else None,
            "status": obj.get("status")
        })
        return _obj


