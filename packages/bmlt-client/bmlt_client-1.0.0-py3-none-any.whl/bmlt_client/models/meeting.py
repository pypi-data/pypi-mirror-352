# coding: utf-8

"""
    BMLT

    BMLT Admin API Documentation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Meeting(BaseModel):
    """
    Meeting
    """ # noqa: E501
    service_body_id: StrictInt = Field(alias="serviceBodyId")
    format_ids: List[StrictInt] = Field(alias="formatIds")
    venue_type: StrictInt = Field(alias="venueType")
    temporarily_virtual: StrictBool = Field(alias="temporarilyVirtual")
    day: StrictInt
    start_time: StrictStr = Field(alias="startTime")
    duration: StrictStr
    time_zone: StrictStr = Field(alias="timeZone")
    latitude: Union[StrictFloat, StrictInt]
    longitude: Union[StrictFloat, StrictInt]
    published: StrictBool
    email: StrictStr
    world_id: StrictStr = Field(alias="worldId")
    name: StrictStr
    location_text: Optional[StrictStr] = None
    location_info: Optional[StrictStr] = None
    location_street: Optional[StrictStr] = None
    location_neighborhood: Optional[StrictStr] = None
    location_city_subsection: Optional[StrictStr] = None
    location_municipality: Optional[StrictStr] = None
    location_sub_province: Optional[StrictStr] = None
    location_province: Optional[StrictStr] = None
    location_postal_code_1: Optional[StrictStr] = None
    location_nation: Optional[StrictStr] = None
    phone_meeting_number: Optional[StrictStr] = None
    virtual_meeting_link: Optional[StrictStr] = None
    virtual_meeting_additional_info: Optional[StrictStr] = None
    contact_name_1: Optional[StrictStr] = None
    contact_name_2: Optional[StrictStr] = None
    contact_phone_1: Optional[StrictStr] = None
    contact_phone_2: Optional[StrictStr] = None
    contact_email_1: Optional[StrictStr] = None
    contact_email_2: Optional[StrictStr] = None
    bus_lines: Optional[StrictStr] = None
    train_lines: Optional[StrictStr] = None
    comments: Optional[StrictStr] = None
    custom_fields: Optional[Dict[str, StrictStr]] = Field(default=None, alias="customFields")
    id: StrictInt
    __properties: ClassVar[List[str]] = ["serviceBodyId", "formatIds", "venueType", "temporarilyVirtual", "day", "startTime", "duration", "timeZone", "latitude", "longitude", "published", "email", "worldId", "name", "location_text", "location_info", "location_street", "location_neighborhood", "location_city_subsection", "location_municipality", "location_sub_province", "location_province", "location_postal_code_1", "location_nation", "phone_meeting_number", "virtual_meeting_link", "virtual_meeting_additional_info", "contact_name_1", "contact_name_2", "contact_phone_1", "contact_phone_2", "contact_email_1", "contact_email_2", "bus_lines", "train_lines", "comments", "customFields", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Meeting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Meeting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "serviceBodyId": obj.get("serviceBodyId"),
            "formatIds": obj.get("formatIds"),
            "venueType": obj.get("venueType"),
            "temporarilyVirtual": obj.get("temporarilyVirtual"),
            "day": obj.get("day"),
            "startTime": obj.get("startTime"),
            "duration": obj.get("duration"),
            "timeZone": obj.get("timeZone"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "published": obj.get("published"),
            "email": obj.get("email"),
            "worldId": obj.get("worldId"),
            "name": obj.get("name"),
            "location_text": obj.get("location_text"),
            "location_info": obj.get("location_info"),
            "location_street": obj.get("location_street"),
            "location_neighborhood": obj.get("location_neighborhood"),
            "location_city_subsection": obj.get("location_city_subsection"),
            "location_municipality": obj.get("location_municipality"),
            "location_sub_province": obj.get("location_sub_province"),
            "location_province": obj.get("location_province"),
            "location_postal_code_1": obj.get("location_postal_code_1"),
            "location_nation": obj.get("location_nation"),
            "phone_meeting_number": obj.get("phone_meeting_number"),
            "virtual_meeting_link": obj.get("virtual_meeting_link"),
            "virtual_meeting_additional_info": obj.get("virtual_meeting_additional_info"),
            "contact_name_1": obj.get("contact_name_1"),
            "contact_name_2": obj.get("contact_name_2"),
            "contact_phone_1": obj.get("contact_phone_1"),
            "contact_phone_2": obj.get("contact_phone_2"),
            "contact_email_1": obj.get("contact_email_1"),
            "contact_email_2": obj.get("contact_email_2"),
            "bus_lines": obj.get("bus_lines"),
            "train_lines": obj.get("train_lines"),
            "comments": obj.get("comments"),
            "customFields": obj.get("customFields"),
            "id": obj.get("id")
        })
        return _obj


