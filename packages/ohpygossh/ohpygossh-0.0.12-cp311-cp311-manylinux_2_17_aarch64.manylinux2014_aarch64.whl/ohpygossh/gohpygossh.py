
# python wrapper for package gohpygossh within overall package gohpygossh
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build -no-make -dynamic-link=True -output /project/build/lib.linux-aarch64-cpython-311/ohpygossh -vm /opt/python/cp311-cp311/bin/python gohpygossh

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _gohpygossh
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from gohpygossh import gohpygossh
# and then refer to everything using gohpygossh. prefix
# packages imported by this package listed below:




# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---

# Python type for struct gohpygossh.KeysAndInit
class KeysAndInit(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_gohpygossh.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_gohpygossh.IncRef(self.handle)
		else:
			self.handle = _gohpygossh.gohpygossh_KeysAndInit_CTor()
			_gohpygossh.IncRef(self.handle)
			if  0 < len(args):
				self.CloudInitPath = args[0]
			if "CloudInitPath" in kwargs:
				self.CloudInitPath = kwargs["CloudInitPath"]
			if  1 < len(args):
				self.SshKeyPath = args[1]
			if "SshKeyPath" in kwargs:
				self.SshKeyPath = kwargs["SshKeyPath"]
			if  2 < len(args):
				self.CloudUser = args[2]
			if "CloudUser" in kwargs:
				self.CloudUser = kwargs["CloudUser"]
			if  3 < len(args):
				self.Err = args[3]
			if "Err" in kwargs:
				self.Err = kwargs["Err"]
	def __del__(self):
		_gohpygossh.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'gohpygossh.KeysAndInit{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'gohpygossh.KeysAndInit ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def CloudInitPath(self):
		return _gohpygossh.gohpygossh_KeysAndInit_CloudInitPath_Get(self.handle)
	@CloudInitPath.setter
	def CloudInitPath(self, value):
		if isinstance(value, go.GoClass):
			_gohpygossh.gohpygossh_KeysAndInit_CloudInitPath_Set(self.handle, value.handle)
		else:
			_gohpygossh.gohpygossh_KeysAndInit_CloudInitPath_Set(self.handle, value)
	@property
	def SshKeyPath(self):
		return _gohpygossh.gohpygossh_KeysAndInit_SshKeyPath_Get(self.handle)
	@SshKeyPath.setter
	def SshKeyPath(self, value):
		if isinstance(value, go.GoClass):
			_gohpygossh.gohpygossh_KeysAndInit_SshKeyPath_Set(self.handle, value.handle)
		else:
			_gohpygossh.gohpygossh_KeysAndInit_SshKeyPath_Set(self.handle, value)
	@property
	def CloudUser(self):
		return _gohpygossh.gohpygossh_KeysAndInit_CloudUser_Get(self.handle)
	@CloudUser.setter
	def CloudUser(self, value):
		if isinstance(value, go.GoClass):
			_gohpygossh.gohpygossh_KeysAndInit_CloudUser_Set(self.handle, value.handle)
		else:
			_gohpygossh.gohpygossh_KeysAndInit_CloudUser_Set(self.handle, value)
	@property
	def Err(self):
		return _gohpygossh.gohpygossh_KeysAndInit_Err_Get(self.handle)
	@Err.setter
	def Err(self, value):
		if isinstance(value, go.GoClass):
			_gohpygossh.gohpygossh_KeysAndInit_Err_Set(self.handle, value.handle)
		else:
			_gohpygossh.gohpygossh_KeysAndInit_Err_Set(self.handle, value)

# Python type for struct gohpygossh.KeysForSsh
class KeysForSsh(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_gohpygossh.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_gohpygossh.IncRef(self.handle)
		else:
			self.handle = _gohpygossh.gohpygossh_KeysForSsh_CTor()
			_gohpygossh.IncRef(self.handle)
			if  0 < len(args):
				self.CloudUser = args[0]
			if "CloudUser" in kwargs:
				self.CloudUser = kwargs["CloudUser"]
			if  1 < len(args):
				self.PrivKeyAbsPath = args[1]
			if "PrivKeyAbsPath" in kwargs:
				self.PrivKeyAbsPath = kwargs["PrivKeyAbsPath"]
			if  2 < len(args):
				self.PublicKeyAbsPath = args[2]
			if "PublicKeyAbsPath" in kwargs:
				self.PublicKeyAbsPath = kwargs["PublicKeyAbsPath"]
			if  3 < len(args):
				self.Err = args[3]
			if "Err" in kwargs:
				self.Err = kwargs["Err"]
	def __del__(self):
		_gohpygossh.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'gohpygossh.KeysForSsh{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'gohpygossh.KeysForSsh ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def CloudUser(self):
		return _gohpygossh.gohpygossh_KeysForSsh_CloudUser_Get(self.handle)
	@CloudUser.setter
	def CloudUser(self, value):
		if isinstance(value, go.GoClass):
			_gohpygossh.gohpygossh_KeysForSsh_CloudUser_Set(self.handle, value.handle)
		else:
			_gohpygossh.gohpygossh_KeysForSsh_CloudUser_Set(self.handle, value)
	@property
	def PrivKeyAbsPath(self):
		return _gohpygossh.gohpygossh_KeysForSsh_PrivKeyAbsPath_Get(self.handle)
	@PrivKeyAbsPath.setter
	def PrivKeyAbsPath(self, value):
		if isinstance(value, go.GoClass):
			_gohpygossh.gohpygossh_KeysForSsh_PrivKeyAbsPath_Set(self.handle, value.handle)
		else:
			_gohpygossh.gohpygossh_KeysForSsh_PrivKeyAbsPath_Set(self.handle, value)
	@property
	def PublicKeyAbsPath(self):
		return _gohpygossh.gohpygossh_KeysForSsh_PublicKeyAbsPath_Get(self.handle)
	@PublicKeyAbsPath.setter
	def PublicKeyAbsPath(self, value):
		if isinstance(value, go.GoClass):
			_gohpygossh.gohpygossh_KeysForSsh_PublicKeyAbsPath_Set(self.handle, value.handle)
		else:
			_gohpygossh.gohpygossh_KeysForSsh_PublicKeyAbsPath_Set(self.handle, value)
	@property
	def Err(self):
		return _gohpygossh.gohpygossh_KeysForSsh_Err_Get(self.handle)
	@Err.setter
	def Err(self, value):
		if isinstance(value, go.GoClass):
			_gohpygossh.gohpygossh_KeysForSsh_Err_Set(self.handle, value.handle)
		else:
			_gohpygossh.gohpygossh_KeysForSsh_Err_Set(self.handle, value)


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---
def GenerateKeyPairAndCloudInit(destinationDir, cloudUser):
	"""GenerateKeyPairAndCloudInit(str destinationDir, str cloudUser) object"""
	return KeysAndInit(handle=_gohpygossh.gohpygossh_GenerateKeyPairAndCloudInit(destinationDir, cloudUser))
def GenerateKeysForSsh(destinationDir, cloudUser):
	"""GenerateKeysForSsh(str destinationDir, str cloudUser) object"""
	return KeysForSsh(handle=_gohpygossh.gohpygossh_GenerateKeysForSsh(destinationDir, cloudUser))


# ---- Functions ---
def GenerateShortUUID(length):
	"""GenerateShortUUID(int length) str, str"""
	return _gohpygossh.gohpygossh_GenerateShortUUID(length)
def Hello():
	"""Hello() str"""
	return _gohpygossh.gohpygossh_Hello()
def PublicKeyFile(file):
	"""PublicKeyFile(str file) object"""
	return go.ssh_AuthMethod(handle=_gohpygossh.gohpygossh_PublicKeyFile(file))
def Run(hostname, username, privateKey, command):
	"""Run(str hostname, str username, str privateKey, str command) str, str"""
	return _gohpygossh.gohpygossh_Run(hostname, username, privateKey, command)


