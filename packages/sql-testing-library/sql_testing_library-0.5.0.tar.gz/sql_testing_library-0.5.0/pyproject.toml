[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "sql-testing-library"
version = "0.5.0"
description = "A Python library for testing SQL queries with mock data injection"
authors = ["Gurmeet Saran <gurmeetx@gmail.com>"]
readme = "README.md"
packages = [{include = "sql_testing_library", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.9"
sqlglot = ">=18.0.0,<19.0.0"
pydantic = ">=2.0.0"
pandas = ">=1.0.0"
typing-extensions = {version = ">=4.5.0", python = "<3.10"}
docutils = ">=0.21.2,<0.22.0"
db-dtypes = "^1.4.3"

[tool.poetry.group.bigquery.dependencies]
google-cloud-bigquery = ">=3.0.0"

[tool.poetry.group.athena.dependencies]
boto3 = ">=1.26.0"

[tool.poetry.group.redshift.dependencies]
psycopg2-binary = ">=2.9.0"

[tool.poetry.group.trino.dependencies]
trino = ">=0.322.0"

[tool.poetry.group.snowflake.dependencies]
snowflake-connector-python = ">=3.0.0"

[tool.poetry.extras]
all = ["google-cloud-bigquery", "boto3", "psycopg2-binary", "trino", "snowflake-connector-python"]
bigquery = ["google-cloud-bigquery"]
athena = ["boto3"]
redshift = ["psycopg2-binary"]
trino = ["trino"]
snowflake = ["snowflake-connector-python"]

[tool.poetry.group.dev.dependencies]
pytest = ">=7.0.0"
pytest-asyncio = ">=0.21.0"
pytest-mock = ">=3.10.0"
pytest-cov = ">=4.1.0"
pytest-rerunfailures = ">=12.0.0"
black = ">=22.0.0"
flake8 = ">=4.0.0"
mypy = ">=0.991"
tox = ">=4.0.0"
build = ">=1.0.0"
twine = ">=4.0.0"
ruff = ">=0.0.287"
pre-commit = ">=3.5.0"
commitizen = ">=3.0.0"

[tool.poetry.plugins.pytest11]
sql_testing = "sql_testing_library._pytest_plugin"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true

[tool.ruff]
# Same as Black.
line-length = 100
indent-width = 4
target-version = "py39"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "scripts/validate-athena-setup.py",
]

[tool.ruff.lint]
# Enable Pyflakes and pycodestyle rules.
select = ["E", "F", "I"]
# Enable flake8-bugbear rules and print statement detection.
extend-select = ["B", "T20"]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
# Prevent autofix of print statements - they should be manually reviewed and removed.
unfixable = ["T201", "T203"]

[tool.ruff.lint.per-file-ignores]
# Allow print statements in test files for debugging and output
"tests/test_*.py" = ["T201"]
"tests/*/test_*.py" = ["T201"]

[tool.ruff.lint.isort]
lines-after-imports = 2
known-first-party = ["sql_testing_library"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
addopts = "--cov=src/sql_testing_library --cov-report=term-missing --cov-report=xml:coverage.xml --cov-report=html:htmlcov"
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"

[tool.coverage.run]
source = ["src/sql_testing_library"]
omit = [
    "*/_adapters/base.py",
    "*/_adapters/__init__.py",
    "*/tests/*",
    "*/test_*.py",
]
branch = true
concurrency = ["thread", "multiprocessing"]

[tool.coverage.report]
exclude_lines = [
    # Manual exclusion
    "pragma: no cover",
    
    # Don't complain about missing debug-only code
    "def __repr__",
    "if self\\.debug:",
    "if settings\\.DEBUG",
    
    # Don't complain if tests don't hit defensive assertion code
    "raise AssertionError",
    "raise NotImplementedError",
    "raise ImportError",
    "raise ValueError.*unreachable",
    
    # Don't complain if non-runnable code isn't run
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing\\.TYPE_CHECKING:",
    
    # Abstract methods and classes
    "@abstract",
    "@abstractmethod",
    "class .*\\bProtocol\\):",
    "class .*\\bAbstract.*\\):",
    "raise NotImplementedError.*",
    
    # Exception handling for optional imports
    "except ImportError:",
    "except ModuleNotFoundError:",
    "HAS_.* = False",
    "HAS_.* = True",
    ".*_module = None",
    
    # Skip empty functions/methods and ellipsis
    "^\\s*pass\\s*$",
    "^\\s*\\.\\.\\.\\s*$",
    
    # Type annotation-only lines
    "^\\s*\\.\\.\\.$",
    
    # Platform specific code that may not be tested
    "if sys\\.platform",
    "if os\\.name",
    
    # Version checks
    "if sys\\.version_info",
]
show_missing = true
skip_covered = false

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "pep440"
version_provider = "poetry"
update_changelog_on_bump = true
major_version_zero = true
changelog_merge_prerelease = true
changelog_start_rev = "0.1.0"
