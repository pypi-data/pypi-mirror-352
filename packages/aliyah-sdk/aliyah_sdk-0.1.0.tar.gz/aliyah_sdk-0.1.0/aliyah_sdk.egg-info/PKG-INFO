Metadata-Version: 2.4
Name: aliyah-sdk
Version: 0.1.0
Summary: Aaliyah SDK for connecting AI agents to the Aaliyah platform for compliance checking and monitoring.
Author-email: Your Name <your.email@example.com>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              copyright and other proprietary rights are owned or controlled by
              You. For the purposes of this definition, "Derivative Works" shall
              not include works that remain separable from, or merely link (or
              bind by name) to the interfaces of, the Work and Derivative Works
              thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "Submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean any individual or Legal Entity on behalf
              of whom a Contribution has been received by Licensor and subsequently
              accepted by Licensor.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensed by
              such Contributor that are necessarily infringed by their Contribution(s)
              alone or by combination of their Contribution(s) with the Work to which
              such Contribution(s) was Submitted. If You institute patent litigation
              against any entity (including a cross-claim or counterclaim in a lawsuit)
              alleging that the Work or a Contribution incorporated within the Work
              constitutes direct or contributory patent infringement, then any patent
              licenses granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You give any other recipients of the Work or Derivative Works,
                  a copy of this License; and
        
              (b) You cause any modified files to carry prominent notices stating
                  that You changed the files; and
        
              (c) You retain, in the Source form of any Derivative Works that You
                  distribute, all copyright, patent, trademark, and attribution
                  notices from the Source form of the Work, excluding those notices
                  that do not pertain to any part of the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and do
                  not modify the License. You may add Your own attribution notices
                  within Derivative Works that You distribute, alongside, or as
                  an addendum to, the NOTICE text from the Work, provided that
                  such additional attribution notices cannot be construed as
                  modifying the License.
        
              You may add Your own copyright statement to Your Derivative Works and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your Derivative Works, or
              for any such Modifications to the Work, provided Your use, reproduction,
              and distribution of the Work otherwise complies with the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary usage in describing the origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include the
              brackets!) The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [2025] [Mensterra]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
Keywords: ai,agent,monitoring,compliance,governance,opentelemetry
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Developers
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Monitoring
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests
Requires-Dist: wrapt
Requires-Dist: psutil
Requires-Dist: termcolor
Requires-Dist: opentelemetry-api
Requires-Dist: opentelemetry-sdk
Requires-Dist: opentelemetry-instrumentation
Requires-Dist: opentelemetry-semantic-conventions
Requires-Dist: opentelemetry-exporter-otlp-proto-http
Requires-Dist: pydantic
Requires-Dist: typing-extensions
Requires-Dist: python-dotenv
Requires-Dist: PyYAML
Requires-Dist: openai
Requires-Dist: anthropic
Requires-Dist: google-generativeai
Requires-Dist: karo
Requires-Dist: openpyxl
Requires-Dist: pandas
Requires-Dist: jsonpatch
Requires-Dist: jsonpointer
Requires-Dist: jsonschema
Requires-Dist: referencing
Requires-Dist: rpds-py
Requires-Dist: websocket-client
Requires-Dist: websockets
Requires-Dist: watchfiles
Dynamic: license-file

# Aliyah Python SDK

Python SDK for AI Agent Management and Compliance. Monitor, manage, and ensure compliance for your AI agents.

## Installation

```bash
pip install aliyah-sdk
```

## Quick Start

```python
from aliyah import AliyahClient

# Initialize client with your API key
client = AliyahClient("your_api_key")

# Create an agent
agent = client.agents.create("My Agent")
print(f"Created agent: {agent.name} (ID: {agent.id})")

# Verify agent is sending traces (wait for first session)
if client.agents.wait_for_session(agent.id, timeout=60):
    print("✅ Agent verified and sending traces!")
else:
    print("⏳ No traces received yet")

# Monitor sessions
sessions = client.sessions.list(limit=10)
print(f"Found {len(sessions)} sessions")

# Generate compliance report
report = client.compliance.generate_report(agent_id=agent.id)
print(f"Report generated: {report.get('view_url', 'N/A')}")

# Check for compliance issues
tickets = client.tickets.list(status="open")
if tickets:
    print(f"⚠️ {len(tickets)} open compliance issues")
else:
    print("✅ No open compliance issues")
```

## Agent Instrumentation

**Note**: For agent instrumentation and tracing, use the separate `ops` package. This SDK is for management and monitoring.

```bash
# Install the ops package for agent instrumentation
pip install ops

# In your agent code:
import ops as ao
ao.init(api_key="your_key", exporter_endpoint="https://aliyah-b9b7.onrender.com/v1/traces")
# Your agent code here - automatically traced
```

## API Reference

### Agent Management

```python
# Create agent
agent = client.agents.create("Agent Name", agent_type="custom")

# List agents
agents = client.agents.list()

# Get agent details
agent = client.agents.get(agent_id)

# Check for sessions (verification)
status = client.agents.check_sessions(agent_id)

# Wait for first session (polling)
connected = client.agents.wait_for_session(agent_id, timeout=60)

# Delete agent
client.agents.delete(agent_id)

# Get agent status and health
status = client.agents.get_status(agent_id)
health = client.agents.get_health(agent_id)
```

### Session Management

```python
# List sessions
sessions = client.sessions.list(limit=10, load_all=True)

# Get session details
details = client.sessions.get_details(session_id)

# Get LLM call details
call = client.sessions.get_llm_call(call_id)

# Get agent events
events = client.sessions.get_agent_events(
    agent_id=123,
    event_type="tool_usage",
    start_time="2024-01-01T00:00:00"
)
```

### Compliance Management

```python
# Evaluate session for compliance
result = client.compliance.evaluate_session(session_id, sync=True)

# Get evaluated sessions
sessions = client.compliance.get_evaluated_sessions(
    start_date=datetime(2024, 1, 1),
    agent_id=agent_id
)

# Generate compliance report
report = client.compliance.generate_report(
    start_date=datetime(2024, 1, 1),
    end_date=datetime(2024, 12, 31),
    agent_id=agent_id,
    sync=True
)

# List all reports
reports = client.compliance.list_reports()

# Download report
content = client.compliance.download_report(report_id)
with open("report.pdf", "wb") as f:
    f.write(content)

# Get compliance status data
status_data = client.compliance.get_status_report_data(agent_id=123)
```

### Ticket Management

```python
# List tickets with filters
tickets = client.tickets.list(
    status="open",
    priority="high",
    agent_id=123,
    limit=50
)

# List my assigned tickets
my_tickets = client.tickets.list_my_tickets(status="in_progress")

# Get detailed ticket information
ticket = client.tickets.get(ticket_id)

# Update ticket
updated = client.tickets.update(
    ticket_id,
    status="in_progress",
    priority="high",
    external_system="jira",
    external_ticket_id="PROJ-123"
)

# Reassign ticket
reassigned = client.tickets.reassign(
    ticket_id,
    assignee_id=456,
    reason="Better expertise match"
)

# Get ticket statistics
stats = client.tickets.get_stats()
print(f"Total: {stats.total}, Open: {stats.open}")

# Get available assignees
assignees = client.tickets.get_assignees()

# Integrate with external systems
result = client.tickets.integrate_external(
    ticket_id,
    system="jira",
    project_key="COMP",
    issue_type="Bug"
)

# Delete ticket (admin only)
client.tickets.delete(ticket_id)
```

## Utility Functions

```python
from aliyah import quick_agent_setup, verify_agent_connection, get_agent_summary

# Quick setup: create client and agent in one call
client, agent = quick_agent_setup("your-api-key", "My Agent")

# Verify agent connection
if verify_agent_connection(client, agent.id):
    print("Agent is connected!")

# Get comprehensive agent summary
summary = get_agent_summary(client, agent.id)
print(f"Agent has {summary['session_count']} sessions")
print(f"Open tickets: {len(summary['open_tickets'])}")
```

## Error Handling

```python
from aliyah import (
    AliyahError,
    AuthenticationError,
    AgentNotFoundError,
    SessionNotFoundError,
    TicketNotFoundError,
    ReportGenerationError,
    RateLimitError
)

try:
    agent = client.agents.get(999)
except AgentNotFoundError:
    print("Agent not found")
except AuthenticationError:
    print("Invalid API key")
except RateLimitError:
    print("Rate limit exceeded")
except AliyahError as e:
    print(f"API error: {e}")
    if e.status_code:
        print(f"Status code: {e.status_code}")
    if e.response:
        print(f"Response: {e.response}")
```

## Configuration

### Environment Variables

```bash
# Optional: Set API key via environment (not needed if passed to client)
export ALIYAH_API_KEY="your_api_key"
```

### Custom Configuration

```python
# Custom client configuration
client = AliyahClient(
    api_key="your_key",
    base_url="https://your-custom-domain.com/api/v1"
)

# Test connection
if client.test_connection():
    print("✅ Connected to Aliyah API")
else:
    print("❌ Connection failed")
```

## Complete Example

```python
from aliyah import AliyahClient, get_agent_summary
from datetime import datetime, timedelta

def monitor_agents():
    """Complete example of agent monitoring workflow"""
    
    # Initialize client
    client = AliyahClient("your_api_key")
    
    # Get all agents
    agents = client.agents.list()
    print(f"Monitoring {len(agents)} agents...")
    
    for agent in agents:
        print(f"\n=== {agent.name} (ID: {agent.id}) ===")
        
        # Get comprehensive summary
        summary = get_agent_summary(client, agent.id)
        
        if summary.get('error'):
            print(f"❌ Error: {summary['error']}")
            continue
            
        # Print status
        if summary['has_sessions']:
            print(f"✅ Active - {summary['session_count']} sessions")
            if summary['last_session']:
                print(f"   Last seen: {summary['last_session']}")
        else:
            print("⚠️  No sessions detected")
        
        # Check for compliance issues
        if summary['open_tickets']:
            print(f"⚠️  {len(summary['open_tickets'])} open compliance issues:")
            for ticket in summary['open_tickets'][:3]:  # Show first 3
                print(f"   - {ticket.title} [{ticket.priority}]")
        else:
            print("✅ No compliance issues")
    
    # Generate organization-wide compliance report
    print("\n=== Generating Compliance Report ===")
    week_ago = datetime.now() - timedelta(days=7)
    
    try:
        report = client.compliance.generate_report(
            start_date=week_ago,
            sync=True
        )
        if report.get('success'):
            print(f"✅ Report generated: {report.get('view_url', 'Ready')}")
        else:
            print("⚠️  Report generation failed")
    except Exception as e:
        print(f"❌ Report error: {e}")
    
    # Get overall ticket stats
    print("\n=== Overall Ticket Statistics ===")
    stats = client.tickets.get_stats()
    print(f"Total tickets: {stats.total}")
    print(f"Open: {stats.open}, In Progress: {stats.in_progress}")
    print(f"Resolved: {stats.resolved}")

if __name__ == "__main__":
    monitor_agents()
```

## Development

```bash
# Install development dependencies
pip install -e ".[dev]"

# Run tests
pytest

# Format code
black aliyah/
isort aliyah/

# Type checking
mypy aliyah/
```

## License

MIT License - see LICENSE file for details.

## Support

- Documentation: https://docs.aliyah.com
- Issues: https://github.com/aliyah/aliyah-python-sdk/issues
- Email: support@aliyah.com
