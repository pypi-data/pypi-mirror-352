{
    "config": {
        "abort": {
            "addon_connection_failed": "Failed to connect to the {addon} add-on. Check the add-on status and try again later.",
            "addon_info_failed": "Failed get info for the {addon} add-on.",
            "addon_install_failed": "Failed to install the {addon} add-on.",
            "addon_start_failed": "Failed to start the {addon} add-on.",
            "already_configured": "Service is already configured",
            "reauth_successful": "Re-authentication was successful",
            "reconfigure_successful": "Re-configuration was successful",
            "single_instance_allowed": "Already configured. Only a single configuration possible."
        },
        "error": {
            "bad_birth": "Invalid birth topic",
            "bad_certificate": "The CA certificate is invalid",
            "bad_client_cert": "Invalid client certificate, ensure a valid file is supplied",
            "bad_client_cert_key": "Client certificate and private key are not a valid pair",
            "bad_discovery_prefix": "Invalid discovery prefix",
            "bad_will": "Invalid will topic",
            "bad_ws_headers": "Supply valid HTTP headers as a JSON object",
            "cannot_connect": "Failed to connect",
            "client_key_error": "Invalid private key file or invalid password supplied",
            "invalid_auth": "Invalid authentication",
            "invalid_inclusion": "The client certificate and private key must be configured together"
        },
        "step": {
            "broker": {
                "data": {
                    "advanced_options": "Advanced options",
                    "broker": "Broker",
                    "certificate": "Upload custom CA certificate file",
                    "client_cert": "Upload client certificate file",
                    "client_id": "Client ID (leave empty to randomly generated one)",
                    "client_key": "Upload private key file",
                    "client_key_password": "Password",
                    "keepalive": "The time between sending keep alive messages",
                    "password": "Password",
                    "port": "Port",
                    "protocol": "MQTT protocol",
                    "set_ca_cert": "Broker certificate validation",
                    "set_client_cert": "Use a client certificate",
                    "tls_insecure": "Ignore broker certificate validation",
                    "transport": "MQTT transport",
                    "username": "Username",
                    "ws_headers": "WebSocket headers in JSON format",
                    "ws_path": "WebSocket path"
                },
                "data_description": {
                    "advanced_options": "Enable and select **Next** to set advanced options.",
                    "broker": "The hostname or IP address of your MQTT broker.",
                    "certificate": "The custom CA certificate file to validate your MQTT brokers certificate.",
                    "client_cert": "The client certificate to authenticate against your MQTT broker.",
                    "client_id": "The unique ID to identify the Home Assistant MQTT API as MQTT client. It is recommended to leave this option blank.",
                    "client_key": "The private key file that belongs to your client certificate.",
                    "client_key_password": "The password for the private key file (if set).",
                    "keepalive": "A value less than 90 seconds is advised.",
                    "password": "The password to log in to your MQTT broker.",
                    "port": "The port your MQTT broker listens to. For example 1883.",
                    "protocol": "The MQTT protocol your broker operates at. For example 3.1.1.",
                    "set_ca_cert": "Select **Auto** for automatic CA validation, or **Custom** and select **Next** to set a custom CA certificate, to allow validating your MQTT brokers certificate.",
                    "set_client_cert": "Enable and select **Next** to set a client certificate and private key to authenticate against your MQTT broker.",
                    "tls_insecure": "Option to ignore validation of your MQTT broker's certificate.",
                    "transport": "The transport to be used for the connection to your MQTT broker.",
                    "username": "The username to log in to your MQTT broker.",
                    "ws_headers": "The WebSocket headers to pass through the WebSocket-based connection to your MQTT broker.",
                    "ws_path": "The WebSocket path to be used for the connection to your MQTT broker."
                },
                "description": "Please enter the connection information of your MQTT broker."
            },
            "hassio_confirm": {
                "description": "Do you want to configure Home Assistant to connect to the MQTT broker provided by the add-on {addon}?",
                "title": "MQTT broker via Home Assistant add-on"
            },
            "install_addon": {
                "title": "Installing add-on"
            },
            "reauth_confirm": {
                "data": {
                    "password": "Password",
                    "username": "Username"
                },
                "data_description": {
                    "password": "The password to log in to your MQTT broker.",
                    "username": "The username to log in to your MQTT broker."
                },
                "description": "The MQTT broker reported an authentication error. Please confirm the brokers correct username and password.",
                "title": "Re-authentication required with the MQTT broker"
            },
            "start_addon": {
                "title": "Starting add-on"
            },
            "user": {
                "description": "Please choose how you want to connect to the MQTT broker:",
                "menu_options": {
                    "addon": "Use the official {addon} add-on.",
                    "broker": "Manually enter the MQTT broker connection details"
                }
            }
        }
    },
    "config_subentries": {
        "device": {
            "abort": {
                "reconfigure_successful": "Re-configuration was successful"
            },
            "create_entry": {
                "default": "MQTT device with {platform} entity \"{entity}\" was set up successfully.\n\nNote that you can reconfigure the MQTT device at any time, e.g. to add more entities."
            },
            "entry_type": "MQTT Device",
            "error": {
                "invalid_input": "Invalid value",
                "invalid_subscribe_topic": "Invalid subscribe topic",
                "invalid_supported_color_modes": "Invalid supported colour modes selection",
                "invalid_template": "Invalid template",
                "invalid_uom": "The unit of measurement \"{unit_of_measurement}\" is not supported by the selected device class, please either remove the device class, select a device class which supports \"{unit_of_measurement}\", or pick a supported unit of measurement from the list",
                "invalid_url": "Invalid URL",
                "options_device_class_enum": "The 'Options' setting must be used with the Enumeration device class. If you continue, the existing options will be reset",
                "options_not_allowed_with_state_class_or_uom": "The 'Options' setting is not allowed when state class or unit of measurement are used",
                "options_with_enum_device_class": "Configure options for the enumeration sensor",
                "uom_required_for_device_class": "The selected device class requires a unit"
            },
            "initiate_flow": {
                "reconfigure": "Reconfigure MQTT Device",
                "user": "Add MQTT Device"
            },
            "step": {
                "availability": {
                    "data": {
                        "availability_template": "Availability template",
                        "availability_topic": "Availability topic",
                        "payload_available": "Payload available",
                        "payload_not_available": "Payload not available"
                    },
                    "data_description": {
                        "availability_template": "A [template](https://www.home-assistant.io/docs/configuration/templating/#using-templates-with-the-mqtt-integration) to render the availability payload received on the availability topic",
                        "availability_topic": "Topic to receive the availability payload on",
                        "payload_available": "The payload that indicates the device is available (defaults to 'online')",
                        "payload_not_available": "The payload that indicates the device is not available (defaults to 'offline')"
                    },
                    "description": "The availability feature allows a device to report its availability.",
                    "title": "Availability options"
                },
                "delete_entity": {
                    "data": {
                        "component": "Entity"
                    },
                    "data_description": {
                        "component": "Select the entity you want to delete. Minimal one entity is required."
                    },
                    "description": "Delete an entity. The entity will be removed from the device. Removing an entity will break any automations or scripts that depend on it.",
                    "title": "Delete entity"
                },
                "device": {
                    "data": {
                        "configuration_url": "Configuration URL",
                        "hw_version": "Hardware version",
                        "model": "Model",
                        "model_id": "Model ID",
                        "name": "Name",
                        "sw_version": "Software version"
                    },
                    "data_description": {
                        "configuration_url": "A link to the webpage that can manage the configuration of this device. Can be either a 'http://', 'https://' or an internal 'homeassistant://' URL.",
                        "hw_version": "The hardware version of the device. E.g. 'v1.0 rev a'.",
                        "model": "E.g. 'Cleanmaster Pro'.",
                        "model_id": "E.g. '123NK2PRO'.",
                        "name": "The name of the manually added MQTT device.",
                        "sw_version": "The software version of the device. E.g. '2025.1.0'."
                    },
                    "description": "Enter the MQTT device details:",
                    "sections": {
                        "mqtt_settings": {
                            "data": {
                                "qos": "QoS"
                            },
                            "data_description": {
                                "qos": "The Quality of Service value the device's entities should use."
                            },
                            "name": "MQTT settings"
                        }
                    },
                    "title": "Configure MQTT device details"
                },
                "entity": {
                    "data": {
                        "entity_picture": "Entity picture",
                        "name": "Entity name",
                        "platform": "Type of entity"
                    },
                    "data_description": {
                        "entity_picture": "A URL to a picture to be assigned.",
                        "name": "The name of the entity. Leave empty to set it to `None` to [mark it as main feature of the MQTT device](https://www.home-assistant.io/integrations/mqtt/#naming-of-mqtt-entities).",
                        "platform": "The type of the entity to configure."
                    },
                    "description": "Configure the basic {platform_label}entity settings{entity_name_label}",
                    "title": "Configure MQTT device \"{mqtt_device}\""
                },
                "entity_platform_config": {
                    "data": {
                        "device_class": "Device class",
                        "options": "Add option",
                        "state_class": "State class",
                        "unit_of_measurement": "Unit of measurement"
                    },
                    "data_description": {
                        "device_class": "The Device class of the {platform} entity. [Learn more.]({url}#device_class)",
                        "options": "Options for allowed sensor state values. The sensor\u2019s Device class must be set to Enumeration. The 'Options' setting cannot be used together with State class or Unit of measurement.",
                        "state_class": "The [State class](https://developers.home-assistant.io/docs/core/entity/sensor/#available-state-classes) of the sensor. [Learn more.]({url}#state_class)",
                        "unit_of_measurement": "Defines the unit of measurement of the sensor, if any."
                    },
                    "description": "Please configure specific details for {platform} entity \"{entity}\":",
                    "sections": {
                        "advanced_settings": {
                            "data": {
                                "suggested_display_precision": "Suggested display precision"
                            },
                            "data_description": {
                                "suggested_display_precision": "The number of decimals which should be used in the {platform} entity state after rounding. [Learn more.]({url}#suggested_display_precision)"
                            },
                            "name": "Advanced options"
                        }
                    },
                    "title": "Configure MQTT device \"{mqtt_device}\""
                },
                "mqtt_platform_config": {
                    "data": {
                        "color_temp_template": "Colour temperature template",
                        "command_template": "Command template",
                        "command_topic": "Command topic",
                        "force_update": "Force update",
                        "last_reset_value_template": "Last reset value template",
                        "optimistic": "Optimistic",
                        "qos": "QoS",
                        "retain": "Retain",
                        "state_topic": "State topic",
                        "supported_color_modes": "Supported colour modes",
                        "value_template": "Value template"
                    },
                    "data_description": {
                        "blue_template": "[Template](https://www.home-assistant.io/docs/configuration/templating/#using-value-templates-with-mqtt) to extract blue colour from the state payload value. Expected result of the template is an integer from 0-255 range.",
                        "color_temp_template": "[Template](https://www.home-assistant.io/docs/configuration/templating/#using-value-templates-with-mqtt) to extract colour temperature in Kelvin from the state payload value. Expected result of the template is an integer.",
                        "command_on_template": "The [template](https://www.home-assistant.io/docs/configuration/templating/#using-command-templates-with-mqtt) for \"on\" state changes. Available variables: `state`, `brightness`, `color_temp`, `red`, `green`, `blue`, `hue`, `sat`, `flash`, `transition` and `effect`. Values `red`, `green`, `blue` and `brightness` are provided as integers from range 0-255. Value of `hue` is provided as float from range 0-360. Value of `sat` is provided as float from range 0-100. Value of `color_temp` is provided as integer representing Kelvin units.",
                        "command_template": "A [template](https://www.home-assistant.io/docs/configuration/templating/#using-command-templates-with-mqtt) to render the payload to be published at the command topic.",
                        "command_topic": "The publishing topic that will be used to control the {platform} entity. [Learn more.]({url}#command_topic)",
                        "force_update": "Sends update events even if the value hasn\u2019t changed. Useful if you want to have meaningful value graphs in history. [Learn more.]({url}#force_update)",
                        "green_template": "[Template](https://www.home-assistant.io/docs/configuration/templating/#using-value-templates-with-mqtt) to extract green colour from the state payload value. Expected result of the template is an integer from 0-255 range.",
                        "last_reset_value_template": "Defines a [template](https://www.home-assistant.io/docs/configuration/templating/#using-value-templates-with-mqtt) to extract the last reset. When Last reset template is set, the State class option must be Total. [Learn more.]({url}#last_reset_value_template)",
                        "on_command_type": "Defines when the payload \"on\" is sent. Using \"Last\" (the default) will send any style (brightness, colour, etc) topics first and then a payload \"on\" to the command topic. Using \"First\" will send the payload \"on\" and then any style topics. Using \"Brightness\" will only send brightness commands instead of the payload \"on\" to turn the light on.",
                        "optimistic": "Flag that defines if the {platform} entity works in optimistic mode. [Learn more.]({url}#optimistic)",
                        "qos": "The QoS value a {platform} entity should use.",
                        "red_template": "[Template](https://www.home-assistant.io/docs/configuration/templating/#using-value-templates-with-mqtt) to extract red colour from the state payload value. Expected result of the template is an integer from 0-255 range.",
                        "retain": "Select if values published by the {platform} entity should be retained at the MQTT broker.",
                        "state_topic": "The MQTT topic subscribed to receive {platform} state values. [Learn more.]({url}#state_topic)",
                        "supported_color_modes": "A list of colour modes supported by the light. Possible colour modes are On/Off, Brightness, Colour temperature, HS, XY, RGB, RGBW, RGBWW, White. Note that if On/Off or Brightness are used, that must be the only value in the list. [Learn more.]({url}#supported_color_modes)",
                        "value_template": "Defines a [template](https://www.home-assistant.io/docs/configuration/templating/#using-value-templates-with-mqtt) to extract the {platform} entity value. [Learn more.]({url}#value_template)"
                    },
                    "description": "Please configure MQTT specific details for {platform} entity \"{entity}\":",
                    "sections": {
                        "advanced_settings": {
                            "data": {
                                "expire_after": "Expire after"
                            },
                            "data_description": {
                                "expire_after": "If set, it defines the number of seconds after the sensor\u2019s state expires, if it\u2019s not updated. After expiry, the sensor\u2019s state becomes unavailable. If not set, the sensor's state never expires. [Learn more.]({url}#expire_after)",
                                "max_kelvin": "The maximum colour temperature in Kelvin.",
                                "min_kelvin": "The minimum colour temperature in Kelvin."
                            },
                            "name": "Advanced settings"
                        },
                        "light_brightness_settings": {
                            "data_description": {
                                "brightness": "Flag that defines if light supports brightness when the RGB, RGBW, or RGBWW colour mode is supported."
                            }
                        },
                        "light_color_mode_settings": {
                            "data": {
                                "color_mode_state_topic": "Colour mode state topic",
                                "color_mode_value_template": "Colour mode value template"
                            },
                            "data_description": {
                                "color_mode_state_topic": "The MQTT topic subscribed to receive colour mode updates. If this is not configured, the colour mode will be automatically set according to the last received valid colour or colour temperature.",
                                "color_mode_value_template": "Defines a [template](https://www.home-assistant.io/docs/configuration/templating/#using-value-templates-with-mqtt) to extract the colour mode value."
                            },
                            "name": "Colour mode settings"
                        },
                        "light_color_temp_settings": {
                            "data": {
                                "color_temp_command_template": "Colour temperature command template",
                                "color_temp_command_topic": "Colour temperature command topic",
                                "color_temp_state_topic": "Colour temperature state topic",
                                "color_temp_value_template": "Colour temperature value template"
                            },
                            "data_description": {
                                "color_temp_command_template": "A [template](https://www.home-assistant.io/docs/configuration/templating/#using-command-templates-with-mqtt) to compose the payload to be published at the colour temperature command topic.",
                                "color_temp_command_topic": "The publishing topic that will be used to control the colour temperature. [Learn more.]({url}#color_temp_command_topic)",
                                "color_temp_state_topic": "The MQTT topic subscribed to receive colour temperature state updates. [Learn more.]({url}#color_temp_state_topic)",
                                "color_temp_value_template": "Defines a [template](https://www.home-assistant.io/docs/configuration/templating/#using-value-templates-with-mqtt) to extract the colour temperature value."
                            },
                            "name": "Colour temperature settings"
                        },
                        "light_hs_settings": {
                            "data_description": {
                                "hs_command_topic": "The MQTT topic to publish commands to change the light\u2019s colour state in HS format (Hue Saturation). Range for Hue: 0\u00b0 .. 360\u00b0, Range of Saturation: 0..100. Note: Brightness is sent separately in the brightness command topic. [Learn more.]({url}#hs_command_topic)",
                                "hs_state_topic": "The MQTT topic subscribed to receive colour state updates in HS format. The expected payload is the hue and saturation values separated by commas, for example, `359.5,100.0`. Note: Brightness is received separately in the brightness state topic. [Learn more.]({url}#hs_state_topic)"
                            },
                            "name": "HS colour mode settings"
                        },
                        "light_rgb_settings": {
                            "name": "RGB colour mode settings"
                        },
                        "light_rgbw_settings": {
                            "name": "RGBW colour mode settings"
                        },
                        "light_rgbww_settings": {
                            "name": "RGBWW colour mode settings"
                        },
                        "light_white_settings": {
                            "name": "White colour mode settings"
                        },
                        "light_xy_settings": {
                            "data_description": {
                                "xy_state_topic": "The MQTT topic subscribed to receive XY state updates. The expected payload is the X and Y colour values separated by commas, for example, `0.675,0.322`. [Learn more.]({url}#xy_state_topic)"
                            },
                            "name": "XY colour mode settings"
                        }
                    },
                    "title": "Configure MQTT device \"{mqtt_device}\""
                },
                "summary_menu": {
                    "description": "Entities set up:\n{mqtt_items}\n\nDecide what to do next:",
                    "menu_options": {
                        "availability": "Configure availability",
                        "delete_entity": "Delete an entity",
                        "device": "Update device properties",
                        "entity": "Add another entity to \"{mqtt_device}\"",
                        "save_changes": "Save changes",
                        "update_entity": "Update entity properties"
                    },
                    "title": "Reconfigure \"{mqtt_device}\""
                },
                "update_entity": {
                    "data": {
                        "component": "Entity"
                    },
                    "data_description": {
                        "component": "Select the entity you want to update."
                    },
                    "description": "Select the entity you want to update",
                    "title": "Select entity"
                }
            }
        }
    },
    "device_automation": {
        "trigger_subtype": {
            "button_1": "First button",
            "button_2": "Second button",
            "button_3": "Third button",
            "button_4": "Fourth button",
            "button_5": "Fifth button",
            "button_6": "Sixth button",
            "turn_off": "Turn off",
            "turn_on": "Turn on"
        },
        "trigger_type": {
            "button_double_press": "\"{subtype}\" double clicked",
            "button_long_press": "\"{subtype}\" continuously pressed",
            "button_long_release": "\"{subtype}\" released after long press",
            "button_quadruple_press": "\"{subtype}\" quadruple clicked",
            "button_quintuple_press": "\"{subtype}\" quintuple clicked",
            "button_short_press": "\"{subtype}\" pressed",
            "button_short_release": "\"{subtype}\" released",
            "button_triple_press": "\"{subtype}\" triple clicked"
        }
    },
    "exceptions": {
        "addon_start_failed": {
            "message": "Failed to correctly start {addon} add-on."
        },
        "command_template_error": {
            "message": "Parsing template `{command_template}` for entity `{entity_id}` failed with error: {error}."
        },
        "invalid_platform_config": {
            "message": "Reloading YAML config for manually configured MQTT `{domain}` item failed. See logs for more details."
        },
        "invalid_publish_topic": {
            "message": "Unable to publish: topic template `{topic_template}` produced an invalid topic `{topic}` after rendering ({error})"
        },
        "mqtt_broker_error": {
            "message": "Error talking to MQTT: {error_message}."
        },
        "mqtt_not_setup_cannot_publish": {
            "message": "Cannot publish to topic \"{topic}\", make sure MQTT is set up correctly."
        },
        "mqtt_not_setup_cannot_subscribe": {
            "message": "Cannot subscribe to topic \"{topic}\", make sure MQTT is set up correctly."
        },
        "mqtt_not_setup_cannot_unsubscribe_twice": {
            "message": "Cannot unsubscribe topic \"{topic}\" twice."
        },
        "mqtt_topic_not_a_string": {
            "message": "Topic needs to be a string! Got: {topic}."
        },
        "mqtt_trigger_cannot_remove_twice": {
            "message": "Can't remove trigger twice."
        }
    },
    "issues": {
        "invalid_platform_config": {
            "description": "Home Assistant detected an invalid config for a manually configured item.\n\nPlatform domain: **{domain}**\nConfiguration file: **{config_file}**\nNear line: **{line}**\nConfiguration found:\n```yaml\n{config}\n```\nError: **{error}**.\n\nMake sure the configuration is valid and [reload](/developer-tools/yaml) the manually configured MQTT items or restart Home Assistant to fix this issue.",
            "title": "Invalid config found for MQTT {domain} item"
        },
        "invalid_unit_of_measurement": {
            "description": "Manual configured Sensor entity **{entity_id}** has a configured unit of measurement **{uom}** which is not valid with configured device class **{device_class}**. Make sure a valid unit of measurement is configured or remove the device class, and [reload](/developer-tools/yaml) the manually configured MQTT items or restart Home Assistant to fix this issue.",
            "title": "Sensor with invalid unit of measurement"
        }
    },
    "options": {
        "error": {
            "bad_birth": "Invalid birth topic",
            "bad_certificate": "The CA certificate is invalid",
            "bad_client_cert": "Invalid client certificate, ensure a valid file is supplied",
            "bad_client_cert_key": "Client certificate and private key are not a valid pair",
            "bad_discovery_prefix": "Invalid discovery prefix",
            "bad_will": "Invalid will topic",
            "bad_ws_headers": "Supply valid HTTP headers as a JSON object",
            "cannot_connect": "Failed to connect",
            "client_key_error": "Invalid private key file or invalid password supplied",
            "invalid_inclusion": "The client certificate and private key must be configured together"
        },
        "step": {
            "broker": {
                "data": {
                    "advanced_options": "Advanced options",
                    "broker": "Broker",
                    "certificate": "Upload custom CA certificate file",
                    "client_cert": "Upload client certificate file",
                    "client_id": "Client ID (leave empty to randomly generated one)",
                    "client_key": "Upload private key file",
                    "keepalive": "The time between sending keep alive messages",
                    "password": "Password",
                    "port": "Port",
                    "protocol": "MQTT protocol",
                    "set_ca_cert": "Broker certificate validation",
                    "set_client_cert": "Use a client certificate",
                    "tls_insecure": "Ignore broker certificate validation",
                    "transport": "MQTT transport",
                    "username": "Username",
                    "ws_headers": "WebSocket headers in JSON format",
                    "ws_path": "WebSocket path"
                },
                "data_description": {
                    "advanced_options": "Enable and select **Next** to set advanced options.",
                    "broker": "The hostname or IP address of your MQTT broker.",
                    "certificate": "The custom CA certificate file to validate your MQTT brokers certificate.",
                    "client_cert": "The client certificate to authenticate against your MQTT broker.",
                    "client_id": "The unique ID to identify the Home Assistant MQTT API as MQTT client. It is recommended to leave this option blank.",
                    "client_key": "The private key file that belongs to your client certificate.",
                    "keepalive": "A value less than 90 seconds is advised.",
                    "password": "The password to log in to your MQTT broker.",
                    "port": "The port your MQTT broker listens to. For example 1883.",
                    "protocol": "The MQTT protocol your broker operates at. For example 3.1.1.",
                    "set_ca_cert": "Select **Auto** for automatic CA validation, or **Custom** and select **Next** to set a custom CA certificate, to allow validating your MQTT brokers certificate.",
                    "set_client_cert": "Enable and select **Next** to set a client certificate and private key to authenticate against your MQTT broker.",
                    "tls_insecure": "Option to ignore validation of your MQTT broker's certificate.",
                    "transport": "The transport to be used for the connection to your MQTT broker.",
                    "username": "The username to log in to your MQTT broker.",
                    "ws_headers": "The WebSocket headers to pass through the WebSocket-based connection to your MQTT broker.",
                    "ws_path": "The WebSocket path to be used for the connection to your MQTT broker."
                },
                "description": "Please enter the connection information of your MQTT broker.",
                "title": "Broker options"
            },
            "options": {
                "data": {
                    "birth_enable": "Enable birth message",
                    "birth_payload": "Birth message payload",
                    "birth_qos": "Birth message QoS",
                    "birth_retain": "Birth message retain",
                    "birth_topic": "Birth message topic",
                    "discovery": "Enable discovery",
                    "discovery_prefix": "Discovery prefix",
                    "will_enable": "Enable will message",
                    "will_payload": "Will message payload",
                    "will_qos": "Will message QoS",
                    "will_retain": "Will message retain",
                    "will_topic": "Will message topic"
                },
                "data_description": {
                    "birth_enable": "When set, Home Assistant will publish an online message to your MQTT broker when MQTT is ready.",
                    "birth_payload": "The \"birth\" message that is published when MQTT is ready and connected.",
                    "birth_qos": "The quality of service of the \"birth\" message that is published when MQTT is ready and connected",
                    "birth_retain": "When set, Home Assistant will retain the \"birth\" message published to your MQTT broker.",
                    "birth_topic": "The MQTT topic where Home Assistant will publish a \"birth\" message.",
                    "discovery": "Option to enable MQTT automatic discovery.",
                    "discovery_prefix": "The prefix of configuration topics the MQTT integration will subscribe to.",
                    "will_enable": "When set, Home Assistant will ask your broker to publish a \"will\" message when MQTT is stopped or when it loses the connection to your broker.",
                    "will_payload": "The message your MQTT broker \"will\" publish when the MQTT integration is stopped or when the connection is lost.",
                    "will_qos": "The quality of service of the \"will\" message that is published by your MQTT broker.",
                    "will_retain": "When set, your MQTT broker will retain the \"will\" message.",
                    "will_topic": "The MQTT topic your MQTT broker will publish a \"will\" message to."
                },
                "description": "Discovery - If discovery is enabled (recommended), Home Assistant will automatically discover devices and entities which publish their configuration on the MQTT broker. If discovery is disabled, all configuration must be done manually.\nDiscovery prefix - The prefix a configuration topic for automatic discovery must start with.\nBirth message - The birth message will be sent each time Home Assistant (re)connects to the MQTT broker.\nWill message - The will message will be sent each time Home Assistant loses its connection to the broker, both in case of a clean (e.g. Home Assistant shutting down) and in case of an unclean (e.g. Home Assistant crashing or losing its network connection) disconnect.",
                "title": "MQTT options"
            }
        }
    },
    "selector": {
        "device_class_sensor": {
            "options": {
                "apparent_power": "Apparent power",
                "aqi": "Air quality index",
                "area": "Area",
                "atmospheric_pressure": "Atmospheric pressure",
                "battery": "Battery",
                "blood_glucose_concentration": "Blood glucose concentration",
                "carbon_dioxide": "Carbon dioxide",
                "carbon_monoxide": "Carbon monoxide",
                "conductivity": "Conductivity",
                "current": "Current",
                "data_rate": "Data rate",
                "data_size": "Data size",
                "date": "Date",
                "distance": "Distance",
                "duration": "Duration",
                "energy": "Energy",
                "energy_distance": "Energy per distance",
                "energy_storage": "Stored energy",
                "enum": "Enumeration",
                "frequency": "Frequency",
                "gas": "Gas",
                "humidity": "Humidity",
                "illuminance": "Illuminance",
                "irradiance": "Irradiance",
                "moisture": "Moisture",
                "monetary": "Balance",
                "nitrogen_dioxide": "Nitrogen dioxide",
                "nitrogen_monoxide": "Nitrogen monoxide",
                "nitrous_oxide": "Nitrous oxide",
                "ozone": "Ozone",
                "ph": "pH",
                "pm1": "PM1",
                "pm10": "PM10",
                "pm25": "PM2.5",
                "power": "Power",
                "power_factor": "Power factor",
                "precipitation": "Precipitation",
                "precipitation_intensity": "Precipitation intensity",
                "pressure": "Pressure",
                "reactive_power": "Reactive power",
                "signal_strength": "Signal strength",
                "sound_pressure": "Sound pressure",
                "speed": "Speed",
                "sulphur_dioxide": "Sulphur dioxide",
                "temperature": "Temperature",
                "timestamp": "Timestamp",
                "volatile_organic_compounds": "Volatile organic compounds",
                "volatile_organic_compounds_parts": "Volatile organic compounds parts",
                "voltage": "Voltage",
                "volume": "Volume",
                "volume_flow_rate": "Volume flow rate",
                "volume_storage": "Stored volume",
                "water": "Water",
                "weight": "Weight",
                "wind_direction": "Wind direction",
                "wind_speed": "Wind speed"
            }
        },
        "device_class_switch": {
            "options": {
                "outlet": "Socket",
                "switch": "Switch"
            }
        },
        "platform": {
            "options": {
                "notify": "Notifications",
                "sensor": "Sensor",
                "switch": "Switch"
            }
        },
        "set_ca_cert": {
            "options": {
                "auto": "Auto",
                "custom": "Custom",
                "off": "Off"
            }
        },
        "state_class": {
            "options": {
                "measurement": "Measurement",
                "total": "Total",
                "total_increasing": "Total increasing"
            }
        },
        "supported_color_modes": {
            "options": {
                "brightness": "Brightness only",
                "color_temp": "Colour temperature",
                "hs": "HS",
                "onoff": "On/Off"
            }
        }
    },
    "services": {
        "dump": {
            "description": "Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.",
            "fields": {
                "duration": {
                    "description": "How long we should listen for messages in seconds.",
                    "name": "Duration"
                },
                "topic": {
                    "description": "Topic to listen to.",
                    "name": "Topic"
                }
            },
            "name": "Export"
        },
        "publish": {
            "description": "Publishes a message to an MQTT topic.",
            "fields": {
                "evaluate_payload": {
                    "description": "If 'Payload' is a Python bytes literal, evaluate the bytes literal and publish the raw data.",
                    "name": "Evaluate payload"
                },
                "payload": {
                    "description": "The payload to publish. Publishes an empty message if not provided.",
                    "name": "Payload"
                },
                "qos": {
                    "description": "Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.",
                    "name": "QoS"
                },
                "retain": {
                    "description": "If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.",
                    "name": "Retain"
                },
                "topic": {
                    "description": "Topic to publish to.",
                    "name": "Topic"
                }
            },
            "name": "Publish"
        },
        "reload": {
            "description": "Reloads MQTT entities from the YAML-configuration.",
            "name": "Reload"
        }
    }
}