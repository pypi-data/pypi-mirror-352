[tool.poetry]
name = "spec-ai"
version = "0.1.5"
description = "A versioned documentation layer for AI-assisted development"
authors = ["Spenser McConnell <spensermcconnell@gmail.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/Spenquatch/spec"
repository = "https://github.com/Spenquatch/spec"
keywords = ["documentation", "ai", "development", "git"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: Version Control :: Git",
]
packages = [{include = "spec_cli"}]

[tool.poetry.dependencies]
python = "^3.8"
click = "^8.1.7"
rich-click = "^1.7.1"
pydantic = "^2.5.0"
pyyaml = "^6.0.1"
tenacity = "^8.2.3"
rich = "^14.0.0"
tomli = "^2.2.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.1"
ruff = "^0.1.6"
mypy = "^1.7.0"
pre-commit = "^3.5.0"
types-PyYAML = "^6.0.12"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.10"

[tool.poetry.scripts]
spec = "spec_cli.__main__:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Ruff replaces Black, isort, and many other tools
line-length = 88
target-version = "py38"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by ruff format)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.format]
# Enable auto-formatting
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.8"
plugins = ["pydantic.mypy"]
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Allow untyped decorators in test files (pytest fixtures)
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_decorators = false
warn_unreachable = false
warn_unused_ignores = false
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = [
    "--verbose",
    "--strict-markers",
    "--tb=short",
]

[tool.coverage.run]
branch = true
source = ["spec_cli"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]

[tool.spec]
# Default configuration for spec
default_model = "gpt-4"
default_provider = "openai"
max_tokens = 4000
temperature = 0.3
