# Generated by Django 5.1.7 on 2025-03-30 15:43

import django.core.validators
import django.db.models.deletion
import django_lifecycle.mixins
import pgvector.django.indexes
from django.db import migrations, models
from pgvector.django import VectorExtension

import pyhub.core.models.fields
import pyhub.rag.fields.postgres


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        VectorExtension(),
        migrations.CreateModel(
            name="Document",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "대기 중"), (1, "변환 중"), (2, "완료"), (3, "변환 실패")],
                        default=0,
                        editable=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "image_descriptor_llm_vendor",
                    models.CharField(
                        choices=[
                            ("openai", "OpenAI"),
                            ("anthropic", "Anthropic"),
                            ("google", "Google"),
                            ("upstage", "Upstage"),
                            ("ollama", "Ollama"),
                        ],
                        default="openai",
                        max_length=10,
                    ),
                ),
                (
                    "image_descriptor_llm_model",
                    models.CharField(
                        choices=[
                            ("gpt-4o", "gpt-4o"),
                            ("gpt-4o-mini", "gpt-4o-mini"),
                            ("chatgpt-4o-latest", "chatgpt-4o-latest"),
                            ("o1", "o1"),
                            ("o1-mini", "o1-mini"),
                            ("o3-mini", "o3-mini"),
                            ("claude-3-7-sonnet-latest", "claude-3-7-sonnet-latest"),
                            ("claude-3-5-haiku-latest", "claude-3-5-haiku-latest"),
                            ("claude-3-5-sonnet-latest", "claude-3-5-sonnet-latest"),
                            ("claude-3-opus-latest", "claude-3-opus-latest"),
                            ("solar-pro", "solar-pro"),
                            ("solar-mini", "solar-mini"),
                            ("gemini-2.0-flash", "gemini-2.0-flash"),
                            ("gemini-2.0-flash-lite", "gemini-2.0-flash-lite"),
                            ("gemini-1.5-flash", "gemini-1.5-flash"),
                            ("gemini-1.5-flash-8b", "gemini-1.5-flash-8b"),
                            ("gemini-1.5-pro", "gemini-1.5-pro"),
                            ("llama3.3", "llama3.3"),
                            ("llama3.3:70b", "llama3.3:70b"),
                            ("llama3.2", "llama3.2"),
                            ("llama3.2:1b", "llama3.2:1b"),
                            ("llama3.2:3b", "llama3.2:3b"),
                            ("llama3.1", "llama3.1"),
                            ("llama3.1:8B", "llama3.1:8B"),
                            ("llama3.1:70B", "llama3.1:70B"),
                            ("llama3.1:405B", "llama3.1:405B"),
                            ("mistral", "mistral"),
                            ("mistral:7b", "mistral:7b"),
                            ("qwen2", "qwen2"),
                            ("qwen2:0.5b", "qwen2:0.5b"),
                            ("qwen2:1.5b", "qwen2:1.5b"),
                            ("qwen2:7b", "qwen2:7b"),
                            ("qwen2:72b", "qwen2:72b"),
                            ("gemma3", "gemma3"),
                            ("gemma3:1b", "gemma3:1b"),
                            ("gemma3:4b", "gemma3:4b"),
                            ("gemma3:12b", "gemma3:12b"),
                            ("gemma3:27b", "gemma3:27b"),
                        ],
                        default="gpt-4o-mini",
                        help_text="지정 API의 API Key 설정이 없다면 동작하지 않습니다.",
                        max_length=50,
                    ),
                ),
                (
                    "image_descriptor_temperature",
                    models.FloatField(
                        default=0.25,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "image_descriptor_max_tokens",
                    models.IntegerField(
                        default=2000,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(8192),
                        ],
                    ),
                ),
                (
                    "image_descriptor_language",
                    models.CharField(
                        choices=[
                            ("korean", "Korean"),
                            ("english", "English"),
                            ("japanese", "Japanese"),
                            ("chinese", "Chinese"),
                        ],
                        default="korean",
                        help_text="이미지 설명 생성에 사용할 대상 언어",
                        max_length=50,
                    ),
                ),
                (
                    "engine",
                    models.CharField(
                        choices=[("upstage/document_parse", "Upstage Document Parse API")],
                        default="upstage/document_parse",
                        verbose_name="문서 파싱 엔진",
                        max_length=50,                    ),
                ),
                (
                    "file",
                    pyhub.core.models.fields.PDFFileField(upload_to="doku/document/%Y/%m/%d", verbose_name="PDF 파일"),
                ),
                (
                    "name",
                    models.CharField(blank=True, help_text="비워두시면 파일명이 자동으로 입력됩니다.", max_length=255),
                ),
                (
                    "start_page",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="PDF 변환에서만 활용",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="시작 페이지 번호",
                    ),
                ),
                (
                    "max_page",
                    models.PositiveIntegerField(
                        default=0, help_text="0 : 모든 페이지", verbose_name="처리할 최대 페이지 수"
                    ),
                ),
                (
                    "pages",
                    pyhub.core.models.fields.PageNumbersField(
                        blank=True,
                        max_length=255,
                        verbose_name="변환할 페이지 번호 (비워두시면 모든 페이지를 변환합니다.)",
                    ),
                ),
                (
                    "split_strategy",
                    models.CharField(
                        choices=[("page", "PAGE"), ("element", "ELEMENT"), ("none", "NONE")],
                        default="page",
                        help_text="NONE: 분할없이 한 Document에 넣기",
                        max_length=10,
                        verbose_name="Elements to Document 분할 전략",
                    ),
                ),
            ],
            options={
                "db_table": "pyhub_doku_document",
                "ordering": ("-id",),
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="DocumentParseJob",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "대기 중"), (1, "변환 중"), (2, "완료"), (3, "변환 실패")],
                        default=0,
                        editable=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("log_messages", models.JSONField(default=list)),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="parse_job_set",
                        related_query_name="parse_job",
                        to="doku.document",
                    ),
                ),
            ],
            options={
                "db_table": "pyhub_doku_document_parse_job",
                "ordering": ["-pk"],
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="VectorDocument",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("page_content", models.TextField()),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("embedding", pyhub.rag.fields.postgres.PGVectorField(dimensions=1536, editable=False)),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vector_document_set",
                        related_query_name="vector_document",
                        to="doku.document",
                    ),
                ),
            ],
            options={
                "db_table": "pyhub_doku_vector_document",
                "ordering": ["-pk"],
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="VectorDocumentImage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("file", models.ImageField(upload_to="doku/vector-document-image/%Y/%m/%d")),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "vector_document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="image_set",
                        related_query_name="image",
                        to="doku.vectordocument",
                    ),
                ),
            ],
            options={
                "db_table": "pyhub_doku_vector_document_image",
                "ordering": ["pk"],
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.AddIndex(
            model_name="vectordocument",
            index=pgvector.django.indexes.HnswIndex(
                ef_construction=64, fields=["embedding"], m=16, name="doku_vecdoc_idx", opclasses=["vector_cosine_ops"]
            ),
        ),
    ]
