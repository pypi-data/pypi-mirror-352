[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[project]
dynamic = ["version"]
name = "edgegraph"
requires-python = ">= 3.7"
dependencies = [
    "dill"
]
readme = "README.md"
license = {file = "LICENSE.txt"}
description = "Object oriented edge-vertex graph library."
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.optional-dependencies]
foreign = [
    "pyvis"
]
full = [
    "edgegraph[foreign]"
]
development = [
    # documentation dependencies
    "sphinxcontrib-plantuml",
    "sphinx-copybutton",
    "sphinx-book-theme",
    "myst-parser",
    "tomlkit",

    # test dependencies
    "pytest",
    "coverage",
    "pytest-cov",
    "pytest-profiling",
    "pytest-randomly",
    "pytest-timeout",

    # code quality control
    # pylint is also needed for documentation
    "pylint",
    "black",
    "mypy",

    # and everything else
    "edgegraph[full]"
]
# hate having to do this, but twine requries cryptography which doesn't
# currently work on py3.13t and doesn't really have an expected date of when
# that can work.  in the mean time, the rest of the dependencies are fine, so
# separate out the pypi-publishing needs here
administer = [
    # build & upload to pypi dependencies
    "build",
    "twine",

    # and everything else
    "edgegraph[development]"
]

[project.urls]
Homepage = "https://edgegraph.readthedocs.io/en/latest/"
Repository = "https://github.com/mishaturnbull/edgegraph"

[tool.setuptools.dynamic]
version = {attr = "edgegraph.version.__version__"}

# Pylint settings
[tool.pylint.main]
# 0 = automatically detect # of cores for multiprocessing
jobs = 0

[tool.pylint.format]
max-line-length = 80

[tool.pylint."messages control"]
# messages that we don't care about.  justify each entry!
disable = [
            # improves readability in some IDEs
            "trailing-newlines",

            # black handles line length, and is configured for 80 chars
            "line-too-long",

            # the vast majority of variable names that pylint cares about are
            # just simply not relevant
            "invalid-name",

            # "explicit is better than implicit"  - the zen of Python
            # why is this even a warning??
            "useless-object-inheritance",

            # see https://github.com/pylint-dev/pylint/issues/8215
            # using ``from __future__ import annotations`` does not silence
            # pylint's undefined variable error -- because that is used all
            # over the place, everything goes to shite if this error isn't
            # silenced.  instead, i'll assume (hopefully) that such errors are
            # caught by unit testing.
            "undefined-variable",

            # performance gain from lazy logging formatting is negligible by
            # timing tests
            "logging-fstring-interpolation",
           ]

[tool.pytest.ini_options]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "perf: really slow performance tests",
]
addopts = "--durations=5 -m 'not (slow or perf)'"
log_cli = false
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.html]
show_contexts = true

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
    "def __repr__",
]

[tool.black]
line-length = 80

[tool.mypy]
pretty = true
hide_error_codes = false
show_error_code_links = true

