"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import arg_services.ranking.v1beta.ranking_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class RankingServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    QualityRanking: grpc.UnaryUnaryMultiCallable[
        arg_services.ranking.v1beta.ranking_pb2.QualityRankingRequest,
        arg_services.ranking.v1beta.ranking_pb2.QualityRankingResponse,
    ]

    StatisticalRanking: grpc.UnaryUnaryMultiCallable[
        arg_services.ranking.v1beta.ranking_pb2.StatisticalRankingRequest,
        arg_services.ranking.v1beta.ranking_pb2.StatisticalRankingResponse,
    ]

class RankingServiceAsyncStub:
    QualityRanking: grpc.aio.UnaryUnaryMultiCallable[
        arg_services.ranking.v1beta.ranking_pb2.QualityRankingRequest,
        arg_services.ranking.v1beta.ranking_pb2.QualityRankingResponse,
    ]

    StatisticalRanking: grpc.aio.UnaryUnaryMultiCallable[
        arg_services.ranking.v1beta.ranking_pb2.StatisticalRankingRequest,
        arg_services.ranking.v1beta.ranking_pb2.StatisticalRankingResponse,
    ]

class RankingServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def QualityRanking(
        self,
        request: arg_services.ranking.v1beta.ranking_pb2.QualityRankingRequest,
        context: _ServicerContext,
    ) -> typing.Union[arg_services.ranking.v1beta.ranking_pb2.QualityRankingResponse, collections.abc.Awaitable[arg_services.ranking.v1beta.ranking_pb2.QualityRankingResponse]]: ...

    @abc.abstractmethod
    def StatisticalRanking(
        self,
        request: arg_services.ranking.v1beta.ranking_pb2.StatisticalRankingRequest,
        context: _ServicerContext,
    ) -> typing.Union[arg_services.ranking.v1beta.ranking_pb2.StatisticalRankingResponse, collections.abc.Awaitable[arg_services.ranking.v1beta.ranking_pb2.StatisticalRankingResponse]]: ...

def add_RankingServiceServicer_to_server(servicer: RankingServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
