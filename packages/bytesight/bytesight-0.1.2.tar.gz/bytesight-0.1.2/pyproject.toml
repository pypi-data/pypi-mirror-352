[project]
name = "bytesight"
version = "0.1.2"
description = "A tracing profiler for Python bytecode"
readme = "README.md"
requires-python = ">=3.10"
dependencies = []
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3 :: Only",
    "Typing :: Typed"
]
license = { text = "MIT License" }
authors = [{ name = "Edmund Goodman", email = "egoodman3141@gmail.com" }]
repository = "https://github.com/EdmundGoodman/bytesight"
url = "https://edmundgoodman.co.uk/bytesight"

[project.scripts]
bytesight = "bytesight.__main__:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "coverage>=7.6.9",
    "mypy>=1.13.0",
    "pre-commit-hooks>=5.0.0",
    "pre-commit>=4.0.1",
    "pytest>=8.3.4",
]
docs = [
    "mkdocs-material>=9.5.48",
    "mkdocstrings[python]>=0.26.1",
]


[tool.mypy]
python_version = "3.10"
strict = true
ignore_missing_imports = true
implicit_reexport = true
warn_redundant_casts = true
warn_unused_ignores = true
# https://blog.wolt.com/engineering/2021/09/30/professional-grade-mypy-configuration/
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true
# Manually loosen rough edges of `mypy`, particularly for pytest fixtures
disallow_untyped_decorators = false
# # Explicitly allow missing imports for untyped modules where required
# [[tool.mypy.overrides]]
# module = "pytest.*"
# ignore_missing_imports = true

[tool.ruff]
# Support Python 3.10+.
target-version = "py310"
src = ["src/", "tests/"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    ### From https://github.com/jerry-git/pytest-split/blob/master/pyproject.toml
    "ANN",    # Type hints related, let mypy handle these.
    "COM812", # "Trailing comma missing". If black is happy, I'm happy.
    "E501",   # "Line too long". If black is happy, I'm happy.
    "EM101",  # "Exception must not use a string literal, assign to variable first"
    "EM102",  # "Exception must not use an f-string literal, assign to variable first"
    "S101",   # "Use of `assert` detected"
    "SIM108", # "Use ternary operator ...". Ternary is harmful for readability in some cases.
    "TRY003", # "Avoid specifying long messages outside the exception class"
    "D203", # Disable incompatible docstring rules to avoid warnings
    "D212", #  "
    "ISC001", # May cause conflicts with auto-formatter
    "T201",   # Allow print statements!
    "ERA001", # Don't remove commented out code
    "TD",     # Allow TODOs in code (controversial, I know...)
    "FBT001", "FBT002", # Get off my back about boolean positional arguments
    "FIX002", # "
    "INP001", # "Add an `__init__.py`". The `test` directory should be a namespace package (https://stackoverflow.com/a/8450858)!
]
# Use Google-style docstrings.
pydocstyle.convention = "google"

[tool.ruff.format]
docstring-code-format = true

[tool.vulture]
ignore_names = ["test_*", "fixture_*", "pytest_*"]
paths = ["src/", "tests/"]
exclude = [".venv/"]
# min_confidence = 90

[tool.bandit]
exclude_dirs = [".venv/"]
skips = ["B101"]

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "DEBUG"
addopts = "--strict-markers"
markers = [
    "integration: marks tests as medium size (deselect with '-m \"not integration\"')",
]

[tool.coverage.run]
branch = true
source = ["src/"]
omit = ["src/pyproject_template/__main__.py"]

[tool.coverage.report]
#fail_under = 90
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover'
]
