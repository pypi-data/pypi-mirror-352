name: "dag-pypergraph"

on:
  push:
    branches: [ "master", "dev" ]
  pull_request:
    branches: [ "master", "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install ruff pytest pytest-asyncio
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with Ruff
      run: |
        ruff check . --select=E9,F63,F7,F82 --output-format=full
        ruff check . --exit-zero --target-version=py39 --fix
    - name: Test with pytest
      run: |
        pytest
    - name: Install Bandit
      run: pip install bandit

    - name: Run Bandit security check
      run: |
        bandit -r . --exclude "tests/,test_*.py" | tee security_report.txt
        if grep -E "Severity: (Medium|High)" security_report.txt; then
          echo "Security issues detected with Medium or High severity"
          exit 1
        fi

    - name: Security check report artifacts
      uses: actions/upload-artifact@v4
      with:
        name: security-report-${{ github.run_id }}-${{ matrix.python-version }}
        path: security_report.txt

  hatchling:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'
      - name: Install Hatch
        run: pip install hatch
      - name: Build package
        run: hatch build
      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-build
          path: dist/

  release:
    needs: hatchling
    runs-on: ubuntu-latest
    if: contains('refs/heads/dev refs/heads/master', github.ref)
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'
      - name: Extract version from pyproject.toml
        id: get_version
        run: echo "VERSION=$(sed -n 's/version = \"\(.*\)\"/\1/p' pyproject.toml)" >> $GITHUB_ENV
      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-build
          path: ./dist
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.VERSION }}"
          name: "Pypergraph v${{ env.VERSION }}"
          draft: false
          prerelease: ${{ github.ref == 'refs/heads/dev' }}  # Pre-release if on branch 'dev'
          files: ./dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PYPERGRAPH_PAT }}

  publish:
    needs: [ hatchling, build ]  # Only runs if tests pass
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'
      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-build
          path: ./dist
      - name: Install Twine
        run: pip install twine
      - name: Publish to PyPI
        env:
          PYPI_PYPERGRAPH_TOKEN: ${{ secrets.PYPI_PYPERGRAPH_TOKEN }}
        run: twine upload dist/* -u __token__ -p "$PYPI_PYPERGRAPH_TOKEN"