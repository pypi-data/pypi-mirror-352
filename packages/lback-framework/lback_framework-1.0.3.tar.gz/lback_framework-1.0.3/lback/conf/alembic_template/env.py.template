import os
import sys
from logging.config import fileConfig
from sqlalchemy import engine_from_config, pool
from alembic import context
import importlib
from dotenv import load_dotenv 

PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(PROJECT_ROOT)


config = context.config

fileConfig(config.config_file_name)


load_dotenv()



try:
    from lback.core.config import Config 
    app_config = Config() 

except ImportError:
    print("Error: Could not import your framework's Config class in env.py.")
    print("Please ensure your framework is installed or accessible in sys.path (added automatically based on env.py location).")
    print("Also, verify the import path 'core.config' is correct.")
    sys.exit(1)



try:

    DATABASE_URL = app_config.DATABASE_URI 

    if not DATABASE_URL:
        print("Error: 'DATABASE_URL' (via app_config.DATABASE_URI) is empty after loading configuration.")
        print("Please ensure your database configuration is correctly set in .env, config.json, or DEFAULTS.")
        sys.exit(1)

    config.set_main_option('sqlalchemy.url', DATABASE_URL)

except ValueError as e:
    print(f"Error getting DATABASE_URI from config: {e}")
    print("Please check your database configuration settings.")
    sys.exit(1)
except Exception as e:
    print(f"An unexpected error occurred while getting DATABASE_URI: {e}")
    sys.exit(1)



try:

    from lback.models.database import Base
except ImportError:
    print("Error: Could not import Project's database setup (e.g., models.database).")
    print("Please ensure your project's database.py/models.py is accessible relative to alembic/ and defines 'Base'.")
    sys.exit(1)

target_metadata = Base.metadata

INSTALLED_APPS = app_config.INSTALLED_APPS

print("Attempting to import models from INSTALLED_APPS...")

for app_name in INSTALLED_APPS:
    model_module_path = f"{app_name}.models"
    try:
        importlib.import_module(model_module_path)
        print(f"Successfully imported models from {model_module_path}")
    except ImportError:
        print(f"Warning: Could not import models from {model_module_path}. Skipping.")
        pass


print("Attempting to import framework models...")

try:

    from lback.models.adminuser import AdminUser, Role, Permission
    from lback.models.user import User, Group, UserPermission
    from lback.models.session import Session
    print("Successfully imported framework Admin models")

except ImportError as e:
    print(f"Warning: Could not import framework models (e.g., AdminUser, Session) in env.py: {e}")
    print("Ensure the framework package is installed and framework model import paths are correct.")
    pass


def run_migrations_online():
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    connectable = None
    try:
        from lback.models.database import DatabaseManager
        db_manager = DatabaseManager.get_instance()
        connectable = db_manager.engine
        print("Using framework's DatabaseManager engine for online migrations.")
    except ImportError:
        print("Warning: Could not import framework's DatabaseManager. Using engine_from_config directly.")
        pass

    if connectable is None:
         print("Creating engine from Alembic config.")
         connectable = engine_from_config(
             config.get_section(config.config_ini_section),
             prefix='sqlalchemy.',
             poolclass=pool.NullPool 
         )


    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
        )

        with context.begin_transaction():
            context.run_migrations()


def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configuration only sets up the context with
    url and target metadata -- but nothing else is affected.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        include_schemas=True
    )

    with context.begin_transaction():
        context.run_migrations()

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()