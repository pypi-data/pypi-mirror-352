# coding: utf-8

"""
    ETAPI

    External Trilium API

    The version of the OpenAPI document: 1.0.0
    Contact: zadam.apps@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class Attribute(BaseModel):
    """
    Attribute (Label, Relation) is a key-value record attached to a note.
    """  # noqa: E501

    attribute_id: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None, alias="attributeId"
    )
    note_id: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None, alias="noteId"
    )
    type: Optional[StrictStr] = None
    name: Optional[Annotated[str, Field(strict=True)]] = None
    value: Optional[StrictStr] = None
    position: Optional[StrictInt] = None
    is_inheritable: Optional[StrictBool] = Field(
        default=None, alias="isInheritable"
    )
    utc_date_modified: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None, alias="utcDateModified"
    )
    __properties: ClassVar[List[str]] = [
        "attributeId",
        "noteId",
        "type",
        "name",
        "value",
        "position",
        "isInheritable",
        "utcDateModified",
    ]

    @field_validator("attribute_id")
    def attribute_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[a-zA-Z0-9_]{4,32}", value):
            raise ValueError(
                r"must validate the regular expression /[a-zA-Z0-9_]{4,32}/"
            )
        return value

    @field_validator("note_id")
    def note_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[a-zA-Z0-9_]{4,32}", value):
            raise ValueError(
                r"must validate the regular expression /[a-zA-Z0-9_]{4,32}/"
            )
        return value

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["label", "relation"]):
            raise ValueError("must be one of enum values ('label', 'relation')")
        return value

    @field_validator("name")
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[^\s]+", value):
            raise ValueError(r"must validate the regular expression /^[^\s]+/")
        return value

    @field_validator("utc_date_modified")
    def utc_date_modified_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(
            r"[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}Z",
            value,
        ):
            raise ValueError(
                r"must validate the regular expression /[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}Z/"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Attribute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Attribute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "attributeId": obj.get("attributeId"),
                "noteId": obj.get("noteId"),
                "type": obj.get("type"),
                "name": obj.get("name"),
                "value": obj.get("value"),
                "position": obj.get("position"),
                "isInheritable": obj.get("isInheritable"),
                "utcDateModified": obj.get("utcDateModified"),
            }
        )
        return _obj
