# coding: utf-8

"""
    ETAPI

    External Trilium API

    The version of the OpenAPI document: 1.0.0
    Contact: zadam.apps@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class CreateNoteDef(BaseModel):
    """
    CreateNoteDef
    """  # noqa: E501

    parent_note_id: Annotated[str, Field(strict=True)] = Field(
        alias="parentNoteId"
    )
    title: StrictStr
    type: StrictStr
    mime: Optional[StrictStr] = Field(
        default=None,
        description="this needs to be specified only for note types 'code', 'file', 'image'.",
    )
    content: StrictStr
    note_position: Optional[StrictInt] = Field(
        default=None,
        description="Position of the note in the parent. Normal ordering is 10, 20, 30 ...  So if you want to create a note on the first position, use e.g. 5, for second position 15, for last e.g. 1000000 ",
        alias="notePosition",
    )
    prefix: Optional[StrictStr] = Field(
        default=None,
        description="Prefix is branch (placement) specific title prefix for the note.  Let's say you have your note placed into two different places in the tree,  but you want to change the title a bit in one of the placements. For this you can use prefix. ",
    )
    is_expanded: Optional[StrictBool] = Field(
        default=None,
        description="true if this note (as a folder) should appear expanded",
        alias="isExpanded",
    )
    note_id: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None, alias="noteId"
    )
    branch_id: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None, alias="branchId"
    )
    __properties: ClassVar[List[str]] = [
        "parentNoteId",
        "title",
        "type",
        "mime",
        "content",
        "notePosition",
        "prefix",
        "isExpanded",
        "noteId",
        "branchId",
    ]

    @field_validator("parent_note_id")
    def parent_note_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"[a-zA-Z0-9_]{4,32}", value):
            raise ValueError(
                r"must validate the regular expression /[a-zA-Z0-9_]{4,32}/"
            )
        return value

    @field_validator("note_id")
    def note_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[a-zA-Z0-9_]{4,32}", value):
            raise ValueError(
                r"must validate the regular expression /[a-zA-Z0-9_]{4,32}/"
            )
        return value

    @field_validator("branch_id")
    def branch_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[a-zA-Z0-9_]{4,32}", value):
            raise ValueError(
                r"must validate the regular expression /[a-zA-Z0-9_]{4,32}/"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateNoteDef from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateNoteDef from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "parentNoteId": obj.get("parentNoteId"),
                "title": obj.get("title"),
                "type": obj.get("type"),
                "mime": obj.get("mime"),
                "content": obj.get("content"),
                "notePosition": obj.get("notePosition"),
                "prefix": obj.get("prefix"),
                "isExpanded": obj.get("isExpanded"),
                "noteId": obj.get("noteId"),
                "branchId": obj.get("branchId"),
            }
        )
        return _obj
