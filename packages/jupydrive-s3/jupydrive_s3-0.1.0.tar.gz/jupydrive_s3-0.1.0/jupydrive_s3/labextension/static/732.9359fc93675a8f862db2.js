"use strict";(self.webpackChunkjupydrive_s3=self.webpackChunkjupydrive_s3||[]).push([[732],{9732:(e,s,n)=>{n.r(s),n.d(s,{S3RequestPresigner:()=>o,getSignedUrl:()=>d});var t=n(5901),r=n(2517),i=n(4994),a=n(8582);class o{signer;constructor(e){const s={service:e.signingName||e.service||"s3",uriEscapePath:e.uriEscapePath||!1,applyChecksum:e.applyChecksum||!1,...e};this.signer=new a.W(s)}presign(e,{unsignableHeaders:s=new Set,hoistableHeaders:n=new Set,unhoistableHeaders:t=new Set,...r}={}){return this.prepareRequest(e,{unsignableHeaders:s,unhoistableHeaders:t,hoistableHeaders:n}),this.signer.presign(e,{expiresIn:900,unsignableHeaders:s,unhoistableHeaders:t,...r})}presignWithCredentials(e,s,{unsignableHeaders:n=new Set,hoistableHeaders:t=new Set,unhoistableHeaders:r=new Set,...i}={}){return this.prepareRequest(e,{unsignableHeaders:n,unhoistableHeaders:r,hoistableHeaders:t}),this.signer.presignWithCredentials(e,s,{expiresIn:900,unsignableHeaders:n,unhoistableHeaders:r,...i})}prepareRequest(e,{unsignableHeaders:s=new Set,unhoistableHeaders:n=new Set,hoistableHeaders:t=new Set}={}){s.add("content-type"),Object.keys(e.headers).map((e=>e.toLowerCase())).filter((e=>e.startsWith("x-amz-server-side-encryption"))).forEach((e=>{t.has(e)||n.add(e)})),e.headers["X-Amz-Content-Sha256"]="UNSIGNED-PAYLOAD";const r=e.headers.host,i=e.port,a=`${e.hostname}${null!=e.port?":"+i:""}`;(!r||r===e.hostname&&null!=e.port)&&(e.headers.host=a)}}const d=async(e,s,n={})=>{let a,d;if("function"==typeof e.config.endpointProvider){const n=await(0,r.rC)(s.input,s.constructor,e.config),t=n.properties?.authSchemes?.[0];d="sigv4a"===t?.name?t?.signingRegionSet?.join(","):t?.signingRegion,a=new o({...e.config,signingName:t?.signingName,region:async()=>d})}else a=new o(e.config);const g=e.middlewareStack.clone();g.addRelativeTo(((e,s)=>async e=>{const{request:t}=e;if(!i.Kd.isInstance(t))throw new Error("Request to be presigned is not an valid HTTP request.");let r;delete t.headers["amz-sdk-invocation-id"],delete t.headers["amz-sdk-request"],delete t.headers["x-amz-user-agent"];const o={...n,signingRegion:n.signingRegion??s.signing_region??d,signingService:n.signingService??s.signing_service};return r=s.s3ExpressIdentity?await a.presignWithCredentials(t,s.s3ExpressIdentity,o):await a.presign(t,o),{response:{},output:{$metadata:{httpStatusCode:200},presigned:r}}}),{name:"presignInterceptMiddleware",relation:"before",toMiddleware:"awsAuthMiddleware",override:!0});const l=s.resolveMiddleware(g,e.config,{}),{output:u}=await l({input:s.input}),{presigned:p}=u;return function(e){const{port:s,query:n}=e;let{protocol:r,path:i,hostname:a}=e;r&&":"!==r.slice(-1)&&(r+=":"),s&&(a+=`:${s}`),i&&"/"!==i.charAt(0)&&(i=`/${i}`);let o=n?(0,t.G)(n):"";o&&"?"!==o[0]&&(o=`?${o}`);let d="";null==e.username&&null==e.password||(d=`${e.username??""}:${e.password??""}@`);let g="";return e.fragment&&(g=`#${e.fragment}`),`${r}//${d}${a}${i}${o}${g}`}(p)}}}]);