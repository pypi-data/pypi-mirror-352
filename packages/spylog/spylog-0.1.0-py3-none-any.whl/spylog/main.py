#!/usr/bin/env python3
"""
G≈Ç√≥wny modu≈Ç Spylog - Python Validator Proxy
"""

import sys
import os
import subprocess
from typing import List, Optional

from .config import config
from .validator import validate_python_file, is_python_file


def find_python_file_in_args(args: List[str]) -> Optional[str]:
    """
    Znajd≈∫ plik Python w argumentach

    Args:
        args: Lista argument√≥w

    Returns:
        ≈öcie≈ºka do pliku Python lub None
    """
    for arg in args:
        # Pomijaj flagi (zaczynajƒÖce siƒô od -)
        if arg.startswith("-"):
            continue

        # Sprawd≈∫ czy to plik Python
        if os.path.isfile(arg) and (arg.endswith(".py") or is_python_file(arg)):
            return arg

    return None


def should_validate(args: List[str]) -> bool:
    """
    Sprawd≈∫ czy powinni≈õmy walidowaƒá

    Args:
        args: Argumenty wiersza polece≈Ñ

    Returns:
        True je≈õli nale≈ºy walidowaƒá
    """
    if not args:
        return False

    # Pomijaj niekt√≥re flagi kt√≥re nie wymagajƒÖ walidacji
    skip_flags = ["-c", "--command", "-m", "--module", "-h", "--help", "-V", "--version"]

    for flag in skip_flags:
        if flag in args:
            return False

    return find_python_file_in_args(args) is not None


def execute_python(args: List[str]) -> int:
    """
    Wykonaj oryginalny Python z argumentami

    Args:
        args: Argumenty do przekazania

    Returns:
        Kod wyj≈õcia
    """
    original_python = config.original_python

    try:
        result = subprocess.run([original_python] + args, stdout=sys.stdout, stderr=sys.stderr, stdin=sys.stdin)
        return result.returncode
    except KeyboardInterrupt:
        return 130  # Standardowy kod dla Ctrl+C
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd uruchamiania: {e}", file=sys.stderr)
        return 1


def print_banner():
    """Wy≈õwietl banner Spylog"""
    print("üîç Spylog Python Validator")


def print_validation_result(python_file: str, result):
    """Wy≈õwietl wynik walidacji"""
    print(f"üìÅ Walidacja: {python_file}")

    if result.is_valid:
        print(f"‚úÖ {result.message}")
        if result.warnings:
            print("‚ö†Ô∏è  Ostrze≈ºenia:")
            for warning in result.warnings:
                print(f"   ‚Ä¢ {warning}")
    else:
        print(f"‚ùå {result.message}")
        return False

    return True


def main():
    """G≈Ç√≥wna funkcja spylog"""
    args = sys.argv[1:]

    # Sprawd≈∫ czy potrzebujemy walidacji
    if not should_validate(args):
        # Przeka≈º bezpo≈õrednio do Pythona
        return execute_python(args)

    # Znajd≈∫ plik Python
    python_file = find_python_file_in_args(args)
    if not python_file:
        # Nie ma pliku do walidacji
        return execute_python(args)

    # Wy≈õwietl banner
    print_banner()

    # Waliduj plik
    result = validate_python_file(python_file)

    # Wy≈õwietl wyniki
    if not print_validation_result(python_file, result):
        return 1

    # Uruchom Python
    print(f"üöÄ Uruchamiam: python {' '.join(args)}")
    print("-" * 50)

    return execute_python(args)


def cli():
    """Entry point dla konsoli"""
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Przerwano przez u≈ºytkownika")
        sys.exit(130)
    except Exception as e:
        print(f"‚ùå Nieoczekiwany b≈ÇƒÖd: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    cli()
