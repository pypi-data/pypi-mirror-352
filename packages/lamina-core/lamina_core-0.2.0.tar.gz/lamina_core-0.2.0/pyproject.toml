[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "lamina-core"
version = "0.2.0"
description = "Breath-first framework for building presence-aware AI agent systems"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MPL-2.0"}
authors = [
    {name = "Ben Askins", email = "human@getlamina.ai"},
    {name = "Lamina High Council", email = "council@getlamina.ai"},
    {name = "Luthier", email = "luthier@getlamina.ai"}
]
keywords = ["ai", "agents", "framework", "lamina", "coordination", "breath-first", "presence-aware"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
]

dependencies = [
    # Core framework
    "PyYAML>=6.0.2",
    "requests>=2.32.0",
    "pydantic>=2.10.0",
    
    # Web framework
    "flask>=3.1.0",
    "werkzeug>=3.1.0",
    
    # CLI and configuration
    "click>=8.1.7",
    "typer>=0.15.0",
    "rich>=13.9.0",
    
    # Async support
    "aiohttp>=3.11.0",
    "httpx>=0.28.0",
    
    # Utilities
    "python-dotenv>=1.0.1",
    "jinja2>=3.1.6",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    
    # Code quality
    "ruff>=0.8.0",
    "black>=24.10.0",
    "isort>=5.13.0",
    "mypy>=1.13.0",
    "bandit>=1.8.0",
    
    # Development tools
    "pre-commit>=4.0.0",
    "jupyter>=1.1.1",
    "ipython>=8.30.0",
    
    # Link validation
    "requests>=2.32.0",
]

ai-backends = [
    "transformers>=4.47.0",
    "torch>=2.5.0",
    "ollama>=0.4.9",
    "sentence-transformers>=3.3.0",
]

all = [
    "lamina-core[dev,ai-backends]"
]

[project.scripts]
lamina-core = "lamina.cli.main:main"
lamina = "lamina.cli.unified_lamina:main"

[project.urls]
Homepage = "https://github.com/benaskins/lamina-os"
Documentation = "https://github.com/benaskins/lamina-os/blob/main/docs/"
Repository = "https://github.com/benaskins/lamina-os"
Issues = "https://github.com/benaskins/lamina-os/issues"

[tool.hatch.build.targets.wheel]
packages = ["lamina"]

[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # raise in except without from
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.black]
line-length = 100
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ollama.*",
    "transformers.*",
    "torch.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "error",
    "ignore::UserWarning", 
    "ignore::DeprecationWarning",
    "ignore::pytest.PytestDeprecationWarning",
]
markers = [
    "unit: marks tests as unit tests (fast, mock-based)",
    "integration: marks tests as integration tests (real AI models)",
    "e2e: marks tests as end-to-end tests (full system)",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.coverage.run]
source = ["lamina"]
omit = [
    "lamina/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]