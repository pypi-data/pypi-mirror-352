# Use these settings for debugging runs
######################################################
# Set up categories to specify what should be logged.

# The following log levels are used by pylon.
# ERROR, WARN, NOTICE, INFO, DEBUG
# ERROR logs only error messages.
# DEBUG logs everything, but produces a lot of messages.

# You can find the specific log categories in the log output
# You can use this information to control the output of the
# log sources by adding configurations below.

# Subcategories inherit their settings from their parent category.
# log4j.category.categoryA.subcategoryB.subcategoryC


# Enable everything on root and send it to the appender File.
# The appenders are configured below.
log4j.rootCategory=DEBUG, File
# Enable everything on root and set it use the ELTAppender instead as
# alternative to the above configuration.
# You can configure a combination of any appenders if needed.
#log4j.rootCategory=DEBUG, EltAppender
# The EltAppender is configured below.

# Enable logging object relationship information.
log4j.category.Map=DEBUG

# When using a Basler frame grabber, the following categories can be set
# to NOTICE to get more logging about incoming frames, buffer handling and events.
# Be aware that this can have a noticeable performance impact for high frame rates
# resp. a high event frequency.
log4j.category.FgSdk.fglib.Acq=FATAL
log4j.category.FgSdk.GenTL.Acq=FATAL
log4j.category.FgSdk.fglib.Events=FATAL


# Configure the log output generation to only infos from the pylon Viewer.
# This is only relevant when connected to the pylon Viewer.
log4j.category.PylonViewer=INFO

# Now disable some log messages we don't want to see.
# From GenApi we only want to see Errors by default.
log4j.category.GenApi=ERROR
log4j.category.FileStream=ERROR

# Set pylon data processing to warnings only.
log4j.category.pylon.dataprocessing=WARN

# You can uncomment any of the following configuration lines to get detailed
# information about GenICam node map parameter access.
# Enabling this will generate lots of output.
# If you are interested in a certain parameter
# you can configure the log output per parameter (shown below).
#log4j.category.GenApi.Device.Value=DEBUG

# Adding a configuration per parameter.
#log4j.category.GenApi.Device.Value.[NodeName]=DEBUG
# e.g.
#log4j.category.GenApi.Device.Value.PixelFormat=DEBUG

# The following configurations are only needed
# for debugging GenICam node map problems.
#log4j.category.GenApi.Device.Access=DEBUG
#log4j.category.GenApi.Device.Range=DEBUG
#log4j.category.GenApi.Device.Port=DEBUG
#log4j.category.GenApi.Device.Cache=DEBUG
#log4j.category.GenApi.Device.Misc=DEBUG

######################################################
#
# Appenders tell the log library where to output logging data to.

# This appender writes to a file /tmp/pylonLog.txt
log4j.appender.File=org.apache.log4j.FileAppender
log4j.appender.File.layout=org.apache.log4j.PatternLayout
log4j.appender.File.layout.ConversionPattern=[%d:%t:%c] %p: %m%n
log4j.appender.File.fileName=/tmp/pylonLog.txt

# Note: You can easily connect the pylon Event Logger to a target application
# by select clicking on menu 'Capture' ->  'Start and Open Target' and choose an application
# that uses the pylon logging mechanism. To configure the target application the properties
# file located in 'user_root/pylonEventLogger' is used instead of this file.

# Uncomment the following block if you want to use the pylon Event Logging Tool
# while handling the debug logging settings yourself.
# Set the environment variable 'PYLON_LOG_CONFIG' to point to the properties
# file containing this configuration file or a copy of it.
## This appender writes to the pylon event logging tool.
#log4j.appender.EltAppender=org.apache.log4j.EltAppender
#log4j.appender.EltAppender.layout=org.apache.log4j.PatternLayout
## When using the EltAppender the pattern must start with '[%d:%t:%c] %p: '
#log4j.appender.EltAppender.layout.ConversionPattern=[%d:%t:%c] %p: %m%n
#log4j.appender.EltAppender.portNumber=12320
## The interval in ms new log messages are transmitted to the pylon Event Logger.
#log4j.appender.EltAppender.transmitInterval=50
## Additional wait time at appender startup in ms.
#log4j.appender.EltAppender.initialWait=100
# Continue logging in case of a disconnect from pylon Event Logger.
#log4j.appender.EltAppender.logOnDisconnect=false


# When using log4j.appender.File.layout.ConversionPattern option you can use these
# format specifiers:
#   %m = The message / log text
#   %c = Category name
#   %d = date time stamp
#   %p = message priority
#   %t = thread name
#   %u = processing time
#   %n = create new line ( this is usually at the end to make a new line break
#   %x = Nested Diagnostic Context (NDC)
