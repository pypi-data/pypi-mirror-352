# pgstudio/__init__.py

import tkinter as tk
from tkinter import scrolledtext
import subprocess
import sys
from .manager import PgStudioManager
import os
if not os.environ.get('DISPLAY') and sys.platform != 'win32':
    print("GUI not available. Cannot prompt for agreement.")
    sys.exit(1)

def _show_agreement():
    agreement_text = """
PgStudio Software User Agreement

Effective Date: Upon installation and/or use of the Software

Parties:
This Agreement ("Agreement") is entered into by and between the end user ("You" or "User") and Taireru LLC, a limited liability company ("Taireru"), for the use of the software product known as "PgStudio" ("Software").

---

1. ACCEPTANCE OF TERMS
   By installing the Software via pip install pgstudio, clicking “I Agree” on any associated prompt, or using the Software or any output, files, or code generated by it (collectively, "Generated Content"), you acknowledge that you have read, understood, and agree to be legally bound by the terms of this Agreement. Use of the Software, whether knowingly or unknowingly, constitutes acceptance of this Agreement.

IMPORTANT: Clicking "I Decline" below or closing this prompt window will be interpreted as a refusal to enter into this Agreement and will trigger an attempt to forcibly uninstall the Software from your device. Uninstallation may include the removal of all associated files, settings, and generated dependencies.

---

2. LICENSE AND RESTRICTIONS
   2.1 No Modification or Redistribution
   You shall not copy, modify, reverse-engineer, distribute, sublicense, or create derivative works from any source code, libraries, or internal files of the Software, whether obtained via pip install pgstudio or any other means.

2.2 Viewing Rights Only
You may review the source code of the Software for informational purposes only. Any act of copying, modifying, redistributing, or deriving from said code is strictly prohibited and subject to legal action by Taireru LLC.

---

3. USE OF GENERATED CONTENT
   3.1 Distribution Obligations
   If you distribute or share Generated Content for future/current modification by the recipient (whether directly or indirectly), you must inform the recipient of this Agreement in full, without omission. The recipient’s use of the Software or Generated Content shall also constitute their agreement to these terms.

3.2 Ownership of Generated Content
You retain full rights to any Generated Content and may claim it as your own intellectual property. However, this only applies after any modifications you make to such Generated Content. No ownership is transferred or implied over the Software's original source code itself.

---

4. LIABILITY DISCLAIMER
   Taireru LLC disclaims any and all liability for damages of any kind incurred through the use or misuse of the Software or any Generated Content. The Software is provided "as-is" without warranty of any kind, express or implied. We do not certify the safety or integrity of any Generated Content received via third parties, as such content may have been altered. You are advised to only trust Generated Content from known and verified sources.

---

5. MONETIZATION
   The Software is free to use. Any fees or charges associated with the Software or its use are unauthorized by Taireru LLC. If you have paid for access to the Software or any part of it, you may have been misled or defrauded.

---

6. ENFORCEMENT AND VIOLATIONS
   Any breach of the terms herein, particularly in regard to the unauthorized use, modification, or redistribution of the Software's source code, shall be grounds for legal action. Taireru LLC reserves all rights available under law.

---

7. AMENDMENTS
   Taireru LLC reserves the right to amend this Agreement at any time. Continued use of the Software following any update constitutes your acceptance of the revised Agreement.

---

8. GOVERNING LAW AND JURISDICTION
   All legal disputes arising out of or relating to this Agreement shall be governed by and construed in accordance with the laws of the State of Arkansas, USA, without regard to its conflict of law principles. Any legal action or proceeding relating to this Agreement shall be brought exclusively in the courts located within Arkansas.

---

By proceeding with installation, execution, or use of PgStudio, you confirm your agreement to this contract in full.
If you do not agree, click “I Decline” or close this prompt — doing either will attempt to remove the Software from your device.

Taireru LLC
All Rights Reserved.
"""

    root = tk.Tk()
    root.withdraw()

    agreement = tk.Toplevel()
    agreement.title("PgStudio Software User Agreement")
    agreement.geometry("600x500")

    text_area = scrolledtext.ScrolledText(agreement, wrap=tk.WORD, width=80, height=25)
    text_area.insert(tk.END, agreement_text)
    text_area.configure(state='disabled')
    text_area.pack(padx=10, pady=10)

    user_response = tk.BooleanVar(value=False)

    def agree():
        print("User agreed to license.")
        user_response.set(True)
        agreement.destroy()

    def decline():
        print("User declined license.")
        agreement.destroy()
        subprocess.run([sys.executable, "-m", "pip", "uninstall", "-y", "pgstudio"])
        sys.exit(0)  # Exit since user declined

    button_frame = tk.Frame(agreement)
    button_frame.pack(pady=10)

    tk.Button(button_frame, text="I Agree", command=agree, width=15).pack(side=tk.RIGHT, padx=20)
    tk.Button(button_frame, text="I Decline", command=decline, width=15).pack(side=tk.LEFT, padx=20)

    # Wait until the user clicks a button
    agreement.protocol("WM_DELETE_WINDOW", decline)  # Handle window close as decline

    agreement.grab_set()  # Focus the agreement window
    agreement.wait_variable(user_response)  # Pause here until agree() or decline() sets the value

_manager = PgStudioManager()

def configure(core: str):
    """
    configure the folder where your project lives.
    pgstudio will create files/folders in there (like `objects.json`, each Script’s .py, etc).
    """
    _manager.configure(core)

def launch():
    """
    launch the PgStudio editor. must call configure(...) first.
    """
    print("Prompting Agreement.")
    _show_agreement()
    print("Launching PgStudio!")
    _manager.launch()

def main():
    """
    entrypoint for `pgstudio` CLI. E.g.: `$ pgstudio MyProjectFolder`
    """
    if len(sys.argv) < 2:
        print("usage: pgstudio <project_folder>")
        sys.exit(1)
    core = sys.argv[1]
    configure(core)
    launch()

__all__ = ["configure", "launch"]