"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .basicfeatureextractor import BasicFeatureExtractor, BasicFeatureExtractorTypedDict
from .namespacestatus import NamespaceStatus
from mixpeek.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Any, List
from typing_extensions import NotRequired, TypedDict


class NamespaceResponseTypedDict(TypedDict):
    namespace_id: str
    namespace_name: str
    description: Nullable[str]
    feature_extractors: List[BasicFeatureExtractorTypedDict]
    payload_indexes: Nullable[List[Any]]
    status: NamespaceStatus
    provisioning_task_id: NotRequired[Nullable[str]]


class NamespaceResponse(BaseModel):
    namespace_id: str

    namespace_name: str

    description: Nullable[str]

    feature_extractors: List[BasicFeatureExtractor]

    payload_indexes: Nullable[List[Any]]

    status: NamespaceStatus

    provisioning_task_id: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["provisioning_task_id"]
        nullable_fields = ["description", "payload_indexes", "provisioning_task_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
