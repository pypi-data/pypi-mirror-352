"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .bucketschemafieldbase import BucketSchemaFieldBase, BucketSchemaFieldBaseTypedDict
from .bucketschemafieldtype import BucketSchemaFieldType
from mixpeek.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Any, Dict, List, Optional
from typing_extensions import NotRequired, TypedDict


class RetrieverSchemaFieldInputTypedDict(TypedDict):
    r"""Schema field definition for retriever inputs"""

    type: BucketSchemaFieldType
    r"""Enum for field types in bucket schemas"""
    default: NotRequired[Nullable[Any]]
    items: NotRequired[Nullable[BucketSchemaFieldBaseTypedDict]]
    properties: NotRequired[Nullable[Dict[str, BucketSchemaFieldBaseTypedDict]]]
    example: NotRequired[Nullable[Any]]
    description: NotRequired[Nullable[str]]
    enum: NotRequired[Nullable[List[Any]]]
    required: NotRequired[bool]
    r"""Whether this field is required for the retriever"""


class RetrieverSchemaFieldInput(BaseModel):
    r"""Schema field definition for retriever inputs"""

    type: BucketSchemaFieldType
    r"""Enum for field types in bucket schemas"""

    default: OptionalNullable[Any] = UNSET

    items: OptionalNullable[BucketSchemaFieldBase] = UNSET

    properties: OptionalNullable[Dict[str, BucketSchemaFieldBase]] = UNSET

    example: OptionalNullable[Any] = UNSET

    description: OptionalNullable[str] = UNSET

    enum: OptionalNullable[List[Any]] = UNSET

    required: Optional[bool] = True
    r"""Whether this field is required for the retriever"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "default",
            "items",
            "properties",
            "example",
            "description",
            "enum",
            "required",
        ]
        nullable_fields = [
            "default",
            "items",
            "properties",
            "example",
            "description",
            "enum",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
