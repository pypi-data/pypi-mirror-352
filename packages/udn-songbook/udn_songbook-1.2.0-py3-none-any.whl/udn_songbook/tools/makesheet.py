#!/usr/bin/env python3
import argparse
import sys
from pathlib import Path
from typing import List
import datetime
import shutil

from udn_songbook import Song


def parse_cmdline(argv: List[str]) -> argparse.Namespace:
    """
    Process commandline options and arguments, provide help
    """

    preamble = """
    Generates a PDF or HTML songsheet from a UDN input file

    Files are generated in your CWD (current working directory),
    unless you specify a path to an output file.
    """

    parser = argparse.ArgumentParser(description=preamble)
    parser.add_argument("filename", help="path to a filename in UDN format")
    parser.add_argument(
        "-o",
        "--output",
        help="name of output file, autogenerated from input filename if omitted",
    )

    parser.add_argument(
        "-f",
        "--force",
        action="store_true",
        default=False,
        help="""Overwrite existing output files without warning.
                Will backup existing files with a timestamp suffix
                if this is not specified.""",
    )

    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        default=False,
        help="Actually tell me what is being done",
    )

    outgrp = parser.add_argument_group(
        "Customised Output", "Options for changing default output"
    )

    outgrp.add_argument(
        "--singers",
        action="store_true",
        default=False,
        help="Generate a singer's sheet (no chords)",
    )

    outgrp.add_argument(
        "--html",
        action="store_true",
        default=False,
        help="Create a songsheet in HTML format, rather than the default PDF",
    )

    outgrp.add_argument(
        "-t",
        "--transpose",
        type=int,
        help="transpose song by this many semitones before rendering. Can be negative",
    )

    opts = parser.parse_args(argv)

    opts.filename = Path(opts.filename)

    if opts.output:
        opts.output = Path(opts.output)
    else:
        opts.output = Path(
            Path(opts.filename).with_suffix(".html" if opts.html else ".pdf").name
        )

    if opts.singers:
        opts.chords = False
        opts.notes = False
    else:
        opts.chords = True
        opts.notes = True

    return opts


def main():
    """
    Main functionality
    """
    opts = parse_cmdline(sys.argv[1:])
    print(opts)

    song = Song(opts.filename)

    if opts.transpose:
        if opts.verbose:
            print(f"transposing song by {opts.transpose} semitones")
        song.transpose(opts.transpose)

    if opts.output.exists() and not opts.force:
        print(f"output file {opts.output} already exists, backing it up")
        shutil.copyfile(
            opts.output,
            opts.output.with_suffix(
                datetime.datetime.now().strftime(f"{opts.output.suffix}.%s")
            ),
        )

    if opts.verbose:
        print(f"Writing output to {opts.output}")

    if opts.html:
        with opts.output.open(mode="w") as dest:
            dest.write(song.html(standalone=True, chords=opts.chords, notes=opts.notes))

    else:
        song.pdf(destfile=opts.output, chords=opts.chords, notes=opts.notes)


if __name__ == "__main__":
    main()
