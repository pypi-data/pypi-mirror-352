"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from glean.api_client.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AgentMetadataTypedDict(TypedDict):
    r"""The agent metadata."""


class AgentMetadata(BaseModel):
    r"""The agent metadata."""


class AgentCapabilitiesTypedDict(TypedDict):
    r"""Describes which protocol features the agent supports. In addition to the standard capabilities (prefixed with ap.), implementations can declare custom capabilities, named in reverse domain notation (eg. com.example.some.capability)."""

    ap_io_messages: NotRequired[bool]
    r"""Whether the agent supports Messages as input/output/state. If true, the agent uses the `messages` key in threads/runs endpoints."""
    ap_io_streaming: NotRequired[bool]
    r"""Whether the agent supports streaming output."""


class AgentCapabilities(BaseModel):
    r"""Describes which protocol features the agent supports. In addition to the standard capabilities (prefixed with ap.), implementations can declare custom capabilities, named in reverse domain notation (eg. com.example.some.capability)."""

    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    ap_io_messages: Annotated[
        Optional[bool], pydantic.Field(alias="ap.io.messages")
    ] = None
    r"""Whether the agent supports Messages as input/output/state. If true, the agent uses the `messages` key in threads/runs endpoints."""

    ap_io_streaming: Annotated[
        Optional[bool], pydantic.Field(alias="ap.io.streaming")
    ] = None
    r"""Whether the agent supports streaming output."""

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]


class AgentTypedDict(TypedDict):
    agent_id: str
    r"""The ID of the agent."""
    name: str
    r"""The name of the agent"""
    capabilities: AgentCapabilitiesTypedDict
    r"""Describes which protocol features the agent supports. In addition to the standard capabilities (prefixed with ap.), implementations can declare custom capabilities, named in reverse domain notation (eg. com.example.some.capability)."""
    description: NotRequired[str]
    r"""The description of the agent."""
    metadata: NotRequired[AgentMetadataTypedDict]
    r"""The agent metadata."""


class Agent(BaseModel):
    agent_id: str
    r"""The ID of the agent."""

    name: str
    r"""The name of the agent"""

    capabilities: AgentCapabilities
    r"""Describes which protocol features the agent supports. In addition to the standard capabilities (prefixed with ap.), implementations can declare custom capabilities, named in reverse domain notation (eg. com.example.some.capability)."""

    description: Optional[str] = None
    r"""The description of the agent."""

    metadata: Optional[AgentMetadata] = None
    r"""The agent metadata."""
