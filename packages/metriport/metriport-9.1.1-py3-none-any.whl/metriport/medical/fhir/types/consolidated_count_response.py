# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from .filter import Filter
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class ConsolidatedCountResponse(UniversalBaseModel):
    total: int = pydantic.Field()
    """
    The sum of all resource type count.
    """

    resources: typing.Dict[str, int] = pydantic.Field()
    """
    Object containing resource types as properties and the amount of entries for
    the resource as the value (integer). Only resource types with amount
    of entries higher than one are included.
    """

    filter: Filter = pydantic.Field()
    """
    The filters used to perform this operation.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
