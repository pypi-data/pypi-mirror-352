# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing_extensions
import typing
from ...core.serialization import FieldMetadata
from .decimal import Decimal
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class ProjectSecret(UniversalBaseModel):
    """
    Secure environment variable that can be used to store secrets for bots.
    """

    name: str = pydantic.Field()
    """
    The secret name.
    """

    value_string: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="valueString")
    ] = pydantic.Field(default=None)
    """
    The secret value.
    """

    value_boolean: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="valueBoolean")
    ] = pydantic.Field(default=None)
    """
    The secret value.
    """

    value_decimal: typing_extensions.Annotated[
        typing.Optional[Decimal], FieldMetadata(alias="valueDecimal")
    ] = pydantic.Field(default=None)
    """
    The secret value.
    """

    value_integer: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="valueInteger")
    ] = pydantic.Field(default=None)
    """
    The secret value.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
