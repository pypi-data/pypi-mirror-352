# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from .code import Code
from ...core.serialization import FieldMetadata
from .base_64_binary import Base64Binary
from .url import Url
from .unsigned_int import UnsignedInt
from .date_time import DateTime
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.pydantic_utilities import update_forward_refs


class Attachment(UniversalBaseModel):
    """
    For referring to data content defined in other formats.
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    """

    extension: typing.Optional[typing.List["Extension"]] = pydantic.Field(default=None)
    """
    May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
    """

    content_type: typing_extensions.Annotated[
        typing.Optional[Code], FieldMetadata(alias="contentType")
    ] = pydantic.Field(default=None)
    """
    Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
    """

    language: typing.Optional[Code] = pydantic.Field(default=None)
    """
    The human language of the content. The value can be any valid value according to BCP 47.
    """

    data: typing.Optional[Base64Binary] = pydantic.Field(default=None)
    """
    The actual data of the attachment - a sequence of bytes, base64 encoded.
    """

    url: typing.Optional[Url] = pydantic.Field(default=None)
    """
    A location where the data can be accessed.
    """

    size: typing.Optional[UnsignedInt] = pydantic.Field(default=None)
    """
    The number of bytes of data that make up this attachment (before base64 encoding, if that is done).
    """

    hash: typing.Optional[Base64Binary] = pydantic.Field(default=None)
    """
    The calculated hash of the data using SHA-1. Represented using base64.
    """

    title: typing.Optional[str] = pydantic.Field(default=None)
    """
    A label or set of text to display in place of the data.
    """

    creation: typing.Optional[DateTime] = pydantic.Field(default=None)
    """
    The date that the attachment was first created.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .address import Address  # noqa: E402
from .age import Age  # noqa: E402
from .annotation import Annotation  # noqa: E402
from .codeable_concept import CodeableConcept  # noqa: E402
from .coding import Coding  # noqa: E402
from .contact_detail import ContactDetail  # noqa: E402
from .contact_point import ContactPoint  # noqa: E402
from .contributor import Contributor  # noqa: E402
from .count import Count  # noqa: E402
from .data_requirement import DataRequirement  # noqa: E402
from .data_requirement_code_filter import DataRequirementCodeFilter  # noqa: E402
from .data_requirement_date_filter import DataRequirementDateFilter  # noqa: E402
from .data_requirement_sort import DataRequirementSort  # noqa: E402
from .distance import Distance  # noqa: E402
from .dosage import Dosage  # noqa: E402
from .dosage_dose_and_rate import DosageDoseAndRate  # noqa: E402
from .duration import Duration  # noqa: E402
from .expression import Expression  # noqa: E402
from .extension import Extension  # noqa: E402
from .human_name import HumanName  # noqa: E402
from .identifier import Identifier  # noqa: E402
from .meta import Meta  # noqa: E402
from .money import Money  # noqa: E402
from .parameter_definition import ParameterDefinition  # noqa: E402
from .period import Period  # noqa: E402
from .quantity import Quantity  # noqa: E402
from .range import Range  # noqa: E402
from .ratio import Ratio  # noqa: E402
from .reference import Reference  # noqa: E402
from .related_artifact import RelatedArtifact  # noqa: E402
from .sampled_data import SampledData  # noqa: E402
from .signature import Signature  # noqa: E402
from .timing import Timing  # noqa: E402
from .timing_repeat import TimingRepeat  # noqa: E402
from .trigger_definition import TriggerDefinition  # noqa: E402
from .usage_context import UsageContext  # noqa: E402

update_forward_refs(Attachment)
