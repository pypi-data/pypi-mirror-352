# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
from .address import Address
from .age import Age
from .annotation import Annotation
from .attachment import Attachment
from .codeable_concept import CodeableConcept
from .coding import Coding
from .contact_detail import ContactDetail
from .contact_point import ContactPoint
from .contributor import Contributor
from .count import Count
from .data_requirement import DataRequirement
from .data_requirement_code_filter import DataRequirementCodeFilter
from .data_requirement_date_filter import DataRequirementDateFilter
from .data_requirement_sort import DataRequirementSort
from .distance import Distance
from .dosage import Dosage
from .dosage_dose_and_rate import DosageDoseAndRate
from .duration import Duration
from .expression import Expression
from .extension import Extension
from .human_name import HumanName
from .identifier import Identifier
from .meta import Meta
from .money import Money
from .parameter_definition import ParameterDefinition
from .period import Period
from .quantity import Quantity
from .range import Range
from .ratio import Ratio
from .reference import Reference
from .related_artifact import RelatedArtifact
from .sampled_data import SampledData
from .signature import Signature
from .timing import Timing
from .timing_repeat import TimingRepeat
from .trigger_definition import TriggerDefinition
from .usage_context import UsageContext
import typing
import pydantic
import typing_extensions
from ...core.serialization import FieldMetadata
from .consent_provision_type import ConsentProvisionType
from .consent_actor import ConsentActor
from .consent_data import ConsentData
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.pydantic_utilities import update_forward_refs


class ConsentProvision(UniversalBaseModel):
    """
    A record of a healthcare consumerâ€™s choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    """

    extension: typing.Optional[typing.List[Extension]] = pydantic.Field(default=None)
    """
    May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
    """

    modifier_extension: typing_extensions.Annotated[
        typing.Optional[typing.List[Extension]],
        FieldMetadata(alias="modifierExtension"),
    ] = pydantic.Field(default=None)
    """
    May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
    """

    type: typing.Optional[ConsentProvisionType] = pydantic.Field(default=None)
    """
    Action to take - permit or deny - when the rule conditions are met. Not permitted in root rule, required in all nested rules.
    """

    period: typing.Optional[Period] = pydantic.Field(default=None)
    """
    The timeframe in this rule is valid.
    """

    actor: typing.Optional[typing.List[ConsentActor]] = pydantic.Field(default=None)
    """
    Who or what is controlled by this rule. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
    """

    action: typing.Optional[typing.List[CodeableConcept]] = pydantic.Field(default=None)
    """
    Actions controlled by this Rule.
    """

    security_label: typing_extensions.Annotated[
        typing.Optional[typing.List[Coding]], FieldMetadata(alias="securityLabel")
    ] = pydantic.Field(default=None)
    """
    A security label, comprised of 0..\* security label fields (Privacy tags), which define which resources are controlled by this exception.
    """

    purpose: typing.Optional[typing.List[Coding]] = pydantic.Field(default=None)
    """
    The context of the activities a user is taking - why the user is accessing the data - that are controlled by this rule.
    """

    class_: typing_extensions.Annotated[
        typing.Optional[typing.List[Coding]], FieldMetadata(alias="class")
    ] = pydantic.Field(default=None)
    """
    The class of information covered by this rule. The type can be a FHIR resource type, a profile on a type, or a CDA document, or some other type that indicates what sort of information the consent relates to.
    """

    code: typing.Optional[typing.List[CodeableConcept]] = pydantic.Field(default=None)
    """
    If this code is found in an instance, then the rule applies.
    """

    data_period: typing_extensions.Annotated[
        typing.Optional[Period], FieldMetadata(alias="dataPeriod")
    ] = pydantic.Field(default=None)
    """
    Clinical or Operational Relevant period of time that bounds the data controlled by this rule.
    """

    data: typing.Optional[typing.List[ConsentData]] = pydantic.Field(default=None)
    """
    The resources controlled by this rule if specific resources are referenced.
    """

    provision: typing.Optional[typing.List["ConsentProvision"]] = pydantic.Field(
        default=None
    )
    """
    Rules which provide exceptions to the base rule or subrules.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


update_forward_refs(ConsentProvision)
