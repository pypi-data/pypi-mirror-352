# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing_extensions
import typing
from ....core.serialization import FieldMetadata
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class Filter(UniversalBaseModel):
    resources: str = pydantic.Field()
    """
    Comma-separated list of resource types. If not specified on the
    request, this will be `all`.
    """

    date_from: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="dateFrom")
    ] = pydantic.Field(default=None)
    """
    The start date (inclusive) for which to filter returned resources -
    formatted `YYYY-MM-DD` as per ISO 8601. If not provided,
    no start date filter will be applied.
    """

    date_to: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="dateTo")
    ] = pydantic.Field(default=None)
    """
    The end date (inclusive) for which to filter returned resources -
    formatted `YYYY-MM-DD` as per ISO 8601. If not provided,
    no end date filter will be applied.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
