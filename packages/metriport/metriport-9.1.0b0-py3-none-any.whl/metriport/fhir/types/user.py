# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from .address import Address
from .age import Age
from .annotation import Annotation
from .attachment import Attachment
from .codeable_concept import CodeableConcept
from .coding import Coding
from .contact_detail import ContactDetail
from .contact_point import ContactPoint
from .contributor import Contributor
from .count import Count
from .data_requirement import DataRequirement
from .data_requirement_code_filter import DataRequirementCodeFilter
from .data_requirement_date_filter import DataRequirementDateFilter
from .data_requirement_sort import DataRequirementSort
from .distance import Distance
from .dosage import Dosage
from .dosage_dose_and_rate import DosageDoseAndRate
from .duration import Duration
from .expression import Expression
from .extension import Extension
from .human_name import HumanName
from .identifier import Identifier
from .meta import Meta
from .money import Money
from .parameter_definition import ParameterDefinition
from .period import Period
from .quantity import Quantity
from .range import Range
from .ratio import Ratio
from .reference import Reference
from .related_artifact import RelatedArtifact
from .sampled_data import SampledData
from .signature import Signature
from .timing import Timing
from .timing_repeat import TimingRepeat
from .trigger_definition import TriggerDefinition
from .usage_context import UsageContext
import typing_extensions
import typing
from ...core.serialization import FieldMetadata
from .id import Id
import pydantic
from .uri import Uri
from .code import Code
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class User(UniversalBaseModel):
    """
    Representation of a human user of the system.
    """

    resource_type: typing_extensions.Annotated[
        typing.Literal["User"], FieldMetadata(alias="resourceType")
    ] = "User"
    id: typing.Optional[Id] = pydantic.Field(default=None)
    """
    The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
    """

    meta: typing.Optional[Meta] = pydantic.Field(default=None)
    """
    The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
    """

    implicit_rules: typing_extensions.Annotated[
        typing.Optional[Uri], FieldMetadata(alias="implicitRules")
    ] = pydantic.Field(default=None)
    """
    A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
    """

    language: typing.Optional[Code] = pydantic.Field(default=None)
    """
    The base language in which the resource is written.
    """

    first_name: typing_extensions.Annotated[str, FieldMetadata(alias="firstName")] = (
        pydantic.Field()
    )
    """
    The first name or given name of the user. This is the value as entered when the user is created. It is used to populate the profile resource.
    """

    last_name: typing_extensions.Annotated[str, FieldMetadata(alias="lastName")] = (
        pydantic.Field()
    )
    """
    The last name or family name of the user. This is the value as entered when the user is created. It is used to populate the profile resource.
    """

    external_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="externalId")
    ] = pydantic.Field(default=None)
    """
    DEPRECATED Replaced by ProjectMembership.externalId.
    """

    email: typing.Optional[str] = pydantic.Field(default=None)
    """
    The email address that uniquely identifies the user.
    """

    email_verified: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="emailVerified")
    ] = pydantic.Field(default=None)
    """
    Whether the system has verified that the user has access to the email address.
    """

    admin: typing.Optional[bool] = pydantic.Field(default=None)
    """
    DEPRECATED
    """

    password_hash: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="passwordHash")
    ] = pydantic.Field(default=None)
    """
    Encrypted hash of the user's password.
    """

    mfa_secret: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="mfaSecret")
    ] = pydantic.Field(default=None)
    """
    Shared secret for MFA authenticator applications.
    """

    mfa_enrolled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="mfaEnrolled")
    ] = pydantic.Field(default=None)
    """
    Whether the user has completed MFA enrollment.
    """

    project: typing.Optional[Reference] = pydantic.Field(default=None)
    """
    Optional project if the user only exists for the project. This is used for the project-specific user database.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
