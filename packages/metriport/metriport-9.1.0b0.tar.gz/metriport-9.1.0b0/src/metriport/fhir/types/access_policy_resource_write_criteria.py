# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class AccessPolicyResourceWriteCriteria(UniversalBaseModel):
    """
    Invariants that must be satisfied for the resource to be written.
    """

    pre: typing.Optional[str] = pydantic.Field(default=None)
    """
    Invariant to check against the state of the resource before modification.
    """

    post: typing.Optional[str] = pydantic.Field(default=None)
    """
    Invariant to check against the state of the resource with modifications tentatively applied.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
