# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from .address import Address
from .age import Age
from .annotation import Annotation
from .attachment import Attachment
from .codeable_concept import CodeableConcept
from .coding import Coding
from .contact_detail import ContactDetail
from .contact_point import ContactPoint
from .contributor import Contributor
from .count import Count
from .data_requirement import DataRequirement
from .data_requirement_code_filter import DataRequirementCodeFilter
from .data_requirement_date_filter import DataRequirementDateFilter
from .data_requirement_sort import DataRequirementSort
from .distance import Distance
from .dosage import Dosage
from .dosage_dose_and_rate import DosageDoseAndRate
from .duration import Duration
from .expression import Expression
from .extension import Extension
from .human_name import HumanName
from .identifier import Identifier
from .meta import Meta
from .money import Money
from .parameter_definition import ParameterDefinition
from .period import Period
from .quantity import Quantity
from .range import Range
from .ratio import Ratio
from .reference import Reference
from .related_artifact import RelatedArtifact
from .sampled_data import SampledData
from .signature import Signature
from .timing import Timing
from .timing_repeat import TimingRepeat
from .trigger_definition import TriggerDefinition
from .usage_context import UsageContext
import typing_extensions
import typing
from ...core.serialization import FieldMetadata
from .id import Id
import pydantic
from .uri import Uri
from .code import Code
from .project_membership_access import ProjectMembershipAccess
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class ProjectMembership(UniversalBaseModel):
    """
    Medplum project membership. A project membership grants a user access to a project.
    """

    resource_type: typing_extensions.Annotated[
        typing.Literal["ProjectMembership"], FieldMetadata(alias="resourceType")
    ] = "ProjectMembership"
    id: typing.Optional[Id] = pydantic.Field(default=None)
    """
    The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
    """

    meta: typing.Optional[Meta] = pydantic.Field(default=None)
    """
    The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
    """

    implicit_rules: typing_extensions.Annotated[
        typing.Optional[Uri], FieldMetadata(alias="implicitRules")
    ] = pydantic.Field(default=None)
    """
    A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
    """

    language: typing.Optional[Code] = pydantic.Field(default=None)
    """
    The base language in which the resource is written.
    """

    project: Reference = pydantic.Field()
    """
    Project where the memberships are available.
    """

    invited_by: typing_extensions.Annotated[
        typing.Optional[Reference], FieldMetadata(alias="invitedBy")
    ] = pydantic.Field(default=None)
    """
    The project administrator who invited the user to the project.
    """

    user: Reference = pydantic.Field()
    """
    User that is granted access to the project.
    """

    profile: Reference = pydantic.Field()
    """
    Reference to the resource that represents the user profile within the project.
    """

    external_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="externalId")
    ] = pydantic.Field(default=None)
    """
    A String that is an identifier for the resource as defined by the provisioning client. The "externalId" may simplify identification of a resource between the provisioning client and the service provider by allowing the client to use a filter to locate the resource with an identifier from the provisioning domain, obviating the need to store a local mapping between the provisioning domain's identifier of the resource and the identifier used by the service provider. Each resource MAY include a non-empty "externalId" value. The value of the "externalId" attribute is always issued by the provisioning client and MUST NOT be specified by the service provider. The service provider MUST always interpret the externalId as scoped to the provisioning domain.
    """

    access_policy: typing_extensions.Annotated[
        typing.Optional[Reference], FieldMetadata(alias="accessPolicy")
    ] = pydantic.Field(default=None)
    """
    The access policy for the user within the project memebership.
    """

    access: typing.Optional[typing.List[ProjectMembershipAccess]] = pydantic.Field(
        default=None
    )
    """
    Extended access configuration using parameterized access policies.
    """

    user_configuration: typing_extensions.Annotated[
        typing.Optional[Reference], FieldMetadata(alias="userConfiguration")
    ] = pydantic.Field(default=None)
    """
    The user configuration for the user within the project memebership such as menu links, saved searches, and features.
    """

    admin: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether this user is a project administrator.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
