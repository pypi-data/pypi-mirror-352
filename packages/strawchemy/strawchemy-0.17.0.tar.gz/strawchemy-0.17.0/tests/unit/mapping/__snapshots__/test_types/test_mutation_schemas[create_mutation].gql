# serializer version: 1
# name: test_mutation_schemas[create_mutation]
  '''
  """GraphQL type"""
  type ColorType {
    fruitsAggregate: FruitAggregate!
  
    """Fetch objects from the FruitType collection"""
    fruits: [FruitType!]!
    name: String!
    id: UUID!
  }
  
  """Date (isoformat)"""
  scalar Date
  
  """Date with time (isoformat)"""
  scalar DateTime
  
  """Decimal (fixed-point)"""
  scalar Decimal
  
  """Aggregation fields"""
  type FruitAggregate {
    avg: FruitNumericFields!
    count: Int
    max: FruitMinMaxFields!
    min: FruitMinMaxFields!
    stddevPop: FruitNumericFields!
    stddevSamp: FruitNumericFields!
    sum: FruitSumFields!
    varPop: FruitNumericFields!
    varSamp: FruitNumericFields!
  }
  
  """GraphQL type"""
  type FruitMinMaxFields {
    name: String
    sweetness: Int
  }
  
  """GraphQL type"""
  type FruitNumericFields {
    sweetness: Float
  }
  
  """GraphQL type"""
  type FruitSumFields {
    name: String
    sweetness: Int
  }
  
  """GraphQL type"""
  type FruitType {
    color: ColorType!
    name: String!
    colorId: UUID
    sweetness: Int!
    id: UUID!
  }
  
  """Aggregation fields"""
  type GroupAggregate {
    count: Int
    max: GroupMinMaxFields!
    min: GroupMinMaxFields!
    sum: GroupSumFields!
  }
  
  """Identifier input"""
  input GroupColorIdFieldsInput {
    id: UUID!
  }
  
  """Add a new or existing object"""
  input GroupColorIdFieldsInputGroupColorInputRequiredToOneInput {
    set: GroupColorIdFieldsInput
    create: GroupColorInput
  }
  
  """GraphQL create input type"""
  input GroupColorInput {
    fruits: GroupFruitsIdFieldsInputGroupFruitInputToManyCreateInput
    name: String!
    id: UUID
  }
  
  """GraphQL create input type"""
  input GroupFruitInput {
    name: String!
    sweetness: Int!
    id: UUID
  }
  
  """Identifier input"""
  input GroupFruitsIdFieldsInput {
    id: UUID!
  }
  
  """Add new or existing objects"""
  input GroupFruitsIdFieldsInputGroupFruitInputToManyCreateInput {
    set: [GroupFruitsIdFieldsInput!]
    add: [GroupFruitsIdFieldsInput!]
    create: [GroupFruitInput!]
  }
  
  """GraphQL create input type"""
  input GroupInput {
    tag: GroupTagIdFieldsInputGroupTagInputRequiredToOneInput!
    users: GroupUsersIdFieldsInputGroupUserInputToManyCreateInput
    color: GroupColorIdFieldsInputGroupColorInputRequiredToOneInput!
    name: String!
    id: UUID
  }
  
  """GraphQL type"""
  type GroupMinMaxFields {
    name: String
  }
  
  """GraphQL type"""
  type GroupSumFields {
    name: String
  }
  
  """Identifier input"""
  input GroupTagIdFieldsInput {
    id: UUID!
  }
  
  """Add a new or existing object"""
  input GroupTagIdFieldsInputGroupTagInputRequiredToOneInput {
    set: GroupTagIdFieldsInput
    create: GroupTagInput
  }
  
  """Add a new or existing object"""
  input GroupTagIdFieldsInputGroupTagInputToOneInput {
    set: GroupTagIdFieldsInput
    create: GroupTagInput
  }
  
  """GraphQL create input type"""
  input GroupTagInput {
    name: String!
    id: UUID
  }
  
  """GraphQL type"""
  type GroupType {
    tag: TagType!
    usersAggregate: UserAggregate!
  
    """Fetch objects from the UserType collection"""
    users: [UserType!]!
    color: ColorType!
    name: String!
    tagId: UUID!
    colorId: UUID!
    id: UUID!
  }
  
  """GraphQL create input type"""
  input GroupUserInput {
    tag: GroupTagIdFieldsInputGroupTagInputToOneInput = null
    name: String!
    id: UUID
  }
  
  """Identifier input"""
  input GroupUsersIdFieldsInput {
    id: UUID!
  }
  
  """Add new or existing objects"""
  input GroupUsersIdFieldsInputGroupUserInputToManyCreateInput {
    set: [GroupUsersIdFieldsInput!]
    add: [GroupUsersIdFieldsInput!]
    create: [GroupUserInput!]
  }
  
  """
  The `Interval` scalar type represents a duration of time as specified by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations).
  """
  scalar Interval @specifiedBy(url: "https://en.wikipedia.org/wiki/ISO_8601#Durations")
  
  """
  The `JSON` scalar type represents JSON values as specified by [ECMA-404](https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf).
  """
  scalar JSON @specifiedBy(url: "https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf")
  
  type Mutation {
    """Fetch object from the SQLDataTypesType collection by id"""
    createDataType(data: SQLDataTypesCreate!): SQLDataTypesType!
  
    """Fetch objects from the SQLDataTypesType collection"""
    createDataTypes(data: [SQLDataTypesCreate!]!): [SQLDataTypesType!]!
  
    """Fetch object from the GroupType collection by id"""
    createGroup(data: GroupInput!): GroupType!
  
    """Fetch objects from the GroupType collection"""
    createGroups(data: [GroupInput!]!): [GroupType!]!
  }
  
  type Query {
    hello: String!
  }
  
  """GraphQL create input type"""
  input SQLDataTypesCreate {
    dateCol: Date!
    timeCol: Time!
    timeDeltaCol: Interval!
    datetimeCol: DateTime!
    strCol: String!
    intCol: Int!
    floatCol: Float!
    decimalCol: Decimal!
    boolCol: Boolean!
    uuidCol: UUID!
    dictCol: JSON!
    arrayStrCol: [String!]! = []
    id: UUID
  }
  
  """GraphQL type"""
  type SQLDataTypesType {
    dateCol: Date!
    timeCol: Time!
    timeDeltaCol: Interval!
    datetimeCol: DateTime!
    strCol: String!
    intCol: Int!
    floatCol: Float!
    decimalCol: Decimal!
    boolCol: Boolean!
    uuidCol: UUID!
    dictCol(path: String): JSON
    arrayStrCol: [String!]!
    id: UUID!
  }
  
  """GraphQL type"""
  type TagType {
    groupsAggregate: GroupAggregate!
  
    """Fetch objects from the GroupType collection"""
    groups: [GroupType!]!
    name: String!
    id: UUID!
  }
  
  """Time (isoformat)"""
  scalar Time
  
  scalar UUID
  
  """Aggregation fields"""
  type UserAggregate {
    count: Int
    max: UserMinMaxFields!
    min: UserMinMaxFields!
    sum: UserSumFields!
  }
  
  """GraphQL type"""
  type UserMinMaxFields {
    name: String
  }
  
  """GraphQL type"""
  type UserSumFields {
    name: String
  }
  
  """GraphQL type"""
  type UserType {
    group: GroupType!
    tag: TagType!
    name: String!
    groupId: UUID
    tagId: UUID
    id: UUID!
  }
  '''
# ---
