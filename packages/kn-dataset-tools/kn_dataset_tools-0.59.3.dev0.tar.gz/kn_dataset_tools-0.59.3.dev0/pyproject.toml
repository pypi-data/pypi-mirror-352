# pyproject.toml

[build-system]
requires      = ["setuptools", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name            = "kn-dataset-tools"
description     = "A Simple Viewer for EXIF and AI Metadata."
authors         = [{ name = "Ktiseos Nyx", email = "Dataset-Tools@noreply.github.com" }]
requires-python = ">= 3.10"
license         = { file = "LICENSE" }
readme          = "README.md"
urls            = { source = "https://github.com/Ktiseos-Nyx/Dataset-Tools" } # Corrected from your previous example to non-orgs
dynamic         = ["version"]

keywords = [
    "training", "text", "images", "AI", "editing", "dataset",
    "metadata", "generative", "art",
]
classifiers = [
    "Topic :: Multimedia :: Graphics",
    "Topic :: Multimedia :: Graphics :: Viewers",
    "Topic :: Text Processing :: General",
    "Topic :: Artistic Software",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Intended Audience :: Other Audience",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: X11 Applications :: Qt", # This implies Linux focus for X11
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
]
dependencies = [
    "rich",
    "pydantic",
    "pydantic-core",
    "pillow",
    "PyQt6", # Confirmed this is what you are using
    "toml",
    "typing-extensions", # Good for broader Python 3.x compatibility for newer typing features
    "pyexiv2",
    # "exif", # Consider if this is still needed with piexif and pyexiv2
    # "sd-prompt-reader", # REMOVE - You have vendored this.
    "qt-material",
    "piexif",
    "defusedxml",
]

[project.optional-dependencies]
dev = [
    "pytest", 
    "mypy", 
    "types-toml",       # Stubs for toml
    "types-defusedxml", # Stubs for defusedxml
    # PyQt6 aims to ship with its own stubs, so no separate types-PyQt6 or PyQt6-stubs from pip usually
]
kn  = ["ruff", "pylint"] # For your personal linting/tooling

[project.scripts]
dataset-tools = "dataset_tools.main:main"

[tool.setuptools_scm]
write_to = "_version.py"
# For releases, you want the version to be exactly the tag if you're on a tag.
# If you're not on an exact tag, it will still try to guess and add a dev marker,
# but the local_scheme = "no-local-version" will prevent the +localpart.
version_scheme = "guess-next-dev" # This is often a good default for general use
local_scheme = "no-local-version"   # <<< THIS IS THE KEY FOR PYPI RELEASES
                                    # It prevents the +g<hash>.d<date> part.
# Personal preferences
[tool.uv]
dev-dependencies = ["pytest"]

# --- RUFF Configuration ---
[tool.ruff] # General Ruff settings
line-length    = 120
include        = ["*.py", "*.pyi", "**/pyproject.toml"]
extend-exclude = [
    ".venv",
    # "tests/", # I recommend REMOVING this line to lint/format your tests
    # "test_*.py", # And this one too
]
# Move formatter settings into their own table
# format.quote-style = "double" # Moved to [tool.ruff.format]
# format.indent-style = "space"  # Moved to [tool.ruff.format]
# format.skip-magic-trailing-comma = false # Moved to [tool.ruff.format]
# format.line-ending = "lf" # Moved to [tool.ruff.format]

[tool.ruff.lint] # Lint-specific settings
select = [
    "E", "W", # pycodestyle errors and warnings
    "F",      # Pyflakes
    "I",      # isort (import sorting)
    "C90",    # McCabe complexity
    "N",      # pep8-naming
    "D",      # pydocstyle (docstrings)
    "UP",     # pyupgrade
    "ANN",    # flake8-annotations (for type hint enforcement)
    "S",      # flake8-bandit (security)
    "BLE",    # flake8-blind-except
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "COM",    # flake8-commas (COM812 is the one to consider ignoring)
    "ISC",    # flake8-implicit-str-concat
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "PGH",    # pygrep-hooks
    "PLC", "PLE", "PLR", "PLW", # Pylint equivalents
    "RUF",    # Ruff-specific rules
]
ignore = [
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107", # Ignore missing docstrings initially
    # ANN101, ANN102 were removed by Ruff as deprecated/handled differently
    "COM812", # Add this to ignore the formatter conflict with trailing commas
]
# fix = true # If you want `ruff check` to also attempt fixes without --fix flag

# ADD/MODIFY THIS SECTION:
# For your vendored code, be more lenient, especially with complexity, length, args, statements,
# and potentially some annotation/docstring rules if they are too noisy for code you didn't write.
[tool.ruff.lint.per-file-ignores]
"dataset_tools/vendored_sdpr/format/*.py" = [
    "C901", "PLR0912", "PLR0913", "PLR0915", "PLW0603", # Example: PLW0603 is global statement
    "D100", "D101", "D102", "D103", "D104", "D105", "D107",
    "ANN001", "ANN002", "ANN003", "ANN201", "ANN202", "ANN204", "ANN205", "ANN401",
    "BLE001", # Allow blind excepts if they are guarded by logging exc_info
    "SIM102", # If you don't like its nested if simplification everywhere
    "B007",   # Unused loop variable (if it's being picky about your error handlers)
    # Add any other Pylint (PLx), Bugbear (B), Simplify (SIM) rules that are SUPER noisy here
]
"dataset_tools/vendored_sdpr/image_data_reader.py" = [
    "C901", "PLR0912", "PLR0913", "PLR0915", "PLW0603",
    "D100", "D101", "D102", "D103", "D107",
    "ANN001", "ANN002", "ANN003", "ANN201", "ANN202", "ANN204", "ANN205", "ANN401",
    "BLE001",
    "SIM102",
]
"dataset_tools/vendored_sdpr/logger.py" = ["D103", "D203", "D213", "D214", "D215", "PT009", "T201", "PLR2004", "S101", "ANN001", "ANN201", "ANN401", "ARG002", "N803", "PTH118"]
"dataset_tools/widgets.py" = [
    "PTH118", # BECAUSE WHY NOT
    "PLR2004", # ugh
    "C901", # mega ugh 
    "PLR0912", "PLR0913", "PLR0915", "PLW0603", "PTH208", 
    "ANN201", "ANN202", "ANN204", "ANN205", "ANN401",
    "B007",   # Unused loop variable (if it's being picky about your error handlers)
    "D203", # Missing docstring in public function
    "D213", # Missing docstring in public class
    "D214", # Missing docstring in public module
    "D215", # Missing docstring in public package
    "PT009", # Allow missing docstrings in public function
    "T201",      # Allow print statements
    "PLR2004",   # Allow magic value comparisons
    "S101",      # Allow `assert`
    "ANN001",    # Missing type hint for function argument (e.g. for self, mock objects)
    "ANN201",    # Missing return type hint for public function (test methods)
    "ANN401",    # if you use `Any` a lot in tests for mocks
    "ARG002", # Allow unused arguments
    "N803", # Allow case mismatches because i'm a dumbass
    "PTH118", # Allow errors with pathlib because i'm a dumbass dum!
    "BLE001", # blegh 
    "SIM102", # If you don't like its nested if simplification everywhere
    "D415", # because emet selch said so
    "D205", # because i have a shark! 
    ]
# For your tests, you might want to ignore missing docstrings for test methods,
# print statements, and magic value comparisons.
"tests/*" = [
    "D100", "D101", "D102", "D103", "D104", "D400", "D415", # Missing docstrings
    "D203", # Missing docstring in public function
    "D213", # Missing docstring in public class
    "D214", # Missing docstring in public module
    "D215", # Missing docstring in public package
    "PT009", # Allow missing docstrings in public function
    "T201",      # Allow print statements
    "PLR2004",   # Allow magic value comparisons
    "S101",      # Allow `assert`
    "ANN001",    # Missing type hint for function argument (e.g. for self, mock objects)
    "ANN201",    # Missing return type hint for public function (test methods)
    "ANN401",    # if you use `Any` a lot in tests for mocks
    "ARG002", # Allow unused arguments
    "N803", # Allow case mismatches because i'm a dumbass
    "PTH118", # Allow errors with pathlib because i'm a dumbass dum!
]

[tool.ruff.format] # Formatter specific settings
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"

[tool.ruff.lint.pycodestyle]
max-line-length               = 120
ignore-overlong-task-comments = true

[tool.ruff.lint.pylint]
max-args = 8        # Increased from 7
max-branches = 18
max-statements = 70
max-locals = 20

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true # Allows *args: Any and **kwargs: Any

[tool.typos]
files.extend-exclude = [
    # "tests/",     # If you want to check typos in tests, remove this
    # "test_*.py", # and this
]

# --- MYPY Configuration ---
[tool.mypy]
python_version = "3.10" # Match your requires-python lower bound
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
# For stricter checking later, uncomment these:
# disallow_untyped_defs = true
# disallow_incomplete_defs = true
check_untyped_defs = true # Good to enable

plugins = "pydantic.mypy"

# Per-module settings for ignoring missing stubs or specific errors
[[tool.mypy.overrides]]
module = [
    "piexif.*",
    "pyexiv2.*",
    "qt_material.*",
    "defusedxml.*", # types-defusedxml should provide stubs
    "dataset_tools.version", # Your _version.py
    "PyQt6.*",
    "dataset_tools.vendored_sdpr.*", # Enable if vendored code is too noisy initially
]
ignore_missing_imports = true

# PyQt6 should provide its own stubs. If MyPy still has issues with it
# specifically for 'no attribute' errors that are false positives, 
# you might need to add ignores for those specific attributes in code using `# type: ignore[attr-defined]`
# Or, if there are many, consider:
# [[tool.mypy.overrides]]
# module = "PyQt6.*"
# ignore_errors = true # Use this as a last resort for problematic C extensions