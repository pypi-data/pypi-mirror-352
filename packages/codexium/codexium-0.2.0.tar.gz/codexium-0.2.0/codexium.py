import os
import click
import cohere
from typing import Optional

class CohereClient:
    def __init__(self, api_key: Optional[str] = None):
        self.api_key = api_key or os.environ.get('COHERE_API_KEY')
        if not self.api_key:
            raise ValueError(
                'Cohere API key is required. Either pass it directly or set COHERE_API_KEY environment variable.'
            )
        self.client = cohere.Client(self.api_key)

    def ask(self, prompt: str) -> str:
        try:
            response = self.client.generate(
                prompt=f"You are a documentation expert. Create a professional README.md file based on this code:\n\n{prompt}",
                model='command',  # Cohere's most capable model
                max_tokens=2000,
                temperature=0.7,
                k=0,
                stop_sequences=[],
                return_likelihoods='NONE'
            )
            
            return response.generations[0].text.strip()
            
        except Exception as e:
            raise Exception(f"Cohere API request failed: {str(e)}")

@click.command()
@click.argument('project_path', type=click.Path(exists=True))
@click.option('--api-key', envvar='COHERE_API_KEY', help='Cohere API key')
def codexium(project_path, api_key):
    """Codexium: Auto-generate a README for your project"""
    # Scan files (you can improve this later)
    files = [f for f in os.listdir(project_path) if f.endswith(('.py', '.js', '.ts', '.go', '.java'))]

    combined_code = ""
    for file in files:
        with open(os.path.join(project_path, file), 'r') as f:
            combined_code += f"### {file} ###\n{f.read()}\n\n"

    # Initialize Cohere client
    client = CohereClient(api_key)

    # Ask the AI model to generate a README
    prompt = f"Please analyze this code and generate a professional README.md file:\n\n{combined_code}\n\nInclude the following sections:\n- Project Title and Description\n- Features\n- Installation\n- Usage\n- Requirements\n- License (if found in the code)\n\nFormat the response in Markdown."
    
    try:
        readme_content = client.ask(prompt)

        # Save README.md
        with open(os.path.join(project_path, "README.md"), 'w') as f:
            f.write(readme_content)

        click.echo("✅ README.md generated by Codexium!")
    except Exception as e:
        click.echo(f"❌ Error: {str(e)}", err=True)
        exit(1)

if __name__ == '__main__':
    codexium()