"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from compass_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
import pydantic
from pydantic import ConfigDict, model_serializer
from typing import Any, Dict, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


MorphoBorrowRequestAmountTypedDict = TypeAliasType(
    "MorphoBorrowRequestAmountTypedDict", Union[float, str]
)
r"""Amount of the token to borrow from the market."""


MorphoBorrowRequestAmount = TypeAliasType(
    "MorphoBorrowRequestAmount", Union[float, str]
)
r"""Amount of the token to borrow from the market."""


class MorphoBorrowRequestChain(str, Enum):
    ETHEREUM_MAINNET = "ethereum:mainnet"
    BASE_MAINNET = "base:mainnet"


class MorphoBorrowRequestTypedDict(TypedDict):
    amount: MorphoBorrowRequestAmountTypedDict
    r"""Amount of the token to borrow from the market."""
    unique_market_key: str
    r"""The key that uniquely identifies the market. This can be found using the 'Get Markets' endpoint."""
    chain: MorphoBorrowRequestChain
    sender: str
    r"""The address of the transaction sender."""
    on_behalf_of: NotRequired[Nullable[str]]
    r"""The address where the collateral is borrowed against. Defaults to sender."""
    receiver: NotRequired[Nullable[str]]
    r"""The address of the receiver of the tokens borrowed. Defaults to the transaction sender."""


class MorphoBorrowRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    amount: MorphoBorrowRequestAmount
    r"""Amount of the token to borrow from the market."""

    unique_market_key: str
    r"""The key that uniquely identifies the market. This can be found using the 'Get Markets' endpoint."""

    chain: MorphoBorrowRequestChain

    sender: str
    r"""The address of the transaction sender."""

    on_behalf_of: OptionalNullable[str] = UNSET
    r"""The address where the collateral is borrowed against. Defaults to sender."""

    receiver: OptionalNullable[str] = UNSET
    r"""The address of the receiver of the tokens borrowed. Defaults to the transaction sender."""

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["on_behalf_of", "receiver"]
        nullable_fields = ["on_behalf_of", "receiver"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        for k, v in serialized.items():
            m[k] = v

        return m
