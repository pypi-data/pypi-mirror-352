"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .chain import Chain
from .token_enum import TokenEnum
from compass_api_sdk.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, Union
from typing_extensions import TypeAliasType, TypedDict


TokenTransferRequestAmountTypedDict = TypeAliasType(
    "TokenTransferRequestAmountTypedDict", Union[float, str]
)
r"""Amount of token to transfer"""


TokenTransferRequestAmount = TypeAliasType(
    "TokenTransferRequestAmount", Union[float, str]
)
r"""Amount of token to transfer"""


TokenTransferRequestTokenTypedDict = TypeAliasType(
    "TokenTransferRequestTokenTypedDict", Union[TokenEnum, str]
)
r"""The symbol of the token to transfer.."""


TokenTransferRequestToken = TypeAliasType(
    "TokenTransferRequestToken", Union[TokenEnum, str]
)
r"""The symbol of the token to transfer.."""


class TokenTransferRequestTypedDict(TypedDict):
    r"""Request model for transferring ETH or ERC20 tokens."""

    amount: TokenTransferRequestAmountTypedDict
    r"""Amount of token to transfer"""
    token: TokenTransferRequestTokenTypedDict
    r"""The symbol of the token to transfer.."""
    to: str
    r"""The recipient of the tokens."""
    chain: Chain
    r"""The chain to use."""
    sender: str
    r"""The address of the transaction sender."""


class TokenTransferRequest(BaseModel):
    r"""Request model for transferring ETH or ERC20 tokens."""

    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    amount: TokenTransferRequestAmount
    r"""Amount of token to transfer"""

    token: TokenTransferRequestToken
    r"""The symbol of the token to transfer.."""

    to: str
    r"""The recipient of the tokens."""

    chain: Chain
    r"""The chain to use."""

    sender: str
    r"""The address of the transaction sender."""

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]
