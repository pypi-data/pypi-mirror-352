"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from compass_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from compass_api_sdk.utils import FieldMetadata, QueryParamMetadata
from enum import Enum
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AaveHistoricalTransactionsChain(str, Enum):
    r"""The chain to use."""

    BASE_MAINNET = "base:mainnet"
    ETHEREUM_MAINNET = "ethereum:mainnet"
    ARBITRUM_MAINNET = "arbitrum:mainnet"


class AaveHistoricalTransactionsRequestTypedDict(TypedDict):
    offset: NotRequired[int]
    r"""The offset of the first item to return."""
    limit: NotRequired[int]
    r"""The number of items to return."""
    chain: AaveHistoricalTransactionsChain
    r"""The chain to use."""
    block: NotRequired[Nullable[int]]
    r"""Optional block number (defaults to latest)."""
    user_address: str
    r"""The address of the user to get historical transactions for."""


class AaveHistoricalTransactionsRequest(BaseModel):
    offset: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""The offset of the first item to return."""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 100
    r"""The number of items to return."""

    chain: Annotated[
        AaveHistoricalTransactionsChain,
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = AaveHistoricalTransactionsChain.ARBITRUM_MAINNET
    r"""The chain to use."""

    block: Annotated[
        OptionalNullable[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Optional block number (defaults to latest)."""

    user_address: Annotated[
        str, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ] = "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
    r"""The address of the user to get historical transactions for."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["offset", "limit", "block"]
        nullable_fields = ["block"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
