"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from compass_api_sdk.types import BaseModel
from compass_api_sdk.utils import validate_const
from enum import Enum
import pydantic
from pydantic import ConfigDict
from pydantic.functional_validators import AfterValidator
from typing import Any, Dict, Literal, Optional, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


class SkyBuyRequestTokenIn(str, Enum):
    r"""The token you would like to swap 1:1 for USDS. Choose from DAI or USDC."""

    DAI = "DAI"
    USDC = "USDC"


SkyBuyRequestAmountTypedDict = TypeAliasType(
    "SkyBuyRequestAmountTypedDict", Union[float, str]
)
r"""The amount of USDS you would like to buy 1:1 with 'token_in'."""


SkyBuyRequestAmount = TypeAliasType("SkyBuyRequestAmount", Union[float, str])
r"""The amount of USDS you would like to buy 1:1 with 'token_in'."""


class SkyBuyRequestTypedDict(TypedDict):
    token_in: SkyBuyRequestTokenIn
    r"""The token you would like to swap 1:1 for USDS. Choose from DAI or USDC."""
    amount: SkyBuyRequestAmountTypedDict
    r"""The amount of USDS you would like to buy 1:1 with 'token_in'."""
    sender: str
    r"""The address of the transaction sender."""
    chain: Literal["ethereum:mainnet"]


class SkyBuyRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    token_in: SkyBuyRequestTokenIn
    r"""The token you would like to swap 1:1 for USDS. Choose from DAI or USDC."""

    amount: SkyBuyRequestAmount
    r"""The amount of USDS you would like to buy 1:1 with 'token_in'."""

    sender: str
    r"""The address of the transaction sender."""

    CHAIN: Annotated[
        Annotated[
            Optional[Literal["ethereum:mainnet"]],
            AfterValidator(validate_const("ethereum:mainnet")),
        ],
        pydantic.Field(alias="chain"),
    ] = "ethereum:mainnet"

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]
