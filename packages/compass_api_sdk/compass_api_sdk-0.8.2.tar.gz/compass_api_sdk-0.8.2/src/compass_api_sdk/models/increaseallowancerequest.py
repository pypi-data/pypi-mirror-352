"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .chain import Chain
from .token_enum import TokenEnum
from compass_api_sdk.types import BaseModel
from enum import Enum
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, Union
from typing_extensions import TypeAliasType, TypedDict


IncreaseAllowanceRequestTokenTypedDict = TypeAliasType(
    "IncreaseAllowanceRequestTokenTypedDict", Union[TokenEnum, str]
)
r"""The symbol or address of the token for which the allowance is increased.."""


IncreaseAllowanceRequestToken = TypeAliasType(
    "IncreaseAllowanceRequestToken", Union[TokenEnum, str]
)
r"""The symbol or address of the token for which the allowance is increased.."""


class IncreaseAllowanceRequestContractName(str, Enum):
    r"""The name of the contract to increase allowance for."""

    AAVE_V3_POOL = "AaveV3Pool"
    AERODROME_BASIC_ROUTER = "AerodromeBasicRouter"
    AERODROME_SLIPSTREAM_ROUTER = "AerodromeSlipstreamRouter"
    AERODROME_SLIPSTREAM_NONFUNGIBLE_POSITION_MANAGER = (
        "AerodromeSlipstreamNonfungiblePositionManager"
    )
    UNISWAP_V3_ROUTER = "UniswapV3Router"
    UNISWAP_V3_NFT_POSITION_MANAGER = "UniswapV3NFTPositionManager"
    MORPHO = "Morpho"
    SKY_DAI_USDS_CONVERTER = "SkyDaiUsdsConverter"
    SKY_USDC_USDS_CONVERTER = "SkyUsdcUsdsConverter"
    SKY_USDS_VAULT = "SkyUsdsVault"
    PENDLE_ROUTER = "PendleRouter"


IncreaseAllowanceRequestAmountTypedDict = TypeAliasType(
    "IncreaseAllowanceRequestAmountTypedDict", Union[float, str]
)
r"""The amount to increase the allowance to."""


IncreaseAllowanceRequestAmount = TypeAliasType(
    "IncreaseAllowanceRequestAmount", Union[float, str]
)
r"""The amount to increase the allowance to."""


class IncreaseAllowanceRequestTypedDict(TypedDict):
    r"""Request model for increasing token allowance for a contract."""

    token: IncreaseAllowanceRequestTokenTypedDict
    r"""The symbol or address of the token for which the allowance is increased.."""
    contract_name: IncreaseAllowanceRequestContractName
    r"""The name of the contract to increase allowance for."""
    amount: IncreaseAllowanceRequestAmountTypedDict
    r"""The amount to increase the allowance to."""
    chain: Chain
    r"""The chain to use."""
    sender: str
    r"""The address of the transaction sender."""


class IncreaseAllowanceRequest(BaseModel):
    r"""Request model for increasing token allowance for a contract."""

    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    token: IncreaseAllowanceRequestToken
    r"""The symbol or address of the token for which the allowance is increased.."""

    contract_name: IncreaseAllowanceRequestContractName
    r"""The name of the contract to increase allowance for."""

    amount: IncreaseAllowanceRequestAmount
    r"""The amount to increase the allowance to."""

    chain: Chain
    r"""The chain to use."""

    sender: str
    r"""The address of the transaction sender."""

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]
