"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .chain import Chain
from .token_enum import TokenEnum
from compass_api_sdk.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, Union
from typing_extensions import TypeAliasType, TypedDict


AaveWithdrawRequestAmountTypedDict = TypeAliasType(
    "AaveWithdrawRequestAmountTypedDict", Union[float, str]
)
r"""The amount of the asset to withdraw"""


AaveWithdrawRequestAmount = TypeAliasType(
    "AaveWithdrawRequestAmount", Union[float, str]
)
r"""The amount of the asset to withdraw"""


class AaveWithdrawRequestTypedDict(TypedDict):
    token: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """
    amount: AaveWithdrawRequestAmountTypedDict
    r"""The amount of the asset to withdraw"""
    recipient: str
    r"""The address of the recipient of the withdrawn funds."""
    chain: Chain
    r"""The chain to use."""
    sender: str
    r"""The address of the transaction sender."""


class AaveWithdrawRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    token: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """

    amount: AaveWithdrawRequestAmount
    r"""The amount of the asset to withdraw"""

    recipient: str
    r"""The address of the recipient of the withdrawn funds."""

    chain: Chain
    r"""The chain to use."""

    sender: str
    r"""The address of the transaction sender."""

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]
