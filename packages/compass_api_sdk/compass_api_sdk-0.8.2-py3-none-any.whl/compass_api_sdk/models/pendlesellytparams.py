"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from compass_api_sdk.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, Union
from typing_extensions import TypeAliasType, TypedDict


PendleSellYtParamsAmountTypedDict = TypeAliasType(
    "PendleSellYtParamsAmountTypedDict", Union[float, str]
)
r"""The amount of market's Yield Token (YT) you would like to sell for market's Underlying Token."""


PendleSellYtParamsAmount = TypeAliasType("PendleSellYtParamsAmount", Union[float, str])
r"""The amount of market's Yield Token (YT) you would like to sell for market's Underlying Token."""


class PendleSellYtParamsTypedDict(TypedDict):
    market_address: str
    r"""The address of the market identifying which Yield Token (YT) you would like to sell."""
    amount: PendleSellYtParamsAmountTypedDict
    r"""The amount of market's Yield Token (YT) you would like to sell for market's Underlying Token."""


class PendleSellYtParams(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    market_address: str
    r"""The address of the market identifying which Yield Token (YT) you would like to sell."""

    amount: PendleSellYtParamsAmount
    r"""The amount of market's Yield Token (YT) you would like to sell for market's Underlying Token."""

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]
