# This is the configuration file for the Embedding service.

# The Embedding service provides integration with embedding models.
# It will subscribe to Embedding service request events and based on the exact
# topic, will call the appropriate Embedding service to generate a vector.

# The general topic format is:
# - <namespace>/solace-agent-mesh/v1/embedding-service/<verb>/<input-type>/<stimulus-uuid>/<session-uuid>/<originator-id>
#
# The specific subscriptions are:
# - <namespace>/solace-agent-mesh/v1/embedding-service/request/text/>
# - <namespace>/solace-agent-mesh/v1/embedding-service/request/image/>

---
log:
  stdout_log_level: INFO
  log_file_level: INFO
  log_file: solace_agent_mesh.log

shared_config:
  - broker_config: &broker_connection
      broker_connection_share: ${SOLACE_BROKER_URL}
      dev_mode: ${SOLACE_DEV_MODE, false}
      broker_url: ${SOLACE_BROKER_URL}
      broker_username: ${SOLACE_BROKER_USERNAME}
      broker_password: ${SOLACE_BROKER_PASSWORD}
      broker_vpn: ${SOLACE_BROKER_VPN}
      payload_encoding: utf-8
      payload_format: json
      temporary_queue: ${USE_TEMPORARY_QUEUES, false}

flows:
  # Handling text/image requests
  - name: embedding-service
    components:
      - component_name: broker_input
        component_module: broker_input
        component_config:
          <<: *broker_connection
          broker_queue_name: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/embedding-service/embedding
          broker_subscriptions:
            - topic: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/embedding-service/request/text/>
              qos: 1
            - topic: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/embedding-service/request/image/>
              qos: 1

      - component_name: file_resolver
        component_base_path: .
        component_module: src.tools.components.file_resolver_component
        component_config:
          force_resolve: true
        input_selection:
          source_expression: input.payload

      - component_name: embedding_service_model
        num_instances: ${EMBEDDING_SERVICE_MODEL_NUM_INSTANCES, 1}
        component_module: litellm_embeddings
        component_config:
          load_balancer:
            - model_name: ${EMBEDDING_SERVICE_MODEL_NAME} # model alias
              litellm_params:
                model: ${EMBEDDING_SERVICE_MODEL_NAME}
                api_key: ${EMBEDDING_SERVICE_API_KEY}
                api_base: ${EMBEDDING_SERVICE_ENDPOINT}
        input_selection:
          source_expression: previous

      - component_name: broker_output
        component_module: broker_output
        component_config:
          <<: *broker_connection
          copy_user_properties: true
        input_transforms:
          - type: copy
            source_expression: previous
            dest_expression: user_data.output:payload
          - type: copy
            source_expression: input.user_properties:__solace_ai_connector_broker_request_response_topic__
            dest_expression: user_data.output:topic
        input_selection:
          source_expression: user_data.output
