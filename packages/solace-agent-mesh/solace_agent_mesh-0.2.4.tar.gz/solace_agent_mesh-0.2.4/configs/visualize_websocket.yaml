---
log:
  stdout_log_level: INFO
  log_file_level: INFO
  log_file: solace_ai_connector.log

shared_config:
  - broker_config: &broker_connection
      broker_connection_share: ${SOLACE_BROKER_URL}
      dev_mode: ${SOLACE_DEV_MODE, false}
      broker_url: ${SOLACE_BROKER_URL}
      broker_username: ${SOLACE_BROKER_USERNAME}
      broker_password: ${SOLACE_BROKER_PASSWORD}
      broker_vpn: ${SOLACE_BROKER_VPN}
      temporary_queue: ${USE_TEMPORARY_QUEUES, false}

flows:
  - name: visualize_websocket
    components:
      - component_name: broker_input
        component_module: broker_input
        component_config: 
          <<: *broker_connection
          broker_queue_name: ${SOLACE_AGENT_MESH_NAMESPACE}visualize_websocket
          broker_subscriptions:
            - topic: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/register/>
              qos: 1
            - topic: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/>
              qos: 1
          payload_encoding: utf-8
          payload_format: json

      - component_name: websocket_output
        component_module: websocket_output
        component_config:
          listen_port: ${VISUALIZER_WEBSOCKET_PORT, 5000}
          serve_html: false
          payload_encoding: none
          payload_format: json
        input_transforms:
          - type: copy
            source_expression: input.payload
            dest_expression: user_data.output:payload.payload
          - type: copy
            source_expression: input.topic
            dest_expression: user_data.output:payload.topic
          - type: copy
            source_expression: input.user_properties
            dest_expression: user_data.output:payload.user_properties
          - type: copy
            source_value: "*"
            dest_expression: user_data.output:socket_id
        component_input:
          source_expression: user_data.output

