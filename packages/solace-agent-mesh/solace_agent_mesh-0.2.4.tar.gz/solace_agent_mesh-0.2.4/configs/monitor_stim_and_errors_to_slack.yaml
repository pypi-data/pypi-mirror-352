# Configuration for the Slack Monitor Agent
#
# This sets up:
# 1. Agent registration flow
# 2. Action request processing flow
# 3. Event monitoring flow for tracking all solace agent mesh events
#
# Required environment variables:
# - SOLACE_BROKER_URL
# - SOLACE_BROKER_USERNAME
# - SOLACE_BROKER_PASSWORD
# - SOLACE_BROKER_VPN
# - SOLACE_AGENT_MESH_NAMESPACE
# - MONITOR_SLACK_STATUS_CHANNEL

---
log:
  stdout_log_level: INFO
  log_file_level: INFO
  log_file: solace_ai_connector.log

shared_config:
  - broker_config: &broker_connection
      broker_connection_share: ${SOLACE_BROKER_URL}
      dev_mode: ${SOLACE_DEV_MODE, false}
      broker_url: ${SOLACE_BROKER_URL}
      broker_username: ${SOLACE_BROKER_USERNAME}
      broker_password: ${SOLACE_BROKER_PASSWORD}
      broker_vpn: ${SOLACE_BROKER_VPN}
      temporary_queue: ${USE_TEMPORARY_QUEUES, false}

flows:

  # Event monitoring flow
  - name: event_monitor
    put_errors_in_error_queue: false
    components:
      # Input from broker - subscribe to all solace agent mesh events
      - component_name: broker_input
        component_module: broker_input
        component_config:
          <<: *broker_connection
          payload_encoding: utf-8
          payload_format: json
          broker_queue_name: ${SOLACE_AGENT_MESH_NAMESPACE}agent_slack_monitor_events
          broker_subscriptions:
            - topic: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/>
              qos: 1
            - topic: "!${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/register/>"
              qos: 1

      # Process events
      - component_name: event_processor
        component_base_path: .
        component_module: src.monitors.stim_and_errors.stim_and_error_monitor
        component_config:
          notification_flow_name: slack_notification
          stimulus_ttl: 300
          error_format: slack

  # Send notifications - this is called directly by the monitor
  - name: slack_notification
    put_errors_in_error_queue: false
    components:

      # Output to the broker to call the appropriate agent's action
      - component_name: broker_output
        component_module: broker_output
        component_config:
          <<: *broker_connection
          payload_encoding: utf-8
          payload_format: json
          copy_user_properties: true
        input_transforms:
          - type: copy
            source_expression: input.payload:is_last
            dest_expression: user_data.output:payload.action_params.last_post_to_thread
          - type: copy
            source_expression: input.payload:correlation_id
            dest_expression: user_data.output:payload.action_params.thread_correlation_id
          - type: copy
            source_expression: input.payload:text
            dest_expression: user_data.output:payload.action_params.text
          - type: copy
            source_expression: input.payload:blocks
            dest_expression: user_data.output:payload.action_params.blocks
          - type: copy
            source_expression: input.payload:files
            dest_expression: user_data.output:payload.action_params.files
          - type: copy
            source_value: ${MONITOR_SLACK_STATUS_CHANNEL}
            dest_expression: user_data.output:payload.action_params.channel
          - type: copy
            source_value: slack
            dest_expression: user_data.output:payload.agent_name
          - type: copy
            source_value: post_message
            dest_expression: user_data.output:payload.action_name
          - type: copy
            source_value: '0'
            dest_expression: user_data.output:payload.action_idx
          - type: copy
            source_value: 'stim_and_error_monitor'
            dest_expression: user_data.output:payload.originator
          - type: copy
            source_expression: template:${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/actionRequest/monitor/x/slack/post_message/{{text://input.payload:correlation_id}}
            dest_expression: user_data.output:topic
        input_selection:
          source_expression: user_data.output