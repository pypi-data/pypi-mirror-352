---
log:
  stdout_log_level: ERROR

# trace:
#   trace_file: conversation_to_file.trace

shared_config:
  - broker_config: &broker_connection
      broker_connection_share: ${SOLACE_BROKER_URL}
      dev_mode: ${SOLACE_DEV_MODE, false}
      broker_url: ${SOLACE_BROKER_URL}
      broker_username: ${SOLACE_BROKER_USERNAME}
      broker_password: ${SOLACE_BROKER_PASSWORD}
      broker_vpn: ${SOLACE_BROKER_VPN}
      temporary_queue: ${USE_TEMPORARY_QUEUES, false}

# Take from Slack and publish to Solace
flows:
  - name: write_to_file
    components:
      - component_name: broker_input
        component_module: broker_input
        component_config: 
          <<: *broker_connection
          broker_queue_name: ${SOLACE_AGENT_MESH_NAMESPACE}conversation_to_file
          broker_subscriptions:
            - topic: "!${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/register/>"
              qos: 1
            - topic: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/>
              qos: 1
          payload_encoding: utf-8
          payload_format: json

      - component_name: conversation_formatter
        component_base_path: .
        component_module: src.tools.components.conversation_formatter
        component_config:
        component_input:
          source_expression: input

      - component_name: file_output
        component_module: file_output
        component_config:
        input_transforms:
          - type: copy
            source_expression: template:trace_{{text://input.user_properties:channel}}_{{text://input.user_properties:identity}}.txt
            dest_expression: user_data.component_input:file_path
          - type: copy
            source_expression: previous:message
            dest_expression: user_data.component_input:content
          - type: copy
            source_value: a
            dest_expression: user_data.component_input:mode
        component_input:
          source_expression: user_data.component_input