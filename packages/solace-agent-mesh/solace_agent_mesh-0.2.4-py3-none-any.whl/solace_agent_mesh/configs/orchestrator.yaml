# This is the configuration file for the orchestrator.
#
# It fulfills a few functions:
# 1. It receives agent registration messages to allow it to know all the agents
# 2. It receives stimuli from Slack (or other UIs) over the Solace broker
#    and uses an LLM to break it down into a series of events.
# 3. It sends action requests to agents over the Solace broker.
# 4. It received action responses from agents over the Solace broker and
#    processes them. They may result in a conversation response or a new action request.
# 5. It also manages the conversation history

---
log:
  stdout_log_level: INFO
  log_file_level: INFO
  log_file: solace_ai_connector.log

# trace:
#   trace_file: orchestrator.trace

shared_config:
  - broker_config: &broker_connection
      broker_connection_share: ${SOLACE_BROKER_URL}
      dev_mode: ${SOLACE_DEV_MODE, false}
      broker_url: ${SOLACE_BROKER_URL}
      broker_username: ${SOLACE_BROKER_USERNAME}
      broker_password: ${SOLACE_BROKER_PASSWORD}
      broker_vpn: ${SOLACE_BROKER_VPN}
      temporary_queue: ${USE_TEMPORARY_QUEUES, false}

# Take from Slack and publish to Solace
flows:
  # Receive registration messages from the agents
  - name: orchestrator_register
    components:
      # Input from a Solace broker
      - component_name: solace_sw_broker
        component_module: broker_input
        component_config:
          <<: *broker_connection
          broker_queue_name: ${SOLACE_AGENT_MESH_NAMESPACE}orchestrator_register
          broker_subscriptions:
            - topic: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/register/>
              qos: 1
          payload_encoding: utf-8
          payload_format: json

      # Custom component to process the registration
      - component_name: registration
        component_base_path: .
        component_module: src.orchestrator.components.orchestrator_register_component
        component_config:
          agent_ttl_ms: 60000
        component_input:
          source_expression: input.payload

  # Slack input processing
  - name: orchestrator_stimulus_input
    components:
      # Input from a Solace broker
      - component_name: solace_sw_broker
        component_module: broker_input
        component_config:
          <<: *broker_connection
          broker_queue_name: ${SOLACE_AGENT_MESH_NAMESPACE}orchestrator_stimulus_input
          broker_subscriptions:
            - topic: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/stimulus/orchestrator/>
              qos: 1
            - topic: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/stimulus/gateway/>
              qos: 1
          payload_encoding: utf-8
          payload_format: json

      # Process the stimulus with a custom component
      - component_name: orchestrator_stimulus_processor
        num_instances: {{ORCHESTRATOR_INSTANCE_COUNT}}
        component_base_path: .
        component_module: src.orchestrator.components.orchestrator_stimulus_processor_component
        component_config:
          llm_service_topic: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/llm-service/request/planning
          llm_mode: stream
          stream_to_flow: streaming_output
          set_response_uuid_in_user_properties: true

        broker_request_response:
          enabled: true
          broker_config: *broker_connection
          request_expiry_ms: 120000
          payload_encoding: utf-8
          payload_format: json
          response_topic_prefix: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/llm-service/response
          response_queue_prefix: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/llm-service/response

        component_input:
          source_expression: input.payload

      # The previous component created a list of action requests
      # Separate them into individual action requests
      - component_name: action_requestsplitter
        component_module: iterate

      # Send the action requests to the agents
      - component_name: send_action_request
        component_module: broker_output
        component_config:
          <<: *broker_connection
          payload_encoding: utf-8
          payload_format: json
          copy_user_properties: true
        input_transforms:
          - type: copy
            source_expression: previous:payload
            dest_expression: user_data.output:payload
          - type: copy
            source_expression: previous:topic
            dest_expression: user_data.output:topic
        component_input:
          source_expression: user_data.output

  # Flow to handle action responses from the agents
  - name: orchestrator_action_response
    components:
      # Input from a Solace broker
      - component_name: solace_sw_broker
        component_module: broker_input
        component_config:
          <<: *broker_connection
          broker_queue_name: ${SOLACE_AGENT_MESH_NAMESPACE}orchestrator_action_response
          broker_subscriptions:
            - topic: ${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/actionResponse/>
              qos: 1
          payload_encoding: utf-8
          payload_format: json

      # Process the action response with a custom component
      - component_name: action_response_processor
        component_base_path: .
        component_module: src.orchestrator.components.orchestrator_action_response_component
        input_transforms:
          - type: copy
            source_expression: input.payload
            dest_expression: user_data.component_input
          - type: copy
            source_expression: input.user_properties:session_id
            dest_expression: user_data.component_input:session_id
        component_input:
          source_expression: user_data.component_input

      # Break the action response into individual responses
      - component_name: split_action_response
        component_module: iterate

      # Send to the broker
      - component_name: broker_output
        component_module: broker_output
        component_config:
          <<: *broker_connection
          payload_encoding: utf-8
          payload_format: json
          copy_user_properties: true
        component_input:
          source_expression: previous

  # Asynchronous streaming messages to the UIs - this is called directly by other flows
  - name: streaming_output
    components:
      # Receive streaming messages from the LLM - this will be the raw yaml response
      - component_name: process_streaming_llm_output
        component_base_path: .
        component_module: src.orchestrator.components.orchestrator_streaming_output_component
        component_input:
          source_expression: input.payload

      # Break the streaming response into individual responses
      - component_name: split_action_response
        component_module: iterate

      # Output to a Solace broker
      - component_name: broker_output
        component_module: broker_output
        component_config:
          <<: *broker_connection
          payload_encoding: utf-8
          payload_format: json
          copy_user_properties: true
        input_transforms:
          - type: copy
            source_expression: previous
            dest_expression: user_data.output:payload
          - type: copy
            source_expression: input.user_properties
            dest_expression: user_data.output:user_properties
          - type: copy
            source_expression:
              invoke:
                module: invoke_functions
                function: if_else
                params:
                  positional:
                    - source_expression(input.payload:response_complete)
                    - source_expression(template:${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/responseComplete/orchestrator/{{text://input.user_properties:gateway_id}})
                    - invoke:
                        module: invoke_functions
                        function: if_else
                        params:
                          positional:
                            - source_expression(input.payload:status_update)
                            - source_expression(template:${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/responseStatus/orchestrator/{{text://input.user_properties:gateway_id}})
                            - source_expression(template:${SOLACE_AGENT_MESH_NAMESPACE}solace-agent-mesh/v1/streamingResponse/orchestrator/{{text://input.user_properties:gateway_id}})
            dest_expression: user_data.output:topic
        component_input:
          source_expression: user_data.output

  # Timer flow - just generate a timer event every 10 seconds to check on some timers
  - name: action_manager_timer
    components:
      # Timer component
      - component_name: timer
        component_module: timer_input
        component_config:
          interval_ms: 10000

      # Custom component to process the timer event
      - component_name: action_manager_timeout_handler
        component_base_path: .
        component_module: src.orchestrator.components.orchestrator_action_manager_timeout_component

      # Break the action response into individual responses indicating a timeout
      - component_name: split_action_response
        component_module: iterate

      # Send to the broker
      - component_name: broker_output
        component_module: broker_output
        component_config:
          <<: *broker_connection
          payload_encoding: utf-8
          payload_format: json
          copy_user_properties: true
        component_input:
          source_expression: previous
