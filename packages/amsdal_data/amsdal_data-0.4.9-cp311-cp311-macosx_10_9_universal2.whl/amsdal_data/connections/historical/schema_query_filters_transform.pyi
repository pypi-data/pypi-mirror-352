import amsdal_glue as glue
from _typeshed import Incomplete
from amsdal_data.connections.constants import METADATA_TABLE as METADATA_TABLE, OBJECT_TABLE as OBJECT_TABLE, REFERENCE_TABLE as REFERENCE_TABLE, SCHEMA_NAME_FIELD as SCHEMA_NAME_FIELD, SCHEMA_VERSION_FIELD as SCHEMA_VERSION_FIELD, TRANSACTION_TABLE as TRANSACTION_TABLE
from amsdal_data.connections.historical.command_builder import TABLE_NAME_VERSION_SEPARATOR as TABLE_NAME_VERSION_SEPARATOR
from amsdal_data.connections.historical.schema_version_manager import AsyncHistoricalSchemaVersionManager as AsyncHistoricalSchemaVersionManager, HistoricalSchemaVersionManager as HistoricalSchemaVersionManager

class BaseQueryFiltersTransform:
    schema_query_filters: Incomplete
    def __init__(self, schema_query_filters: glue.Conditions | None) -> None: ...
    @staticmethod
    def process_data(data: list[glue.Schema]) -> list[glue.Schema]: ...
    @staticmethod
    def _transform_single_condition(condition: glue.Condition) -> glue.Conditions | glue.Condition: ...

class SchemaQueryFiltersTransform(BaseQueryFiltersTransform):
    schema_version_manager: Incomplete
    def __init__(self, schema_query_filters: glue.Conditions | None) -> None: ...
    def transform(self) -> glue.Conditions | None: ...
    def _transform(self, item: glue.Conditions) -> glue.Conditions: ...
    def _transform_multiple_conditions(self, items: list[glue.Condition]) -> list[glue.Condition]: ...

class AsyncSchemaQueryFiltersTransform(BaseQueryFiltersTransform):
    schema_version_manager: Incomplete
    def __init__(self, schema_query_filters: glue.Conditions | None) -> None: ...
    async def transform(self) -> glue.Conditions | None: ...
    async def _transform(self, item: glue.Conditions) -> glue.Conditions: ...
    async def _transform_multiple_conditions(self, items: list[glue.Condition]) -> list[glue.Condition]: ...
