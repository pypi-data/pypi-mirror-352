[tool.poetry]
name = "etna"
version = "3.0.0"
repository = "https://github.com/etna-team/etna"
readme = "README.md"
description = "ETNA is the first python open source framework of T-Bank AI Center. It is designed to make working with time series simple, productive, and fun."
license = "Apache-2.0"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License"
]

packages = [
    { include = "etna", from = "." },
]

authors = [
    "Andrey Alekseev <ilekseev@gmail.com>",
    "Julia Shenshina <y.a.shenshina@tbank.ru>",
    "Martin Gabdushev <m.gabdushev@tbank.ru>",
    "Albina Munirova <a.i.munirova@tbank.ru>",
    "Artem Levashov <levashov.as@phystech.edu>",
    "Alexey Podkidyshev <podkidyshev.as@phystech.edu>",
    "Nikita Barinov <n.barinov@tbank.ru>",
    "Dmitry Bunin <d.a.bunin@tbank.ru>",
    "Alexander Chikov <a.p.chikov@tbank.ru>",
    "Artem Makhin <a.makhin@tbank.ru>"
]

[tool.poetry.dependencies]
python = ">=3.10.0, <3.13.0"
scikit-learn = ">=1.4, <2"
pandas = ">=2.0.0,<3.0.0"
catboost = "^1"
ruptures = "^1.1.5"
numba = ">=0.53.1"
seaborn = ">=0.11.1,<1"
statsmodels = "^0.14"
pmdarima = ">=2.0.4"
dill = "^0.3.4"
toml = "^0.10.2"
loguru = ">=0.7"
hydra-slayer = ">=0.5"
typer = ">=0.12"
omegaconf = "^2.1.1"
holidays = ">=0.40"
boto3 = "^1.5"
botocore = "*"
scipy = ">=1.12"
Bottleneck = "^1.3.4"
numpy = "<2" # pmdarima not support numpy 2
joblib = "*"
plotly = "<6" # clearml method report_plotly works uncorrectly with plotly 6.0.1
hydra_slayer = "*"
matplotlib = "*"
typing_extensions = "^4.1.0"
tbats = "^1.1.0"
Deprecated = "1.2.13"
types-Deprecated = "1.2.9"

prophet = {version = "^1.0", optional = true}

torch = {version = "^2", optional = true}
lightning = {version = "*", optional = true}
einops = {version = "*", optional = true}

wandb = {version = ">=0.16", optional = true}
clearml = {version = "^1.15", optional = true}
tensorboard = {version = "^2.12.0", optional = true}

optuna = {version = "^4", optional = true}

statsforecast = {version = "^2", optional = true}

transformers = {version = ">=4.42,<5", optional = true}
accelerate = {version = "^1", optional = true}
huggingface-hub = {version = ">=0.23", optional = true}

jax = {version = ">0.4.28,<1", optional = true}
jaxlib = {version = ">0.4.25,<1", optional = true}
utilsforecast = {version = ">=0.1.10,<1", optional = true}

sphinx-mathjax-offline = {version = "^0.0.2", optional = true}
nbsphinx = {version = "^0.9.0", optional = true}
Sphinx = {version = "^6.2", optional = true}
pydata-sphinx-theme = {version = "^0.13.3", optional = true}
myst-parser = {version = "^1.0", optional = true}
GitPython = {version = "^3.1.20", optional = true}
sphinx-design = {version = "^0.5.0", optional = true}

pytest = {version = "^7.3", optional = true}
pytest-cov = {version = "^4.0", optional = true}
pytest-shard = {version = "^0.1.2", optional = true}

black = {extras = ["jupyter"], version = "^24.0", optional = true}
isort = {version = "^5.8.0", optional = true}
flake8 = {version = "^3.9.2", optional = true}
pep8-naming = {version = "^0.12.1", optional = true}
flake8-bugbear = {version = "^22.4.25", optional = true}
flake8-comprehensions = {version = "^3.9.0", optional = true}
flake8-docstrings = {version = "^1.6.0", optional = true}
mypy = {version = ">=0.950,<2", optional = true}
types-PyYAML = {version = "^6.0.0", optional = true}
codespell = {version = "^2.0.0", optional = true}
nbqa = {extras = ["isort"], version = "^1.7.0", optional = true}

click = {version = ">=8.0.1, <8.1", optional = true}
semver = {version = "^2.13.0", optional = true}
ipywidgets = {version = "^7.6.5", optional = true}

jupyter = {version = "*", optional = true}
nbconvert = {version = "*", optional = true}
pyts = {version = "^0.12.0", optional = true}
tsfresh = {version = "~0.21.0", optional = true}
types-setuptools = {version = "^65.7.0", optional = true}

[tool.poetry.extras]
# optional deps
prophet = ["prophet"]
torch = ["torch", "lightning", "einops"]
wandb = ["wandb"]
clearml = ["clearml", "tensorboard"]
auto = ["optuna"]
classification = ["pyts", "tsfresh"]
statsforecast = ["statsforecast"]
chronos = ["torch", "transformers", "accelerate", "huggingface-hub"]
timesfm = ["torch", "jax", "jaxlib", "huggingface-hub", "utilsforecast"]

# dev deps
release = ["click", "semver"]
docs = ["Sphinx", "nbsphinx", "sphinx-mathjax-offline", "myst-parser", "GitPython", "pydata-sphinx-theme", "sphinx-design", "jupyter"]
tests = ["pytest-cov", "pytest", "pytest-shard"]
jupyter = ["jupyter", "nbconvert", "black", "ipywidgets"]
style = ["black", "isort", "flake8", "pep8-naming", "flake8-docstrings", "mypy", "types-PyYAML", "codespell", "flake8-bugbear", "flake8-comprehensions", "types-setuptools", "nbqa"]

all = [
    "prophet",
    "torch", "lightning", "einops",
    "wandb", "clearml", "tensorboard",
    "optuna",
    "pyts", "tsfresh",
    "statsforecast",
    "transformers", "accelerate", "huggingface-hub",
    "jax", "jaxlib", "utilsforecast"
]

all-dev = [
    "prophet",
    "torch", "lightning", "einops",
    "wandb", "clearml", "tensorboard",
    "optuna",
    "click", "semver",
    "Sphinx", "nbsphinx", "sphinx-mathjax-offline", "myst-parser", "GitPython", "pydata-sphinx-theme", "sphinx-design",
    "pytest-cov", "pytest", "pytest-shard",
    "black", "isort", "flake8", "pep8-naming", "flake8-docstrings", "mypy", "types-PyYAML", "codespell", "flake8-bugbear", "flake8-comprehensions", "types-setuptools", "nbqa",
    "click", "semver",
    "jupyter", "nbconvert", "ipywidgets",
    "pyts", "tsfresh",
    "statsforecast",
    "transformers", "accelerate", "huggingface-hub",
    "jax", "jaxlib", "utilsforecast"
]

[tool.poetry.scripts]
etna = "etna.commands.__main__:app"

[tool.black]
line-length = 120
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | etna/libs

  # The following are specific to Black, you probably don't want those.
  | blib2to3
  | tests/data
)/
'''

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120

[tool.pytest.ini_options]
minversion = "6.0"
doctest_optionflags = "NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL NUMBER"
filterwarnings = [
    "error",
    "ignore: pkg_resources is deprecated as an API",
    "ignore: Deprecated call to `pkg_resources.declare_namespace",
    # etna warnings
    "ignore: TSDataset freq can't be inferred",
    "ignore: You probably set wrong freq. Discovered freq in you data",
    "ignore: Some regressors don't have enough values",
    "ignore: Segments contains NaNs in the last timestamps",
    "ignore: Given top_k=.* is bigger than n_features=.*. Transform will not filter",
    "ignore: Given top_k=.* is less than n_segments=.*. Algo will filter data without Gale-Shapley run.",
    "ignore: This model doesn't work with exogenous features",
    "ignore: Some of external objects in input parameters could be not",
    "ignore: If you use MPS, it can sometimes cause unexpected results",
    "ignore: Frequency is None. Mapping it to 0, that can be not optimal.",
    # external warnings
    "ignore: Attribute 'loss' is an instance of `nn.Module` and is already",
    "ignore: Maximum Likelihood optimization failed to converge. Check mle_retvals",
    "ignore: Optimization failed to converge. Check mle_retvals",
    "ignore: No frequency information was provided, so inferred frequency .* will be used",
    "ignore: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.",
    "ignore: You defined a `validation_step` but have no `val_dataloader`. Skipping val",  # lightning
    "ignore: Checkpoint directory .* exists and is not empty",
    "ignore: invalid escape sequence", # mostly due to LaTeX in docstrings
    "ignore:(.|\n)*A value is trying to be set on a copy of a slice from a DataFrame", # SettingWithCopyWarning
    "ignore: New behaviour in v1.1.5.* a small bias is added", # ruptures: normal cost
    "ignore: Dynamic prediction specified to begin during out-of-sample forecasting period, and so has no effect.",
    "ignore::DeprecationWarning:holidays",
    "ignore: numpy.ufunc size changed, may indicate binary incompatibility",
    "ignore: Jupyter is migrating its paths to use standard platformdirs",
    "ignore: Non-invertible starting MA parameters found",
    "ignore: Optimization did not converge :tbats.error.ModelWarning.ModelWarning",
    "ignore: Implicitly cleaning up <TemporaryDirectory",
    "ignore: dropout option adds dropout after all but last recurrent layer",
    "ignore::matplotlib._api.deprecation.MatplotlibDeprecationWarning:pydev", # Pycharm debugging
    "ignore: enable_nested_tensor is True, but self.use_nested_tensor is False because encoder_layer.self_attn.batch_first was not True", # torch patchts
    "ignore: GPU available but not used", # lightning for mac
    "ignore: 'force_all_finite' was renamed to 'ensure_all_finite' in 1.6 and will be removed in 1.8.", # sklearn and pmdarima
    "ignore: Conversion of an array with ndim > 0 to a scalar is deprecated", # numpy in Prophet
    "ignore: The provided callable <.*> is currently using DataFrameGroupBy..*", # pandas deprecated
    "ignore: The provided callable <.*> is currently using DataFrame.*",
    "ignore: The provided callable <.*> is currently using SeriesGroupBy..*",
    "ignore: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated",
    "ignore: .* bool will be deprecated in a future version", # https://github.com/mwaskom/seaborn/issues/3804
    "ignore: invalid value encountered in divide",
    "ignore: Could not infer format, so each element will be parsed individually",
    "ignore: datetime.datetime.utcfromtimestamp.* is deprecated and scheduled for removal in a future version", # python 3.12
    "ignore: os.fork.* was called", # os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.
    "ignore: The 'train_dataloader' does not have many workers which may be a bottleneck", # lightning
    "ignore: Unverified HTTPS request is being made",
]
markers = [
    "smoke"
]

[tool.coverage.report]
exclude_lines = [
    '^ +assert_never\(.*?\)$',
]

[tool.mypy]
ignore_missing_imports = true
strict_optional = true
files = "etna/"
exclude = "etna/libs"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
