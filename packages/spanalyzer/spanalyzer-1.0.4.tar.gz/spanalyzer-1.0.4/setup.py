# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['spanalyzer',
 'spanalyzer.constants',
 'spanalyzer.java',
 'spanalyzer.java.constants',
 'spanalyzer.python',
 'spanalyzer.python.constants',
 'spanalyzer.utils']

package_data = \
{'': ['*']}

entry_points = \
{'console_scripts': ['spanalyzer = spanalyzer.cli:main']}

setup_kwargs = {
    'name': 'spanalyzer',
    'version': '1.0.4',
    'description': 'A tool to analyze telemetry implementation in codebases',
    'long_description': '<h1 align=\'center\'><strong>Spanalyzer</strong></h1>\n\n<p align=\'center\'>\n    Get a comprehensive report on the telemetry implementation within your Python codebase.\n</p>\n\n<div align="center">\n\n  ![Coverage](https://img.shields.io/badge/coverage-91%25-brightgreen)\n  ![Tests](https://img.shields.io/badge/tests-62%20passed%2C%200%20failed-brightgreen)\n  ![Python Version](https://img.shields.io/badge/python-3.10.16-blue?logo=python&logoColor=white)\n\n</div>\n\n---\n\n### **1. Introduction**\n\n**Spanalyzer** is a Python package that helps you analyze and audit the telemetry instrumentation (e.g., spans, metrics, events) within your codebase.\n\nOnce analyzed, the package generates a report summarizing or detailing telemetry coverage across your codebase.\n\n---\n\n### **2. Installation**\n\nInstall the package like any other Python library:\n\n```bash\npip install spanalyzer\n```\n\n---\n\n### **3. Usage**\n\nThe course of action of this package encompasses two procedures:\n1. provide the path to the codebase you want to analyze;\n2. pick the type of report you want to generate (**_basic_** or **_detailed_**);\n3. provide the language of the codebase (**_python_** and **_java_** are currently supported).\n\n#### **3.1. Basic Report**\n\nThe basic report will provide the user a very generic but clear view over the telemetry implementation within the codebase.\n\nThe output printed on the terminal will be as follows:\n\n```bash\nScript                    Spans    Traces    Metrics    Events    Attributes\n----------------------------------------------------------------------------\nscript_1.py               ✓        ✓         ✓          ✓         ✓         \nscript_2.py               ✓        ✗         ✗          ✓         ✓         \nscript_3.py               ✓        ✓         ✓          ✗         ✓         \n----------------------------------------------------------------------------\n```\n\nThis kind of report can be useful during the development stage to get a glimpse of the type of telemetry resources we\'re allocating to the code being produced.\n\nAnd you can obtain this report on the terminal by running the following command:\n```bash\nspanalyzer basic --path /path/to/codebase\n```\n\n#### **3.2. Detailed Report**\n\nOn the other hand, the detailed report, will not only capture what type of telemetry resources are being allocated to the codebase as you can also get further details about those resources.\n\nIn this report, we will have the list of scripts that were submitted to the analysis and per script details like the name of the span under usage, which metrics were captured, which events were recorded, etc. will all be part of this type of report.\n\nHere\'s an example of the content of the detailed report:\n```json\n    "dsi_schema_assurance/validator.py": {\n        "tracers": [\n            {\n                "func": "__name__",\n                "line_number": 35,\n                "args": null,\n                "keywords": null\n            }\n        ],\n        "functions": {\n            "_is_inference_type_valid": {\n                "docstring": "Check if the inference type is valid."\n            },\n            "_validate_key_inputs": {\n                "docstring": "Validate we have the graphs we need."\n            },\n            "_get_datatypes": {\n                "docstring": "Handler that will return the list of datatypes depending on the inference type\\n        chosen.\\n\\n        Returns:\\n            Dict[str, str]: A dictionary containing the datatypes for the injection.",\n                "spans": [\n                    {\n                        "func": "_get_datatypes",\n                        "line_number": 216,\n                        "args": null,\n                        "keywords": null\n                    },\n                    {\n                        "func": "shacl",\n                        "line_number": 232,\n                        "args": null,\n                        "keywords": null\n                    },\n                    {\n                        "func": "both",\n                        "line_number": 237,\n                        "args": null,\n                        "keywords": null\n                    },\n                    {\n                        "func": "datatype_mismatch",\n                        "line_number": 268,\n                        "args": null,\n                        "keywords": null\n                    }\n                ],\n                "attributes": [\n                    {\n                        "func": "set_attribute",\n                        "line_number": 217,\n                        "args": {\n                            "func": "span.set_attribute",\n                            "args": [\n                                "inference_type",\n                                "self.inference_type"\n                            ]\n                        },\n                        "keywords": null\n                    },\n                    {\n                        "func": "set_attribute",\n                        "line_number": 233,\n                        "args": {\n                            "func": "sub_span.set_attribute",\n                            "args": [\n                                "datatype_count",\n                                "shacl_dtypes.shape"\n                            ]\n                        },\n                        "keywords": null\n                    },\n                    {\n                        "func": "set_attribute",\n                        "line_number": 283,\n                        "args": {\n                            "func": "sub_span.set_attribute",\n                            "args": [\n                                "datatype_count",\n                                {\n                                    "func": "len",\n                                    "args": [\n                                        "combo_dtypes"\n                                    ]\n                                }\n                            ]\n                        },\n                        "keywords": null\n                    }\n                ],\n                "events": [\n                    {\n                        "func": "add_event",\n                        "line_number": 269,\n                        "args": {\n                            "func": "sub_span.add_event",\n                            "args": [\n                                "Datatype Mismatch",\n                                {\n                                    "missing_records": "missing_records",\n                                    "diff_records": "diff_records"\n                                }\n                            ]\n                        },\n                        "keywords": null\n                    }\n                ]\n            },\n            "_store_injected_data": {\n                "docstring": "Stores the data graph with the datatypes injected.\\n\\n        Returns:\\n            [str, str]: A string containing the directory and the path to the injected data."\n            },\n            "failure_report": {\n                "docstring": "Build an error report from the data obtained by the validation from pyshacl library.\\n\\n        _Error Report Shape_:\\n        {\\n            \'error_rate\': 123,\\n            \'errors\': [\\n                \'error_1\',\\n                \'error_2\',\\n                \'error_3\',\\n            ],\\n            \'raw_data\': \'data_graph_as_xml\'\\n        }\\n\\n        Args:\\n            raw_data (str): raw version of the data submitted for validation process\\n            results_graph (Graph): The graph containing the validation results\\n\\n        Returns:\\n            Dict[str, str]: A dictionary containing the error report",\n                "spans": [\n                    {\n                        "func": "failure_report",\n                        "line_number": 351,\n                        "args": null,\n                        "keywords": null\n                    }\n                ],\n                "attributes": [\n                    {\n                        "func": "set_attribute",\n                        "line_number": 352,\n                        "args": {\n                            "func": "span.set_attribute",\n                            "args": [\n                                "error_rate",\n                                "number_of_violations"\n                            ]\n                        },\n                        "keywords": null\n                    },\n                    {\n                        "func": "set_attribute",\n                        "line_number": 353,\n                        "args": {\n                            "func": "span.set_attribute",\n                            "args": [\n                                "errors",\n                                "errors_lst"\n                            ]\n                        },\n                        "keywords": null\n                    }\n                ]\n            },\n        }\n    }\n```\n\nAnd you can obtain this report by running the following command:\n\n```bash\nspanalyzer detailed --path /path/to/codebase --output /path/to/output/file --language java\n```\n\nThe output file will be a file containing the same information pointed out above.\n\n\n---\n\n### **A. Acknowledgements**\n\nThere\'s some considerations that are important to be taken into account:\n- Due to the expidated nature of the development this package, and more specifically the java parser, leverages **`javalang`, which is only compatible with java versions up until version 8.**\n\n---\n\n### **B. Changelog**\n\n- [ ] Add support for other telemetry resources;\n- [x] Add support for other programming languages;\n- [ ] Add telemetry to the package itself.',
    'author': 'Joao Nisa',
    'author_email': 'joao.je.nisa@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'packages': packages,
    'package_data': package_data,
    'entry_points': entry_points,
    'python_requires': '>=3.10,<4.0',
}


setup(**setup_kwargs)
