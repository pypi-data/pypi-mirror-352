# Generated by Django 5.0.3 on 2025-04-10 09:42

import cybsuite.cyberdb.django_orm.schema_to_models
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField(db_index=True, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "category",
                "verbose_name_plural": "category",
                "db_table": "category",
            },
        ),
        migrations.CreateModel(
            name="Compliance",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField(unique=True)),
                ("title", models.TextField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("provider", models.TextField(blank=True, null=True)),
                ("version", models.TextField(blank=True, null=True)),
                ("date", models.DateField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "compliance",
                "verbose_name_plural": "compliance",
                "db_table": "compliance",
            },
        ),
        migrations.CreateModel(
            name="Control",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.TextField(
                        choices=[
                            ("ok", "ok"),
                            ("ko", "ko"),
                            ("not_applicable", "not_applicable"),
                            ("not_started", "not_started"),
                            ("in_progress", "in_progress"),
                            ("manual", "manual"),
                        ],
                        db_index=True,
                        default="not_started",
                    ),
                ),
                ("details", models.JSONField(db_index=True)),
                (
                    "severity",
                    models.TextField(
                        choices=[
                            ("undefined", "undefined"),
                            ("info", "info"),
                            ("low", "low"),
                            ("medium", "medium"),
                            ("high", "high"),
                            ("critical", "critical"),
                        ],
                        default="undefined",
                    ),
                ),
                (
                    "confidence",
                    models.TextField(
                        blank=True,
                        choices=[
                            ("true_positive", "true_positive"),
                            ("certain", "certain"),
                            ("firm", "firm"),
                            ("tentative", "tentative"),
                            ("manual", "manual"),
                            ("false_positive", "false_positive"),
                        ],
                        null=True,
                    ),
                ),
                ("justification", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "control",
                "verbose_name_plural": "control",
                "db_table": "control",
            },
        ),
        migrations.CreateModel(
            name="Control_Definition",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField(db_index=True, unique=True)),
                ("control", models.TextField(blank=True, null=True)),
                ("control_details", models.TextField(blank=True, null=True)),
                (
                    "severity",
                    models.TextField(
                        choices=[
                            ("undefined", "undefined"),
                            ("info", "info"),
                            ("low", "low"),
                            ("medium", "medium"),
                            ("high", "high"),
                            ("critical", "critical"),
                        ],
                        db_index=True,
                        default="undefined",
                    ),
                ),
                (
                    "impact",
                    models.TextField(
                        blank=True,
                        choices=[
                            ("info", "info"),
                            ("low", "low"),
                            ("medium", "medium"),
                            ("high", "high"),
                            ("critical", "critical"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "probability",
                    models.TextField(
                        blank=True,
                        choices=[
                            ("info", "info"),
                            ("low", "low"),
                            ("medium", "medium"),
                            ("high", "high"),
                            ("critical", "critical"),
                        ],
                        null=True,
                    ),
                ),
                (
                    "scope",
                    models.TextField(
                        blank=True,
                        choices=[
                            ("test", "test"),
                            ("code", "code"),
                            ("org", "org"),
                            ("conf", "conf"),
                            ("arch", "arch"),
                        ],
                        db_index=True,
                        null=True,
                    ),
                ),
                ("group", models.TextField(blank=True, null=True)),
                ("atomic", models.BooleanField(blank=True, null=True)),
                ("references", models.TextField(blank=True, null=True)),
                (
                    "recommendation_difficulty",
                    models.TextField(
                        blank=True,
                        choices=[
                            ("easy", "easy"),
                            ("standard", "standard"),
                            ("difficult", "difficult"),
                        ],
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "control_definition",
                "verbose_name_plural": "control_definition",
                "db_table": "control_definition",
            },
        ),
        migrations.CreateModel(
            name="Control_Definition_Translation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("lang", models.TextField(db_index=True)),
                ("title", models.TextField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("risk", models.TextField(blank=True, null=True)),
                ("recommendation", models.TextField(blank=True, null=True)),
                ("proof_comments", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "control_definition_translation",
                "verbose_name_plural": "control_definition_translation",
                "db_table": "control_definition_translation",
            },
        ),
        migrations.CreateModel(
            name="Dns",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ip", models.TextField(db_index=True)),
                ("domain_name", models.TextField(db_index=True)),
            ],
            options={
                "verbose_name": "dn",
                "verbose_name_plural": "dns",
                "db_table": "dns",
            },
        ),
        migrations.CreateModel(
            name="Hash",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("hash", models.TextField(db_index=True)),
                ("type", models.TextField(db_index=True)),
                ("user", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "hash",
                "verbose_name_plural": "hash",
                "db_table": "hash",
            },
        ),
        migrations.CreateModel(
            name="Host",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ip",
                    models.TextField(
                        db_index=True,
                        validators=[
                            cybsuite.cyberdb.django_orm.schema_to_models.prett_id_validator
                        ],
                    ),
                ),
                ("hostname", models.TextField(blank=True, null=True)),
                ("tags", models.JSONField(blank=True, null=True)),
                (
                    "os_family",
                    models.TextField(
                        blank=True,
                        choices=[
                            ("windows", "windows"),
                            ("linux", "linux"),
                            ("mac", "mac"),
                            ("android", "android"),
                            ("other", "other"),
                        ],
                        db_index=True,
                        null=True,
                    ),
                ),
                (
                    "os_distribution",
                    models.TextField(blank=True, db_index=True, null=True),
                ),
                ("os_version", models.TextField(blank=True, null=True)),
                ("os_nmap_name", models.JSONField(blank=True, null=True)),
                ("os_nmap_generation", models.JSONField(blank=True, null=True)),
                ("os_nmap_vendor", models.JSONField(blank=True, null=True)),
                ("os_nmap_type", models.JSONField(blank=True, null=True)),
                ("os_nmap_family", models.JSONField(blank=True, null=True)),
                ("os_nmap_fingerprint", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "host",
                "verbose_name_plural": "host",
                "db_table": "host",
            },
        ),
        migrations.CreateModel(
            name="Installed_Software",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("host", models.TextField(db_index=True)),
                ("software", models.TextField(db_index=True)),
                ("version", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "installed_software",
                "verbose_name_plural": "installed_software",
                "db_table": "installed_software",
            },
        ),
        migrations.CreateModel(
            name="Password",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.TextField(db_index=True)),
            ],
            options={
                "verbose_name": "password",
                "verbose_name_plural": "password",
                "db_table": "password",
            },
        ),
        migrations.CreateModel(
            name="Plugin",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField(db_index=True)),
            ],
            options={
                "verbose_name": "plugin",
                "verbose_name_plural": "plugin",
                "db_table": "plugin",
            },
        ),
        migrations.CreateModel(
            name="Plugin_Manager",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField(db_index=True)),
            ],
            options={
                "verbose_name": "plugin_manager",
                "verbose_name_plural": "plugin_manager",
                "db_table": "plugin_manager",
            },
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "port",
                    models.IntegerField(
                        db_index=True,
                        validators=[
                            cybsuite.cyberdb.django_orm.schema_to_models.prett_id_validator
                        ],
                    ),
                ),
                (
                    "protocol",
                    models.TextField(
                        choices=[("tcp", "tcp"), ("udp", "udp")],
                        db_index=True,
                        default="tcp",
                        validators=[
                            cybsuite.cyberdb.django_orm.schema_to_models.prett_id_validator
                        ],
                    ),
                ),
                ("type", models.TextField(blank=True, db_index=True, null=True)),
                ("name", models.TextField(blank=True, db_index=True, null=True)),
                ("version", models.TextField(blank=True, null=True)),
                ("banner", models.TextField(blank=True, null=True)),
                ("tags", models.JSONField(blank=True, null=True)),
                ("nmap_name", models.TextField(blank=True, null=True)),
                ("nmap_product", models.TextField(blank=True, null=True)),
                ("nmap_version", models.TextField(blank=True, null=True)),
                ("nmap_devicetype", models.TextField(blank=True, null=True)),
                ("nmap_confidence", models.IntegerField(blank=True, null=True)),
                ("nmap_method", models.TextField(blank=True, null=True)),
                ("nmap_extrainfo", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "service",
                "verbose_name_plural": "service",
                "db_table": "service",
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.TextField(
                        unique=True,
                        validators=[
                            cybsuite.cyberdb.django_orm.schema_to_models.prett_id_validator
                        ],
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "tag",
                "verbose_name_plural": "tag",
                "db_table": "tag",
            },
        ),
        migrations.CreateModel(
            name="Windows_Process",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("host", models.TextField(db_index=True)),
                ("user", models.TextField(db_index=True)),
                ("pid", models.TextField(blank=True, null=True)),
                ("cmd", models.TextField(db_index=True)),
                ("args", models.TextField(db_index=True)),
            ],
            options={
                "verbose_name": "windows_proces",
                "verbose_name_plural": "windows_process",
                "db_table": "windows_process",
            },
        ),
        migrations.CreateModel(
            name="Windows_Registry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("host", models.TextField(blank=True, db_index=True, null=True)),
                ("path", models.TextField(db_index=True)),
                ("key", models.TextField(db_index=True)),
                ("value", models.JSONField()),
            ],
            options={
                "verbose_name": "windows_registry",
                "verbose_name_plural": "windows_registry",
                "db_table": "windows_registry",
            },
        ),
        migrations.CreateModel(
            name="Windows_User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user", models.TextField(db_index=True)),
                ("host", models.TextField(blank=True, db_index=True, null=True)),
                ("rid", models.TextField(blank=True, null=True)),
                ("sid", models.TextField(blank=True, null=True)),
                ("AcctDisabled", models.BooleanField(blank=True, null=True)),
                ("PswdCanBeChanged", models.BooleanField(blank=True, null=True)),
                ("PswdLastSetTime", models.TextField(blank=True, null=True)),
                ("PswdRequired", models.BooleanField(blank=True, null=True)),
                ("PswdExpires", models.BooleanField(blank=True, null=True)),
                ("PswdExpiresTime", models.TextField(default="str")),
                ("lm", models.TextField(blank=True, null=True)),
                ("ntlm", models.TextField(blank=True, null=True)),
                ("comment", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "windows_user",
                "verbose_name_plural": "windows_user",
                "db_table": "windows_user",
            },
        ),
        migrations.AddConstraint(
            model_name="category",
            constraint=models.UniqueConstraint(
                fields=("name",), name="unique_category.name"
            ),
        ),
        migrations.AddConstraint(
            model_name="compliance",
            constraint=models.UniqueConstraint(
                fields=("name",), name="unique_compliance.name"
            ),
        ),
        migrations.AddField(
            model_name="control_definition",
            name="compliances",
            field=models.ManyToManyField(
                blank=True,
                related_name="control_definitions",
                to="cybsmodels.compliance",
            ),
        ),
        migrations.AddField(
            model_name="control",
            name="control_definition",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="controls",
                to="cybsmodels.control_definition",
            ),
        ),
        migrations.AddField(
            model_name="control_definition_translation",
            name="control_definition",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="control_definition_translations",
                to="cybsmodels.control_definition",
            ),
        ),
        migrations.AddConstraint(
            model_name="dns",
            constraint=models.UniqueConstraint(
                fields=("ip", "domain_name"), name="unique_dns.ip_domain_name"
            ),
        ),
        migrations.AddConstraint(
            model_name="hash",
            constraint=models.UniqueConstraint(
                fields=("hash", "type"), name="unique_hash.hash_type"
            ),
        ),
        migrations.AddConstraint(
            model_name="host",
            constraint=models.UniqueConstraint(fields=("ip",), name="unique_host.ip"),
        ),
        migrations.AddConstraint(
            model_name="installed_software",
            constraint=models.UniqueConstraint(
                fields=("host", "software"),
                name="unique_installed_software.host_software",
            ),
        ),
        migrations.AddConstraint(
            model_name="password",
            constraint=models.UniqueConstraint(
                fields=("password",), name="unique_password.password"
            ),
        ),
        migrations.AddField(
            model_name="plugin",
            name="control_definitions",
            field=models.ManyToManyField(
                blank=True, related_name="plugins", to="cybsmodels.control_definition"
            ),
        ),
        migrations.AddConstraint(
            model_name="plugin_manager",
            constraint=models.UniqueConstraint(
                fields=("name",), name="unique_plugin_manager.name"
            ),
        ),
        migrations.AddField(
            model_name="plugin",
            name="plugin_manager",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="plugins",
                to="cybsmodels.plugin_manager",
            ),
        ),
        migrations.AddField(
            model_name="service",
            name="host",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="services",
                to="cybsmodels.host",
                validators=[
                    cybsuite.cyberdb.django_orm.schema_to_models.prett_id_validator
                ],
            ),
        ),
        migrations.AddConstraint(
            model_name="tag",
            constraint=models.UniqueConstraint(
                fields=("name",), name="unique_tag.name"
            ),
        ),
        migrations.AddField(
            model_name="control_definition",
            name="tags",
            field=models.ManyToManyField(
                blank=True, related_name="control_definitions", to="cybsmodels.tag"
            ),
        ),
        migrations.AddConstraint(
            model_name="windows_process",
            constraint=models.UniqueConstraint(
                fields=("host", "user", "cmd", "args"),
                name="unique_windows_process.host_user_cmd_args",
            ),
        ),
        migrations.AddConstraint(
            model_name="windows_registry",
            constraint=models.UniqueConstraint(
                fields=("host", "path", "key"),
                name="unique_windows_registry.host_path_key",
            ),
        ),
        migrations.AddConstraint(
            model_name="windows_user",
            constraint=models.UniqueConstraint(
                fields=("user", "host"), name="unique_windows_user.user_host"
            ),
        ),
        migrations.AddConstraint(
            model_name="control",
            constraint=models.UniqueConstraint(
                fields=("control_definition", "details"),
                name="unique_control.control_definition_details",
            ),
        ),
        migrations.AddConstraint(
            model_name="control_definition_translation",
            constraint=models.UniqueConstraint(
                fields=("control_definition", "lang"),
                name="unique_control_definition_translation.control_definition_lang",
            ),
        ),
        migrations.AddConstraint(
            model_name="plugin",
            constraint=models.UniqueConstraint(
                fields=("plugin_manager", "name"),
                name="unique_plugin.plugin_manager_name",
            ),
        ),
        migrations.AddConstraint(
            model_name="service",
            constraint=models.UniqueConstraint(
                fields=("host", "port", "protocol"),
                name="unique_service.host_port_protocol",
            ),
        ),
        migrations.AddConstraint(
            model_name="control_definition",
            constraint=models.UniqueConstraint(
                fields=("name",), name="unique_control_definition.name"
            ),
        ),
    ]
