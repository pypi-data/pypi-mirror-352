team:
  class: agno.team.Team
  params:
    members: ${members}
    # Mode of the team: route, coordinate, collaborate
    mode: ${mode|coordinate}

    # Model for this Team
    model: ${model}

    # --- Team settings ---
    name: ${name}
    # Team UUID (autogenerated if not set)
    team_id: ${team_id}
    # If this team is part of a team itself, this is the role of the team
    # role: ${role}

    # --- User settings ---
    user_id: ${user_id}

    # --- Session settings ---
    # Team Session UUID (autogenerated if not set)
    session_id: ${session_id}
    # In the case where the team is a member of a team itself
    # team_session_id: ${team_session_id}
    session_name: ${session_name}
    # Session state (stored in the database to persist across runs)
    session_state: ${session_state}
    # If True, add the session state variables in the user and system messages
    add_state_in_messages: ${add_state_in_messages|true}

    # --- System message settings ---
    description: ${description}
    instructions: ${instructions}
    expected_output: ${expected_output}
    additional_context: ${additional_context}
    markdown: ${markdown|false}
    add_datetime_to_instructions: ${add_datetime_to_instructions|false}
    # If True, add the tools available to team members to the system message
    add_member_tools_to_system_message: ${add_member_tools_to_system_message|true}

    # --- Success criteria ---
    success_criteria: ${success_criteria}

    # --- User provided context ---
    context: ${context}
    add_context: ${add_context|false}

    # --- Agent Knowledge ---
    knowledge: ${knowledge}
    # Retrieval function to get references
    # This function, if provided, is used instead of the default search_knowledge function
    # Signature:
    # def retriever(team: Team, query: str, num_documents: Optional[int], **kwargs) -> Optional[list[dict]]:
    #     ...
    retriever: ${retriever}
    references_format: ${references_format|json}

    # --- Tools ---
    # If True, enable the team agent to update the team context and automatically send the team context to the members
    enable_agentic_context: ${enable_agentic_context|false}
    # If True, send all previous member interactions to members
    share_member_interactions: ${share_member_interactions|false}
    # If True, add a tool to get information about the team members
    get_member_information_tool: ${get_member_information_tool|false}
    # Add a tool to search the knowledge base (aka Agentic RAG)
    # Only added if knowledge is provided.
    search_knowledge: ${search_knowledge|true}

    # If True, read the team history
    read_team_history: ${read_team_history|false}

    # --- Team Tools ---
    # A list of tools provided to the Model.
    # Tools are functions the model may generate JSON inputs for.
    tools: ${tools}
    # Show tool calls in Team response. This sets the default for the team.
    show_tool_calls: ${show_tool_calls|true}
    # Controls which (if any) tool is called by the team model.
    # "none" means the model will not call a tool and instead generates a message.
    # "auto" means the model can pick between generating a message or calling a tool.
    # Specifying a particular function via {"type: "function", "function": {"name": "my_function"}}
    #   forces the model to call that tool.
    # "none" is the default when no tools are present. "auto" is the default if tools are present.
    tool_choice: ${tool_choice}
    # Maximum number of tool calls allowed.
    tool_call_limit: ${tool_call_limit}
    # A list of hooks to be called before and after the tool call
    tool_hooks: ${tool_hooks}

    # --- Structured output ---
    # Response model for the team response
    response_model: ${response_model}
    # If `response_model` is set, sets the response mode of the model, i.e. if the model should explicitly respond with a JSON object instead of a Pydantic model
    use_json_mode: ${use_json_mode|false}
    # If True, parse the response
    parse_response: ${parse_response|true}

    # --- History ---
    # Memory for the team
    memory: ${memory}
    # Enable the agent to manage memories of the user
    enable_agentic_memory: ${enable_agentic_memory|false}
    # If True, the agent creates/updates user memories at the end of runs
    enable_user_memories: ${enable_user_memories|false}
    # If True, the agent adds a reference to the user memories in the response
    add_memory_references: ${add_memory_references}
    # If True, the agent creates/updates session summaries at the end of runs
    enable_session_summaries: ${enable_session_summaries|false}
    # If True, the agent adds a reference to the session summaries in the response
    add_session_summary_references: ${add_session_summary_references}

    # --- Team History ---
    # If True, enable the team history
    enable_team_history: ${enable_team_history|false}
    # Deprecated in favor of num_history_runs: Number of interactions from history
    num_of_interactions_from_history: ${num_of_interactions_from_history}
    # Number of historical runs to include in the messages
    num_history_runs: ${num_history_runs|3}

    # --- Team Storage ---
    storage: ${storage}
    # Extra data stored with this team
    extra_data: ${extra_data}

    # --- Team Reasoning ---
    reasoning: ${reasoning|false}
    reasoning_model: ${reasoning_model}
    reasoning_min_steps: ${reasoning_min_steps|1}
    reasoning_max_steps: ${reasoning_max_steps|10}

    # --- Debug & Monitoring ---
    # Enable debug logs
    debug_mode: ${debug_mode|false}
    # Enable member logs - Sets the debug_mode for team and members
    show_members_responses: ${show_members_responses|false}
    # monitoring=True logs Team information to agno.com for monitoring
    monitoring: ${monitoring|false}
    # telemetry=True logs minimal telemetry for analytics
    # This helps us improve the Teams implementation and provide better support
    telemetry: ${telemetry|true}
