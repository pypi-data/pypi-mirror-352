# Generated by cloudcoil-model-codegen v0.5.0.dev0
# DO NOT EDIT

from __future__ import annotations

from datetime import datetime
from typing import (
    Annotated,
    Callable,
    Dict,
    List,
    Literal,
    Optional,
    Type,
    Union,
    cast,
    overload,
)

from pydantic import Field, RootModel

from cloudcoil.pydantic import (
    BaseBuilder,
    BaseModel,
    BaseModelBuilder,
    BuilderContextBase,
    GenericListBuilder,
    ListBuilderContext,
    Never,
    Self,
)


class Quantity(RootModel[str]):
    class Builder(BaseBuilder):
        _value: str | None = None

        def root(self, value: str, /) -> Self:
            """
            Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

            The serialization format is:

            ``` <quantity>        ::= <signedNumber><suffix>

                (Note that <suffix> may be empty, from the "" case in <decimalSI>.)

            <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei

                (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)

            <decimalSI>       ::= m | "" | k | M | G | T | P | E

                (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)

            <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```

            No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

            When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

            Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:

            - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.

            The sign will be omitted unless the number is negative.

            Examples:

            - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"

            Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

            Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

            This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
            """
            self._value = value
            return self

        def __call__(self, value: str, /) -> Self:
            """
            Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

            The serialization format is:

            ``` <quantity>        ::= <signedNumber><suffix>

                (Note that <suffix> may be empty, from the "" case in <decimalSI>.)

            <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei

                (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)

            <decimalSI>       ::= m | "" | k | M | G | T | P | E

                (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)

            <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```

            No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

            When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

            Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:

            - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.

            The sign will be omitted unless the number is negative.

            Examples:

            - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"

            Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

            Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

            This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
            """
            self._value = value
            return self

        def build(self) -> "Quantity":
            value = cast(str, self._value)
            return Quantity(value)

    root: str
    """
    Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.

    The serialization format is:

    ``` <quantity>        ::= <signedNumber><suffix>

        (Note that <suffix> may be empty, from the "" case in <decimalSI>.)

    <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei

        (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)

    <decimalSI>       ::= m | "" | k | M | G | T | P | E

        (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)

    <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber> ```

    No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

    When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

    Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:

    - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.

    The sign will be omitted unless the number is negative.

    Examples:

    - 1.5 will be serialized as "1500m" - 1.5Gi will be serialized as "1536Mi"

    Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

    Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

    This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
    """

    class BuilderContext(BuilderContextBase["Quantity.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Quantity.Builder()
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Quantity."""
        return cls.BuilderContext()


class APIResource(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["APIResource"]:
            return APIResource

        def build(self) -> "APIResource":
            return APIResource(**self._attrs)

        def categories(self, value: Optional[List[str]], /) -> Self:
            """
            categories is a list of the grouped resources this resource belongs to (e.g. 'all')
            """
            return self._set("categories", value)

        def group(self, value: Optional[str], /) -> Self:
            """
            group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale".
            """
            return self._set("group", value)

        def kind(self, value: str, /) -> Self:
            """
            kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
            """
            return self._set("kind", value)

        def name(self, value: str, /) -> Self:
            """
            name is the plural name of the resource.
            """
            return self._set("name", value)

        def namespaced(self, value: bool, /) -> Self:
            """
            namespaced indicates if a resource is namespaced or not.
            """
            return self._set("namespaced", value)

        def short_names(self, value: Optional[List[str]], /) -> Self:
            """
            shortNames is a list of suggested short names of the resource.
            """
            return self._set("short_names", value)

        def singular_name(self, value: str, /) -> Self:
            """
            singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.
            """
            return self._set("singular_name", value)

        def storage_version_hash(self, value: Optional[str], /) -> Self:
            """
            The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.
            """
            return self._set("storage_version_hash", value)

        def verbs(self, value: List[str], /) -> Self:
            """
            verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)
            """
            return self._set("verbs", value)

        def version(self, value: Optional[str], /) -> Self:
            """
            version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)".
            """
            return self._set("version", value)

    class BuilderContext(BuilderContextBase["APIResource.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = APIResource.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for APIResource."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["APIResource", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use APIResource.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    categories: Optional[List[str]] = None
    """
    categories is a list of the grouped resources this resource belongs to (e.g. 'all')
    """
    group: Optional[str] = None
    """
    group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale".
    """
    kind: str
    """
    kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
    """
    name: str
    """
    name is the plural name of the resource.
    """
    namespaced: bool
    """
    namespaced indicates if a resource is namespaced or not.
    """
    short_names: Annotated[Optional[List[str]], Field(alias="shortNames")] = None
    """
    shortNames is a list of suggested short names of the resource.
    """
    singular_name: Annotated[str, Field(alias="singularName")]
    """
    singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.
    """
    storage_version_hash: Annotated[Optional[str], Field(alias="storageVersionHash")] = None
    """
    The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.
    """
    verbs: List[str]
    """
    verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)
    """
    version: Optional[str] = None
    """
    version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)".
    """


class APIResourceList(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["APIResourceList"]:
            return APIResourceList

        def build(self) -> "APIResourceList":
            return APIResourceList(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]], /) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def group_version(self, value: str, /) -> Self:
            """
            groupVersion is the group and version this APIResourceList is for.
            """
            return self._set("group_version", value)

        def kind(self, value: Optional[Literal["APIResourceList"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        @overload
        def resources(
            self, value_or_callback: List[APIResource], /
        ) -> "APIResourceList.Builder": ...

        @overload
        def resources(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[APIResource, APIResource.Builder]],
                GenericListBuilder[APIResource, APIResource.Builder] | List[APIResource],
            ],
            /,
        ) -> "APIResourceList.Builder": ...

        @overload
        def resources(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[APIResource.Builder]: ...

        def resources(self, value_or_callback=None, /):
            """
            resources contains the name of the resources and if they are namespaced.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[APIResource.Builder]()
                context._parent_builder = self
                context._field_name = "resources"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(APIResource.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("resources", value)

    class BuilderContext(BuilderContextBase["APIResourceList.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = APIResourceList.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for APIResourceList."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["APIResourceList", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use APIResourceList.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[Literal["v1"]], Field(alias="apiVersion")] = "v1"
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    group_version: Annotated[str, Field(alias="groupVersion")]
    """
    groupVersion is the group and version this APIResourceList is for.
    """
    kind: Optional[Literal["APIResourceList"]] = "APIResourceList"
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    resources: List[APIResource]
    """
    resources contains the name of the resources and if they are namespaced.
    """


class FieldSelectorRequirement(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["FieldSelectorRequirement"]:
            return FieldSelectorRequirement

        def build(self) -> "FieldSelectorRequirement":
            return FieldSelectorRequirement(**self._attrs)

        def key(self, value: str, /) -> Self:
            """
            key is the field selector key that the requirement applies to.
            """
            return self._set("key", value)

        def operator(self, value: str, /) -> Self:
            """
            operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. The list of operators may grow in the future.
            """
            return self._set("operator", value)

        def values(self, value: Optional[List[str]], /) -> Self:
            """
            values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
            """
            return self._set("values", value)

    class BuilderContext(BuilderContextBase["FieldSelectorRequirement.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = FieldSelectorRequirement.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for FieldSelectorRequirement."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["FieldSelectorRequirement", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use FieldSelectorRequirement.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: str
    """
    key is the field selector key that the requirement applies to.
    """
    operator: str
    """
    operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. The list of operators may grow in the future.
    """
    values: Optional[List[str]] = None
    """
    values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
    """


class FieldsV1(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["FieldsV1"]:
            return FieldsV1

        def build(self) -> "FieldsV1":
            return FieldsV1(**self._attrs)

    class BuilderContext(BuilderContextBase["FieldsV1.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = FieldsV1.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for FieldsV1."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["FieldsV1", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use FieldsV1.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    pass


class GroupVersionForDiscovery(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["GroupVersionForDiscovery"]:
            return GroupVersionForDiscovery

        def build(self) -> "GroupVersionForDiscovery":
            return GroupVersionForDiscovery(**self._attrs)

        def group_version(self, value: str, /) -> Self:
            """
            groupVersion specifies the API group and version in the form "group/version"
            """
            return self._set("group_version", value)

        def version(self, value: str, /) -> Self:
            """
            version specifies the version in the form of "version". This is to save the clients the trouble of splitting the GroupVersion.
            """
            return self._set("version", value)

    class BuilderContext(BuilderContextBase["GroupVersionForDiscovery.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = GroupVersionForDiscovery.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for GroupVersionForDiscovery."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["GroupVersionForDiscovery", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use GroupVersionForDiscovery.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    group_version: Annotated[str, Field(alias="groupVersion")]
    """
    groupVersion specifies the API group and version in the form "group/version"
    """
    version: str
    """
    version specifies the version in the form of "version". This is to save the clients the trouble of splitting the GroupVersion.
    """


class LabelSelectorRequirement(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["LabelSelectorRequirement"]:
            return LabelSelectorRequirement

        def build(self) -> "LabelSelectorRequirement":
            return LabelSelectorRequirement(**self._attrs)

        def key(self, value: str, /) -> Self:
            """
            key is the label key that the selector applies to.
            """
            return self._set("key", value)

        def operator(self, value: str, /) -> Self:
            """
            operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
            """
            return self._set("operator", value)

        def values(self, value: Optional[List[str]], /) -> Self:
            """
            values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
            """
            return self._set("values", value)

    class BuilderContext(BuilderContextBase["LabelSelectorRequirement.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = LabelSelectorRequirement.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for LabelSelectorRequirement."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["LabelSelectorRequirement", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use LabelSelectorRequirement.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    key: str
    """
    key is the label key that the selector applies to.
    """
    operator: str
    """
    operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    """
    values: Optional[List[str]] = None
    """
    values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


class ListMeta(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ListMeta"]:
            return ListMeta

        def build(self) -> "ListMeta":
            return ListMeta(**self._attrs)

        def continue_(self, value: Optional[str], /) -> Self:
            """
            continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
            """
            return self._set("continue_", value)

        def remaining_item_count(self, value: Optional[int], /) -> Self:
            """
            remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
            """
            return self._set("remaining_item_count", value)

        def resource_version(self, value: Optional[str], /) -> Self:
            """
            String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
            """
            return self._set("resource_version", value)

        def self_link(self, value: Optional[str], /) -> Self:
            """
            Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
            """
            return self._set("self_link", value)

    class BuilderContext(BuilderContextBase["ListMeta.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ListMeta.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ListMeta."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ListMeta", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ListMeta.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    continue_: Annotated[Optional[str], Field(alias="continue")] = None
    """
    continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
    """
    remaining_item_count: Annotated[Optional[int], Field(alias="remainingItemCount")] = None
    """
    remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
    """
    resource_version: Annotated[Optional[str], Field(alias="resourceVersion")] = None
    """
    String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    """
    self_link: Annotated[Optional[str], Field(alias="selfLink")] = None
    """
    Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
    """


class MicroTime(RootModel[datetime]):
    class Builder(BaseBuilder):
        _value: datetime | None = None

        def root(self, value: datetime, /) -> Self:
            """
            MicroTime is version of Time with microsecond level precision.
            """
            self._value = value
            return self

        def __call__(self, value: datetime, /) -> Self:
            """
            MicroTime is version of Time with microsecond level precision.
            """
            self._value = value
            return self

        def build(self) -> "MicroTime":
            value = cast(datetime, self._value)
            return MicroTime(value)

    root: datetime
    """
    MicroTime is version of Time with microsecond level precision.
    """

    class BuilderContext(BuilderContextBase["MicroTime.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = MicroTime.Builder()
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for MicroTime."""
        return cls.BuilderContext()


class OwnerReference(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["OwnerReference"]:
            return OwnerReference

        def build(self) -> "OwnerReference":
            return OwnerReference(**self._attrs)

        def api_version(self, value: str, /) -> Self:
            """
            API version of the referent.
            """
            return self._set("api_version", value)

        def block_owner_deletion(self, value: Optional[bool], /) -> Self:
            """
            If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
            """
            return self._set("block_owner_deletion", value)

        def controller(self, value: Optional[bool], /) -> Self:
            """
            If true, this reference points to the managing controller.
            """
            return self._set("controller", value)

        def kind(self, value: str, /) -> Self:
            """
            Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        def name(self, value: str, /) -> Self:
            """
            Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
            """
            return self._set("name", value)

        def uid(self, value: str, /) -> Self:
            """
            UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
            """
            return self._set("uid", value)

    class BuilderContext(BuilderContextBase["OwnerReference.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = OwnerReference.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for OwnerReference."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["OwnerReference", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use OwnerReference.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[str, Field(alias="apiVersion")]
    """
    API version of the referent.
    """
    block_owner_deletion: Annotated[Optional[bool], Field(alias="blockOwnerDeletion")] = None
    """
    If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
    """
    controller: Optional[bool] = None
    """
    If true, this reference points to the managing controller.
    """
    kind: str
    """
    Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    name: str
    """
    Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
    """
    uid: str
    """
    UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
    """


class Patch(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Patch"]:
            return Patch

        def build(self) -> "Patch":
            return Patch(**self._attrs)

    class BuilderContext(BuilderContextBase["Patch.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Patch.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Patch."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Patch", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Patch.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    pass


class Preconditions(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Preconditions"]:
            return Preconditions

        def build(self) -> "Preconditions":
            return Preconditions(**self._attrs)

        def resource_version(self, value: Optional[str], /) -> Self:
            """
            Specifies the target ResourceVersion
            """
            return self._set("resource_version", value)

        def uid(self, value: Optional[str], /) -> Self:
            """
            Specifies the target UID.
            """
            return self._set("uid", value)

    class BuilderContext(BuilderContextBase["Preconditions.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Preconditions.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Preconditions."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Preconditions", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Preconditions.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    resource_version: Annotated[Optional[str], Field(alias="resourceVersion")] = None
    """
    Specifies the target ResourceVersion
    """
    uid: Optional[str] = None
    """
    Specifies the target UID.
    """


class ServerAddressByClientCIDR(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ServerAddressByClientCIDR"]:
            return ServerAddressByClientCIDR

        def build(self) -> "ServerAddressByClientCIDR":
            return ServerAddressByClientCIDR(**self._attrs)

        def client_cidr(self, value: str, /) -> Self:
            """
            The CIDR with which clients can match their IP to figure out the server address that they should use.
            """
            return self._set("client_cidr", value)

        def server_address(self, value: str, /) -> Self:
            """
            Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.
            """
            return self._set("server_address", value)

    class BuilderContext(BuilderContextBase["ServerAddressByClientCIDR.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ServerAddressByClientCIDR.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ServerAddressByClientCIDR."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ServerAddressByClientCIDR", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ServerAddressByClientCIDR.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    client_cidr: Annotated[str, Field(alias="clientCIDR")]
    """
    The CIDR with which clients can match their IP to figure out the server address that they should use.
    """
    server_address: Annotated[str, Field(alias="serverAddress")]
    """
    Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.
    """


class StatusCause(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["StatusCause"]:
            return StatusCause

        def build(self) -> "StatusCause":
            return StatusCause(**self._attrs)

        def field(self, value: Optional[str], /) -> Self:
            """
            The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.

            Examples:
              "name" - the field "name" on the current resource
              "items[0].name" - the field "name" on the first array entry in "items"
            """
            return self._set("field", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
            """
            return self._set("message", value)

        def reason(self, value: Optional[str], /) -> Self:
            """
            A machine-readable description of the cause of the error. If this value is empty there is no information available.
            """
            return self._set("reason", value)

    class BuilderContext(BuilderContextBase["StatusCause.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = StatusCause.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for StatusCause."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["StatusCause", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use StatusCause.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    field: Optional[str] = None
    """
    The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.

    Examples:
      "name" - the field "name" on the current resource
      "items[0].name" - the field "name" on the first array entry in "items"
    """
    message: Optional[str] = None
    """
    A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
    """
    reason: Optional[str] = None
    """
    A machine-readable description of the cause of the error. If this value is empty there is no information available.
    """


class StatusDetails(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["StatusDetails"]:
            return StatusDetails

        def build(self) -> "StatusDetails":
            return StatusDetails(**self._attrs)

        @overload
        def causes(self, value_or_callback: List[StatusCause], /) -> "StatusDetails.Builder": ...

        @overload
        def causes(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[StatusCause, StatusCause.Builder]],
                GenericListBuilder[StatusCause, StatusCause.Builder] | List[StatusCause],
            ],
            /,
        ) -> "StatusDetails.Builder": ...

        @overload
        def causes(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[StatusCause.Builder]: ...

        def causes(self, value_or_callback=None, /):
            """
            The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[StatusCause.Builder]()
                context._parent_builder = self
                context._field_name = "causes"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(StatusCause.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("causes", value)

        def group(self, value: Optional[str], /) -> Self:
            """
            The group attribute of the resource associated with the status StatusReason.
            """
            return self._set("group", value)

        def kind(self, value: Optional[str], /) -> Self:
            """
            The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        def name(self, value: Optional[str], /) -> Self:
            """
            The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
            """
            return self._set("name", value)

        def retry_after_seconds(self, value: Optional[int], /) -> Self:
            """
            If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
            """
            return self._set("retry_after_seconds", value)

        def uid(self, value: Optional[str], /) -> Self:
            """
            UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
            """
            return self._set("uid", value)

    class BuilderContext(BuilderContextBase["StatusDetails.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = StatusDetails.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for StatusDetails."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["StatusDetails", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use StatusDetails.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    causes: Optional[List[StatusCause]] = None
    """
    The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
    """
    group: Optional[str] = None
    """
    The group attribute of the resource associated with the status StatusReason.
    """
    kind: Optional[str] = None
    """
    The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    name: Optional[str] = None
    """
    The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
    """
    retry_after_seconds: Annotated[Optional[int], Field(alias="retryAfterSeconds")] = None
    """
    If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
    """
    uid: Optional[str] = None
    """
    UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
    """


class Time(RootModel[datetime]):
    class Builder(BaseBuilder):
        _value: datetime | None = None

        def root(self, value: datetime, /) -> Self:
            """
            Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
            """
            self._value = value
            return self

        def __call__(self, value: datetime, /) -> Self:
            """
            Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
            """
            self._value = value
            return self

        def build(self) -> "Time":
            value = cast(datetime, self._value)
            return Time(value)

    root: datetime
    """
    Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    """

    class BuilderContext(BuilderContextBase["Time.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Time.Builder()
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Time."""
        return cls.BuilderContext()


class RawExtension(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["RawExtension"]:
            return RawExtension

        def build(self) -> "RawExtension":
            return RawExtension(**self._attrs)

    class BuilderContext(BuilderContextBase["RawExtension.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = RawExtension.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for RawExtension."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["RawExtension", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use RawExtension.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    pass


class IntOrString(RootModel[Union[int, str]]):
    class Builder(BaseBuilder):
        _value: Union[int, str] | None = None

        def root(self, value: Union[int, str], /) -> Self:
            """
            IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
            """
            self._value = value
            return self

        def __call__(self, value: Union[int, str], /) -> Self:
            """
            IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
            """
            self._value = value
            return self

        def build(self) -> "IntOrString":
            value = cast(Union[int, str], self._value)
            return IntOrString(value)

    root: Union[int, str]
    """
    IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
    """

    class BuilderContext(BuilderContextBase["IntOrString.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = IntOrString.Builder()
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for IntOrString."""
        return cls.BuilderContext()


class Info(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Info"]:
            return Info

        def build(self) -> "Info":
            return Info(**self._attrs)

        def build_date(self, value: str, /) -> Self:
            return self._set("build_date", value)

        def compiler(self, value: str, /) -> Self:
            return self._set("compiler", value)

        def git_commit(self, value: str, /) -> Self:
            return self._set("git_commit", value)

        def git_tree_state(self, value: str, /) -> Self:
            return self._set("git_tree_state", value)

        def git_version(self, value: str, /) -> Self:
            return self._set("git_version", value)

        def go_version(self, value: str, /) -> Self:
            return self._set("go_version", value)

        def major(self, value: str, /) -> Self:
            return self._set("major", value)

        def minor(self, value: str, /) -> Self:
            return self._set("minor", value)

        def platform(self, value: str, /) -> Self:
            return self._set("platform", value)

    class BuilderContext(BuilderContextBase["Info.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Info.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Info."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Info", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Info.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    build_date: Annotated[str, Field(alias="buildDate")]
    compiler: str
    git_commit: Annotated[str, Field(alias="gitCommit")]
    git_tree_state: Annotated[str, Field(alias="gitTreeState")]
    git_version: Annotated[str, Field(alias="gitVersion")]
    go_version: Annotated[str, Field(alias="goVersion")]
    major: str
    minor: str
    platform: str


class APIGroup(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["APIGroup"]:
            return APIGroup

        def build(self) -> "APIGroup":
            return APIGroup(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]], /) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["APIGroup"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        def name(self, value: str, /) -> Self:
            """
            name is the name of the group.
            """
            return self._set("name", value)

        @overload
        def preferred_version(
            self, value_or_callback: Optional[GroupVersionForDiscovery], /
        ) -> "APIGroup.Builder": ...

        @overload
        def preferred_version(
            self,
            value_or_callback: Callable[
                [GroupVersionForDiscovery.Builder],
                GroupVersionForDiscovery.Builder | GroupVersionForDiscovery,
            ],
            /,
        ) -> "APIGroup.Builder": ...

        @overload
        def preferred_version(
            self, value_or_callback: Never = ...
        ) -> "GroupVersionForDiscovery.BuilderContext": ...

        def preferred_version(self, value_or_callback=None, /):
            """
            preferredVersion is the version preferred by the API server, which probably is the storage version.
            """
            if self._in_context and value_or_callback is None:
                context = GroupVersionForDiscovery.BuilderContext()
                context._parent_builder = self
                context._field_name = "preferred_version"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GroupVersionForDiscovery.builder())
                if isinstance(output, GroupVersionForDiscovery.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("preferred_version", value)

        @overload
        def server_address_by_client_cid_rs(
            self, value_or_callback: List[ServerAddressByClientCIDR], /
        ) -> "APIGroup.Builder": ...

        @overload
        def server_address_by_client_cid_rs(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[ServerAddressByClientCIDR, ServerAddressByClientCIDR.Builder]],
                GenericListBuilder[ServerAddressByClientCIDR, ServerAddressByClientCIDR.Builder]
                | List[ServerAddressByClientCIDR],
            ],
            /,
        ) -> "APIGroup.Builder": ...

        @overload
        def server_address_by_client_cid_rs(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[ServerAddressByClientCIDR.Builder]: ...

        def server_address_by_client_cid_rs(self, value_or_callback=None, /):
            """
            a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[ServerAddressByClientCIDR.Builder]()
                context._parent_builder = self
                context._field_name = "server_address_by_client_cid_rs"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ServerAddressByClientCIDR.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("server_address_by_client_cid_rs", value)

        @overload
        def versions(
            self, value_or_callback: List[GroupVersionForDiscovery], /
        ) -> "APIGroup.Builder": ...

        @overload
        def versions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[GroupVersionForDiscovery, GroupVersionForDiscovery.Builder]],
                GenericListBuilder[GroupVersionForDiscovery, GroupVersionForDiscovery.Builder]
                | List[GroupVersionForDiscovery],
            ],
            /,
        ) -> "APIGroup.Builder": ...

        @overload
        def versions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[GroupVersionForDiscovery.Builder]: ...

        def versions(self, value_or_callback=None, /):
            """
            versions are the versions supported in this group.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[GroupVersionForDiscovery.Builder]()
                context._parent_builder = self
                context._field_name = "versions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(GroupVersionForDiscovery.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("versions", value)

    class BuilderContext(BuilderContextBase["APIGroup.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = APIGroup.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for APIGroup."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["APIGroup", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use APIGroup.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[Literal["v1"]], Field(alias="apiVersion")] = "v1"
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[Literal["APIGroup"]] = "APIGroup"
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    name: str
    """
    name is the name of the group.
    """
    preferred_version: Annotated[
        Optional[GroupVersionForDiscovery], Field(alias="preferredVersion")
    ] = None
    """
    preferredVersion is the version preferred by the API server, which probably is the storage version.
    """
    server_address_by_client_cid_rs: Annotated[
        Optional[List[ServerAddressByClientCIDR]],
        Field(alias="serverAddressByClientCIDRs"),
    ] = None
    """
    a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
    """
    versions: List[GroupVersionForDiscovery]
    """
    versions are the versions supported in this group.
    """


class APIGroupList(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["APIGroupList"]:
            return APIGroupList

        def build(self) -> "APIGroupList":
            return APIGroupList(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]], /) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        @overload
        def groups(self, value_or_callback: List[APIGroup], /) -> "APIGroupList.Builder": ...

        @overload
        def groups(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[APIGroup, APIGroup.Builder]],
                GenericListBuilder[APIGroup, APIGroup.Builder] | List[APIGroup],
            ],
            /,
        ) -> "APIGroupList.Builder": ...

        @overload
        def groups(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[APIGroup.Builder]: ...

        def groups(self, value_or_callback=None, /):
            """
            groups is a list of APIGroup.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[APIGroup.Builder]()
                context._parent_builder = self
                context._field_name = "groups"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(APIGroup.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("groups", value)

        def kind(self, value: Optional[Literal["APIGroupList"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

    class BuilderContext(BuilderContextBase["APIGroupList.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = APIGroupList.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for APIGroupList."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["APIGroupList", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use APIGroupList.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[Literal["v1"]], Field(alias="apiVersion")] = "v1"
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    groups: List[APIGroup]
    """
    groups is a list of APIGroup.
    """
    kind: Optional[Literal["APIGroupList"]] = "APIGroupList"
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """


class APIVersions(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["APIVersions"]:
            return APIVersions

        def build(self) -> "APIVersions":
            return APIVersions(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]], /) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def kind(self, value: Optional[Literal["APIVersions"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        @overload
        def server_address_by_client_cid_rs(
            self, value_or_callback: List[ServerAddressByClientCIDR], /
        ) -> "APIVersions.Builder": ...

        @overload
        def server_address_by_client_cid_rs(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[ServerAddressByClientCIDR, ServerAddressByClientCIDR.Builder]],
                GenericListBuilder[ServerAddressByClientCIDR, ServerAddressByClientCIDR.Builder]
                | List[ServerAddressByClientCIDR],
            ],
            /,
        ) -> "APIVersions.Builder": ...

        @overload
        def server_address_by_client_cid_rs(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[ServerAddressByClientCIDR.Builder]: ...

        def server_address_by_client_cid_rs(self, value_or_callback=None, /):
            """
            a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[ServerAddressByClientCIDR.Builder]()
                context._parent_builder = self
                context._field_name = "server_address_by_client_cid_rs"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ServerAddressByClientCIDR.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("server_address_by_client_cid_rs", value)

        def versions(self, value: List[str], /) -> Self:
            """
            versions are the api versions that are available.
            """
            return self._set("versions", value)

    class BuilderContext(BuilderContextBase["APIVersions.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = APIVersions.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for APIVersions."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["APIVersions", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use APIVersions.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[Literal["v1"]], Field(alias="apiVersion")] = "v1"
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[Literal["APIVersions"]] = "APIVersions"
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    server_address_by_client_cid_rs: Annotated[
        List[ServerAddressByClientCIDR], Field(alias="serverAddressByClientCIDRs")
    ]
    """
    a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
    """
    versions: List[str]
    """
    versions are the api versions that are available.
    """


class Condition(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Condition"]:
            return Condition

        def build(self) -> "Condition":
            return Condition(**self._attrs)

        @overload
        def last_transition_time(self, value_or_callback: Time, /) -> "Condition.Builder": ...

        @overload
        def last_transition_time(
            self, value_or_callback: Callable[[Time.Builder], Time.Builder | Time], /
        ) -> "Condition.Builder": ...

        @overload
        def last_transition_time(self, value_or_callback: Never = ...) -> "Time.BuilderContext": ...

        def last_transition_time(self, value_or_callback=None, /):
            """
            lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
            """
            if self._in_context and value_or_callback is None:
                context = Time.BuilderContext()
                context._parent_builder = self
                context._field_name = "last_transition_time"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Time.builder())
                if isinstance(output, Time.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("last_transition_time", value)

        def message(self, value: str, /) -> Self:
            """
            message is a human readable message indicating details about the transition. This may be an empty string.
            """
            return self._set("message", value)

        def observed_generation(self, value: Optional[int], /) -> Self:
            """
            observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
            """
            return self._set("observed_generation", value)

        def reason(self, value: str, /) -> Self:
            """
            reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
            """
            return self._set("reason", value)

        def status(self, value: str, /) -> Self:
            """
            status of the condition, one of True, False, Unknown.
            """
            return self._set("status", value)

        def type(self, value: str, /) -> Self:
            """
            type of condition in CamelCase or in foo.example.com/CamelCase.
            """
            return self._set("type", value)

    class BuilderContext(BuilderContextBase["Condition.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Condition.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Condition."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Condition", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Condition.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    last_transition_time: Annotated[Time, Field(alias="lastTransitionTime")]
    """
    lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    """
    message: str
    """
    message is a human readable message indicating details about the transition. This may be an empty string.
    """
    observed_generation: Annotated[Optional[int], Field(alias="observedGeneration")] = None
    """
    observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
    """
    reason: str
    """
    reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
    """
    status: str
    """
    status of the condition, one of True, False, Unknown.
    """
    type: str
    """
    type of condition in CamelCase or in foo.example.com/CamelCase.
    """


class DeleteOptions(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["DeleteOptions"]:
            return DeleteOptions

        def build(self) -> "DeleteOptions":
            return DeleteOptions(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]], /) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def dry_run(self, value: Optional[List[str]], /) -> Self:
            """
            When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
            """
            return self._set("dry_run", value)

        def grace_period_seconds(self, value: Optional[int], /) -> Self:
            """
            The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
            """
            return self._set("grace_period_seconds", value)

        def kind(self, value: Optional[Literal["DeleteOptions"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        def orphan_dependents(self, value: Optional[bool], /) -> Self:
            """
            Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
            """
            return self._set("orphan_dependents", value)

        @overload
        def preconditions(
            self, value_or_callback: Optional[Preconditions], /
        ) -> "DeleteOptions.Builder": ...

        @overload
        def preconditions(
            self,
            value_or_callback: Callable[
                [Preconditions.Builder], Preconditions.Builder | Preconditions
            ],
            /,
        ) -> "DeleteOptions.Builder": ...

        @overload
        def preconditions(
            self, value_or_callback: Never = ...
        ) -> "Preconditions.BuilderContext": ...

        def preconditions(self, value_or_callback=None, /):
            """
            Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
            """
            if self._in_context and value_or_callback is None:
                context = Preconditions.BuilderContext()
                context._parent_builder = self
                context._field_name = "preconditions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Preconditions.builder())
                if isinstance(output, Preconditions.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("preconditions", value)

        def propagation_policy(self, value: Optional[str], /) -> Self:
            """
            Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
            """
            return self._set("propagation_policy", value)

    class BuilderContext(BuilderContextBase["DeleteOptions.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = DeleteOptions.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for DeleteOptions."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["DeleteOptions", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use DeleteOptions.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[Literal["v1"]], Field(alias="apiVersion")] = "v1"
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    dry_run: Annotated[Optional[List[str]], Field(alias="dryRun")] = None
    """
    When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
    """
    grace_period_seconds: Annotated[Optional[int], Field(alias="gracePeriodSeconds")] = None
    """
    The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
    """
    kind: Optional[Literal["DeleteOptions"]] = "DeleteOptions"
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    orphan_dependents: Annotated[Optional[bool], Field(alias="orphanDependents")] = None
    """
    Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
    """
    preconditions: Optional[Preconditions] = None
    """
    Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
    """
    propagation_policy: Annotated[Optional[str], Field(alias="propagationPolicy")] = None
    """
    Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
    """


class LabelSelector(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["LabelSelector"]:
            return LabelSelector

        def build(self) -> "LabelSelector":
            return LabelSelector(**self._attrs)

        @overload
        def match_expressions(
            self, value_or_callback: List[LabelSelectorRequirement], /
        ) -> "LabelSelector.Builder": ...

        @overload
        def match_expressions(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[LabelSelectorRequirement, LabelSelectorRequirement.Builder]],
                GenericListBuilder[LabelSelectorRequirement, LabelSelectorRequirement.Builder]
                | List[LabelSelectorRequirement],
            ],
            /,
        ) -> "LabelSelector.Builder": ...

        @overload
        def match_expressions(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[LabelSelectorRequirement.Builder]: ...

        def match_expressions(self, value_or_callback=None, /):
            """
            matchExpressions is a list of label selector requirements. The requirements are ANDed.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[LabelSelectorRequirement.Builder]()
                context._parent_builder = self
                context._field_name = "match_expressions"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(LabelSelectorRequirement.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("match_expressions", value)

        def match_labels(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
            """
            return self._set("match_labels", value)

    class BuilderContext(BuilderContextBase["LabelSelector.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = LabelSelector.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for LabelSelector."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["LabelSelector", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use LabelSelector.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    match_expressions: Annotated[
        Optional[List[LabelSelectorRequirement]], Field(alias="matchExpressions")
    ] = None
    """
    matchExpressions is a list of label selector requirements. The requirements are ANDed.
    """
    match_labels: Annotated[Optional[Dict[str, str]], Field(alias="matchLabels")] = None
    """
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


class ManagedFieldsEntry(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ManagedFieldsEntry"]:
            return ManagedFieldsEntry

        def build(self) -> "ManagedFieldsEntry":
            return ManagedFieldsEntry(**self._attrs)

        def api_version(self, value: Optional[str], /) -> Self:
            """
            APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
            """
            return self._set("api_version", value)

        def fields_type(self, value: Optional[str], /) -> Self:
            """
            FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
            """
            return self._set("fields_type", value)

        @overload
        def fields_v1(
            self, value_or_callback: Optional[FieldsV1], /
        ) -> "ManagedFieldsEntry.Builder": ...

        @overload
        def fields_v1(
            self,
            value_or_callback: Callable[[FieldsV1.Builder], FieldsV1.Builder | FieldsV1],
            /,
        ) -> "ManagedFieldsEntry.Builder": ...

        @overload
        def fields_v1(self, value_or_callback: Never = ...) -> "FieldsV1.BuilderContext": ...

        def fields_v1(self, value_or_callback=None, /):
            """
            FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
            """
            if self._in_context and value_or_callback is None:
                context = FieldsV1.BuilderContext()
                context._parent_builder = self
                context._field_name = "fields_v1"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(FieldsV1.builder())
                if isinstance(output, FieldsV1.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("fields_v1", value)

        def manager(self, value: Optional[str], /) -> Self:
            """
            Manager is an identifier of the workflow managing these fields.
            """
            return self._set("manager", value)

        def operation(self, value: Optional[str], /) -> Self:
            """
            Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
            """
            return self._set("operation", value)

        def subresource(self, value: Optional[str], /) -> Self:
            """
            Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
            """
            return self._set("subresource", value)

        @overload
        def time(self, value_or_callback: Optional[Time], /) -> "ManagedFieldsEntry.Builder": ...

        @overload
        def time(
            self, value_or_callback: Callable[[Time.Builder], Time.Builder | Time], /
        ) -> "ManagedFieldsEntry.Builder": ...

        @overload
        def time(self, value_or_callback: Never = ...) -> "Time.BuilderContext": ...

        def time(self, value_or_callback=None, /):
            """
            Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
            """
            if self._in_context and value_or_callback is None:
                context = Time.BuilderContext()
                context._parent_builder = self
                context._field_name = "time"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Time.builder())
                if isinstance(output, Time.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("time", value)

    class BuilderContext(BuilderContextBase["ManagedFieldsEntry.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ManagedFieldsEntry.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ManagedFieldsEntry."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ManagedFieldsEntry", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ManagedFieldsEntry.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[str], Field(alias="apiVersion")] = None
    """
    APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
    """
    fields_type: Annotated[Optional[str], Field(alias="fieldsType")] = None
    """
    FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
    """
    fields_v1: Annotated[Optional[FieldsV1], Field(alias="fieldsV1")] = None
    """
    FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
    """
    manager: Optional[str] = None
    """
    Manager is an identifier of the workflow managing these fields.
    """
    operation: Optional[str] = None
    """
    Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
    """
    subresource: Optional[str] = None
    """
    Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
    """
    time: Optional[Time] = None
    """
    Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
    """


class ObjectMeta(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["ObjectMeta"]:
            return ObjectMeta

        def build(self) -> "ObjectMeta":
            return ObjectMeta(**self._attrs)

        def annotations(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
            """
            return self._set("annotations", value)

        @overload
        def creation_timestamp(
            self, value_or_callback: Optional[Time], /
        ) -> "ObjectMeta.Builder": ...

        @overload
        def creation_timestamp(
            self, value_or_callback: Callable[[Time.Builder], Time.Builder | Time], /
        ) -> "ObjectMeta.Builder": ...

        @overload
        def creation_timestamp(self, value_or_callback: Never = ...) -> "Time.BuilderContext": ...

        def creation_timestamp(self, value_or_callback=None, /):
            """
            CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            """
            if self._in_context and value_or_callback is None:
                context = Time.BuilderContext()
                context._parent_builder = self
                context._field_name = "creation_timestamp"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Time.builder())
                if isinstance(output, Time.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("creation_timestamp", value)

        def deletion_grace_period_seconds(self, value: Optional[int], /) -> Self:
            """
            Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
            """
            return self._set("deletion_grace_period_seconds", value)

        @overload
        def deletion_timestamp(
            self, value_or_callback: Optional[Time], /
        ) -> "ObjectMeta.Builder": ...

        @overload
        def deletion_timestamp(
            self, value_or_callback: Callable[[Time.Builder], Time.Builder | Time], /
        ) -> "ObjectMeta.Builder": ...

        @overload
        def deletion_timestamp(self, value_or_callback: Never = ...) -> "Time.BuilderContext": ...

        def deletion_timestamp(self, value_or_callback=None, /):
            """
            DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.

            Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            """
            if self._in_context and value_or_callback is None:
                context = Time.BuilderContext()
                context._parent_builder = self
                context._field_name = "deletion_timestamp"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(Time.builder())
                if isinstance(output, Time.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("deletion_timestamp", value)

        def finalizers(self, value: Optional[List[str]], /) -> Self:
            """
            Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
            """
            return self._set("finalizers", value)

        def generate_name(self, value: Optional[str], /) -> Self:
            """
            GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

            If this field is specified and the generated name exists, the server will return a 409.

            Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
            """
            return self._set("generate_name", value)

        def generation(self, value: Optional[int], /) -> Self:
            """
            A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
            """
            return self._set("generation", value)

        def labels(self, value: Optional[Dict[str, str]], /) -> Self:
            """
            Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
            """
            return self._set("labels", value)

        @overload
        def managed_fields(
            self, value_or_callback: List[ManagedFieldsEntry], /
        ) -> "ObjectMeta.Builder": ...

        @overload
        def managed_fields(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[ManagedFieldsEntry, ManagedFieldsEntry.Builder]],
                GenericListBuilder[ManagedFieldsEntry, ManagedFieldsEntry.Builder]
                | List[ManagedFieldsEntry],
            ],
            /,
        ) -> "ObjectMeta.Builder": ...

        @overload
        def managed_fields(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[ManagedFieldsEntry.Builder]: ...

        def managed_fields(self, value_or_callback=None, /):
            """
            ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[ManagedFieldsEntry.Builder]()
                context._parent_builder = self
                context._field_name = "managed_fields"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ManagedFieldsEntry.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("managed_fields", value)

        def name(self, value: Optional[str], /) -> Self:
            """
            Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
            """
            return self._set("name", value)

        def namespace(self, value: Optional[str], /) -> Self:
            """
            Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

            Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
            """
            return self._set("namespace", value)

        @overload
        def owner_references(
            self, value_or_callback: List[OwnerReference], /
        ) -> "ObjectMeta.Builder": ...

        @overload
        def owner_references(
            self,
            value_or_callback: Callable[
                [GenericListBuilder[OwnerReference, OwnerReference.Builder]],
                GenericListBuilder[OwnerReference, OwnerReference.Builder] | List[OwnerReference],
            ],
            /,
        ) -> "ObjectMeta.Builder": ...

        @overload
        def owner_references(
            self, value_or_callback: Never = ...
        ) -> ListBuilderContext[OwnerReference.Builder]: ...

        def owner_references(self, value_or_callback=None, /):
            """
            List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
            """
            if self._in_context and value_or_callback is None:
                context = ListBuilderContext[OwnerReference.Builder]()
                context._parent_builder = self
                context._field_name = "owner_references"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(OwnerReference.list_builder())
                if isinstance(output, GenericListBuilder):
                    value = output.build()
                else:
                    value = output
            return self._set("owner_references", value)

        def resource_version(self, value: Optional[str], /) -> Self:
            """
            An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

            Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
            """
            return self._set("resource_version", value)

        def self_link(self, value: Optional[str], /) -> Self:
            """
            Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
            """
            return self._set("self_link", value)

        def uid(self, value: Optional[str], /) -> Self:
            """
            UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

            Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
            """
            return self._set("uid", value)

    class BuilderContext(BuilderContextBase["ObjectMeta.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = ObjectMeta.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for ObjectMeta."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["ObjectMeta", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use ObjectMeta.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    annotations: Optional[Dict[str, str]] = None
    """
    Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
    """
    creation_timestamp: Annotated[Optional[Time], Field(alias="creationTimestamp")] = None
    """
    CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

    Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    deletion_grace_period_seconds: Annotated[
        Optional[int], Field(alias="deletionGracePeriodSeconds")
    ] = None
    """
    Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
    """
    deletion_timestamp: Annotated[Optional[Time], Field(alias="deletionTimestamp")] = None
    """
    DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.

    Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    finalizers: Optional[List[str]] = None
    """
    Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
    """
    generate_name: Annotated[Optional[str], Field(alias="generateName")] = None
    """
    GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

    If this field is specified and the generated name exists, the server will return a 409.

    Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
    """
    generation: Optional[int] = None
    """
    A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
    """
    labels: Optional[Dict[str, str]] = None
    """
    Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
    """
    managed_fields: Annotated[Optional[List[ManagedFieldsEntry]], Field(alias="managedFields")] = (
        None
    )
    """
    ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
    """
    name: Optional[str] = None
    """
    Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
    """
    namespace: Optional[str] = None
    """
    Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

    Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
    """
    owner_references: Annotated[Optional[List[OwnerReference]], Field(alias="ownerReferences")] = (
        None
    )
    """
    List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
    """
    resource_version: Annotated[Optional[str], Field(alias="resourceVersion")] = None
    """
    An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

    Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    """
    self_link: Annotated[Optional[str], Field(alias="selfLink")] = None
    """
    Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
    """
    uid: Optional[str] = None
    """
    UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

    Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
    """


class Status(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["Status"]:
            return Status

        def build(self) -> "Status":
            return Status(**self._attrs)

        def api_version(self, value: Optional[Literal["v1"]], /) -> Self:
            """
            APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            """
            return self._set("api_version", value)

        def code(self, value: Optional[int], /) -> Self:
            """
            Suggested HTTP return code for this status, 0 if not set.
            """
            return self._set("code", value)

        @overload
        def details(self, value_or_callback: Optional[StatusDetails], /) -> "Status.Builder": ...

        @overload
        def details(
            self,
            value_or_callback: Callable[
                [StatusDetails.Builder], StatusDetails.Builder | StatusDetails
            ],
            /,
        ) -> "Status.Builder": ...

        @overload
        def details(self, value_or_callback: Never = ...) -> "StatusDetails.BuilderContext": ...

        def details(self, value_or_callback=None, /):
            """
            Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
            """
            if self._in_context and value_or_callback is None:
                context = StatusDetails.BuilderContext()
                context._parent_builder = self
                context._field_name = "details"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(StatusDetails.builder())
                if isinstance(output, StatusDetails.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("details", value)

        def kind(self, value: Optional[Literal["Status"]], /) -> Self:
            """
            Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            return self._set("kind", value)

        def message(self, value: Optional[str], /) -> Self:
            """
            A human-readable description of the status of this operation.
            """
            return self._set("message", value)

        @overload
        def metadata(self, value_or_callback: Optional[ListMeta], /) -> "Status.Builder": ...

        @overload
        def metadata(
            self,
            value_or_callback: Callable[[ListMeta.Builder], ListMeta.Builder | ListMeta],
            /,
        ) -> "Status.Builder": ...

        @overload
        def metadata(self, value_or_callback: Never = ...) -> "ListMeta.BuilderContext": ...

        def metadata(self, value_or_callback=None, /):
            """
            Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            """
            if self._in_context and value_or_callback is None:
                context = ListMeta.BuilderContext()
                context._parent_builder = self
                context._field_name = "metadata"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(ListMeta.builder())
                if isinstance(output, ListMeta.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("metadata", value)

        def reason(self, value: Optional[str], /) -> Self:
            """
            A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
            """
            return self._set("reason", value)

        def status(self, value: Optional[str], /) -> Self:
            """
            Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            """
            return self._set("status", value)

    class BuilderContext(BuilderContextBase["Status.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = Status.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for Status."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["Status", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use Status.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    api_version: Annotated[Optional[Literal["v1"]], Field(alias="apiVersion")] = "v1"
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    code: Optional[int] = None
    """
    Suggested HTTP return code for this status, 0 if not set.
    """
    details: Optional[StatusDetails] = None
    """
    Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
    """
    kind: Optional[Literal["Status"]] = "Status"
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    message: Optional[str] = None
    """
    A human-readable description of the status of this operation.
    """
    metadata: Optional[ListMeta] = None
    """
    Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    reason: Optional[str] = None
    """
    A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
    """
    status: Optional[str] = None
    """
    Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """


class WatchEvent(BaseModel):
    class Builder(BaseModelBuilder):
        @property
        def cls(self) -> Type["WatchEvent"]:
            return WatchEvent

        def build(self) -> "WatchEvent":
            return WatchEvent(**self._attrs)

        @overload
        def object(self, value_or_callback: RawExtension, /) -> "WatchEvent.Builder": ...

        @overload
        def object(
            self,
            value_or_callback: Callable[
                [RawExtension.Builder], RawExtension.Builder | RawExtension
            ],
            /,
        ) -> "WatchEvent.Builder": ...

        @overload
        def object(self, value_or_callback: Never = ...) -> "RawExtension.BuilderContext": ...

        def object(self, value_or_callback=None, /):
            """
            Object is:
             * If Type is Added or Modified: the new state of the object.
             * If Type is Deleted: the state of the object immediately before deletion.
             * If Type is Error: *Status is recommended; other types may make sense
               depending on context.
            """
            if self._in_context and value_or_callback is None:
                context = RawExtension.BuilderContext()
                context._parent_builder = self
                context._field_name = "object"
                return context

            value = value_or_callback
            if callable(value_or_callback):
                output = value_or_callback(RawExtension.builder())
                if isinstance(output, RawExtension.Builder):
                    value = output.build()
                else:
                    value = output
            return self._set("object", value)

        def type(self, value: str, /) -> Self:
            return self._set("type", value)

    class BuilderContext(BuilderContextBase["WatchEvent.Builder"]):
        def model_post_init(self, __context) -> None:
            self._builder = WatchEvent.Builder()
            self._builder._in_context = True
            self._parent_builder = None
            self._field_name = None

    @classmethod
    def builder(cls) -> Builder:
        return cls.Builder()

    @classmethod
    def new(cls) -> BuilderContext:
        """Creates a new context manager builder for WatchEvent."""
        return cls.BuilderContext()

    class ListBuilder(GenericListBuilder["WatchEvent", Builder]):
        def __init__(self):
            raise NotImplementedError(
                "This class is not meant to be instantiated. Use WatchEvent.list_builder() instead."
            )

    @classmethod
    def list_builder(cls) -> ListBuilder:
        return GenericListBuilder[cls, cls.Builder]()  # type: ignore

    object: RawExtension
    """
    Object is:
     * If Type is Added or Modified: the new state of the object.
     * If Type is Deleted: the state of the object immediately before deletion.
     * If Type is Error: *Status is recommended; other types may make sense
       depending on context.
    """
    type: str
