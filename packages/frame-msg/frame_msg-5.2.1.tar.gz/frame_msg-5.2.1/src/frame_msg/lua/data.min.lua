local a={}local b={}a.app_data_accum=b;local c={}a.app_data_block=c;local d={}a.app_data=d;local e={}a.parsers=e;function a.update_app_data_accum(f)rc,err=pcall(function()local g=string.byte(f,1)local h=a.app_data_accum[g]if h==nil or next(h)==nil then h={chunk_table={},num_chunks=0,size=0,recv_bytes=0}a.app_data_accum[g]=h end;if h.num_chunks==0 then h.size=string.byte(f,2)<<8|string.byte(f,3)h.chunk_table[1]=string.sub(f,4)h.num_chunks=1;h.recv_bytes=string.len(f)-3;if h.recv_bytes==h.size then a.app_data_block[g]=h.chunk_table[1]h.size=0;h.recv_bytes=0;h.num_chunks=0;h.chunk_table[1]=nil;b[g]=h end else h.chunk_table[h.num_chunks+1]=string.sub(f,2)h.num_chunks=h.num_chunks+1;h.recv_bytes=h.recv_bytes+string.len(f)-1;if h.recv_bytes==h.size then collectgarbage('collect')a.app_data_block[g]=table.concat(h.chunk_table)for i,j in pairs(h.chunk_table)do h.chunk_table[i]=nil end;collectgarbage('collect')h.size=0;h.recv_bytes=0;h.num_chunks=0;a.app_data_accum[g]=h end end;while true do if pcall(frame.bluetooth.send,'\x00')then break end;frame.sleep(0.0025)end end)if rc==false then print('Error in data accumulator: '..err)while true do if pcall(frame.bluetooth.send,'\x01')then break end;frame.sleep(0.0025)end;error(err)end end;frame.bluetooth.receive_callback(a.update_app_data_accum)function a.process_raw_items()local k=0;rc,err=pcall(function()collectgarbage('collect')for l,m in pairs(a.app_data_block)do if a.parsers[l]==nil then print('Error: No parser for flag: '..tostring(l))else a.app_data[l]=a.parsers[l](m,a.app_data[l])a.app_data_block[l]=nil;k=k+1 end end end)if rc==false then print('Error processing raw items: '..err)error(err)end;return k end;return a