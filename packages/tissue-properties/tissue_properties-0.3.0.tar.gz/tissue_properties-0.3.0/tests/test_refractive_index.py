import pytest

from tissue_properties.optical.refractive_index import navarro, vincelette
from tissue_properties.optical.refractive_index.navarro.utils import *
from tissue_properties.units import *


def test_navarro_data():
    n_c = navarro.Cornea()
    n_a = navarro.Aqueous()
    n_l = navarro.Lens()
    n_v = navarro.Vitreous()

    # The four functions alpha_1 - alpha_4, have zeros at three special
    # wavelengths, and are 1 at the other. The four special wavelengths are
    #
    # 0.365 um
    # 0.4861 um
    # 0.6563 um
    # 1.014 um
    #
    # alpha_1(0.365 um) = 1
    # alpha_2(0.4861 um) = 1
    # alpha_3(0.6563 um) = 1
    # alpha_4(1.014 um) = 1
    #
    # See Herzberger, "Colour correction in optical systems and a new dispersion formula", 1959 for details
    #
    assert alpha_1(Q_(365, "nm")).magnitude == pytest.approx(1, abs=0.001)
    assert alpha_1(Q_(486.1, "nm")).magnitude == pytest.approx(0, abs=0.001)
    assert alpha_1(Q_(656.3, "nm")).magnitude == pytest.approx(0, abs=0.001)
    assert alpha_1(Q_(1014, "nm")).magnitude == pytest.approx(0, abs=0.001)

    assert alpha_2(Q_(365, "nm")).magnitude == pytest.approx(0, abs=0.001)
    assert alpha_2(Q_(486.1, "nm")).magnitude == pytest.approx(1, abs=0.001)
    assert alpha_2(Q_(656.3, "nm")).magnitude == pytest.approx(0, abs=0.001)
    assert alpha_2(Q_(1014, "nm")).magnitude == pytest.approx(0, abs=0.001)

    assert alpha_3(Q_(365, "nm")).magnitude == pytest.approx(0, abs=0.001)
    assert alpha_3(Q_(486.1, "nm")).magnitude == pytest.approx(0, abs=0.001)
    assert alpha_3(Q_(656.3, "nm")).magnitude == pytest.approx(1, abs=0.001)
    assert alpha_3(Q_(1014, "nm")).magnitude == pytest.approx(0, abs=0.001)

    assert alpha_4(Q_(365, "nm")).magnitude == pytest.approx(0, abs=0.001)
    assert alpha_4(Q_(486.1, "nm")).magnitude == pytest.approx(0, abs=0.001)
    assert alpha_4(Q_(656.3, "nm")).magnitude == pytest.approx(0, abs=0.001)
    assert alpha_4(Q_(1014, "nm")).magnitude == pytest.approx(1, abs=0.001)

    # it is possible that there is a type in Table 1 of Navarro. they report 1.367 for the cornea refractive index.
    # but it is the only one that is off by more than 0.0001 at 589 nm. If we swap the 6 and 7, it matches.
    assert n_c(Q_(589, "nm")).magnitude == pytest.approx(1.376, abs=0.0001)
    assert n_a(Q_(589, "nm")).magnitude == pytest.approx(1.3374, abs=0.0001)
    assert n_l(Q_(589, "nm")).magnitude == pytest.approx(1.42, abs=0.0001)
    assert n_v(Q_(589, "nm")).magnitude == pytest.approx(1.336, abs=0.0001)


def test_vincelette_data():
    n = vincelette.ReducedEye()

    # extracted from Figure 7b
    data = [
        [404.99155977068665, 1.3502851804635125],
        [408.332857636029, 1.349659995645135],
        [412.59471715814936, 1.348990980712663],
        [417.74683178044586, 1.348265128571936],
        [422.6527056303533, 1.3475400717850385],
        [427.5585794802607, 1.3468432806496087],
        [433.3925916260965, 1.3461224208836866],
        [439.3591949570649, 1.345363873582474],
        [445.75973307574014, 1.344610372050449],
        [451.8890619520986, 1.34388069776181],
        [459.115281541827, 1.3431430499119859],
        [467.40223061261656, 1.3423173502751644],
        [475.75547527597234, 1.3415310512434195],
        [482.9153992731345, 1.3408475363988308],
        [490.67198360339347, 1.340145667235107],
        [499.02522826674925, 1.3394408613803217],
        [507.3784729301051, 1.3387316504889442],
        [515.7317175934609, 1.3380708950000828],
        [524.6816225899136, 1.3373875636986854],
        [534.228187919463, 1.336713042470473],
        [544.3714135821094, 1.3360166796024897],
        [555.1112995778526, 1.3353314516881152],
        [565.8511855735958, 1.3346667806111718],
        [577.1877319024358, 1.3340041652179715],
        [589.1209385643726, 1.3333566248388875],
        [601.6508055594063, 1.3327051599726576],
        [614.7773328875369, 1.3320492099782606],
        [627.9038602156675, 1.331438111265532],
        [641.030387543798, 1.3308522413987418],
        [654.1569148719286, 1.330294403582994],
        [667.2834422000592, 1.3297730074336018],
        [680.4099695281898, 1.3292600208995222],
        [693.5364968563204, 1.3287806728266938],
        [706.6630241844509, 1.3283153407793866],
        [719.7895515125815, 1.327866827962705],
        [732.9160788407119, 1.3274491504021704],
        [746.0426061688424, 1.3270286696365314],
        [759.169133496973, 1.3266278113066223],
        [772.2956608251036, 1.3262353625920258],
        [785.4221881532342, 1.3258625363131593],
        [798.5487154813648, 1.3255009228547099],
        [811.6752428094953, 1.3251449158064688],
        [824.8017701376259, 1.3248057279888534],
        [837.9282974657565, 1.3244721465814464],
        [851.0548247938871, 1.3241469747893524],
        [864.1813521220176, 1.323830212612571],
        [877.3078794501482, 1.3235218600511023],
        [890.4344067782786, 1.3232135074896338],
        [903.5609341064091, 1.322913564543478],
        [916.6874614345397, 1.3226248344177391],
        [929.8139887626703, 1.3223333010868963],
        [942.9405160908009, 1.3220445709611575],
        [956.0670434189315, 1.3217642504507314],
        [969.193570747062, 1.321489536350514],
        [982.3200980751926, 1.3212176254554007],
        [995.4466254033232, 1.320948517765392],
        [1008.5731527314538, 1.3206850164855914],
        [1021.6996800595844, 1.3204187120006867],
        [1034.826207387715, 1.3201580139259905],
        [1047.9527347158455, 1.31989451264619],
        [1061.0792620439759, 1.3196422241868069],
        [1074.2057893721064, 1.3193871325223192],
        [1087.332316700237, 1.3191348440629358],
        [1100.4588440283676, 1.3188769491933439],
        [1113.5853713564982, 1.3186358735543775],
        [1126.7118986846287, 1.3183891915052026],
        [1139.8384260127593, 1.3181425094560277],
        [1152.96495334089, 1.3178902209966443],
        [1166.0914806690205, 1.3176463421525737],
        [1179.218007997151, 1.3173996601033988],
        [1192.3445353252814, 1.3171557812593284],
        [1205.471062653412, 1.3169119024152578],
        [1218.5975899815426, 1.3166624171609786],
        [1231.7241173096731, 1.3164269479322208],
        [1244.8506446378037, 1.3161858722932545],
        [1257.9771719659343, 1.315933583833871],
        [1271.1036992940649, 1.315695311400009],
        [1284.2302266221955, 1.3154542357610426],
        [1297.356753950326, 1.3152131601220762],
        [1310.4832812784566, 1.3149664780729013],
        [1323.6098086065872, 1.3147225992288307],
        [1336.7363359347175, 1.31447872038476],
        [1349.8628632628481, 1.3142320383355854],
        [1362.9893905909787, 1.3139853562864106],
        [1376.1159179191093, 1.3137386742372357],
        [1389.2424452472399, 1.313494795393165],
    ]

    for row in data:
        assert n(Q_(row[0], "nm")).magnitude == pytest.approx(row[1], abs=0.001)
