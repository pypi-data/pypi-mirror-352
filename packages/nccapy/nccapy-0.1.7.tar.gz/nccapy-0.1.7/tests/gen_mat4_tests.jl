#!/usr/bin/env julia

using Random
using Distributions
using ArgParse
using LinearAlgebra

Random.seed!(12345)

#=
io = file pointer for the python file to write to
array = the array to write to file
=#
function printMatrix(io,array)
  print(io,"[")
  for i = 1:length(array)
    print(io,array[i],",")
  end
  print(io,"],\n")
end

#=
io = file pointer for the python file to write to
var = the name of the variable to write to the file
data = the array of data to write
=#
function writePythonVar(io,var,data)
  println(io,var,"=[")
  for i = 1:length(data)
    printMatrix(io,data[i])
  end
  println(io,"]")

end
#=
size = Matrix size will be square usually 4 or 3
file = name of file to output to (.py)
loopSize = the number of list elements to generate
=#
function generateTests(size,file,loopSize)
  # generate some empty lists for our data
  a=Matrix{Float64}[]
  b=Matrix{Float64}[]
  a_times_b=Matrix{Float64}[]
  a_plus_b=Matrix{Float64}[]
  a_minus_b=Matrix{Float64}[]
  a_inv=Matrix{Float64}[]
  a_det=[]
  # uniform distribution for rng
  dist=Uniform(-100,100)
  # generate our data (don't forget we index from 1!)
  for i = 1:loopSize 
      # create our base matrix values a and b
      push!(a,rand(dist, size, size))
      push!(b,rand(dist, size, size))
      # do our calculations and store
      push!(a_times_b,a[i]*b[i])
      push!(a_plus_b,a[i]+b[i])
      push!(a_minus_b,a[i]-b[i])
      push!(a_inv,inv(a[i]))
      push!(a_det,det(a[i]))
  end
  # open our file for io
  open(file,"w") do io
    # println writes a line and \n
    println(io,"# file generated by gen_mat4_tests.jl")
    # dump our results to the file
    writePythonVar(io,"a",a)
    writePythonVar(io,"b",b)
    writePythonVar(io,"a_times_b",a_times_b)
    writePythonVar(io,"a_plus_b",a_plus_b)
    writePythonVar(io,"a_minus_b",a_minus_b)
    writePythonVar(io,"a_inv",a_inv)
    writePythonVar(io,"a_det",a_det)
  end # end io
end # end function

function parse_commandline()
    s = ArgParseSettings()
    @add_arg_table s begin
        "--size", "-s"
            help = "size of the matrix"
            arg_type = Int
            default = 4
        "--name", "-n"
            help = "name of pythonfile"
            arg_type = String
            default = "mat4Data.py"
        "--data", "-d"
            help = "how many test elements in the array"
            arg_type =Int 
            default = 10
    end
    return parse_args(s)
end

function main()
    parsed_args = parse_commandline()
    generateTests(parsed_args["size"],parsed_args["name"],parsed_args["data"])
end

main()