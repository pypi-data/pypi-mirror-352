[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "otio-music-arrangement"
version = "0.1.2"
authors = [
  # Add your name and email here if you like
  # { name="Allen Day", email="allenday@allenday.com" },
]
description = "Builds OpenTimelineIO timelines for music video editing workflows."
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License", # Or choose another license
    "Operating System :: OS Independent",
    "Topic :: Multimedia :: Video :: Non-Linear Editor",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "opentimelineio >= 0.15", # Specify a version or range appropriate for your needs
    "ffmpeg-python >= 0.2.0", # For audio probing
    "librosa >= 0.9",        # For beat detection
    "numpy",                 # Dependency for librosa
    "otio-fcpx-xml-lite-adapter >= 0.1.2"
]

[project.optional-dependencies]
test = [
    "pytest>=7.0",
    "pytest-cov",
    "pytest-mock",
]
dev = [
    "ruff>=0.1.0",           # Modern Python linter and formatter
    "mypy>=1.0",             # Type checking
    "black>=23.0",           # Code formatting
    "isort>=5.0",            # Import sorting
    "pre-commit>=3.0",       # Git hooks
    "build",
    "twine",
]

[project.urls]
"Homepage" = "https://github.com/allenday/otio-music-arrangement" # Replace with your repo URL later
"Bug Tracker" = "https://github.com/allenday/otio-music-arrangement/issues" # Replace with your repo URL later

[project.scripts]
otio-music-arrange = "otio_music_arrangement.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["tests/fixtures/*.json", "tests/fixtures/*.mp3"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests",
]

[tool.coverage.run]
source = ["src/otio_music_arrangement"]
branch = true

[tool.coverage.report]
fail_under = 80
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "D",    # pydocstyle
]
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D103",  # Missing docstring in public function (for test helpers)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.black]
line-length = 88
target-version = ['py310']

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[project.entry-points."opentimelineio.plugins"]
# If this package provided an adapter plugin, it would be listed here
# Example: otio_music_arrangement = otio_music_arrangement.adapter
