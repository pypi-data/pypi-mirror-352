[project]
name = "heisskleber"
description = "Heisskleber"
authors = [{ name = "Felix Weiler-Detjen", email = "felix@flucto.tech" }]
license = { file = "LICENSE" }
readme = "README.md"
requires-python = ">=3.10"
dynamic = ["version"]
dependencies = [
    "aiomqtt>=2.3.0",
    "pyserial>=3.5",
    "pyyaml>=6.0.2",
    "pyzmq>=26.2.0",
    "watchfiles>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/flucto-gmbh/heisskleber"
Repository = "https://github.com/flucto-gmbh/heisskleber"
Documentation = "https://heisskleber.readthedocs.io"


[project.optional-dependencies]
test = [
    "pytest>=8.3.3",
    "pytest-cov>=5.0.0",
    "coverage[toml]>=7.6.1",
    "xdoctest>=1.2.0",
    "pytest-asyncio>=0.24.0",
    "freezegun>=1.5.1",
]
docs = [
    "furo>=2024.8.6",
    "myst-parser>=4.0.0",
    "sphinx>=8.0.2",
    "sphinx-autobuild>=2024.9.19",
    "sphinx-rtd-theme>=0.5.1",
    "sphinx_copybutton",
    "sphinx_autodoc_typehints",
]

[tool.uv]
dev-dependencies = [
    "deptry>=0.20.0",
    "mypy>=1.11.2",
    "ruff>=0.6.8",
    "xdoctest>=1.2.0",
    "nox>=2024.4.15",
    "pytest>=8.3.3",
    "pytest-cov>=5.0.0",
    "coverage[toml]>=7.6.1",
    "pytest-asyncio>=0.24.0",
    "pre-commit>=4.0.1",
    "types-aiofiles>=24.1.0.20241221",
    "freezegun>=1.5.1",
    "types-pyyaml>=6.0.12.20250402",
]
package = true

[tool.coverage.paths]
source = ["heisskleber", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["src/heisskleber"]
omit = ["tests/*"]

[tool.coverage.report]
show_missing = true
# fail_under = 100

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true
exclude = ["tests/*", "^test_*\\.py"]

[tool.ruff]
target-version = "py310"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    "I",     # isort
    "B",     # bugbear
    "A",     # builtins
    "ASYNC", # async
    "ANN",   # annotations
    "S",     # bandit
    "BLE",   # blind-exception
    "COM",   # commas
    "C4",    # comprehensions
    "INT",   # gettext
    "G",     # logging-format
    "T20",   # print
    "PYI",   # pyi
    "PT",    # pytest-style
    "Q",     # quotes
    "SIM",   # simplify
    "TC",    # type-checking
    "ARG",   # unsued-arguments
    "PTH",   # use-pathlib
    "C90",   # complexity
    "N",     # pep8-naming
    "PERF",  # perf-lint
    "E",     # pycodestyle - error
    "W",     # pycodestyle - warning
    "D",     # pydocstyle
    "F",     # pyflakes
    "UP",    # pyupgrade
    "RUF",   # ruff
    "FURB",  # refurb
    "TRY",   # tryceratops
    "PLR",   # refactor

]
ignore = [
    "E501",   # LineTooLong
    "E731",   # DoNotAssignLambda
    "A001",   #
    "D100",   # Missing module docstring
    "D104",   # Missing package docstring
    "D107",   # Missing __init__ docstring
    "ANN401", # Dynamically typed annotation
    "FA102",  # Missing from __future__ import annotations
    "FBT001", # boolean style argument in function definition
    "ARG002", # Unused kwargs
    "COM812",
    "ARG001",
    "INP001",
    "TRY003", # Avoid specifying long messages in Exceptions
    "EM101",  # Exceptions must not use string literal
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "D", "T201", "PLR2", "SLF001", "ANN"]

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "session"

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch]
version.source = "vcs"
version.path = "src/heisskleber/__init__.py"

[tool.hatch.version.raw_options]
local_scheme = "no-local-version"

[tool.hatch.envs.default]
features = ["test"]
scripts.test = "pytest {args}"
