Metadata-Version: 2.4
Name: create-llm-agent
Version: 0.1.0
Summary: A CLI tool to scaffold your first AI llm-agent project.
Home-page: https://gist.github.com/JimSP/5920dd06f31913eb42657ede1ae85cff
Author: Alexandre Moraes de Souza Lima
Author-email: alexandre.msl@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python
Dynamic: summary

Absolutely! Here’s a polished, clear, and “enterprise-level” README.md (in English) for your script, designed to impress developers, managers, or technical leads.

⸻


# 🚀 Create Agent — Production-Ready LLM Agent Project Scaffold

A robust Python script for **automating the creation of LLM agent projects** with modern best practices, advanced validation, modular structure, and optional Docker & CI/CD support.

---

## ✨ Features

- **Professional Project Structure:**  
  Sets up all directories, config files, and code templates needed for scalable agent development.

- **Instant Virtual Environment & Dependencies:**  
  Creates a Python virtualenv and installs all requirements automatically (LangChain, OpenAI, Anthropic, FastAPI, etc).

- **Robust Environment Checks:**  
  Verifies system dependencies (Python, git, pip, Docker) before starting.

- **API Key Validation:**  
  Tests OpenAI and Anthropic keys before running to prevent runtime errors.

- **Full Configuration Suite:**  
  Generates `.env.example`, `.gitignore`, `pyproject.toml`, a comprehensive README, and utility scripts.

- **Code & Test Templates:**  
  Includes agent base classes, a chat agent, config modules, structured logging, and pytest-based tests.

- **Optional Infrastructure Generation:**  
  Easily create a `Dockerfile`, `docker-compose.yml`, and a GitHub Actions workflow via command-line flags.

- **Enterprise-Grade Logging & Error Handling:**  
  All steps are logged, with clear error messages and safe exits on failure.

---

## 🛠️ Usage

```bash
python create_agent.py <project_name> --template=basic|advanced|api [--docker] [--compose] [--ci]

Examples:

Create a basic agent project:

python create_agent.py myagent --template=basic

Create an advanced project with Docker, Compose, and CI/CD:

python create_agent.py llm_app --template=advanced --docker --compose --ci


⸻

📁 What’s Generated
	•	agents/ – Modular agent implementations
	•	config/ – Settings and logging config
	•	api/ – API entrypoint (for advanced/api templates)
	•	tests/ – Pytest unit tests and mocks
	•	scripts/ – Utility scripts (e.g. Jinja2 rendering)
	•	data/, logs/, notebooks/, docs/ – Data, logs, notebooks, docs folders
	•	main.py – Main entrypoint for agent
	•	requirements.txt, pyproject.toml, .gitignore, .env.example – Ready-to-use config files
	•	.vscode/ – VS Code workspace settings
	•	Dockerfile, docker-compose.yml, .github/workflows/ci.yml – (optional) infrastructure

⸻

🧑‍💻 Best Practices Baked In
	•	Type hints, Pydantic validation, modularity, clean code
	•	Logging with file rotation and CLI debug support
	•	Production-level directory structure
	•	Ready for both quick prototyping and enterprise deployment

⸻

⚠️ Requirements
	•	Python 3.8+
	•	git and pip
	•	(Optional) Docker for infra support

⸻

🔑 Recommendations
	•	Configure your .env file with valid API keys before running agents.
	•	Extend agents/tools and prompt templates as your use cases evolve.
	•	Integrate with CI/CD and Docker for team or cloud deployments.

⸻

💡 Why Use This Script?

Accelerate agent-based project bootstrapping, avoid repetitive setup work, enforce best practices, and minimize onboarding time for new team members.
Go from zero to production-ready LLM project in minutes.

⸻

Created for engineering teams, researchers, educators, and AI builders who demand reliability, speed, and clarity.

⸻


If you want the README with **badges**, example outputs, FAQ, or a more “startup” tone, just ask!
