# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1Ebs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'encrypted': 'bool',
        'iops': 'str',
        'path': 'str',
        'provider_id': 'str',
        'size': 'str',
        'throughput': 'str',
        'type': 'str'
    }

    attribute_map = {
        'encrypted': 'encrypted',
        'iops': 'iops',
        'path': 'path',
        'provider_id': 'providerId',
        'size': 'size',
        'throughput': 'throughput',
        'type': 'type'
    }

    def __init__(self, encrypted: 'bool' =None, iops: 'str' =None, path: 'str' =None, provider_id: 'str' =None, size: 'str' =None, throughput: 'str' =None, type: 'str' =None):  # noqa: E501
        """V1Ebs - a model defined in Swagger"""  # noqa: E501
        self._encrypted = None
        self._iops = None
        self._path = None
        self._provider_id = None
        self._size = None
        self._throughput = None
        self._type = None
        self.discriminator = None
        if encrypted is not None:
            self.encrypted = encrypted
        if iops is not None:
            self.iops = iops
        if path is not None:
            self.path = path
        if provider_id is not None:
            self.provider_id = provider_id
        if size is not None:
            self.size = size
        if throughput is not None:
            self.throughput = throughput
        if type is not None:
            self.type = type

    @property
    def encrypted(self) -> 'bool':
        """Gets the encrypted of this V1Ebs.  # noqa: E501


        :return: The encrypted of this V1Ebs.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted: 'bool'):
        """Sets the encrypted of this V1Ebs.


        :param encrypted: The encrypted of this V1Ebs.  # noqa: E501
        :type: bool
        """

        self._encrypted = encrypted

    @property
    def iops(self) -> 'str':
        """Gets the iops of this V1Ebs.  # noqa: E501


        :return: The iops of this V1Ebs.  # noqa: E501
        :rtype: str
        """
        return self._iops

    @iops.setter
    def iops(self, iops: 'str'):
        """Sets the iops of this V1Ebs.


        :param iops: The iops of this V1Ebs.  # noqa: E501
        :type: str
        """

        self._iops = iops

    @property
    def path(self) -> 'str':
        """Gets the path of this V1Ebs.  # noqa: E501


        :return: The path of this V1Ebs.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: 'str'):
        """Sets the path of this V1Ebs.


        :param path: The path of this V1Ebs.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def provider_id(self) -> 'str':
        """Gets the provider_id of this V1Ebs.  # noqa: E501


        :return: The provider_id of this V1Ebs.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id: 'str'):
        """Sets the provider_id of this V1Ebs.


        :param provider_id: The provider_id of this V1Ebs.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    @property
    def size(self) -> 'str':
        """Gets the size of this V1Ebs.  # noqa: E501


        :return: The size of this V1Ebs.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size: 'str'):
        """Sets the size of this V1Ebs.


        :param size: The size of this V1Ebs.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def throughput(self) -> 'str':
        """Gets the throughput of this V1Ebs.  # noqa: E501


        :return: The throughput of this V1Ebs.  # noqa: E501
        :rtype: str
        """
        return self._throughput

    @throughput.setter
    def throughput(self, throughput: 'str'):
        """Sets the throughput of this V1Ebs.


        :param throughput: The throughput of this V1Ebs.  # noqa: E501
        :type: str
        """

        self._throughput = throughput

    @property
    def type(self) -> 'str':
        """Gets the type of this V1Ebs.  # noqa: E501


        :return: The type of this V1Ebs.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: 'str'):
        """Sets the type of this V1Ebs.


        :param type: The type of this V1Ebs.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Ebs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1Ebs') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Ebs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1Ebs') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
