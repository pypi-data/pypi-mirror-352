# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1ReservationBillingSession(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'cost': 'float',
        'end_time': 'datetime',
        'machine_type': 'str',
        'num_instances': 'str',
        'project_id': 'str',
        'start_time': 'datetime'
    }

    attribute_map = {
        'cluster_id': 'clusterId',
        'cost': 'cost',
        'end_time': 'endTime',
        'machine_type': 'machineType',
        'num_instances': 'numInstances',
        'project_id': 'projectId',
        'start_time': 'startTime'
    }

    def __init__(self, cluster_id: 'str' =None, cost: 'float' =None, end_time: 'datetime' =None, machine_type: 'str' =None, num_instances: 'str' =None, project_id: 'str' =None, start_time: 'datetime' =None):  # noqa: E501
        """V1ReservationBillingSession - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._cost = None
        self._end_time = None
        self._machine_type = None
        self._num_instances = None
        self._project_id = None
        self._start_time = None
        self.discriminator = None
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if cost is not None:
            self.cost = cost
        if end_time is not None:
            self.end_time = end_time
        if machine_type is not None:
            self.machine_type = machine_type
        if num_instances is not None:
            self.num_instances = num_instances
        if project_id is not None:
            self.project_id = project_id
        if start_time is not None:
            self.start_time = start_time

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this V1ReservationBillingSession.  # noqa: E501


        :return: The cluster_id of this V1ReservationBillingSession.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this V1ReservationBillingSession.


        :param cluster_id: The cluster_id of this V1ReservationBillingSession.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def cost(self) -> 'float':
        """Gets the cost of this V1ReservationBillingSession.  # noqa: E501


        :return: The cost of this V1ReservationBillingSession.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost: 'float'):
        """Sets the cost of this V1ReservationBillingSession.


        :param cost: The cost of this V1ReservationBillingSession.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def end_time(self) -> 'datetime':
        """Gets the end_time of this V1ReservationBillingSession.  # noqa: E501


        :return: The end_time of this V1ReservationBillingSession.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: 'datetime'):
        """Sets the end_time of this V1ReservationBillingSession.


        :param end_time: The end_time of this V1ReservationBillingSession.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def machine_type(self) -> 'str':
        """Gets the machine_type of this V1ReservationBillingSession.  # noqa: E501


        :return: The machine_type of this V1ReservationBillingSession.  # noqa: E501
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type: 'str'):
        """Sets the machine_type of this V1ReservationBillingSession.


        :param machine_type: The machine_type of this V1ReservationBillingSession.  # noqa: E501
        :type: str
        """

        self._machine_type = machine_type

    @property
    def num_instances(self) -> 'str':
        """Gets the num_instances of this V1ReservationBillingSession.  # noqa: E501


        :return: The num_instances of this V1ReservationBillingSession.  # noqa: E501
        :rtype: str
        """
        return self._num_instances

    @num_instances.setter
    def num_instances(self, num_instances: 'str'):
        """Sets the num_instances of this V1ReservationBillingSession.


        :param num_instances: The num_instances of this V1ReservationBillingSession.  # noqa: E501
        :type: str
        """

        self._num_instances = num_instances

    @property
    def project_id(self) -> 'str':
        """Gets the project_id of this V1ReservationBillingSession.  # noqa: E501


        :return: The project_id of this V1ReservationBillingSession.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: 'str'):
        """Sets the project_id of this V1ReservationBillingSession.


        :param project_id: The project_id of this V1ReservationBillingSession.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def start_time(self) -> 'datetime':
        """Gets the start_time of this V1ReservationBillingSession.  # noqa: E501


        :return: The start_time of this V1ReservationBillingSession.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: 'datetime'):
        """Sets the start_time of this V1ReservationBillingSession.


        :param start_time: The start_time of this V1ReservationBillingSession.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ReservationBillingSession, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1ReservationBillingSession') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ReservationBillingSession):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1ReservationBillingSession') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
