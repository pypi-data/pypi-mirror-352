name: Test, Scan, Build, & Publish

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**.md'
      - '**.yml'
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

permissions:
  contents: read

jobs:
  test:
    name: Test

    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the run id

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.x
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Set up PYTHONPATH
      run: echo "PYTHONPATH=$PYTHONPATH:$GITHUB_WORKSPACE/src" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel 
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pytest

    - name: Build the package
      run: |
        python setup.py sdist bdist_wheel

  scan:
    name: Scan for vulnerabilities
    permissions:
      contents: read
      security-events: write
      actions: read

    needs: test

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.x
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Set up PYTHONPATH
      run: echo "PYTHONPATH=$PYTHONPATH:$GITHUB_WORKSPACE/src" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Bandit Scan
      uses: shundor/python-bandit-scan@9cc5aa4a006482b8a7f91134412df6772dbda22c
      with:
        exit_zero: false
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --sarif-file-output=snyk.sarif

    - name: Verify snyk.sarif file
      run: ls -la snyk.sarif

    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: snyk.sarif

  # Build
  build:
    name: Build release distributions

    permissions:
      id-token: write # for secrets.GITHUB_TOKEN
      attestations: write # to sign release

    needs: scan

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.x
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Set up PYTHONPATH
      run: echo "PYTHONPATH=$PYTHONPATH:$GITHUB_WORKSPACE/src" >> $GITHUB_ENV

    - name: Build release distributions
      run: |
        python -m pip install --upgrade pip
        python -m pip install build
        python -m build

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-dists
        path: dist/*
    
    - name: Sign release
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: 'dist/*'

  # Publish to PyPI
  pypi-publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest

    needs: build # Only run if the build step has succeeded

    permissions:
      id-token: write

    environment:
      name: pypi
      url: https://pypi.org/p/acc-fwu
    
    # Only run if the release has been published
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          attestations: true # Enable attestation signing
        