"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
"""

import os
import sys
from pathlib import Path
from typing import Dict, Any

from .templates import (
    get_app_template,
    get_core_templates,
    get_middleware_templates,
    get_shared_templates,
    get_module_templates,
    get_config_templates,
)


class FastAPIGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã FastAPI –ø—Ä–æ–µ–∫—Ç–∞"""
    
    # –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    COLORS = {
        'green': '\033[92m',
        'blue': '\033[94m',
        'yellow': '\033[93m',
        'red': '\033[91m',
        'end': '\033[0m'
    }
    
    def __init__(self, project_name: str = "app", with_docker: bool = True):
        self.project_name = project_name
        self.base_path = Path(project_name)
        self.with_docker = with_docker
        
    def _print_colored(self, message: str, color: str = 'green') -> None:
        """–¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print(f"{self.COLORS.get(color, '')}{message}{self.COLORS['end']}")
    
    def create_directory(self, path: Path) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        path.mkdir(parents=True, exist_ok=True)
        self._print_colored(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {path}", 'green')
    
    def create_file(self, path: Path, content: str) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"""
        # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        path.parent.mkdir(parents=True, exist_ok=True)
        path.write_text(content, encoding='utf-8')
        self._print_colored(f"‚úì –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {path}", 'blue')

    def _copy_rules(self) -> None:
        """–ö–æ–ø–∏—Ä—É–µ—Ç rules –≤ –ø—Ä–æ–µ–∫—Ç"""
        rules_src = Path(__file__).parent / "rules"
        rules_dst = self.base_path / "rules"
        
        self.create_directory(rules_dst)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ .md —Ñ–∞–π–ª—ã
        for rule_file in rules_src.glob("*.md"):
            content = rule_file.read_text(encoding='utf-8')
            self.create_file(rules_dst / rule_file.name, content)
        
        # –°–æ–∑–¥–∞–µ–º README.md –¥–ª—è rules
        rules_readme = '''# –ü—Ä–∞–≤–∏–ª–∞ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

–≠—Ç–∞ –ø–∞–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∏ –ø—Ä–∞–≤–∏–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞:

- `architecture.md` - –ü—Ä–∏–Ω—Ü–∏–ø—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥—É–ª–µ–π
- `naming.md` - –ü—Ä–∞–≤–∏–ª–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –∫–ª–∞—Å—Å–æ–≤, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
- `database.md` - –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –º–æ–¥–µ–ª–∏, –º–∏–≥—Ä–∞—Ü–∏–∏  
- `api_design.md` - –î–∏–∑–∞–π–Ω API, REST –ø—Ä–∏–Ω—Ü–∏–ø—ã, –≤–∞–ª–∏–¥–∞—Ü–∏—è

## –í–∞–∂–Ω–æ

–°–ª–µ–¥—É–π—Ç–µ —ç—Ç–∏–º –ø—Ä–∞–≤–∏–ª–∞–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞.
–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ - –∏–∑—É—á–∏—Ç–µ —ç—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.
'''
        self.create_file(rules_dst / "README.md", rules_readme)
    
    def generate(self) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
        self._print_colored(f"\nüöÄ –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–æ–µ–∫—Ç '{self.project_name}'...\n", 'yellow')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        if self.base_path.exists():
            self._print_colored(f"–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ '{self.project_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", 'red')
            sys.exit(1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        self._create_base_structure()
        self._create_core()
        self._create_middleware()
        self._create_shared()
        self._create_modules()
        self._create_utils()
        self._create_configs()
        
        if self.with_docker:
            self._create_docker_files()
        
        
        self._copy_rules()
        self._print_success_message()
    
    def _create_base_structure(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        self.create_directory(self.base_path)
        self.create_file(self.base_path / "app.py", get_app_template())
        self.create_file(self.base_path / "__init__.py", "")
        self.create_directory(self.base_path / "logs")
    
    def _create_core(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç core –º–æ–¥—É–ª—å"""
        core_path = self.base_path / "core"
        self.create_directory(core_path)
        
        templates = get_core_templates()
        for filename, content in templates.items():
            self.create_file(core_path / filename, content)
    
    def _create_middleware(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç middleware"""
        middleware_path = self.base_path / "middleware"
        self.create_directory(middleware_path)
        
        templates = get_middleware_templates()
        for filename, content in templates.items():
            self.create_file(middleware_path / filename, content)
    
    def _create_shared(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç shared –º–æ–¥—É–ª–∏"""
        shared_path = self.base_path / "shared"
        schemas_path = shared_path / "schemas"
        models_path = shared_path / "models"
        
        self.create_directory(schemas_path)
        self.create_directory(models_path)
        
        templates = get_shared_templates()
        for filepath, content in templates.items():
            self.create_file(shared_path / filepath, content)
    
    def _create_modules(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –º–æ–¥—É–ª—è"""
        modules_path = self.base_path / "modules"
        echo_path = modules_path / "echo"
        
        self.create_directory(echo_path)
        self.create_file(modules_path / "__init__.py", "")
        
        templates = get_module_templates("echo")
        for filename, content in templates.items():
            self.create_file(echo_path / filename, content)
    
    def _create_utils(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç utils –ø–∞–ø–∫—É"""
        utils_path = self.base_path / "utils"
        self.create_directory(utils_path)
        self.create_file(utils_path / "__init__.py", "")
        self.create_file(
            utils_path / "helpers.py",
            '"""–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""\n\n# –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ–±—â–∏–µ —Ö–µ–ª–ø–µ—Ä—ã'
        )
    
    def _create_configs(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        configs = get_config_templates()
        for filename, content in configs.items():
            self.create_file(self.base_path / filename, content)
    
    def _create_docker_files(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç Docker —Ñ–∞–π–ª—ã"""
        dockerfile_content = '''FROM python:3.11-slim

WORKDIR /app

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã
RUN apt-get update && apt-get install -y \\
    gcc \\
    && rm -rf /var/lib/apt/lists/*

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
COPY . .

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
USER appuser

# –ó–∞–ø—É—Å–∫
CMD ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000"]
'''
        self.create_file(self.base_path / "Dockerfile", dockerfile_content)
        
        dockerignore_content = '''__pycache__
*.pyc
*.pyo
*.pyd
.Python
env/
venv/
.venv/
pip-log.txt
pip-delete-this-directory.txt
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.log
.git
.gitignore
.mypy_cache
.pytest_cache
.hypothesis
.env
.env.*
!.env.example
'''
        self.create_file(self.base_path / ".dockerignore", dockerignore_content)
        
        docker_compose_content = '''version: '3.8'

services:
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - APP_DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/fastapi_db
    env_file:
      - .env
    depends_on:
      - db
    volumes:
      - ./logs:/app/logs

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=fastapi_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

volumes:
  postgres_data:
'''
        self.create_file(self.base_path / "docker-compose.yml", docker_compose_content)
    
    def _print_success_message(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏"""
        self._print_colored(f"\n‚ú® –ü—Ä–æ–µ–∫—Ç '{self.project_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", 'green')
        self._print_colored("\n–î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏:", 'yellow')
        
        steps = [
            f"cd {self.project_name}",
            "python -m venv venv",
            "source venv/bin/activate  # –∏–ª–∏ venv\\Scripts\\activate –Ω–∞ Windows",
            "pip install -r requirements.txt",
            "cp .env.example .env",
            "# –ù–∞—Å—Ç—Ä–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env —Ñ–∞–π–ª–µ",
        ]
        
        if self.with_docker:
            steps.extend([
                "\n# –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π Docker:",
                "docker-compose up -d db  # –ó–∞–ø—É—Å–∫ –ë–î",
                "docker-compose up app    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            ])
        else:
            steps.append("uvicorn app:app --reload")
        
        for step in steps:
            print(f"  {step}")
        
        self._print_colored(f"\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –ø—Ä–∞–≤–∏–ª–∞ –≤ –ø–∞–ø–∫–µ {self.project_name}/rules/", 'blue')