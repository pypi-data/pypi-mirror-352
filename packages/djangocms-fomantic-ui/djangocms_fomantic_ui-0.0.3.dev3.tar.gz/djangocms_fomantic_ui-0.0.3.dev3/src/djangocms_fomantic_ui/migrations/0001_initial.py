# Generated by Django 4.2.4 on 2023-08-08 15:18

import django.db.models.deletion
import djangocms_text_ckeditor.fields
import filer.fields.file
import filer.fields.image
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.FILER_IMAGE_MODEL),
        ('filer', '0017_image__transparent'),
        ('cms', '0022_auto_20180620_1551'),
    ]

    operations = [
        migrations.CreateModel(
            name='Accordion',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                ('styled', models.BooleanField(default=True)),
                ('fluid', models.BooleanField(default=True)),
                ('inverted', models.BooleanField(default=False)),
                (
                    'highlighted_background_colour_choice',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('primary', 'Primary'), ('secondary', 'Secondary'),
                            ('red', 'Red'), ('orange', 'Orange'),
                            ('yellow', 'Yellow'), ('olive', 'Olive'),
                            ('green', 'Green'), ('teal', 'Teal'),
                            ('blue', 'Blue'), ('violet', 'Violet'),
                            ('purple', 'Purple'), ('pink', 'Pink'),
                            ('brown', 'Brown'), ('grey', 'Grey'),
                            ('black', 'Black')
                        ],
                        default='primary',
                        max_length=9,
                        verbose_name=
                        'Background colour (CSS definition, not Semantic UI) of highlighted title (active or hover)'
                    )
                ),
                (
                    'highlighted_background_colour',
                    models.CharField(
                        blank=True,
                        max_length=20,
                        verbose_name='CSS compliant Colour code or name'
                    )
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='AccordionSection',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                (
                    'title',
                    models.CharField(max_length=255, verbose_name='name')
                ),
                (
                    'content',
                    djangocms_text_ckeditor.fields.HTMLField(
                        blank=True, verbose_name='content'
                    )
                ),
                (
                    'active',
                    models.BooleanField(
                        default=False,
                        help_text='Visible after page has loaded?',
                        verbose_name='active'
                    )
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='Button',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                ('text', models.CharField(blank=True, max_length=50)),
                ('link', models.URLField(blank=True)),
                (
                    'target',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('_self', '_self'), ('_blank', '_blank'),
                            ('_parent', '_parent'), ('_top', '_top')
                        ],
                        max_length=7
                    )
                ),
                (
                    'colour',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('primary', 'Primary'), ('secondary', 'Secondary'),
                            ('red', 'Red'), ('orange', 'Orange'),
                            ('yellow', 'Yellow'), ('olive', 'Olive'),
                            ('green', 'Green'), ('teal', 'Teal'),
                            ('blue', 'Blue'), ('violet', 'Violet'),
                            ('purple', 'Purple'), ('pink', 'Pink'),
                            ('brown', 'Brown'), ('grey', 'Grey'),
                            ('black', 'Black')
                        ],
                        default='',
                        max_length=9,
                        verbose_name='colour'
                    )
                ),
                (
                    'visible_content',
                    models.CharField(
                        blank=True,
                        max_length=50,
                        verbose_name='Visible content'
                    )
                ),
                (
                    'hidden_content',
                    models.CharField(
                        blank=True,
                        max_length=50,
                        verbose_name='Hidden content'
                    )
                ),
                ('basic', models.BooleanField(verbose_name='Basic')),
                ('inverted', models.BooleanField(verbose_name='Inverted')),
                (
                    'state',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('active', 'Active'), ('disabled', 'Disabled'),
                            ('loading', 'Loading')
                        ],
                        max_length=8
                    )
                ),
                (
                    'size',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('mini', 'mini'), ('tiny', 'tiny'),
                            ('small', 'small'), ('medium', 'medium'),
                            ('large', 'large'), ('big', 'big'),
                            ('huge', 'huge'), ('massive', 'massive')
                        ],
                        max_length=7,
                        verbose_name='size'
                    )
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='Buttons',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                (
                    'icon_buttons',
                    models.BooleanField(verbose_name='Icon buttons')
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID'
                    )
                ),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                (
                    'content',
                    djangocms_text_ckeditor.fields.HTMLField(
                        blank=True, verbose_name='content'
                    )
                ),
            ],
        ),
        migrations.CreateModel(
            name='CardsContainerPluginModel',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='Column',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                (
                    'width',
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6),
                            (7, 7), (8, 8), (9, 9), (10, 10), (11, 11),
                            (12, 12), (13, 13), (14, 14), (15, 15), (16, 16)
                        ],
                        default=None,
                        help_text=
                        'number of grid units for this column, eg. 4 out of 12 for one third.',
                        null=True,
                        verbose_name='column width'
                    )
                ),
                (
                    'colour',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('primary', 'Primary'), ('secondary', 'Secondary'),
                            ('red', 'Red'), ('orange', 'Orange'),
                            ('yellow', 'Yellow'), ('olive', 'Olive'),
                            ('green', 'Green'), ('teal', 'Teal'),
                            ('blue', 'Blue'), ('violet', 'Violet'),
                            ('purple', 'Purple'), ('pink', 'Pink'),
                            ('brown', 'Brown'), ('grey', 'Grey'),
                            ('black', 'Black')
                        ],
                        default='',
                        help_text='only with padded grid',
                        max_length=9,
                        verbose_name='colour'
                    )
                ),
                (
                    'floated',
                    models.CharField(
                        blank=True,
                        choices=[('left', 'left'), ('right', 'right')],
                        default='',
                        max_length=5
                    )
                ),
                (
                    'text_alignment',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('left', 'left'), ('center', 'centre'),
                            ('right', 'right')
                        ],
                        default='',
                        max_length=6
                    )
                ),
                (
                    'no_padding',
                    models.BooleanField(
                        default=False, verbose_name='no padding'
                    )
                ),
                (
                    'hide_on_mobile',
                    models.BooleanField(
                        default=False, verbose_name='Hide on mobile devices'
                    )
                ),
            ],
            options={
                'verbose_name': 'column',
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='Container',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='Div',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                (
                    'background_colour_text',
                    models.CharField(
                        blank=True,
                        help_text='In CSS notation like "#789abc88" or decimal',
                        max_length=20,
                        null=True,
                        verbose_name='Background colour name or value'
                    )
                ),
                (
                    'background_colour_choice',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('#FFFFFF', 'White'), ('#F0F8FF', 'AliceBlue'),
                            ('#F0FFFF', 'Azure'), ('#F5F5DC', 'Beige'),
                            ('#FFF8DC', 'Cornsilk '),
                            ('#FFFAF0', 'FloralWhite'),
                            ('#D3D3D3', 'LightGrey'), ('#FFFAFA', 'Snow'),
                            ('#F5F5F5', 'WhiteSmoke'), ('#f5f6f8', '#f5f6f8')
                        ],
                        help_text='Here are some predefined colours.',
                        max_length=9,
                        null=True,
                        verbose_name='or choose'
                    )
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='Grid',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                (
                    'nr_columns',
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6),
                            (7, 7), (8, 8), (9, 9), (10, 10), (11, 11),
                            (12, 12), (13, 13), (14, 14), (15, 15), (16, 16)
                        ],
                        default=None,
                        help_text=
                        'Number of grid columns, usually you should leave this blank for getting a standard grid.',
                        null=True,
                        verbose_name='number of grid columns'
                    )
                ),
                (
                    'divided',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('divided', 'horizontally divided'),
                            ('vertically divided', 'vertically divided')
                        ],
                        default='',
                        help_text=
                        'Horizontally divided: dividers between columns, requires rows; vertically divided: dividers between rows.',
                        max_length=18,
                        verbose_name='divided'
                    )
                ),
                (
                    'celled',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('celled', 'celled'),
                            ('internally celled', 'internally celled')
                        ],
                        default='',
                        max_length=17,
                        verbose_name='celled'
                    )
                ),
                (
                    'padded',
                    models.BooleanField(default=False, verbose_name='padded')
                ),
                (
                    'relaxed',
                    models.BooleanField(default=False, verbose_name='relaxed')
                ),
                (
                    'stackable',
                    models.BooleanField(default=True, verbose_name='stackable')
                ),
                (
                    'text_alignment',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('left', 'left'), ('center', 'centre'),
                            ('right', 'right')
                        ],
                        default='',
                        max_length=6
                    )
                ),
                (
                    'equal_width',
                    models.BooleanField(
                        default=False, verbose_name='equal width'
                    )
                ),
                (
                    'centered',
                    models.BooleanField(default=False, verbose_name='centered')
                ),
                (
                    'container',
                    models.BooleanField(
                        default=False, verbose_name='container'
                    )
                ),
            ],
            options={
                'verbose_name': 'grid',
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='Icon',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID'
                    )
                ),
                (
                    'name',
                    models.CharField(
                        help_text=
                        'See https://semantic-ui.com/elements/icon.html',
                        max_length=50,
                        verbose_name='Semantic UI icon name'
                    )
                ),
                (
                    'disabled',
                    models.BooleanField(default=False, verbose_name='disabled')
                ),
                (
                    'loading',
                    models.BooleanField(default=False, verbose_name='loading')
                ),
                (
                    'fitted',
                    models.BooleanField(default=False, verbose_name='fitted')
                ),
                (
                    'size',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('mini', 'mini'), ('tiny', 'tiny'),
                            ('small', 'small'), ('medium', 'medium'),
                            ('large', 'large'), ('big', 'big'),
                            ('huge', 'huge'), ('massive', 'massive')
                        ],
                        max_length=7,
                        verbose_name='size'
                    )
                ),
                (
                    'link',
                    models.BooleanField(default=False, verbose_name='link')
                ),
                (
                    'flipped',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('', 'none'), ('horizontally', 'horizontally'),
                            ('vertically', 'vertically')
                        ],
                        max_length=12,
                        verbose_name='flipped'
                    )
                ),
                (
                    'rotated',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('', 'none'), ('clockwise', 'clockwise'),
                            ('counterclockwise', 'counterclockwise')
                        ],
                        max_length=17,
                        verbose_name='rotated'
                    )
                ),
                (
                    'circular',
                    models.BooleanField(default=False, verbose_name='circular')
                ),
                (
                    'bordered',
                    models.BooleanField(default=False, verbose_name='bordered')
                ),
                (
                    'colour',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('primary', 'Primary'), ('secondary', 'Secondary'),
                            ('red', 'Red'), ('orange', 'Orange'),
                            ('yellow', 'Yellow'), ('olive', 'Olive'),
                            ('green', 'Green'), ('teal', 'Teal'),
                            ('blue', 'Blue'), ('violet', 'Violet'),
                            ('purple', 'Purple'), ('pink', 'Pink'),
                            ('brown', 'Brown'), ('grey', 'Grey'),
                            ('black', 'Black')
                        ],
                        max_length=9,
                        verbose_name='colour'
                    )
                ),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                (
                    'header',
                    models.CharField(
                        blank=True, max_length=100, verbose_name='name'
                    )
                ),
                (
                    'icon_name',
                    models.CharField(
                        blank=True,
                        help_text=
                        'See https://semantic-ui.com/elements/icon.html',
                        max_length=50,
                        verbose_name='Semantic UI icon name'
                    )
                ),
                (
                    'dismissable',
                    models.BooleanField(
                        default=False,
                        help_text='Can be closed by the user.',
                        verbose_name='dismissable'
                    )
                ),
                (
                    'hidden',
                    models.BooleanField(default=False, verbose_name='hidden')
                ),
                (
                    'visible',
                    models.BooleanField(default=False, verbose_name='visible')
                ),
                (
                    'floating',
                    models.BooleanField(default=False, verbose_name='floating')
                ),
                (
                    'compact',
                    models.BooleanField(default=False, verbose_name='compact')
                ),
                (
                    'attached',
                    models.BooleanField(default=False, verbose_name='attached')
                ),
                (
                    'colour',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('primary', 'Primary'), ('secondary', 'Secondary'),
                            ('red', 'Red'), ('orange', 'Orange'),
                            ('yellow', 'Yellow'), ('olive', 'Olive'),
                            ('green', 'Green'), ('teal', 'Teal'),
                            ('blue', 'Blue'), ('violet', 'Violet'),
                            ('purple', 'Purple'), ('pink', 'Pink'),
                            ('brown', 'Brown'), ('grey', 'Grey'),
                            ('black', 'Black'), ('warning', 'Warning'),
                            ('info', 'Info'), ('positive', 'Positive'),
                            ('success', 'Success'), ('negative', 'Negative'),
                            ('error', 'Error')
                        ],
                        default='',
                        max_length=9,
                        verbose_name='colour'
                    )
                ),
                (
                    'size',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('mini', 'mini'), ('tiny', 'tiny'),
                            ('small', 'small'), ('medium', 'medium'),
                            ('large', 'large'), ('big', 'big'),
                            ('huge', 'huge'), ('massive', 'massive')
                        ],
                        max_length=7,
                        verbose_name='size'
                    )
                ),
                (
                    'content',
                    djangocms_text_ckeditor.fields.HTMLField(
                        blank=True, verbose_name='content'
                    )
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='Row',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                (
                    'nr_columns',
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6),
                            (7, 7), (8, 8), (9, 9), (10, 10), (11, 11),
                            (12, 12), (13, 13), (14, 14), (15, 15), (16, 16)
                        ],
                        default=None,
                        help_text=
                        'Number of grid column units, Actual number of columns can be smaller.',
                        null=True,
                        verbose_name='number of grid columns'
                    )
                ),
                (
                    'stretched',
                    models.BooleanField(
                        default=False,
                        help_text=
                        'A row can stretch its contents to take up the entire column height',
                        verbose_name='stretched'
                    )
                ),
                (
                    'colour',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('primary', 'Primary'), ('secondary', 'Secondary'),
                            ('red', 'Red'), ('orange', 'Orange'),
                            ('yellow', 'Yellow'), ('olive', 'Olive'),
                            ('green', 'Green'), ('teal', 'Teal'),
                            ('blue', 'Blue'), ('violet', 'Violet'),
                            ('purple', 'Purple'), ('pink', 'Pink'),
                            ('brown', 'Brown'), ('grey', 'Grey'),
                            ('black', 'Black')
                        ],
                        default='',
                        help_text='only with padded grid',
                        max_length=9,
                        verbose_name='colour'
                    )
                ),
                (
                    'text_alignment',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('left', 'left'), ('center', 'centre'),
                            ('right', 'right')
                        ],
                        default='',
                        max_length=6
                    )
                ),
                (
                    'doubling',
                    models.BooleanField(default=False, verbose_name='doubling')
                ),
            ],
            options={
                'verbose_name': 'row',
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='Segment',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                (
                    'colour',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('primary', 'Primary'), ('secondary', 'Secondary'),
                            ('red', 'Red'), ('orange', 'Orange'),
                            ('yellow', 'Yellow'), ('olive', 'Olive'),
                            ('green', 'Green'), ('teal', 'Teal'),
                            ('blue', 'Blue'), ('violet', 'Violet'),
                            ('purple', 'Purple'), ('pink', 'Pink'),
                            ('brown', 'Brown'), ('grey', 'Grey'),
                            ('black', 'Black')
                        ],
                        max_length=9,
                        verbose_name='colour'
                    )
                ),
                (
                    'raised',
                    models.BooleanField(
                        default=False,
                        help_text=
                        'A segment may be formatted to raise above the page.',
                        verbose_name='raised'
                    )
                ),
                (
                    'stacked',
                    models.BooleanField(
                        default=False,
                        help_text=
                        'A segment can be formatted to show it contains multiple pages.',
                        verbose_name='stacked'
                    )
                ),
                (
                    'piled',
                    models.BooleanField(
                        default=False,
                        help_text=
                        'A segment can be formatted to look like a pile of pages',
                        verbose_name='piled'
                    )
                ),
                (
                    'vertical',
                    models.BooleanField(
                        default=False,
                        help_text=
                        'A vertical segment formats content to be aligned as part of a vertical group.',
                        verbose_name='vertical'
                    )
                ),
                (
                    'disabled',
                    models.BooleanField(
                        default=False,
                        help_text='A segment may show its content is disabled.',
                        verbose_name='disabled'
                    )
                ),
                (
                    'loading',
                    models.BooleanField(
                        default=False,
                        help_text=
                        'A segment may show its content is being loaded.',
                        verbose_name='loading'
                    )
                ),
                (
                    'attached',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('top attached', 'top attached'),
                            ('attached', 'attached'),
                            ('bottom attached', 'bottom attached')
                        ],
                        max_length=15,
                        verbose_name='attached'
                    )
                ),
                (
                    'padded',
                    models.BooleanField(
                        default=False,
                        help_text='padded',
                        verbose_name='stacked'
                    )
                ),
                (
                    'compact',
                    models.BooleanField(default=False, verbose_name='compact')
                ),
                (
                    'inverted',
                    models.BooleanField(default=False, verbose_name='inverted')
                ),
                (
                    'emphasis',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('secondary', 'secondary'),
                            ('tertiary', 'tertiary')
                        ],
                        max_length=9,
                        verbose_name='emphasis'
                    )
                ),
                (
                    'circular',
                    models.BooleanField(default=False, verbose_name='circular')
                ),
                (
                    'clearing',
                    models.BooleanField(
                        default=False,
                        help_text='clear floated content',
                        verbose_name='clearing'
                    )
                ),
                (
                    'floated',
                    models.CharField(
                        blank=True,
                        choices=[('left', 'left'), ('right', 'right')],
                        max_length=5
                    )
                ),
                (
                    'text_alignment',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('left', 'left'), ('center', 'centre'),
                            ('right', 'right')
                        ],
                        max_length=6
                    )
                ),
                (
                    'basic',
                    models.BooleanField(
                        default=False,
                        help_text='basic',
                        verbose_name='stacked'
                    )
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='Statistic',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                (
                    'colour',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('primary', 'Primary'), ('secondary', 'Secondary'),
                            ('red', 'Red'), ('orange', 'Orange'),
                            ('yellow', 'Yellow'), ('olive', 'Olive'),
                            ('green', 'Green'), ('teal', 'Teal'),
                            ('blue', 'Blue'), ('violet', 'Violet'),
                            ('purple', 'Purple'), ('pink', 'Pink'),
                            ('brown', 'Brown'), ('grey', 'Grey'),
                            ('black', 'Black')
                        ],
                        max_length=9,
                        verbose_name='colour'
                    )
                ),
                (
                    'value_int',
                    models.IntegerField(
                        blank=True, null=True, verbose_name='Value as integer'
                    )
                ),
                (
                    'value_float',
                    models.FloatField(
                        blank=True,
                        null=True,
                        verbose_name='Value as floating number'
                    )
                ),
                (
                    'value_text',
                    models.CharField(
                        blank=True, max_length=50, verbose_name='Value as text'
                    )
                ),
                (
                    'label',
                    models.CharField(max_length=50, verbose_name='Label')
                ),
                ('horizontal', models.BooleanField(verbose_name='Horizontal')),
                ('inverted', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='Statistics',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                (
                    'horizontal',
                    models.BooleanField(
                        default=False, verbose_name='horizontal'
                    )
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='StepModel',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                (
                    'icon_name',
                    models.CharField(
                        blank=True,
                        default='',
                        help_text=
                        'See https://semantic-ui.com/elements/icon.html',
                        max_length=50,
                        verbose_name='Semantic UI icon name'
                    )
                ),
                (
                    'title',
                    models.CharField(
                        blank=True, max_length=50, verbose_name='title'
                    )
                ),
                (
                    'description',
                    models.CharField(
                        blank=True, max_length=200, verbose_name='description'
                    )
                ),
                ('link', models.URLField(blank=True, default='')),
                (
                    'active',
                    models.BooleanField(default=False, verbose_name='active')
                ),
                (
                    'completed',
                    models.BooleanField(
                        default=False, verbose_name='completed'
                    )
                ),
                (
                    'disabled',
                    models.BooleanField(default=False, verbose_name='disabled')
                ),
                (
                    'tab_text',
                    djangocms_text_ckeditor.fields.HTMLField(
                        blank=True, default=''
                    )
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='StepsContainerModel',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                (
                    'ordered',
                    models.BooleanField(default=False, verbose_name='ordered')
                ),
                (
                    'vertical',
                    models.BooleanField(default=False, verbose_name='vertical')
                ),
                (
                    'stackable',
                    models.BooleanField(
                        default=False, verbose_name='stackable'
                    )
                ),
                (
                    'tablet_stackable',
                    models.BooleanField(
                        default=False, verbose_name='tablet stackable'
                    )
                ),
                (
                    'unstackable',
                    models.BooleanField(
                        default=False, verbose_name='unstackable'
                    )
                ),
                (
                    'fluid',
                    models.BooleanField(default=False, verbose_name='fluid')
                ),
                (
                    'attached',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('', 'none'), ('top', 'top'), ('bottom', 'bottom')
                        ],
                        max_length=6
                    )
                ),
                (
                    'size',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('mini', 'mini'), ('tiny', 'tiny'),
                            ('small', 'small'), ('medium', 'medium'),
                            ('large', 'large'), ('big', 'big'),
                            ('huge', 'huge'), ('massive', 'massive')
                        ],
                        max_length=7,
                        verbose_name='size'
                    )
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='TabPluginModel',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                (
                    'content',
                    djangocms_text_ckeditor.fields.HTMLField(
                        blank=True, verbose_name='content'
                    )
                ),
                (
                    'active',
                    models.BooleanField(
                        default=False,
                        help_text='Visible after page has loaded?',
                        verbose_name='active'
                    )
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='TabsContainerPluginModel',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                (
                    'colour',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('primary', 'Primary'), ('secondary', 'Secondary'),
                            ('red', 'Red'), ('orange', 'Orange'),
                            ('yellow', 'Yellow'), ('olive', 'Olive'),
                            ('green', 'Green'), ('teal', 'Teal'),
                            ('blue', 'Blue'), ('violet', 'Violet'),
                            ('purple', 'Purple'), ('pink', 'Pink'),
                            ('brown', 'Brown'), ('grey', 'Grey'),
                            ('black', 'Black')
                        ],
                        default='primary',
                        max_length=9,
                        verbose_name='Background colour'
                    )
                ),
                (
                    'inverted',
                    models.BooleanField(
                        default=True,
                        help_text='coloured background',
                        verbose_name='inverted'
                    )
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='DivContainer',
            fields=[
                (
                    'div_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to='djangocms_fomantic_ui.div'
                    )
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('djangocms_fomantic_ui.div', ),
        ),
        migrations.CreateModel(
            name='Reveal',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                (
                    'image_size',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('mini', 'mini'), ('tiny', 'tiny'),
                            ('small', 'small'), ('medium', 'medium'),
                            ('large', 'large'), ('big', 'big'),
                            ('huge', 'huge'), ('massive', 'massive')
                        ],
                        default='medium',
                        max_length=7,
                        verbose_name='size'
                    )
                ),
                (
                    'effect',
                    models.CharField(
                        choices=[
                            ('fade', 'fade'), ('move', 'move left'),
                            ('move right', 'move right'),
                            ('move up', 'move up'), ('move down', 'move down'),
                            ('circular rotate', 'circular rotate right'),
                            ('circular rotate left', 'circular rotate left')
                        ],
                        default='fade',
                        max_length=20,
                        verbose_name='effect'
                    )
                ),
                (
                    'hidden_image',
                    filer.fields.image.FilerImageField(
                        help_text=
                        'Image is hidden after loading and becomes visible after hovering.',
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='hidden_image_reveal',
                        to=settings.FILER_IMAGE_MODEL,
                        verbose_name='hidden image'
                    )
                ),
                (
                    'visible_image',
                    filer.fields.image.FilerImageField(
                        help_text='Image is visible after loading.',
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='visible_image_reveal',
                        to=settings.FILER_IMAGE_MODEL,
                        verbose_name='visible image'
                    )
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='IconPluginModel',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                (
                    'icon',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='djangocms_fomantic_ui.icon'
                    )
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='Embed',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                (
                    'title',
                    models.CharField(
                        blank=True,
                        help_text='Currently only displayed for editors. ',
                        max_length=100,
                        verbose_name='title'
                    )
                ),
                (
                    'source',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('youtube', 'Youtube'), ('vimeo', 'Vimeo'),
                            ('', 'custom')
                        ],
                        default='youtube',
                        max_length=7,
                        verbose_name='source'
                    )
                ),
                (
                    'medium_id',
                    models.CharField(
                        blank=True,
                        help_text='id of Youtube or Vimeo video',
                        max_length=20,
                        verbose_name='medium id'
                    )
                ),
                (
                    'hash',
                    models.CharField(
                        blank=True,
                        help_text='Hash for Vimeo, 10 hex digits after “h=”',
                        max_length=10,
                        verbose_name='hash'
                    )
                ),
                (
                    'external_url',
                    models.URLField(
                        blank=True,
                        help_text=
                        'Fill in unless you choose a predefined data source.',
                        verbose_name='URL to be embedded'
                    )
                ),
                (
                    'use_placeholder',
                    models.BooleanField(
                        default=True,
                        help_text=
                        'A placeholder image is shown until users click on it to load the code.',
                        verbose_name=
                        'Show placeholder image instead of loading code immediately'
                    )
                ),
                (
                    'icon',
                    models.CharField(
                        blank=True,
                        help_text=
                        'Choose name from https://semantic-ui.com/elements/icon.html or leave empty for standard play circle icon.',
                        max_length=50,
                        verbose_name='play icon'
                    )
                ),
                (
                    'width_value',
                    models.PositiveSmallIntegerField(
                        blank=True,
                        default=640,
                        null=True,
                        verbose_name='width'
                    )
                ),
                (
                    'width_unit',
                    models.CharField(
                        choices=[('%', '%'), ('px', 'px')],
                        default='px',
                        max_length=2
                    )
                ),
                (
                    'height_value',
                    models.PositiveSmallIntegerField(
                        blank=True,
                        default=360,
                        null=True,
                        verbose_name='height'
                    )
                ),
                (
                    'height_unit',
                    models.CharField(
                        choices=[('%', '%'), ('px', 'px')],
                        default='px',
                        max_length=2
                    )
                ),
                (
                    'placeholder_image',
                    filer.fields.image.FilerImageField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='placeholder_image_embed',
                        to=settings.FILER_IMAGE_MODEL,
                        verbose_name='placeholder image'
                    )
                ),
                (
                    'video_file',
                    filer.fields.file.FilerFileField(
                        blank=True,
                        help_text=
                        'You can upload a video file instead of linking an external resource',
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='video_file_embed',
                        to='filer.file',
                        verbose_name='video file'
                    )
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', ),
        ),
        migrations.CreateModel(
            name='CardPluginModel',
            fields=[
                (
                    'cmsplugin_ptr',
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name='%(app_label)s_%(class)s',
                        serialize=False,
                        to='cms.cmsplugin'
                    )
                ),
                (
                    'card',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='djangocms_fomantic_ui.card'
                    )
                ),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', ),
        ),
    ]
