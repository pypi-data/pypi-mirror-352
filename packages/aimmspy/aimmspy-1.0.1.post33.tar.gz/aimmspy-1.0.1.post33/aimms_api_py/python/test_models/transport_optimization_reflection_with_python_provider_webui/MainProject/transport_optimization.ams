## ams_version=1.0

Model Main_template_project {
	Procedure make_python_stub {
		Body: {
			pp::run_python_statement("make_stub_file()");
		}
	}
	Procedure BIEM {
		Body: {
			pp::run_python_script("biem_script.py");
		}
	}
	Procedure execute_python_function {
		Body: {
			pp::run_python_statement("my_beautiful_function()");
			pp::run_python_statement("execute_main()");
		}
	}
	Procedure empty_all {
		Body: {
			empty Main_template_project;
		}
	}
	Set locations {
		Comment: "Set of all locations";
	}
	Index l {
		Range: locations;
	}
	Set warehouses {
		SubsetOf: locations;
	}
	Index w {
		Range: warehouses;
	}
	Set customers {
		SubsetOf: locations;
	}
	Index c {
		Range: customers;
	}
	Parameter demand {
		IndexDomain: (c);
	}
	Parameter supply {
		IndexDomain: (w);
	}
	Parameter unit_transport_cost {
		IndexDomain: (w,c);
		Comment: "Cost of transporting one unit from warehouse indexed by w to customer indexed by c so for example (\"Haarlem\", \"Amsterdam\") = 1.0";
	}
	Constraint satisfy_demand {
		IndexDomain: c;
		Definition: sum(w, transport(w, c)) >= demand(c);
	}
	Constraint satisfy_supply {
		IndexDomain: w;
		Definition: sum(c, transport(w, c)) <= supply(w);
	}
	Variable transport {
		IndexDomain: (w,c);
		Range: nonnegative;
	}
	Variable total_transport_cost {
		Definition: sum((w, c), unit_transport_cost(w, c) * transport(w, c));
	}
	MathematicalProgram mp {
		Objective: total_transport_cost;
		Direction: minimize;
		Type: Automatic;
	}
	Procedure MainInitialization {
		Comment: "Add initialization statements here that do NOT require any library being initialized already.";
	}
	Procedure PostMainInitialization {
		Comment: {
			"Add initialization statements here that require that the libraries are already initialized properly,
			or add statements that require the Data Management module to be initialized."
		}
	}
	Procedure MainExecution {
		Body: {
			solve mp;
		}
	}
	Procedure increment_by_one {
		Body: {
			pp::run_python_statement("increment_unit_transport_cost(1)");
		}
	}
	Procedure python_function_assign {
		Body: {
			pp::run_python_script("script_with_func.py");
		}
	}
	Procedure python_global_scope_assign {
		Body: {
			pp::run_python_script("global_assign.py");
		}
	}
	Procedure PreMainTermination {
		Body: {
			return DataManagementExit();
		}
		Comment: {
			"Add termination statements here that require all libraries to be still alive.
			Return 1 if you allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence."
		}
	}
	Procedure MainTermination {
		Body: {
			return 1;
		}
		Comment: {
			"Add termination statements here that do not require all libraries to be still alive.
			Return 1 to allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence.
			It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
		}
	}
	Section Quantities_and_Units {
		Comment: {
			"This section contains all the units and quantities that are added automatically by AIMMS.
			It is recommended to declare all your quantities here."
		}
		Quantity SI_Time_Duration {
			BaseUnit: s;
			Conversions: minute->s : #-># * 60;
			Comment: {
				"Expresses the value for the duration of periods.
				
				The unit s has been added automatically because it is a required unit for AimmsWebUI.
				
				The unit minute has been added automatically because it is a required unit for AimmsWebUI."
			}
		}
	}
}
