// This file is autogenerated. DO NOT EDIT

#pragma once
#include <semiwrap.h>

// wrapped header

#include <frc/motorcontrol/NidecBrushless.h>

// from extra_includes
#include <wpi/sendable/SendableBuilder.h>
#include <wpi/SmallString.h>

#include <trampolines/frc__MotorController.hpp>
#include <trampolines/frc__MotorSafety.hpp>
#include <trampolines/wpi__Sendable.hpp>

namespace frc {

template <typename CfgBase = swgen::EmptyTrampolineCfg>
struct PyTrampolineCfg_NidecBrushless :
  frc::PyTrampolineCfg_MotorController<
  frc::PyTrampolineCfg_MotorSafety<
  wpi::PyTrampolineCfg_Sendable<
  CfgBase
  >
  >
  >
{
  using Base = frc::NidecBrushless;
  using override_base_Set_d = frc::NidecBrushless;
  using override_base_KGet_v = frc::NidecBrushless;
  using override_base_SetInverted_b = frc::NidecBrushless;
  using override_base_KGetInverted_v = frc::NidecBrushless;
  using override_base_Disable_v = frc::NidecBrushless;
  using override_base_StopMotor_v = frc::NidecBrushless;
  using override_base_KGetDescription_v = frc::NidecBrushless;
  using override_base_InitSendable_RTSendableBuilder = frc::NidecBrushless;
};

template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_NidecBrushless =
  frc::PyTrampoline_MotorController<
    frc::PyTrampoline_MotorSafety<
      wpi::PyTrampoline_Sendable<
        PyTrampolineBase
        , PyTrampolineCfg>
      , PyTrampolineCfg>
    , PyTrampolineCfg>
;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_NidecBrushless : PyTrampolineBase_NidecBrushless<PyTrampolineBase, PyTrampolineCfg> {
  using PyTrampolineBase_NidecBrushless<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_NidecBrushless;

  #ifndef SWGEN_DISABLE_Set_d
    void Set(double speed) override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_Set_d;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
        "set", speed);
      return CxxCallBase::Set(std::move(speed));
    }
  #endif

  #ifndef SWGEN_DISABLE_KGet_v
    double Get() const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_KGet_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
        "get", );
      return CxxCallBase::Get();
    }
  #endif

  #ifndef SWGEN_DISABLE_SetInverted_b
    void SetInverted(bool isInverted) override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_SetInverted_b;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
        "setInverted", isInverted);
      return CxxCallBase::SetInverted(std::move(isInverted));
    }
  #endif

  #ifndef SWGEN_DISABLE_KGetInverted_v
    bool GetInverted() const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_KGetInverted_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(bool), LookupBase,
        "getInverted", );
      return CxxCallBase::GetInverted();
    }
  #endif

  #ifndef SWGEN_DISABLE_Disable_v
    void Disable() override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_Disable_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
        "disable", );
      return CxxCallBase::Disable();
    }
  #endif

  #ifndef SWGEN_DISABLE_StopMotor_v
    void StopMotor() override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_StopMotor_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
        "stopMotor", );
      return CxxCallBase::StopMotor();
    }
  #endif

  #ifndef SWGEN_DISABLE_KGetDescription_v
    std::string GetDescription() const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_KGetDescription_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(std::string), LookupBase,
        "getDescription", );
      return CxxCallBase::GetDescription();
    }
  #endif

  #ifndef SWGEN_DISABLE_InitSendable_RTSendableBuilder
    void InitSendable(wpi::SendableBuilder& builder) override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_InitSendable_RTSendableBuilder;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
        "initSendable", builder);
      return CxxCallBase::InitSendable(std::forward<decltype(builder)>(builder));
    }
  #endif
};

}; // namespace frc
