// This file is autogenerated. DO NOT EDIT

#pragma once
#include <semiwrap.h>

// wrapped header

#include <frc/Counter.h>

// from extra_includes
#include <wpi/sendable/SendableBuilder.h>
#include <frc/DigitalGlitchFilter.h>
#include <frc/DMA.h>
#include <frc/DMASample.h>

#define SWGEN_DISABLE_SetMaxPeriod_Tsecond_t

#include <trampolines/frc__CounterBase.hpp>
#include <trampolines/wpi__Sendable.hpp>

namespace frc {

template <typename CfgBase = swgen::EmptyTrampolineCfg>
struct PyTrampolineCfg_Counter :
  frc::PyTrampolineCfg_CounterBase<
  wpi::PyTrampolineCfg_Sendable<
  CfgBase
  >
  >
{
  using Base = frc::Counter;
  using override_base_KGet_v = frc::Counter;
  using override_base_Reset_v = frc::Counter;
  using override_base_KGetPeriod_v = frc::Counter;
  using override_base_KGetStopped_v = frc::Counter;
  using override_base_KGetDirection_v = frc::Counter;
  using override_base_InitSendable_RTSendableBuilder = frc::Counter;
};

template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_Counter =
  frc::PyTrampoline_CounterBase<
    wpi::PyTrampoline_Sendable<
      PyTrampolineBase
      , PyTrampolineCfg>
    , PyTrampolineCfg>
;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_Counter : PyTrampolineBase_Counter<PyTrampolineBase, PyTrampolineCfg> {
  using PyTrampolineBase_Counter<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_Counter;
  using Mode [[maybe_unused]] = typename frc::Counter::Mode;
  using EncodingType = frc::CounterBase::EncodingType;

  #ifndef SWGEN_DISABLE_KGet_v
    int Get() const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_KGet_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(int), LookupBase,
        "get", );
      return CxxCallBase::Get();
    }
  #endif

  #ifndef SWGEN_DISABLE_Reset_v
    void Reset() override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_Reset_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
        "reset", );
      return CxxCallBase::Reset();
    }
  #endif

  #ifndef SWGEN_DISABLE_KGetPeriod_v
    units::second_t GetPeriod() const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_KGetPeriod_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(units::second_t), LookupBase,
        "getPeriod", );
      return CxxCallBase::GetPeriod();
    }
  #endif

  #ifndef SWGEN_DISABLE_KGetStopped_v
    bool GetStopped() const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_KGetStopped_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(bool), LookupBase,
        "getStopped", );
      return CxxCallBase::GetStopped();
    }
  #endif

  #ifndef SWGEN_DISABLE_KGetDirection_v
    bool GetDirection() const override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_KGetDirection_v;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(bool), LookupBase,
        "getDirection", );
      return CxxCallBase::GetDirection();
    }
  #endif

  #ifndef SWGEN_DISABLE_InitSendable_RTSendableBuilder
    void InitSendable(wpi::SendableBuilder& builder) override {
      using LookupBase = typename PyTrampolineCfg::Base;
      using CxxCallBase = typename PyTrampolineCfg::override_base_InitSendable_RTSendableBuilder;
      PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
        "initSendable", builder);
      return CxxCallBase::InitSendable(std::forward<decltype(builder)>(builder));
    }
  #endif

  using frc::Counter::m_upSource;
  using frc::Counter::m_downSource;
};

}; // namespace frc
